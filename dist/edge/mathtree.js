/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 3776:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalScope) {
  'use strict';


  /*
   *  decimal.js v10.3.1
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js
   *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Licence
   */


  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


    // The maximum exponent magnitude.
    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
  var EXP_LIMIT = 9e15,                      // 0 to 9e15

    // The limit on the value of `precision`, and on the value of the first argument to
    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
    MAX_DIGITS = 1e9,                        // 0 to 1e9

    // Base conversion alphabet.
    NUMERALS = '0123456789abcdef',

    // The natural logarithm of 10 (1025 digits).
    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

    // Pi (1025 digits).
    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


    // The initial configuration properties of the Decimal constructor.
    DEFAULTS = {

      // These values must be integers within the stated ranges (inclusive).
      // Most of these values can be changed at run-time using the `Decimal.config` method.

      // The maximum number of significant digits of the result of a calculation or base conversion.
      // E.g. `Decimal.config({ precision: 20 });`
      precision: 20,                         // 1 to MAX_DIGITS

      // The rounding mode used when rounding to `precision`.
      //
      // ROUND_UP         0 Away from zero.
      // ROUND_DOWN       1 Towards zero.
      // ROUND_CEIL       2 Towards +Infinity.
      // ROUND_FLOOR      3 Towards -Infinity.
      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      //
      // E.g.
      // `Decimal.rounding = 4;`
      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
      rounding: 4,                           // 0 to 8

      // The modulo mode used when calculating the modulus: a mod n.
      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
      // The remainder (r) is calculated as: r = a - n * q.
      //
      // UP         0 The remainder is positive if the dividend is negative, else is negative.
      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
      // FLOOR      3 The remainder has the same sign as the divisor (Python %).
      // HALF_EVEN  6 The IEEE 754 remainder function.
      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
      //
      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
      // division (9) are commonly used for the modulus operation. The other rounding modes can also
      // be used, but they may not give useful results.
      modulo: 1,                             // 0 to 9

      // The exponent value at and beneath which `toString` returns exponential notation.
      // JavaScript numbers: -7
      toExpNeg: -7,                          // 0 to -EXP_LIMIT

      // The exponent value at and above which `toString` returns exponential notation.
      // JavaScript numbers: 21
      toExpPos:  21,                         // 0 to EXP_LIMIT

      // The minimum exponent value, beneath which underflow to zero occurs.
      // JavaScript numbers: -324  (5e-324)
      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

      // The maximum exponent value, above which overflow to Infinity occurs.
      // JavaScript numbers: 308  (1.7976931348623157e+308)
      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

      // Whether to use cryptographically-secure random number generation, if available.
      crypto: false                          // true/false
    },


  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


    Decimal, inexact, noConflict, quadrant,
    external = true,

    decimalError = '[DecimalError] ',
    invalidArgument = decimalError + 'Invalid argument: ',
    precisionLimitExceeded = decimalError + 'Precision limit exceeded',
    cryptoUnavailable = decimalError + 'crypto unavailable',
    tag = '[object Decimal]',

    mathfloor = Math.floor,
    mathpow = Math.pow,

    isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
    isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
    isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
    isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

    BASE = 1e7,
    LOG_BASE = 7,
    MAX_SAFE_INTEGER = 9007199254740991,

    LN10_PRECISION = LN10.length - 1,
    PI_PRECISION = PI.length - 1,

    // Decimal.prototype object
    P = { toStringTag: tag };


  // Decimal prototype methods


  /*
   *  absoluteValue             abs
   *  ceil
   *  clampedTo                 clamp
   *  comparedTo                cmp
   *  cosine                    cos
   *  cubeRoot                  cbrt
   *  decimalPlaces             dp
   *  dividedBy                 div
   *  dividedToIntegerBy        divToInt
   *  equals                    eq
   *  floor
   *  greaterThan               gt
   *  greaterThanOrEqualTo      gte
   *  hyperbolicCosine          cosh
   *  hyperbolicSine            sinh
   *  hyperbolicTangent         tanh
   *  inverseCosine             acos
   *  inverseHyperbolicCosine   acosh
   *  inverseHyperbolicSine     asinh
   *  inverseHyperbolicTangent  atanh
   *  inverseSine               asin
   *  inverseTangent            atan
   *  isFinite
   *  isInteger                 isInt
   *  isNaN
   *  isNegative                isNeg
   *  isPositive                isPos
   *  isZero
   *  lessThan                  lt
   *  lessThanOrEqualTo         lte
   *  logarithm                 log
   *  [maximum]                 [max]
   *  [minimum]                 [min]
   *  minus                     sub
   *  modulo                    mod
   *  naturalExponential        exp
   *  naturalLogarithm          ln
   *  negated                   neg
   *  plus                      add
   *  precision                 sd
   *  round
   *  sine                      sin
   *  squareRoot                sqrt
   *  tangent                   tan
   *  times                     mul
   *  toBinary
   *  toDecimalPlaces           toDP
   *  toExponential
   *  toFixed
   *  toFraction
   *  toHexadecimal             toHex
   *  toNearest
   *  toNumber
   *  toOctal
   *  toPower                   pow
   *  toPrecision
   *  toSignificantDigits       toSD
   *  toString
   *  truncated                 trunc
   *  valueOf                   toJSON
   */


  /*
   * Return a new Decimal whose value is the absolute value of this Decimal.
   *
   */
  P.absoluteValue = P.abs = function () {
    var x = new this.constructor(this);
    if (x.s < 0) x.s = 1;
    return finalise(x);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of positive Infinity.
   *
   */
  P.ceil = function () {
    return finalise(new this.constructor(this), this.e + 1, 2);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal clamped to the range
   * delineated by `min` and `max`.
   *
   * min {number|string|Decimal}
   * max {number|string|Decimal}
   *
   */
  P.clampedTo = P.clamp = function (min, max) {
    var k,
      x = this,
      Ctor = x.constructor;
    min = new Ctor(min);
    max = new Ctor(max);
    if (!min.s || !max.s) return new Ctor(NaN);
    if (min.gt(max)) throw Error(invalidArgument + max);
    k = x.cmp(min);
    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);
  };


  /*
   * Return
   *   1    if the value of this Decimal is greater than the value of `y`,
   *  -1    if the value of this Decimal is less than the value of `y`,
   *   0    if they have the same value,
   *   NaN  if the value of either Decimal is NaN.
   *
   */
  P.comparedTo = P.cmp = function (y) {
    var i, j, xdL, ydL,
      x = this,
      xd = x.d,
      yd = (y = new x.constructor(y)).d,
      xs = x.s,
      ys = y.s;

    // Either NaN or ±Infinity?
    if (!xd || !yd) {
      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
    }

    // Either zero?
    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

    // Signs differ?
    if (xs !== ys) return xs;

    // Compare exponents.
    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

    xdL = xd.length;
    ydL = yd.length;

    // Compare digit by digit.
    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
    }

    // Compare lengths.
    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
  };


  /*
   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * cos(0)         = 1
   * cos(-0)        = 1
   * cos(Infinity)  = NaN
   * cos(-Infinity) = NaN
   * cos(NaN)       = NaN
   *
   */
  P.cosine = P.cos = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.d) return new Ctor(NaN);

    // cos(0) = cos(-0) = 1
    if (!x.d[0]) return new Ctor(1);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;

    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
  };


  /*
   *
   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   *  cbrt(0)  =  0
   *  cbrt(-0) = -0
   *  cbrt(1)  =  1
   *  cbrt(-1) = -1
   *  cbrt(N)  =  N
   *  cbrt(-I) = -I
   *  cbrt(I)  =  I
   *
   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
   *
   */
  P.cubeRoot = P.cbrt = function () {
    var e, m, n, r, rep, s, sd, t, t3, t3plusx,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);
    external = false;

    // Initial estimate.
    s = x.s * mathpow(x.s * x, 1 / 3);

     // Math.cbrt underflow/overflow?
     // Pass x to Math.pow as integer, then adjust the exponent of the result.
    if (!s || Math.abs(s) == 1 / 0) {
      n = digitsToString(x.d);
      e = x.e;

      // Adjust n exponent so it is a multiple of 3 away from x exponent.
      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
      s = mathpow(n, 1 / 3);

      // Rarely, e may be one less than the result exponent value.
      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

      if (s == 1 / 0) {
        n = '5e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
      r.s = x.s;
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3;

    // Halley's method.
    // TODO? Compare Newton's method.
    for (;;) {
      t = r;
      t3 = t.times(t).times(t);
      t3plusx = t3.plus(x);
      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

      // TODO? Replace with for-loop and checkRoundingDigits.
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);

        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
        // , i.e. approaching a rounding boundary, continue the iteration.
        if (n == '9999' || !rep && n == '4999') {

          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {

          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;

    return finalise(r, e, Ctor.rounding, m);
  };


  /*
   * Return the number of decimal places of the value of this Decimal.
   *
   */
  P.decimalPlaces = P.dp = function () {
    var w,
      d = this.d,
      n = NaN;

    if (d) {
      w = d.length - 1;
      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

      // Subtract the number of trailing zeros of the last word.
      w = d[w];
      if (w) for (; w % 10 == 0; w /= 10) n--;
      if (n < 0) n = 0;
    }

    return n;
  };


  /*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.dividedBy = P.div = function (y) {
    return divide(this, new this.constructor(y));
  };


  /*
   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.dividedToIntegerBy = P.divToInt = function (y) {
    var x = this,
      Ctor = x.constructor;
    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
  };


  /*
   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
   *
   */
  P.equals = P.eq = function (y) {
    return this.cmp(y) === 0;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of negative Infinity.
   *
   */
  P.floor = function () {
    return finalise(new this.constructor(this), this.e + 1, 3);
  };


  /*
   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
   * false.
   *
   */
  P.greaterThan = P.gt = function (y) {
    return this.cmp(y) > 0;
  };


  /*
   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
   * otherwise return false.
   *
   */
  P.greaterThanOrEqualTo = P.gte = function (y) {
    var k = this.cmp(y);
    return k == 1 || k === 0;
  };


  /*
   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [1, Infinity]
   *
   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
   *
   * cosh(0)         = 1
   * cosh(-0)        = 1
   * cosh(Infinity)  = Infinity
   * cosh(-Infinity) = Infinity
   * cosh(NaN)       = NaN
   *
   *  x        time taken (ms)   result
   * 1000      9                 9.8503555700852349694e+433
   * 10000     25                4.4034091128314607936e+4342
   * 100000    171               1.4033316802130615897e+43429
   * 1000000   3817              1.5166076984010437725e+434294
   * 10000000  abandoned after 2 minute wait
   *
   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
   *
   */
  P.hyperbolicCosine = P.cosh = function () {
    var k, n, pr, rm, len,
      x = this,
      Ctor = x.constructor,
      one = new Ctor(1);

    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
    if (x.isZero()) return one;

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

    // Estimate the optimum number of times to use the argument reduction.
    // TODO? Estimation reused from cosine() and may not be optimal here.
    if (len < 32) {
      k = Math.ceil(len / 3);
      n = (1 / tinyPow(4, k)).toString();
    } else {
      k = 16;
      n = '2.3283064365386962890625e-10';
    }

    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

    // Reverse argument reduction
    var cosh2_x,
      i = k,
      d8 = new Ctor(8);
    for (; i--;) {
      cosh2_x = x.times(x);
      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
    }

    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
  };


  /*
   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
   *
   * sinh(0)         = 0
   * sinh(-0)        = -0
   * sinh(Infinity)  = Infinity
   * sinh(-Infinity) = -Infinity
   * sinh(NaN)       = NaN
   *
   * x        time taken (ms)
   * 10       2 ms
   * 100      5 ms
   * 1000     14 ms
   * 10000    82 ms
   * 100000   886 ms            1.4033316802130615897e+43429
   * 200000   2613 ms
   * 300000   5407 ms
   * 400000   8824 ms
   * 500000   13026 ms          8.7080643612718084129e+217146
   * 1000000  48543 ms
   *
   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
   *
   */
  P.hyperbolicSine = P.sinh = function () {
    var k, pr, rm, len,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    if (len < 3) {
      x = taylorSeries(Ctor, 2, x, x, true);
    } else {

      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
      // 3 multiplications and 1 addition

      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
      // 4 multiplications and 2 additions

      // Estimate the optimum number of times to use the argument reduction.
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;

      x = x.times(1 / tinyPow(5, k));
      x = taylorSeries(Ctor, 2, x, x, true);

      // Reverse argument reduction
      var sinh2_x,
        d5 = new Ctor(5),
        d16 = new Ctor(16),
        d20 = new Ctor(20);
      for (; k--;) {
        sinh2_x = x.times(x);
        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
      }
    }

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(x, pr, rm, true);
  };


  /*
   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * tanh(x) = sinh(x) / cosh(x)
   *
   * tanh(0)         = 0
   * tanh(-0)        = -0
   * tanh(Infinity)  = 1
   * tanh(-Infinity) = -1
   * tanh(NaN)       = NaN
   *
   */
  P.hyperbolicTangent = P.tanh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(x.s);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 7;
    Ctor.rounding = 1;

    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
  };


  /*
   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
   * this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [0, pi]
   *
   * acos(x) = pi/2 - asin(x)
   *
   * acos(0)       = pi/2
   * acos(-0)      = pi/2
   * acos(1)       = 0
   * acos(-1)      = pi
   * acos(1/2)     = pi/3
   * acos(-1/2)    = 2*pi/3
   * acos(|x| > 1) = NaN
   * acos(NaN)     = NaN
   *
   */
  P.inverseCosine = P.acos = function () {
    var halfPi,
      x = this,
      Ctor = x.constructor,
      k = x.abs().cmp(1),
      pr = Ctor.precision,
      rm = Ctor.rounding;

    if (k !== -1) {
      return k === 0
        // |x| is 1
        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
        // |x| > 1 or x is NaN
        : new Ctor(NaN);
    }

    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;

    x = x.asin();
    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return halfPi.minus(x);
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
   * value of this Decimal.
   *
   * Domain: [1, Infinity]
   * Range: [0, Infinity]
   *
   * acosh(x) = ln(x + sqrt(x^2 - 1))
   *
   * acosh(x < 1)     = NaN
   * acosh(NaN)       = NaN
   * acosh(Infinity)  = Infinity
   * acosh(-Infinity) = NaN
   * acosh(0)         = NaN
   * acosh(-0)        = NaN
   * acosh(1)         = 0
   * acosh(-1)        = NaN
   *
   */
  P.inverseHyperbolicCosine = P.acosh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
    if (!x.isFinite()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
    Ctor.rounding = 1;
    external = false;

    x = x.times(x).minus(1).sqrt().plus(x);

    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.ln();
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * asinh(x) = ln(x + sqrt(x^2 + 1))
   *
   * asinh(NaN)       = NaN
   * asinh(Infinity)  = Infinity
   * asinh(-Infinity) = -Infinity
   * asinh(0)         = 0
   * asinh(-0)        = -0
   *
   */
  P.inverseHyperbolicSine = P.asinh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
    Ctor.rounding = 1;
    external = false;

    x = x.times(x).plus(1).sqrt().plus(x);

    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.ln();
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
   * value of this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [-Infinity, Infinity]
   *
   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
   *
   * atanh(|x| > 1)   = NaN
   * atanh(NaN)       = NaN
   * atanh(Infinity)  = NaN
   * atanh(-Infinity) = NaN
   * atanh(0)         = 0
   * atanh(-0)        = -0
   * atanh(1)         = Infinity
   * atanh(-1)        = -Infinity
   *
   */
  P.inverseHyperbolicTangent = P.atanh = function () {
    var pr, rm, wpr, xsd,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    xsd = x.sd();

    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

    Ctor.precision = wpr = xsd - x.e;

    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

    Ctor.precision = pr + 4;
    Ctor.rounding = 1;

    x = x.ln();

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.times(0.5);
  };


  /*
   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
   *
   * asin(0)       = 0
   * asin(-0)      = -0
   * asin(1/2)     = pi/6
   * asin(-1/2)    = -pi/6
   * asin(1)       = pi/2
   * asin(-1)      = -pi/2
   * asin(|x| > 1) = NaN
   * asin(NaN)     = NaN
   *
   * TODO? Compare performance of Taylor series.
   *
   */
  P.inverseSine = P.asin = function () {
    var halfPi, k,
      pr, rm,
      x = this,
      Ctor = x.constructor;

    if (x.isZero()) return new Ctor(x);

    k = x.abs().cmp(1);
    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (k !== -1) {

      // |x| is 1
      if (k === 0) {
        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
        halfPi.s = x.s;
        return halfPi;
      }

      // |x| > 1 or x is NaN
      return new Ctor(NaN);
    }

    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;

    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.times(2);
  };


  /*
   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
   *
   * atan(0)         = 0
   * atan(-0)        = -0
   * atan(1)         = pi/4
   * atan(-1)        = -pi/4
   * atan(Infinity)  = pi/2
   * atan(-Infinity) = -pi/2
   * atan(NaN)       = NaN
   *
   */
  P.inverseTangent = P.atan = function () {
    var i, j, k, n, px, t, r, wpr, x2,
      x = this,
      Ctor = x.constructor,
      pr = Ctor.precision,
      rm = Ctor.rounding;

    if (!x.isFinite()) {
      if (!x.s) return new Ctor(NaN);
      if (pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.5);
        r.s = x.s;
        return r;
      }
    } else if (x.isZero()) {
      return new Ctor(x);
    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
      r = getPi(Ctor, pr + 4, rm).times(0.25);
      r.s = x.s;
      return r;
    }

    Ctor.precision = wpr = pr + 10;
    Ctor.rounding = 1;

    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

    // Argument reduction
    // Ensure |x| < 0.42
    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

    k = Math.min(28, wpr / LOG_BASE + 2 | 0);

    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

    external = false;

    j = Math.ceil(wpr / LOG_BASE);
    n = 1;
    x2 = x.times(x);
    r = new Ctor(x);
    px = x;

    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
    for (; i !== -1;) {
      px = px.times(x2);
      t = r.minus(px.div(n += 2));

      px = px.times(x2);
      r = t.plus(px.div(n += 2));

      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
    }

    if (k) r = r.times(2 << (k - 1));

    external = true;

    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
  };


  /*
   * Return true if the value of this Decimal is a finite number, otherwise return false.
   *
   */
  P.isFinite = function () {
    return !!this.d;
  };


  /*
   * Return true if the value of this Decimal is an integer, otherwise return false.
   *
   */
  P.isInteger = P.isInt = function () {
    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
  };


  /*
   * Return true if the value of this Decimal is NaN, otherwise return false.
   *
   */
  P.isNaN = function () {
    return !this.s;
  };


  /*
   * Return true if the value of this Decimal is negative, otherwise return false.
   *
   */
  P.isNegative = P.isNeg = function () {
    return this.s < 0;
  };


  /*
   * Return true if the value of this Decimal is positive, otherwise return false.
   *
   */
  P.isPositive = P.isPos = function () {
    return this.s > 0;
  };


  /*
   * Return true if the value of this Decimal is 0 or -0, otherwise return false.
   *
   */
  P.isZero = function () {
    return !!this.d && this.d[0] === 0;
  };


  /*
   * Return true if the value of this Decimal is less than `y`, otherwise return false.
   *
   */
  P.lessThan = P.lt = function (y) {
    return this.cmp(y) < 0;
  };


  /*
   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
   *
   */
  P.lessThanOrEqualTo = P.lte = function (y) {
    return this.cmp(y) < 1;
  };


  /*
   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * If no base is specified, return log[10](arg).
   *
   * log[base](arg) = ln(arg) / ln(base)
   *
   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
   * otherwise:
   *
   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
   * between the result and the correctly rounded result will be one ulp (unit in the last place).
   *
   * log[-b](a)       = NaN
   * log[0](a)        = NaN
   * log[1](a)        = NaN
   * log[NaN](a)      = NaN
   * log[Infinity](a) = NaN
   * log[b](0)        = -Infinity
   * log[b](-0)       = -Infinity
   * log[b](-a)       = NaN
   * log[b](1)        = 0
   * log[b](Infinity) = Infinity
   * log[b](NaN)      = NaN
   *
   * [base] {number|string|Decimal} The base of the logarithm.
   *
   */
  P.logarithm = P.log = function (base) {
    var isBase10, d, denominator, k, inf, num, sd, r,
      arg = this,
      Ctor = arg.constructor,
      pr = Ctor.precision,
      rm = Ctor.rounding,
      guard = 5;

    // Default base is 10.
    if (base == null) {
      base = new Ctor(10);
      isBase10 = true;
    } else {
      base = new Ctor(base);
      d = base.d;

      // Return NaN if base is negative, or non-finite, or is 0 or 1.
      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

      isBase10 = base.eq(10);
    }

    d = arg.d;

    // Is arg negative, non-finite, 0 or 1?
    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
    }

    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
    // integer power of 10.
    if (isBase10) {
      if (d.length > 1) {
        inf = true;
      } else {
        for (k = d[0]; k % 10 === 0;) k /= 10;
        inf = k !== 1;
      }
    }

    external = false;
    sd = pr + guard;
    num = naturalLogarithm(arg, sd);
    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

    // The result will have 5 rounding digits.
    r = divide(num, denominator, sd, 1);

    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
    // calculate 10 further digits.
    //
    // If the result is known to have an infinite decimal expansion, repeat this until it is clear
    // that the result is above or below the boundary. Otherwise, if after calculating the 10
    // further digits, the last 14 are nines, round up and assume the result is exact.
    // Also assume the result is exact if the last 14 are zero.
    //
    // Example of a result that will be incorrectly rounded:
    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
    // place is still 2.6.
    if (checkRoundingDigits(r.d, k = pr, rm)) {

      do {
        sd += 10;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
        r = divide(num, denominator, sd, 1);

        if (!inf) {

          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
            r = finalise(r, pr + 1, 0);
          }

          break;
        }
      } while (checkRoundingDigits(r.d, k += 10, rm));
    }

    external = true;

    return finalise(r, pr, rm);
  };


  /*
   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.max = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'lt');
  };
   */


  /*
   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.min = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'gt');
  };
   */


  /*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.minus = P.sub = function (y) {
    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // If either is not finite...
    if (!x.d || !y.d) {

      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN);

      // Return y negated if x is finite and y is ±Infinity.
      else if (x.d) y.s = -y.s;

      // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with different signs.
      // Return NaN if both are ±Infinity with the same sign.
      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

      return y;
    }

    // If signs differ...
    if (x.s != y.s) {
      y.s = -y.s;
      return x.plus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;

    // If either is zero...
    if (!xd[0] || !yd[0]) {

      // Return y negated if x is zero and y is non-zero.
      if (yd[0]) y.s = -y.s;

      // Return x if y is zero and x is non-zero.
      else if (xd[0]) y = new Ctor(x);

      // Return zero if both are zero.
      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
      else return new Ctor(rm === 3 ? -0 : 0);

      return external ? finalise(y, pr, rm) : y;
    }

    // x and y are finite, non-zero numbers with the same sign.

    // Calculate base 1e7 exponents.
    e = mathfloor(y.e / LOG_BASE);
    xe = mathfloor(x.e / LOG_BASE);

    xd = xd.slice();
    k = xe - e;

    // If base 1e7 exponents differ...
    if (k) {
      xLTy = k < 0;

      if (xLTy) {
        d = xd;
        k = -k;
        len = yd.length;
      } else {
        d = yd;
        e = xe;
        len = xd.length;
      }

      // Numbers with massively different exponents would result in a very high number of
      // zeros needing to be prepended, but this can be avoided while still ensuring correct
      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

      if (k > i) {
        k = i;
        d.length = 1;
      }

      // Prepend zeros to equalise exponents.
      d.reverse();
      for (i = k; i--;) d.push(0);
      d.reverse();

    // Base 1e7 exponents equal.
    } else {

      // Check digits to determine which is the bigger number.

      i = xd.length;
      len = yd.length;
      xLTy = i < len;
      if (xLTy) len = i;

      for (i = 0; i < len; i++) {
        if (xd[i] != yd[i]) {
          xLTy = xd[i] < yd[i];
          break;
        }
      }

      k = 0;
    }

    if (xLTy) {
      d = xd;
      xd = yd;
      yd = d;
      y.s = -y.s;
    }

    len = xd.length;

    // Append zeros to `xd` if shorter.
    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

    // Subtract yd from xd.
    for (i = yd.length; i > k;) {

      if (xd[--i] < yd[i]) {
        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
        --xd[j];
        xd[i] += BASE;
      }

      xd[i] -= yd[i];
    }

    // Remove trailing zeros.
    for (; xd[--len] === 0;) xd.pop();

    // Remove leading zeros and adjust exponent accordingly.
    for (; xd[0] === 0; xd.shift()) --e;

    // Zero?
    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

    y.d = xd;
    y.e = getBase10Exponent(xd, e);

    return external ? finalise(y, pr, rm) : y;
  };


  /*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * The result depends on the modulo mode.
   *
   */
  P.modulo = P.mod = function (y) {
    var q,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

    // Return x if y is ±Infinity or x is ±0.
    if (!y.d || x.d && !x.d[0]) {
      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
    }

    // Prevent rounding of intermediate calculations.
    external = false;

    if (Ctor.modulo == 9) {

      // Euclidian division: q = sign(y) * floor(x / abs(y))
      // result = x - q * y    where  0 <= result < abs(y)
      q = divide(x, y.abs(), 0, 3, 1);
      q.s *= y.s;
    } else {
      q = divide(x, y, 0, Ctor.modulo, 1);
    }

    q = q.times(y);

    external = true;

    return x.minus(q);
  };


  /*
   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.naturalExponential = P.exp = function () {
    return naturalExponential(this);
  };


  /*
   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.naturalLogarithm = P.ln = function () {
    return naturalLogarithm(this);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
   * -1.
   *
   */
  P.negated = P.neg = function () {
    var x = new this.constructor(this);
    x.s = -x.s;
    return finalise(x);
  };


  /*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.plus = P.add = function (y) {
    var carry, d, e, i, k, len, pr, rm, xd, yd,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // If either is not finite...
    if (!x.d || !y.d) {

      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN);

      // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with the same sign.
      // Return NaN if both are ±Infinity with different signs.
      // Return y if x is finite and y is ±Infinity.
      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

      return y;
    }

     // If signs differ...
    if (x.s != y.s) {
      y.s = -y.s;
      return x.minus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;

    // If either is zero...
    if (!xd[0] || !yd[0]) {

      // Return x if y is zero.
      // Return y if y is non-zero.
      if (!yd[0]) y = new Ctor(x);

      return external ? finalise(y, pr, rm) : y;
    }

    // x and y are finite, non-zero numbers with the same sign.

    // Calculate base 1e7 exponents.
    k = mathfloor(x.e / LOG_BASE);
    e = mathfloor(y.e / LOG_BASE);

    xd = xd.slice();
    i = k - e;

    // If base 1e7 exponents differ...
    if (i) {

      if (i < 0) {
        d = xd;
        i = -i;
        len = yd.length;
      } else {
        d = yd;
        e = k;
        len = xd.length;
      }

      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
      k = Math.ceil(pr / LOG_BASE);
      len = k > len ? k + 1 : len + 1;

      if (i > len) {
        i = len;
        d.length = 1;
      }

      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
      d.reverse();
      for (; i--;) d.push(0);
      d.reverse();
    }

    len = xd.length;
    i = yd.length;

    // If yd is longer than xd, swap xd and yd so xd points to the longer array.
    if (len - i < 0) {
      i = len;
      d = yd;
      yd = xd;
      xd = d;
    }

    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
    for (carry = 0; i;) {
      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
      xd[i] %= BASE;
    }

    if (carry) {
      xd.unshift(carry);
      ++e;
    }

    // Remove trailing zeros.
    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
    for (len = xd.length; xd[--len] == 0;) xd.pop();

    y.d = xd;
    y.e = getBase10Exponent(xd, e);

    return external ? finalise(y, pr, rm) : y;
  };


  /*
   * Return the number of significant digits of the value of this Decimal.
   *
   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
   *
   */
  P.precision = P.sd = function (z) {
    var k,
      x = this;

    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

    if (x.d) {
      k = getPrecision(x.d);
      if (z && x.e + 1 > k) k = x.e + 1;
    } else {
      k = NaN;
    }

    return k;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
   * rounding mode `rounding`.
   *
   */
  P.round = function () {
    var x = this,
      Ctor = x.constructor;

    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
  };


  /*
   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * sin(x) = x - x^3/3! + x^5/5! - ...
   *
   * sin(0)         = 0
   * sin(-0)        = -0
   * sin(Infinity)  = NaN
   * sin(-Infinity) = NaN
   * sin(NaN)       = NaN
   *
   */
  P.sine = P.sin = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;

    x = sine(Ctor, toLessThanHalfPi(Ctor, x));

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
  };


  /*
   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   *  sqrt(-n) =  N
   *  sqrt(N)  =  N
   *  sqrt(-I) =  N
   *  sqrt(I)  =  I
   *  sqrt(0)  =  0
   *  sqrt(-0) = -0
   *
   */
  P.squareRoot = P.sqrt = function () {
    var m, n, sd, r, rep, t,
      x = this,
      d = x.d,
      e = x.e,
      s = x.s,
      Ctor = x.constructor;

    // Negative/NaN/Infinity/zero?
    if (s !== 1 || !d || !d[0]) {
      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
    }

    external = false;

    // Initial estimate.
    s = Math.sqrt(+x);

    // Math.sqrt underflow/overflow?
    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
    if (s == 0 || s == 1 / 0) {
      n = digitsToString(d);

      if ((n.length + e) % 2 == 0) n += '0';
      s = Math.sqrt(n);
      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

      if (s == 1 / 0) {
        n = '5e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3;

    // Newton-Raphson iteration.
    for (;;) {
      t = r;
      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

      // TODO? Replace with for-loop and checkRoundingDigits.
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);

        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
        // 4999, i.e. approaching a rounding boundary, continue the iteration.
        if (n == '9999' || !rep && n == '4999') {

          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {

          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;

    return finalise(r, e, Ctor.rounding, m);
  };


  /*
   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * tan(0)         = 0
   * tan(-0)        = -0
   * tan(Infinity)  = NaN
   * tan(-Infinity) = NaN
   * tan(NaN)       = NaN
   *
   */
  P.tangent = P.tan = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 10;
    Ctor.rounding = 1;

    x = x.sin();
    x.s = 1;
    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
  };


  /*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   */
  P.times = P.mul = function (y) {
    var carry, e, i, k, r, rL, t, xdL, ydL,
      x = this,
      Ctor = x.constructor,
      xd = x.d,
      yd = (y = new Ctor(y)).d;

    y.s *= x.s;

     // If either is NaN, ±Infinity or ±0...
    if (!xd || !xd[0] || !yd || !yd[0]) {

      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

        // Return NaN if either is NaN.
        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
        ? NaN

        // Return ±Infinity if either is ±Infinity.
        // Return ±0 if either is ±0.
        : !xd || !yd ? y.s / 0 : y.s * 0);
    }

    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
    xdL = xd.length;
    ydL = yd.length;

    // Ensure xd points to the longer array.
    if (xdL < ydL) {
      r = xd;
      xd = yd;
      yd = r;
      rL = xdL;
      xdL = ydL;
      ydL = rL;
    }

    // Initialise the result array with zeros.
    r = [];
    rL = xdL + ydL;
    for (i = rL; i--;) r.push(0);

    // Multiply!
    for (i = ydL; --i >= 0;) {
      carry = 0;
      for (k = xdL + i; k > i;) {
        t = r[k] + yd[i] * xd[k - i - 1] + carry;
        r[k--] = t % BASE | 0;
        carry = t / BASE | 0;
      }

      r[k] = (r[k] + carry) % BASE | 0;
    }

    // Remove trailing zeros.
    for (; !r[--rL];) r.pop();

    if (carry) ++e;
    else r.shift();

    y.d = r;
    y.e = getBase10Exponent(r, e);

    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
  };


  /*
   * Return a string representing the value of this Decimal in base 2, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toBinary = function (sd, rm) {
    return toStringBinary(this, 2, sd, rm);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
   *
   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toDecimalPlaces = P.toDP = function (dp, rm) {
    var x = this,
      Ctor = x.constructor;

    x = new Ctor(x);
    if (dp === void 0) return x;

    checkInt32(dp, 0, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);

    return finalise(x, dp + x.e + 1, rm);
  };


  /*
   * Return a string representing the value of this Decimal in exponential notation rounded to
   * `dp` fixed decimal places using rounding mode `rounding`.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toExponential = function (dp, rm) {
    var str,
      x = this,
      Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x, true);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      x = finalise(new Ctor(x), dp + 1, rm);
      str = finiteToString(x, true, dp + 1);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
   * omitted.
   *
   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   * (-0).toFixed(3) is '0.000'.
   * (-0.5).toFixed(0) is '-0'.
   *
   */
  P.toFixed = function (dp, rm) {
    var str, y,
      x = this,
      Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      y = finalise(new Ctor(x), dp + x.e + 1, rm);
      str = finiteToString(y, false, dp + y.e + 1);
    }

    // To determine whether to add the minus sign look at the value before it was rounded,
    // i.e. look at `x` rather than `y`.
    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return an array representing the value of this Decimal as a simple fraction with an integer
   * numerator and an integer denominator.
   *
   * The denominator will be a positive non-zero value less than or equal to the specified maximum
   * denominator. If a maximum denominator is not specified, the denominator will be the lowest
   * value necessary to represent the number exactly.
   *
   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
   *
   */
  P.toFraction = function (maxD) {
    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
      x = this,
      xd = x.d,
      Ctor = x.constructor;

    if (!xd) return new Ctor(x);

    n1 = d0 = new Ctor(1);
    d1 = n0 = new Ctor(0);

    d = new Ctor(d1);
    e = d.e = getPrecision(xd) - x.e - 1;
    k = e % LOG_BASE;
    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

    if (maxD == null) {

      // d is 10**e, the minimum max-denominator needed.
      maxD = e > 0 ? d : n1;
    } else {
      n = new Ctor(maxD);
      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
    }

    external = false;
    n = new Ctor(digitsToString(xd));
    pr = Ctor.precision;
    Ctor.precision = e = xd.length * LOG_BASE * 2;

    for (;;)  {
      q = divide(n, d, 0, 1, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.cmp(maxD) == 1) break;
      d0 = d1;
      d1 = d2;
      d2 = n1;
      n1 = n0.plus(q.times(d2));
      n0 = d2;
      d2 = d;
      d = n.minus(q.times(d2));
      n = d2;
    }

    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;

    // Determine which fraction is closer to x, n0/d0 or n1/d1?
    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
        ? [n1, d1] : [n0, d0];

    Ctor.precision = pr;
    external = true;

    return r;
  };


  /*
   * Return a string representing the value of this Decimal in base 16, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toHexadecimal = P.toHex = function (sd, rm) {
    return toStringBinary(this, 16, sd, rm);
  };


  /*
   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
   *
   * The return value will always have the same sign as this Decimal, unless either this Decimal
   * or `y` is NaN, in which case the return value will be also be NaN.
   *
   * The return value is not affected by the value of `precision`.
   *
   * y {number|string|Decimal} The magnitude to round to a multiple of.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toNearest() rounding mode not an integer: {rm}'
   * 'toNearest() rounding mode out of range: {rm}'
   *
   */
  P.toNearest = function (y, rm) {
    var x = this,
      Ctor = x.constructor;

    x = new Ctor(x);

    if (y == null) {

      // If x is not finite, return x.
      if (!x.d) return x;

      y = new Ctor(1);
      rm = Ctor.rounding;
    } else {
      y = new Ctor(y);
      if (rm === void 0) {
        rm = Ctor.rounding;
      } else {
        checkInt32(rm, 0, 8);
      }

      // If x is not finite, return x if y is not NaN, else NaN.
      if (!x.d) return y.s ? x : y;

      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
      if (!y.d) {
        if (y.s) y.s = x.s;
        return y;
      }
    }

    // If y is not zero, calculate the nearest multiple of y to x.
    if (y.d[0]) {
      external = false;
      x = divide(x, y, 0, rm, 1).times(y);
      external = true;
      finalise(x);

    // If y is zero, return zero with the sign of x.
    } else {
      y.s = x.s;
      x = y;
    }

    return x;
  };


  /*
   * Return the value of this Decimal converted to a number primitive.
   * Zero keeps its sign.
   *
   */
  P.toNumber = function () {
    return +this;
  };


  /*
   * Return a string representing the value of this Decimal in base 8, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toOctal = function (sd, rm) {
    return toStringBinary(this, 8, sd, rm);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
   * to `precision` significant digits using rounding mode `rounding`.
   *
   * ECMAScript compliant.
   *
   *   pow(x, NaN)                           = NaN
   *   pow(x, ±0)                            = 1

   *   pow(NaN, non-zero)                    = NaN
   *   pow(abs(x) > 1, +Infinity)            = +Infinity
   *   pow(abs(x) > 1, -Infinity)            = +0
   *   pow(abs(x) == 1, ±Infinity)           = NaN
   *   pow(abs(x) < 1, +Infinity)            = +0
   *   pow(abs(x) < 1, -Infinity)            = +Infinity
   *   pow(+Infinity, y > 0)                 = +Infinity
   *   pow(+Infinity, y < 0)                 = +0
   *   pow(-Infinity, odd integer > 0)       = -Infinity
   *   pow(-Infinity, even integer > 0)      = +Infinity
   *   pow(-Infinity, odd integer < 0)       = -0
   *   pow(-Infinity, even integer < 0)      = +0
   *   pow(+0, y > 0)                        = +0
   *   pow(+0, y < 0)                        = +Infinity
   *   pow(-0, odd integer > 0)              = -0
   *   pow(-0, even integer > 0)             = +0
   *   pow(-0, odd integer < 0)              = -Infinity
   *   pow(-0, even integer < 0)             = +Infinity
   *   pow(finite x < 0, finite non-integer) = NaN
   *
   * For non-integer or very large exponents pow(x, y) is calculated using
   *
   *   x^y = exp(y*ln(x))
   *
   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
   * probability of an incorrectly rounded result
   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
   * i.e. 1 in 250,000,000,000,000
   *
   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
   *
   * y {number|string|Decimal} The power to which to raise this Decimal.
   *
   */
  P.toPower = P.pow = function (y) {
    var e, k, pr, r, rm, s,
      x = this,
      Ctor = x.constructor,
      yn = +(y = new Ctor(y));

    // Either ±Infinity, NaN or ±0?
    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

    x = new Ctor(x);

    if (x.eq(1)) return x;

    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (y.eq(1)) return finalise(x, pr, rm);

    // y exponent
    e = mathfloor(y.e / LOG_BASE);

    // If y is a small integer use the 'exponentiation by squaring' algorithm.
    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
      r = intPow(Ctor, x, k, pr);
      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
    }

    s = x.s;

    // if x is negative
    if (s < 0) {

      // if y is not an integer
      if (e < y.d.length - 1) return new Ctor(NaN);

      // Result is positive if x is negative and the last digit of integer y is even.
      if ((y.d[e] & 1) == 0) s = 1;

      // if x.eq(-1)
      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
        x.s = s;
        return x;
      }
    }

    // Estimate result exponent.
    // x^y = 10^e,  where e = y * log10(x)
    // log10(x) = log10(x_significand) + x_exponent
    // log10(x_significand) = ln(x_significand) / ln(10)
    k = mathpow(+x, yn);
    e = k == 0 || !isFinite(k)
      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
      : new Ctor(k + '').e;

    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

    // Overflow/underflow?
    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

    external = false;
    Ctor.rounding = x.s = 1;

    // Estimate the extra guard digits needed to ensure five correct rounding digits from
    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
    // new Decimal(2.32456).pow('2087987436534566.46411')
    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
    k = Math.min(12, (e + '').length);

    // r = x^y = exp(y*ln(x))
    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
    if (r.d) {

      // Truncate to the required precision plus five rounding digits.
      r = finalise(r, pr + 5, 1);

      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
      // the result.
      if (checkRoundingDigits(r.d, pr, rm)) {
        e = pr + 10;

        // Truncate to the increased precision plus five rounding digits.
        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }
      }
    }

    r.s = s;
    external = true;
    Ctor.rounding = rm;

    return finalise(r, pr, rm);
  };


  /*
   * Return a string representing the value of this Decimal rounded to `sd` significant digits
   * using rounding mode `rounding`.
   *
   * Return exponential notation if `sd` is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toPrecision = function (sd, rm) {
    var str,
      x = this,
      Ctor = x.constructor;

    if (sd === void 0) {
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
    } else {
      checkInt32(sd, 1, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      x = finalise(new Ctor(x), sd, rm);
      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
   * omitted.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toSD() digits out of range: {sd}'
   * 'toSD() digits not an integer: {sd}'
   * 'toSD() rounding mode not an integer: {rm}'
   * 'toSD() rounding mode out of range: {rm}'
   *
   */
  P.toSignificantDigits = P.toSD = function (sd, rm) {
    var x = this,
      Ctor = x.constructor;

    if (sd === void 0) {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    } else {
      checkInt32(sd, 1, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    }

    return finalise(new Ctor(x), sd, rm);
  };


  /*
   * Return a string representing the value of this Decimal.
   *
   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
   *
   */
  P.toString = function () {
    var x = this,
      Ctor = x.constructor,
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
   *
   */
  P.truncated = P.trunc = function () {
    return finalise(new this.constructor(this), this.e + 1, 1);
  };


  /*
   * Return a string representing the value of this Decimal.
   * Unlike `toString`, negative zero will include the minus sign.
   *
   */
  P.valueOf = P.toJSON = function () {
    var x = this,
      Ctor = x.constructor,
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

    return x.isNeg() ? '-' + str : str;
  };


  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


  /*
   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
   *                           finiteToString, naturalExponential, naturalLogarithm
   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
   *  convertBase              toStringBinary, parseOther
   *  cos                      P.cos
   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
   *                           taylorSeries, atan2, parseOther
   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
   *                           P.truncated, divide, getLn10, getPi, naturalExponential,
   *                           naturalLogarithm, ceil, floor, round, trunc
   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
   *                           toStringBinary
   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
   *  getLn10                  P.logarithm, naturalLogarithm
   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
   *  getPrecision             P.precision, P.toFraction
   *  getZeroString            digitsToString, finiteToString
   *  intPow                   P.toPower, parseOther
   *  isOdd                    toLessThanHalfPi
   *  maxOrMin                 max, min
   *  naturalExponential       P.naturalExponential, P.toPower
   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
   *                           P.toPower, naturalExponential
   *  nonFiniteToString        finiteToString, toStringBinary
   *  parseDecimal             Decimal
   *  parseOther               Decimal
   *  sin                      P.sin
   *  taylorSeries             P.cosh, P.sinh, cos, sin
   *  toLessThanHalfPi         P.cos, P.sin
   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
   *  truncate                 intPow
   *
   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
   *                           naturalLogarithm, config, parseOther, random, Decimal
   */


  function digitsToString(d) {
    var i, k, ws,
      indexOfLastWord = d.length - 1,
      str = '',
      w = d[0];

    if (indexOfLastWord > 0) {
      str += w;
      for (i = 1; i < indexOfLastWord; i++) {
        ws = d[i] + '';
        k = LOG_BASE - ws.length;
        if (k) str += getZeroString(k);
        str += ws;
      }

      w = d[i];
      ws = w + '';
      k = LOG_BASE - ws.length;
      if (k) str += getZeroString(k);
    } else if (w === 0) {
      return '0';
    }

    // Remove trailing zeros of last w.
    for (; w % 10 === 0;) w /= 10;

    return str + w;
  }


  function checkInt32(i, min, max) {
    if (i !== ~~i || i < min || i > max) {
      throw Error(invalidArgument + i);
    }
  }


  /*
   * Check 5 rounding digits if `repeating` is null, 4 otherwise.
   * `repeating == null` if caller is `log` or `pow`,
   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
   */
  function checkRoundingDigits(d, i, rm, repeating) {
    var di, k, r, rd;

    // Get the length of the first word of the array d.
    for (k = d[0]; k >= 10; k /= 10) --i;

    // Is the rounding digit in the first word of d?
    if (--i < 0) {
      i += LOG_BASE;
      di = 0;
    } else {
      di = Math.ceil((i + 1) / LOG_BASE);
      i %= LOG_BASE;
    }

    // i is the index (0 - 6) of the rounding digit.
    // E.g. if within the word 3487563 the first rounding digit is 5,
    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
    k = mathpow(10, LOG_BASE - i);
    rd = d[di] % k | 0;

    if (repeating == null) {
      if (i < 3) {
        if (i == 0) rd = rd / 100 | 0;
        else if (i == 1) rd = rd / 10 | 0;
        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
      } else {
        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
      }
    } else {
      if (i < 4) {
        if (i == 0) rd = rd / 1000 | 0;
        else if (i == 1) rd = rd / 100 | 0;
        else if (i == 2) rd = rd / 10 | 0;
        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
      } else {
        r = ((repeating || rm < 4) && rd + 1 == k ||
        (!repeating && rm > 3) && rd + 1 == k / 2) &&
          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
      }
    }

    return r;
  }


  // Convert string of `baseIn` to an array of numbers of `baseOut`.
  // Eg. convertBase('255', 10, 16) returns [15, 15].
  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
  function convertBase(str, baseIn, baseOut) {
    var j,
      arr = [0],
      arrL,
      i = 0,
      strL = str.length;

    for (; i < strL;) {
      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
      arr[0] += NUMERALS.indexOf(str.charAt(i++));
      for (j = 0; j < arr.length; j++) {
        if (arr[j] > baseOut - 1) {
          if (arr[j + 1] === void 0) arr[j + 1] = 0;
          arr[j + 1] += arr[j] / baseOut | 0;
          arr[j] %= baseOut;
        }
      }
    }

    return arr.reverse();
  }


  /*
   * cos(x) = 1 - x^2/2! + x^4/4! - ...
   * |x| < pi/2
   *
   */
  function cosine(Ctor, x) {
    var k, len, y;

    if (x.isZero()) return x;

    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

    // Estimate the optimum number of times to use the argument reduction.
    len = x.d.length;
    if (len < 32) {
      k = Math.ceil(len / 3);
      y = (1 / tinyPow(4, k)).toString();
    } else {
      k = 16;
      y = '2.3283064365386962890625e-10';
    }

    Ctor.precision += k;

    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

    // Reverse argument reduction
    for (var i = k; i--;) {
      var cos2x = x.times(x);
      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
    }

    Ctor.precision -= k;

    return x;
  }


  /*
   * Perform division in the specified base.
   */
  var divide = (function () {

    // Assumes non-zero x and k, and hence non-zero result.
    function multiplyInteger(x, k, base) {
      var temp,
        carry = 0,
        i = x.length;

      for (x = x.slice(); i--;) {
        temp = x[i] * k + carry;
        x[i] = temp % base | 0;
        carry = temp / base | 0;
      }

      if (carry) x.unshift(carry);

      return x;
    }

    function compare(a, b, aL, bL) {
      var i, r;

      if (aL != bL) {
        r = aL > bL ? 1 : -1;
      } else {
        for (i = r = 0; i < aL; i++) {
          if (a[i] != b[i]) {
            r = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }

      return r;
    }

    function subtract(a, b, aL, base) {
      var i = 0;

      // Subtract b from a.
      for (; aL--;) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      }

      // Remove leading zeros.
      for (; !a[0] && a.length > 1;) a.shift();
    }

    return function (x, y, pr, rm, dp, base) {
      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
        yL, yz,
        Ctor = x.constructor,
        sign = x.s == y.s ? 1 : -1,
        xd = x.d,
        yd = y.d;

      // Either NaN, Infinity or 0?
      if (!xd || !xd[0] || !yd || !yd[0]) {

        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
      }

      if (base) {
        logBase = 1;
        e = x.e - y.e;
      } else {
        base = BASE;
        logBase = LOG_BASE;
        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
      }

      yL = yd.length;
      xL = xd.length;
      q = new Ctor(sign);
      qd = q.d = [];

      // Result exponent may be one less than e.
      // The digit array of a Decimal from toStringBinary may have trailing zeros.
      for (i = 0; yd[i] == (xd[i] || 0); i++);

      if (yd[i] > (xd[i] || 0)) e--;

      if (pr == null) {
        sd = pr = Ctor.precision;
        rm = Ctor.rounding;
      } else if (dp) {
        sd = pr + (x.e - y.e) + 1;
      } else {
        sd = pr;
      }

      if (sd < 0) {
        qd.push(1);
        more = true;
      } else {

        // Convert precision in number of base 10 digits to base 1e7 digits.
        sd = sd / logBase + 2 | 0;
        i = 0;

        // divisor < 1e7
        if (yL == 1) {
          k = 0;
          yd = yd[0];
          sd++;

          // k is the carry.
          for (; (i < xL || k) && sd--; i++) {
            t = k * base + (xd[i] || 0);
            qd[i] = t / yd | 0;
            k = t % yd | 0;
          }

          more = k || i < xL;

        // divisor >= 1e7
        } else {

          // Normalise xd and yd so highest order digit of yd is >= base/2
          k = base / (yd[0] + 1) | 0;

          if (k > 1) {
            yd = multiplyInteger(yd, k, base);
            xd = multiplyInteger(xd, k, base);
            yL = yd.length;
            xL = xd.length;
          }

          xi = yL;
          rem = xd.slice(0, yL);
          remL = rem.length;

          // Add zeros to make remainder as long as divisor.
          for (; remL < yL;) rem[remL++] = 0;

          yz = yd.slice();
          yz.unshift(0);
          yd0 = yd[0];

          if (yd[1] >= base / 2) ++yd0;

          do {
            k = 0;

            // Compare divisor and remainder.
            cmp = compare(yd, rem, yL, remL);

            // If divisor < remainder.
            if (cmp < 0) {

              // Calculate trial digit, k.
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

              // k will be how many times the divisor goes into the current remainder.
              k = rem0 / yd0 | 0;

              //  Algorithm:
              //  1. product = divisor * trial digit (k)
              //  2. if product > remainder: product -= divisor, k--
              //  3. remainder -= product
              //  4. if product was < remainder at 2:
              //    5. compare new remainder and divisor
              //    6. If remainder > divisor: remainder -= divisor, k++

              if (k > 1) {
                if (k >= base) k = base - 1;

                // product = divisor * trial digit.
                prod = multiplyInteger(yd, k, base);
                prodL = prod.length;
                remL = rem.length;

                // Compare product and remainder.
                cmp = compare(prod, rem, prodL, remL);

                // product > remainder.
                if (cmp == 1) {
                  k--;

                  // Subtract divisor from product.
                  subtract(prod, yL < prodL ? yz : yd, prodL, base);
                }
              } else {

                // cmp is -1.
                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                if (k == 0) cmp = k = 1;
                prod = yd.slice();
              }

              prodL = prod.length;
              if (prodL < remL) prod.unshift(0);

              // Subtract product from remainder.
              subtract(rem, prod, remL, base);

              // If product was < previous remainder.
              if (cmp == -1) {
                remL = rem.length;

                // Compare divisor and new remainder.
                cmp = compare(yd, rem, yL, remL);

                // If divisor < new remainder, subtract divisor from remainder.
                if (cmp < 1) {
                  k++;

                  // Subtract divisor from remainder.
                  subtract(rem, yL < remL ? yz : yd, remL, base);
                }
              }

              remL = rem.length;
            } else if (cmp === 0) {
              k++;
              rem = [0];
            }    // if cmp === 1, k will be 0

            // Add the next digit, k, to the result array.
            qd[i++] = k;

            // Update the remainder.
            if (cmp && rem[0]) {
              rem[remL++] = xd[xi] || 0;
            } else {
              rem = [xd[xi]];
              remL = 1;
            }

          } while ((xi++ < xL || rem[0] !== void 0) && sd--);

          more = rem[0] !== void 0;
        }

        // Leading zero?
        if (!qd[0]) qd.shift();
      }

      // logBase is 1 when divide is being used for base conversion.
      if (logBase == 1) {
        q.e = e;
        inexact = more;
      } else {

        // To calculate q.e, first get the number of digits of qd[0].
        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
        q.e = i + e * logBase - 1;

        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
      }

      return q;
    };
  })();


  /*
   * Round `x` to `sd` significant digits using rounding mode `rm`.
   * Check for over/under-flow.
   */
   function finalise(x, sd, rm, isTruncated) {
    var digits, i, j, k, rd, roundUp, w, xd, xdi,
      Ctor = x.constructor;

    // Don't round if sd is null or undefined.
    out: if (sd != null) {
      xd = x.d;

      // Infinity/NaN.
      if (!xd) return x;

      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
      // w: the word of xd containing rd, a base 1e7 number.
      // xdi: the index of w within xd.
      // digits: the number of digits of w.
      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
      // they had leading zeros)
      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

      // Get the length of the first word of the digits array xd.
      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
      i = sd - digits;

      // Is the rounding digit in the first word of xd?
      if (i < 0) {
        i += LOG_BASE;
        j = sd;
        w = xd[xdi = 0];

        // Get the rounding digit at index j of w.
        rd = w / mathpow(10, digits - j - 1) % 10 | 0;
      } else {
        xdi = Math.ceil((i + 1) / LOG_BASE);
        k = xd.length;
        if (xdi >= k) {
          if (isTruncated) {

            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
            for (; k++ <= xdi;) xd.push(0);
            w = rd = 0;
            digits = 1;
            i %= LOG_BASE;
            j = i - LOG_BASE + 1;
          } else {
            break out;
          }
        } else {
          w = k = xd[xdi];

          // Get the number of digits of w.
          for (digits = 1; k >= 10; k /= 10) digits++;

          // Get the index of rd within w.
          i %= LOG_BASE;

          // Get the index of rd within w, adjusted for leading zeros.
          // The number of leading zeros of w is given by LOG_BASE - digits.
          j = i - LOG_BASE + digits;

          // Get the rounding digit at index j of w.
          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
        }
      }

      // Are there any non-zero digits after the rounding digit?
      isTruncated = isTruncated || sd < 0 ||
        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
      // will give 714.

      roundUp = rm < 4
        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

          // Check whether the digit to the left of the rounding digit is odd.
          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
            rm == (x.s < 0 ? 8 : 7));

      if (sd < 1 || !xd[0]) {
        xd.length = 0;
        if (roundUp) {

          // Convert sd to decimal places.
          sd -= x.e + 1;

          // 1, 0.1, 0.01, 0.001, 0.0001 etc.
          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
          x.e = -sd || 0;
        } else {

          // Zero.
          xd[0] = x.e = 0;
        }

        return x;
      }

      // Remove excess digits.
      if (i == 0) {
        xd.length = xdi;
        k = 1;
        xdi--;
      } else {
        xd.length = xdi + 1;
        k = mathpow(10, LOG_BASE - i);

        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
        // j > 0 means i > number of leading zeros of w.
        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
      }

      if (roundUp) {
        for (;;) {

          // Is the digit to be rounded up in the first word of xd?
          if (xdi == 0) {

            // i will be the length of xd[0] before k is added.
            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
            j = xd[0] += k;
            for (k = 1; j >= 10; j /= 10) k++;

            // if i != k the length has increased.
            if (i != k) {
              x.e++;
              if (xd[0] == BASE) xd[0] = 1;
            }

            break;
          } else {
            xd[xdi] += k;
            if (xd[xdi] != BASE) break;
            xd[xdi--] = 0;
            k = 1;
          }
        }
      }

      // Remove trailing zeros.
      for (i = xd.length; xd[--i] === 0;) xd.pop();
    }

    if (external) {

      // Overflow?
      if (x.e > Ctor.maxE) {

        // Infinity.
        x.d = null;
        x.e = NaN;

      // Underflow?
      } else if (x.e < Ctor.minE) {

        // Zero.
        x.e = 0;
        x.d = [0];
        // Ctor.underflow = true;
      } // else Ctor.underflow = false;
    }

    return x;
  }


  function finiteToString(x, isExp, sd) {
    if (!x.isFinite()) return nonFiniteToString(x);
    var k,
      e = x.e,
      str = digitsToString(x.d),
      len = str.length;

    if (isExp) {
      if (sd && (k = sd - len) > 0) {
        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
      } else if (len > 1) {
        str = str.charAt(0) + '.' + str.slice(1);
      }

      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
    } else if (e < 0) {
      str = '0.' + getZeroString(-e - 1) + str;
      if (sd && (k = sd - len) > 0) str += getZeroString(k);
    } else if (e >= len) {
      str += getZeroString(e + 1 - len);
      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
    } else {
      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
      if (sd && (k = sd - len) > 0) {
        if (e + 1 === len) str += '.';
        str += getZeroString(k);
      }
    }

    return str;
  }


  // Calculate the base 10 exponent from the base 1e7 exponent.
  function getBase10Exponent(digits, e) {
    var w = digits[0];

    // Add the number of digits of the first word of the digits array.
    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
    return e;
  }


  function getLn10(Ctor, sd, pr) {
    if (sd > LN10_PRECISION) {

      // Reset global state in case the exception is caught.
      external = true;
      if (pr) Ctor.precision = pr;
      throw Error(precisionLimitExceeded);
    }
    return finalise(new Ctor(LN10), sd, 1, true);
  }


  function getPi(Ctor, sd, rm) {
    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
    return finalise(new Ctor(PI), sd, rm, true);
  }


  function getPrecision(digits) {
    var w = digits.length - 1,
      len = w * LOG_BASE + 1;

    w = digits[w];

    // If non-zero...
    if (w) {

      // Subtract the number of trailing zeros of the last word.
      for (; w % 10 == 0; w /= 10) len--;

      // Add the number of digits of the first word.
      for (w = digits[0]; w >= 10; w /= 10) len++;
    }

    return len;
  }


  function getZeroString(k) {
    var zs = '';
    for (; k--;) zs += '0';
    return zs;
  }


  /*
   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
   * integer of type number.
   *
   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
   *
   */
  function intPow(Ctor, x, n, pr) {
    var isTruncated,
      r = new Ctor(1),

      // Max n of 9007199254740991 takes 53 loop iterations.
      // Maximum digits array length; leaves [28, 34] guard digits.
      k = Math.ceil(pr / LOG_BASE + 4);

    external = false;

    for (;;) {
      if (n % 2) {
        r = r.times(x);
        if (truncate(r.d, k)) isTruncated = true;
      }

      n = mathfloor(n / 2);
      if (n === 0) {

        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
        n = r.d.length - 1;
        if (isTruncated && r.d[n] === 0) ++r.d[n];
        break;
      }

      x = x.times(x);
      truncate(x.d, k);
    }

    external = true;

    return r;
  }


  function isOdd(n) {
    return n.d[n.d.length - 1] & 1;
  }


  /*
   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
   */
  function maxOrMin(Ctor, args, ltgt) {
    var y,
      x = new Ctor(args[0]),
      i = 0;

    for (; ++i < args.length;) {
      y = new Ctor(args[i]);
      if (!y.s) {
        x = y;
        break;
      } else if (x[ltgt](y)) {
        x = y;
      }
    }

    return x;
  }


  /*
   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
   * digits.
   *
   * Taylor/Maclaurin series.
   *
   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
   *
   * Argument reduction:
   *   Repeat x = x / 32, k += 5, until |x| < 0.1
   *   exp(x) = exp(x / 2^k)^(2^k)
   *
   * Previously, the argument was initially reduced by
   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
   * found to be slower than just dividing repeatedly by 32 as above.
   *
   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
   *
   *  exp(Infinity)  = Infinity
   *  exp(-Infinity) = 0
   *  exp(NaN)       = NaN
   *  exp(±0)        = 1
   *
   *  exp(x) is non-terminating for any finite, non-zero x.
   *
   *  The result will always be correctly rounded.
   *
   */
  function naturalExponential(x, sd) {
    var denominator, guard, j, pow, sum, t, wpr,
      rep = 0,
      i = 0,
      k = 0,
      Ctor = x.constructor,
      rm = Ctor.rounding,
      pr = Ctor.precision;

    // 0/NaN/Infinity?
    if (!x.d || !x.d[0] || x.e > 17) {

      return new Ctor(x.d
        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
        : x.s ? x.s < 0 ? 0 : x : 0 / 0);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    t = new Ctor(0.03125);

    // while abs(x) >= 0.1
    while (x.e > -2) {

      // x = x / 2^5
      x = x.times(t);
      k += 5;
    }

    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
    // necessary to ensure the first 4 rounding digits are correct.
    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
    wpr += guard;
    denominator = pow = sum = new Ctor(1);
    Ctor.precision = wpr;

    for (;;) {
      pow = finalise(pow.times(x), wpr, 1);
      denominator = denominator.times(++i);
      t = sum.plus(divide(pow, denominator, wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        j = k;
        while (j--) sum = finalise(sum.times(sum), wpr, 1);

        // Check to see if the first 4 rounding digits are [49]999.
        // If so, repeat the summation with a higher precision, otherwise
        // e.g. with precision: 18, rounding: 1
        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
        // `wpr - guard` is the index of first rounding digit.
        if (sd == null) {

          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += 10;
            denominator = pow = t = new Ctor(1);
            i = 0;
            rep++;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
    }
  }


  /*
   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
   * digits.
   *
   *  ln(-n)        = NaN
   *  ln(0)         = -Infinity
   *  ln(-0)        = -Infinity
   *  ln(1)         = 0
   *  ln(Infinity)  = Infinity
   *  ln(-Infinity) = NaN
   *  ln(NaN)       = NaN
   *
   *  ln(n) (n != 1) is non-terminating.
   *
   */
  function naturalLogarithm(y, sd) {
    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
      n = 1,
      guard = 10,
      x = y,
      xd = x.d,
      Ctor = x.constructor,
      rm = Ctor.rounding,
      pr = Ctor.precision;

    // Is x negative or Infinity, NaN, 0 or 1?
    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    Ctor.precision = wpr += guard;
    c = digitsToString(xd);
    c0 = c.charAt(0);

    if (Math.abs(e = x.e) < 1.5e15) {

      // Argument reduction.
      // The series converges faster the closer the argument is to 1, so using
      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
      // later be divided by this number, then separate out the power of 10 using
      // ln(a*10^b) = ln(a) + b*ln(10).

      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
      // max n is 6 (gives 0.7 - 1.3)
      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
        x = x.times(y);
        c = digitsToString(x.d);
        c0 = c.charAt(0);
        n++;
      }

      e = x.e;

      if (c0 > 1) {
        x = new Ctor('0.' + c);
        e++;
      } else {
        x = new Ctor(c0 + '.' + c.slice(1));
      }
    } else {

      // The argument reduction method above may result in overflow if the argument y is a massive
      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
      // function using ln(x*10^e) = ln(x) + e*ln(10).
      t = getLn10(Ctor, wpr + 2, pr).times(e + '');
      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
      Ctor.precision = pr;

      return sd == null ? finalise(x, pr, rm, external = true) : x;
    }

    // x1 is x reduced to a value near 1.
    x1 = x;

    // Taylor series.
    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
    // where x = (y - 1)/(y + 1)    (|x| < 1)
    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
    x2 = finalise(x.times(x), wpr, 1);
    denominator = 3;

    for (;;) {
      numerator = finalise(numerator.times(x2), wpr, 1);
      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        sum = sum.times(2);

        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
        sum = divide(sum, new Ctor(n), wpr, 1);

        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
        // been repeated previously) and the first 4 rounding digits 9999?
        // If so, restart the summation with a higher precision, otherwise
        // e.g. with precision: 12, rounding: 1
        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
        // `wpr - guard` is the index of first rounding digit.
        if (sd == null) {
          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += guard;
            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
            x2 = finalise(x.times(x), wpr, 1);
            denominator = rep = 1;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
      denominator += 2;
    }
  }


  // ±Infinity, NaN.
  function nonFiniteToString(x) {
    // Unsigned.
    return String(x.s * x.s / 0);
  }


  /*
   * Parse the value of a new Decimal `x` from string `str`.
   */
  function parseDecimal(x, str) {
    var e, i, len;

    // Decimal point?
    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

    // Exponential form?
    if ((i = str.search(/e/i)) > 0) {

      // Determine exponent.
      if (e < 0) e = i;
      e += +str.slice(i + 1);
      str = str.substring(0, i);
    } else if (e < 0) {

      // Integer.
      e = str.length;
    }

    // Determine leading zeros.
    for (i = 0; str.charCodeAt(i) === 48; i++);

    // Determine trailing zeros.
    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
    str = str.slice(i, len);

    if (str) {
      len -= i;
      x.e = e = e - i - 1;
      x.d = [];

      // Transform base

      // e is the base 10 exponent.
      // i is where to slice str to get the first word of the digits array.
      i = (e + 1) % LOG_BASE;
      if (e < 0) i += LOG_BASE;

      if (i < len) {
        if (i) x.d.push(+str.slice(0, i));
        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
        str = str.slice(i);
        i = LOG_BASE - str.length;
      } else {
        i -= len;
      }

      for (; i--;) str += '0';
      x.d.push(+str);

      if (external) {

        // Overflow?
        if (x.e > x.constructor.maxE) {

          // Infinity.
          x.d = null;
          x.e = NaN;

        // Underflow?
        } else if (x.e < x.constructor.minE) {

          // Zero.
          x.e = 0;
          x.d = [0];
          // x.constructor.underflow = true;
        } // else x.constructor.underflow = false;
      }
    } else {

      // Zero.
      x.e = 0;
      x.d = [0];
    }

    return x;
  }


  /*
   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
   */
  function parseOther(x, str) {
    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

    if (str.indexOf('_') > -1) {
      str = str.replace(/(\d)_(?=\d)/g, '$1');
      if (isDecimal.test(str)) return parseDecimal(x, str);
    } else if (str === 'Infinity' || str === 'NaN') {
      if (!+str) x.s = NaN;
      x.e = NaN;
      x.d = null;
      return x;
    }

    if (isHex.test(str))  {
      base = 16;
      str = str.toLowerCase();
    } else if (isBinary.test(str))  {
      base = 2;
    } else if (isOctal.test(str))  {
      base = 8;
    } else {
      throw Error(invalidArgument + str);
    }

    // Is there a binary exponent part?
    i = str.search(/p/i);

    if (i > 0) {
      p = +str.slice(i + 1);
      str = str.substring(2, i);
    } else {
      str = str.slice(2);
    }

    // Convert `str` as an integer then divide the result by `base` raised to a power such that the
    // fraction part will be restored.
    i = str.indexOf('.');
    isFloat = i >= 0;
    Ctor = x.constructor;

    if (isFloat) {
      str = str.replace('.', '');
      len = str.length;
      i = len - i;

      // log[10](16) = 1.2041... , log[10](88) = 1.9444....
      divisor = intPow(Ctor, new Ctor(base), i, i * 2);
    }

    xd = convertBase(str, base, BASE);
    xe = xd.length - 1;

    // Remove trailing zeros.
    for (i = xe; xd[i] === 0; --i) xd.pop();
    if (i < 0) return new Ctor(x.s * 0);
    x.e = getBase10Exponent(xd, xe);
    x.d = xd;
    external = false;

    // At what precision to perform the division to ensure exact conversion?
    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
    // Therefore using 4 * the number of digits of str will always be enough.
    if (isFloat) x = divide(x, divisor, len * 4);

    // Multiply by the binary exponent part if present.
    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
    external = true;

    return x;
  }


  /*
   * sin(x) = x - x^3/3! + x^5/5! - ...
   * |x| < pi/2
   *
   */
  function sine(Ctor, x) {
    var k,
      len = x.d.length;

    if (len < 3) {
      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);
    }

    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

    // Estimate the optimum number of times to use the argument reduction.
    k = 1.4 * Math.sqrt(len);
    k = k > 16 ? 16 : k | 0;

    x = x.times(1 / tinyPow(5, k));
    x = taylorSeries(Ctor, 2, x, x);

    // Reverse argument reduction
    var sin2_x,
      d5 = new Ctor(5),
      d16 = new Ctor(16),
      d20 = new Ctor(20);
    for (; k--;) {
      sin2_x = x.times(x);
      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
    }

    return x;
  }


  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
  function taylorSeries(Ctor, n, x, y, isHyperbolic) {
    var j, t, u, x2,
      i = 1,
      pr = Ctor.precision,
      k = Math.ceil(pr / LOG_BASE);

    external = false;
    x2 = x.times(x);
    u = new Ctor(y);

    for (;;) {
      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
      u = isHyperbolic ? y.plus(t) : y.minus(t);
      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
      t = u.plus(y);

      if (t.d[k] !== void 0) {
        for (j = k; t.d[j] === u.d[j] && j--;);
        if (j == -1) break;
      }

      j = u;
      u = y;
      y = t;
      t = j;
      i++;
    }

    external = true;
    t.d.length = k + 1;

    return t;
  }


  // Exponent e must be positive and non-zero.
  function tinyPow(b, e) {
    var n = b;
    while (--e) n *= b;
    return n;
  }


  // Return the absolute value of `x` reduced to less than or equal to half pi.
  function toLessThanHalfPi(Ctor, x) {
    var t,
      isNeg = x.s < 0,
      pi = getPi(Ctor, Ctor.precision, 1),
      halfPi = pi.times(0.5);

    x = x.abs();

    if (x.lte(halfPi)) {
      quadrant = isNeg ? 4 : 1;
      return x;
    }

    t = x.divToInt(pi);

    if (t.isZero()) {
      quadrant = isNeg ? 3 : 2;
    } else {
      x = x.minus(t.times(pi));

      // 0 <= x < pi
      if (x.lte(halfPi)) {
        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
        return x;
      }

      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
    }

    return x.minus(pi).abs();
  }


  /*
   * Return the value of Decimal `x` as a string in base `baseOut`.
   *
   * If the optional `sd` argument is present include a binary exponent suffix.
   */
  function toStringBinary(x, baseOut, sd, rm) {
    var base, e, i, k, len, roundUp, str, xd, y,
      Ctor = x.constructor,
      isExp = sd !== void 0;

    if (isExp) {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    } else {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    }

    if (!x.isFinite()) {
      str = nonFiniteToString(x);
    } else {
      str = finiteToString(x);
      i = str.indexOf('.');

      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
      // minBinaryExponent = floor(decimalExponent * log[2](10))
      // log[2](10) = 3.321928094887362347870319429489390175864

      if (isExp) {
        base = 2;
        if (baseOut == 16) {
          sd = sd * 4 - 3;
        } else if (baseOut == 8) {
          sd = sd * 3 - 2;
        }
      } else {
        base = baseOut;
      }

      // Convert the number as an integer then divide the result by its base raised to a power such
      // that the fraction part will be restored.

      // Non-integer.
      if (i >= 0) {
        str = str.replace('.', '');
        y = new Ctor(1);
        y.e = str.length - i;
        y.d = convertBase(finiteToString(y), 10, base);
        y.e = y.d.length;
      }

      xd = convertBase(str, 10, base);
      e = len = xd.length;

      // Remove trailing zeros.
      for (; xd[--len] == 0;) xd.pop();

      if (!xd[0]) {
        str = isExp ? '0p+0' : '0';
      } else {
        if (i < 0) {
          e--;
        } else {
          x = new Ctor(x);
          x.d = xd;
          x.e = e;
          x = divide(x, y, sd, rm, 0, base);
          xd = x.d;
          e = x.e;
          roundUp = inexact;
        }

        // The rounding digit, i.e. the digit after the digit that may be rounded up.
        i = xd[sd];
        k = base / 2;
        roundUp = roundUp || xd[sd + 1] !== void 0;

        roundUp = rm < 4
          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
            rm === (x.s < 0 ? 8 : 7));

        xd.length = sd;

        if (roundUp) {

          // Rounding up may mean the previous digit has to be rounded up and so on.
          for (; ++xd[--sd] > base - 1;) {
            xd[sd] = 0;
            if (!sd) {
              ++e;
              xd.unshift(1);
            }
          }
        }

        // Determine trailing zeros.
        for (len = xd.length; !xd[len - 1]; --len);

        // E.g. [4, 11, 15] becomes 4bf.
        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

        // Add binary exponent suffix?
        if (isExp) {
          if (len > 1) {
            if (baseOut == 16 || baseOut == 8) {
              i = baseOut == 16 ? 4 : 3;
              for (--len; len % i; len++) str += '0';
              xd = convertBase(str, base, baseOut);
              for (len = xd.length; !xd[len - 1]; --len);

              // xd[0] will always be be 1
              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
            } else {
              str = str.charAt(0) + '.' + str.slice(1);
            }
          }

          str =  str + (e < 0 ? 'p' : 'p+') + e;
        } else if (e < 0) {
          for (; ++e;) str = '0' + str;
          str = '0.' + str;
        } else {
          if (++e > len) for (e -= len; e-- ;) str += '0';
          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
        }
      }

      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
    }

    return x.s < 0 ? '-' + str : str;
  }


  // Does not strip trailing zeros.
  function truncate(arr, len) {
    if (arr.length > len) {
      arr.length = len;
      return true;
    }
  }


  // Decimal methods


  /*
   *  abs
   *  acos
   *  acosh
   *  add
   *  asin
   *  asinh
   *  atan
   *  atanh
   *  atan2
   *  cbrt
   *  ceil
   *  clamp
   *  clone
   *  config
   *  cos
   *  cosh
   *  div
   *  exp
   *  floor
   *  hypot
   *  ln
   *  log
   *  log2
   *  log10
   *  max
   *  min
   *  mod
   *  mul
   *  pow
   *  random
   *  round
   *  set
   *  sign
   *  sin
   *  sinh
   *  sqrt
   *  sub
   *  sum
   *  tan
   *  tanh
   *  trunc
   */


  /*
   * Return a new Decimal whose value is the absolute value of `x`.
   *
   * x {number|string|Decimal}
   *
   */
  function abs(x) {
    return new this(x).abs();
  }


  /*
   * Return a new Decimal whose value is the arccosine in radians of `x`.
   *
   * x {number|string|Decimal}
   *
   */
  function acos(x) {
    return new this(x).acos();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function acosh(x) {
    return new this(x).acosh();
  }


  /*
   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function add(x, y) {
    return new this(x).plus(y);
  }


  /*
   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function asin(x) {
    return new this(x).asin();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function asinh(x) {
    return new this(x).asinh();
  }


  /*
   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function atan(x) {
    return new this(x).atan();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function atanh(x) {
    return new this(x).atanh();
  }


  /*
   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi, pi]
   *
   * y {number|string|Decimal} The y-coordinate.
   * x {number|string|Decimal} The x-coordinate.
   *
   * atan2(±0, -0)               = ±pi
   * atan2(±0, +0)               = ±0
   * atan2(±0, -x)               = ±pi for x > 0
   * atan2(±0, x)                = ±0 for x > 0
   * atan2(-y, ±0)               = -pi/2 for y > 0
   * atan2(y, ±0)                = pi/2 for y > 0
   * atan2(±y, -Infinity)        = ±pi for finite y > 0
   * atan2(±y, +Infinity)        = ±0 for finite y > 0
   * atan2(±Infinity, x)         = ±pi/2 for finite x
   * atan2(±Infinity, -Infinity) = ±3*pi/4
   * atan2(±Infinity, +Infinity) = ±pi/4
   * atan2(NaN, x) = NaN
   * atan2(y, NaN) = NaN
   *
   */
  function atan2(y, x) {
    y = new this(y);
    x = new this(x);
    var r,
      pr = this.precision,
      rm = this.rounding,
      wpr = pr + 4;

    // Either NaN
    if (!y.s || !x.s) {
      r = new this(NaN);

    // Both ±Infinity
    } else if (!y.d && !x.d) {
      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
      r.s = y.s;

    // x is ±Infinity or y is ±0
    } else if (!x.d || y.isZero()) {
      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
      r.s = y.s;

    // y is ±Infinity or x is ±0
    } else if (!y.d || x.isZero()) {
      r = getPi(this, wpr, 1).times(0.5);
      r.s = y.s;

    // Both non-zero and finite
    } else if (x.s < 0) {
      this.precision = wpr;
      this.rounding = 1;
      r = this.atan(divide(y, x, wpr, 1));
      x = getPi(this, wpr, 1);
      this.precision = pr;
      this.rounding = rm;
      r = y.s < 0 ? r.minus(x) : r.plus(x);
    } else {
      r = this.atan(divide(y, x, wpr, 1));
    }

    return r;
  }


  /*
   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function cbrt(x) {
    return new this(x).cbrt();
  }


  /*
   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
   *
   * x {number|string|Decimal}
   *
   */
  function ceil(x) {
    return finalise(x = new this(x), x.e + 1, 2);
  }


  /*
   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.
   *
   * x {number|string|Decimal}
   * min {number|string|Decimal}
   * max {number|string|Decimal}
   *
   */
  function clamp(x, min, max) {
    return new this(x).clamp(min, max);
  }


  /*
   * Configure global settings for a Decimal constructor.
   *
   * `obj` is an object with one or more of the following properties,
   *
   *   precision  {number}
   *   rounding   {number}
   *   toExpNeg   {number}
   *   toExpPos   {number}
   *   maxE       {number}
   *   minE       {number}
   *   modulo     {number}
   *   crypto     {boolean|number}
   *   defaults   {true}
   *
   * E.g. Decimal.config({ precision: 20, rounding: 4 })
   *
   */
  function config(obj) {
    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
    var i, p, v,
      useDefaults = obj.defaults === true,
      ps = [
        'precision', 1, MAX_DIGITS,
        'rounding', 0, 8,
        'toExpNeg', -EXP_LIMIT, 0,
        'toExpPos', 0, EXP_LIMIT,
        'maxE', 0, EXP_LIMIT,
        'minE', -EXP_LIMIT, 0,
        'modulo', 0, 9
      ];

    for (i = 0; i < ps.length; i += 3) {
      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
      if ((v = obj[p]) !== void 0) {
        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
        else throw Error(invalidArgument + p + ': ' + v);
      }
    }

    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
    if ((v = obj[p]) !== void 0) {
      if (v === true || v === false || v === 0 || v === 1) {
        if (v) {
          if (typeof crypto != 'undefined' && crypto &&
            (crypto.getRandomValues || crypto.randomBytes)) {
            this[p] = true;
          } else {
            throw Error(cryptoUnavailable);
          }
        } else {
          this[p] = false;
        }
      } else {
        throw Error(invalidArgument + p + ': ' + v);
      }
    }

    return this;
  }


  /*
   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function cos(x) {
    return new this(x).cos();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function cosh(x) {
    return new this(x).cosh();
  }


  /*
   * Create and return a Decimal constructor with the same configuration properties as this Decimal
   * constructor.
   *
   */
  function clone(obj) {
    var i, p, ps;

    /*
     * The Decimal constructor and exported function.
     * Return a new Decimal instance.
     *
     * v {number|string|Decimal} A numeric value.
     *
     */
    function Decimal(v) {
      var e, i, t,
        x = this;

      // Decimal called without new.
      if (!(x instanceof Decimal)) return new Decimal(v);

      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
      // which points to Object.
      x.constructor = Decimal;

      // Duplicate.
      if (isDecimalInstance(v)) {
        x.s = v.s;

        if (external) {
          if (!v.d || v.e > Decimal.maxE) {

            // Infinity.
            x.e = NaN;
            x.d = null;
          } else if (v.e < Decimal.minE) {

            // Zero.
            x.e = 0;
            x.d = [0];
          } else {
            x.e = v.e;
            x.d = v.d.slice();
          }
        } else {
          x.e = v.e;
          x.d = v.d ? v.d.slice() : v.d;
        }

        return;
      }

      t = typeof v;

      if (t === 'number') {
        if (v === 0) {
          x.s = 1 / v < 0 ? -1 : 1;
          x.e = 0;
          x.d = [0];
          return;
        }

        if (v < 0) {
          v = -v;
          x.s = -1;
        } else {
          x.s = 1;
        }

        // Fast path for small integers.
        if (v === ~~v && v < 1e7) {
          for (e = 0, i = v; i >= 10; i /= 10) e++;

          if (external) {
            if (e > Decimal.maxE) {
              x.e = NaN;
              x.d = null;
            } else if (e < Decimal.minE) {
              x.e = 0;
              x.d = [0];
            } else {
              x.e = e;
              x.d = [v];
            }
          } else {
            x.e = e;
            x.d = [v];
          }

          return;

        // Infinity, NaN.
        } else if (v * 0 !== 0) {
          if (!v) x.s = NaN;
          x.e = NaN;
          x.d = null;
          return;
        }

        return parseDecimal(x, v.toString());

      } else if (t !== 'string') {
        throw Error(invalidArgument + v);
      }

      // Minus sign?
      if ((i = v.charCodeAt(0)) === 45) {
        v = v.slice(1);
        x.s = -1;
      } else {
        // Plus sign?
        if (i === 43) v = v.slice(1);
        x.s = 1;
      }

      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
    }

    Decimal.prototype = P;

    Decimal.ROUND_UP = 0;
    Decimal.ROUND_DOWN = 1;
    Decimal.ROUND_CEIL = 2;
    Decimal.ROUND_FLOOR = 3;
    Decimal.ROUND_HALF_UP = 4;
    Decimal.ROUND_HALF_DOWN = 5;
    Decimal.ROUND_HALF_EVEN = 6;
    Decimal.ROUND_HALF_CEIL = 7;
    Decimal.ROUND_HALF_FLOOR = 8;
    Decimal.EUCLID = 9;

    Decimal.config = Decimal.set = config;
    Decimal.clone = clone;
    Decimal.isDecimal = isDecimalInstance;

    Decimal.abs = abs;
    Decimal.acos = acos;
    Decimal.acosh = acosh;        // ES6
    Decimal.add = add;
    Decimal.asin = asin;
    Decimal.asinh = asinh;        // ES6
    Decimal.atan = atan;
    Decimal.atanh = atanh;        // ES6
    Decimal.atan2 = atan2;
    Decimal.cbrt = cbrt;          // ES6
    Decimal.ceil = ceil;
    Decimal.clamp = clamp;
    Decimal.cos = cos;
    Decimal.cosh = cosh;          // ES6
    Decimal.div = div;
    Decimal.exp = exp;
    Decimal.floor = floor;
    Decimal.hypot = hypot;        // ES6
    Decimal.ln = ln;
    Decimal.log = log;
    Decimal.log10 = log10;        // ES6
    Decimal.log2 = log2;          // ES6
    Decimal.max = max;
    Decimal.min = min;
    Decimal.mod = mod;
    Decimal.mul = mul;
    Decimal.pow = pow;
    Decimal.random = random;
    Decimal.round = round;
    Decimal.sign = sign;          // ES6
    Decimal.sin = sin;
    Decimal.sinh = sinh;          // ES6
    Decimal.sqrt = sqrt;
    Decimal.sub = sub;
    Decimal.sum = sum;
    Decimal.tan = tan;
    Decimal.tanh = tanh;          // ES6
    Decimal.trunc = trunc;        // ES6

    if (obj === void 0) obj = {};
    if (obj) {
      if (obj.defaults !== true) {
        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
      }
    }

    Decimal.config(obj);

    return Decimal;
  }


  /*
   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function div(x, y) {
    return new this(x).div(y);
  }


  /*
   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The power to which to raise the base of the natural log.
   *
   */
  function exp(x) {
    return new this(x).exp();
  }


  /*
   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
   *
   * x {number|string|Decimal}
   *
   */
  function floor(x) {
    return finalise(x = new this(x), x.e + 1, 3);
  }


  /*
   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
   *
   * arguments {number|string|Decimal}
   *
   */
  function hypot() {
    var i, n,
      t = new this(0);

    external = false;

    for (i = 0; i < arguments.length;) {
      n = new this(arguments[i++]);
      if (!n.d) {
        if (n.s) {
          external = true;
          return new this(1 / 0);
        }
        t = n;
      } else if (t.d) {
        t = t.plus(n.times(n));
      }
    }

    external = true;

    return t.sqrt();
  }


  /*
   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
   * otherwise return false.
   *
   */
  function isDecimalInstance(obj) {
    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;
  }


  /*
   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function ln(x) {
    return new this(x).ln();
  }


  /*
   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * log[y](x)
   *
   * x {number|string|Decimal} The argument of the logarithm.
   * y {number|string|Decimal} The base of the logarithm.
   *
   */
  function log(x, y) {
    return new this(x).log(y);
  }


  /*
   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function log2(x) {
    return new this(x).log(2);
  }


  /*
   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function log10(x) {
    return new this(x).log(10);
  }


  /*
   * Return a new Decimal whose value is the maximum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
  function max() {
    return maxOrMin(this, arguments, 'lt');
  }


  /*
   * Return a new Decimal whose value is the minimum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
  function min() {
    return maxOrMin(this, arguments, 'gt');
  }


  /*
   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function mod(x, y) {
    return new this(x).mod(y);
  }


  /*
   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function mul(x, y) {
    return new this(x).mul(y);
  }


  /*
   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The base.
   * y {number|string|Decimal} The exponent.
   *
   */
  function pow(x, y) {
    return new this(x).pow(y);
  }


  /*
   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
   * are produced).
   *
   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
   *
   */
  function random(sd) {
    var d, e, k, n,
      i = 0,
      r = new this(1),
      rd = [];

    if (sd === void 0) sd = this.precision;
    else checkInt32(sd, 1, MAX_DIGITS);

    k = Math.ceil(sd / LOG_BASE);

    if (!this.crypto) {
      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

    // Browsers supporting crypto.getRandomValues.
    } else if (crypto.getRandomValues) {
      d = crypto.getRandomValues(new Uint32Array(k));

      for (; i < k;) {
        n = d[i];

        // 0 <= n < 4294967296
        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
        if (n >= 4.29e9) {
          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
        } else {

          // 0 <= n <= 4289999999
          // 0 <= (n % 1e7) <= 9999999
          rd[i++] = n % 1e7;
        }
      }

    // Node.js supporting crypto.randomBytes.
    } else if (crypto.randomBytes) {

      // buffer
      d = crypto.randomBytes(k *= 4);

      for (; i < k;) {

        // 0 <= n < 2147483648
        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
        if (n >= 2.14e9) {
          crypto.randomBytes(4).copy(d, i);
        } else {

          // 0 <= n <= 2139999999
          // 0 <= (n % 1e7) <= 9999999
          rd.push(n % 1e7);
          i += 4;
        }
      }

      i = k / 4;
    } else {
      throw Error(cryptoUnavailable);
    }

    k = rd[--i];
    sd %= LOG_BASE;

    // Convert trailing digits to zeros according to sd.
    if (k && sd) {
      n = mathpow(10, LOG_BASE - sd);
      rd[i] = (k / n | 0) * n;
    }

    // Remove trailing words which are zero.
    for (; rd[i] === 0; i--) rd.pop();

    // Zero?
    if (i < 0) {
      e = 0;
      rd = [0];
    } else {
      e = -1;

      // Remove leading words which are zero and adjust exponent accordingly.
      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

      // Count the digits of the first word of rd to determine leading zeros.
      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

      // Adjust the exponent for leading zeros of the first word of rd.
      if (k < LOG_BASE) e -= LOG_BASE - k;
    }

    r.e = e;
    r.d = rd;

    return r;
  }


  /*
   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
   *
   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
   *
   * x {number|string|Decimal}
   *
   */
  function round(x) {
    return finalise(x = new this(x), x.e + 1, this.rounding);
  }


  /*
   * Return
   *   1    if x > 0,
   *  -1    if x < 0,
   *   0    if x is 0,
   *  -0    if x is -0,
   *   NaN  otherwise
   *
   * x {number|string|Decimal}
   *
   */
  function sign(x) {
    x = new this(x);
    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
  }


  /*
   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function sin(x) {
    return new this(x).sin();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function sinh(x) {
    return new this(x).sinh();
  }


  /*
   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function sqrt(x) {
    return new this(x).sqrt();
  }


  /*
   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function sub(x, y) {
    return new this(x).sub(y);
  }


  /*
   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * Only the result is rounded, not the intermediate calculations.
   *
   * arguments {number|string|Decimal}
   *
   */
  function sum() {
    var i = 0,
      args = arguments,
      x = new this(args[i]);

    external = false;
    for (; x.s && ++i < args.length;) x = x.plus(args[i]);
    external = true;

    return finalise(x, this.precision, this.rounding);
  }


  /*
   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function tan(x) {
    return new this(x).tan();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function tanh(x) {
    return new this(x).tanh();
  }


  /*
   * Return a new Decimal whose value is `x` truncated to an integer.
   *
   * x {number|string|Decimal}
   *
   */
  function trunc(x) {
    return finalise(x = new this(x), x.e + 1, 1);
  }


  // Create and configure initial Decimal constructor.
  Decimal = clone(DEFAULTS);
  Decimal.prototype.constructor = Decimal;
  Decimal['default'] = Decimal.Decimal = Decimal;

  // Create the internal constants from their string values.
  LN10 = new Decimal(LN10);
  PI = new Decimal(PI);


  // Export.


  // AMD.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return Decimal;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  // Node and other environments that support module.exports.
  } else {}
})(this);


/***/ }),

/***/ 2116:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(527));
	else {}
})((typeof self !== 'undefined' ? self : this), function(__WEBPACK_EXTERNAL_MODULE__771__) {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 771:
/***/ (function(module) {

module.exports = __WEBPACK_EXTERNAL_MODULE__771__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_940__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_940__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__nested_webpack_require_940__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__nested_webpack_require_940__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__nested_webpack_require_940__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__nested_webpack_require_940__.o(definition, key) && !__nested_webpack_require_940__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__nested_webpack_require_940__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {

// EXPORTS
__nested_webpack_require_940__.d(__webpack_exports__, {
  "default": function() { return /* binding */ auto_render; }
});

// EXTERNAL MODULE: external "katex"
var external_katex_ = __nested_webpack_require_940__(771);
var external_katex_default = /*#__PURE__*/__nested_webpack_require_940__.n(external_katex_);
;// CONCATENATED MODULE: ./contrib/auto-render/splitAtDelimiters.js
/* eslint no-constant-condition:0 */
var findEndOfMath = function findEndOfMath(delimiter, text, startIndex) {
  // Adapted from
  // https://github.com/Khan/perseus/blob/master/src/perseus-markdown.jsx
  var index = startIndex;
  var braceLevel = 0;
  var delimLength = delimiter.length;

  while (index < text.length) {
    var character = text[index];

    if (braceLevel <= 0 && text.slice(index, index + delimLength) === delimiter) {
      return index;
    } else if (character === "\\") {
      index++;
    } else if (character === "{") {
      braceLevel++;
    } else if (character === "}") {
      braceLevel--;
    }

    index++;
  }

  return -1;
};

var escapeRegex = function escapeRegex(string) {
  return string.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
};

var amsRegex = /^\\begin{/;

var splitAtDelimiters = function splitAtDelimiters(text, delimiters) {
  var index;
  var data = [];
  var regexLeft = new RegExp("(" + delimiters.map(function (x) {
    return escapeRegex(x.left);
  }).join("|") + ")");

  while (true) {
    index = text.search(regexLeft);

    if (index === -1) {
      break;
    }

    if (index > 0) {
      data.push({
        type: "text",
        data: text.slice(0, index)
      });
      text = text.slice(index); // now text starts with delimiter
    } // ... so this always succeeds:


    var i = delimiters.findIndex(function (delim) {
      return text.startsWith(delim.left);
    });
    index = findEndOfMath(delimiters[i].right, text, delimiters[i].left.length);

    if (index === -1) {
      break;
    }

    var rawData = text.slice(0, index + delimiters[i].right.length);
    var math = amsRegex.test(rawData) ? rawData : text.slice(delimiters[i].left.length, index);
    data.push({
      type: "math",
      data: math,
      rawData: rawData,
      display: delimiters[i].display
    });
    text = text.slice(index + delimiters[i].right.length);
  }

  if (text !== "") {
    data.push({
      type: "text",
      data: text
    });
  }

  return data;
};

/* harmony default export */ var auto_render_splitAtDelimiters = (splitAtDelimiters);
;// CONCATENATED MODULE: ./contrib/auto-render/auto-render.js
/* eslint no-console:0 */


/* Note: optionsCopy is mutated by this method. If it is ever exposed in the
 * API, we should copy it before mutating.
 */

var renderMathInText = function renderMathInText(text, optionsCopy) {
  var data = auto_render_splitAtDelimiters(text, optionsCopy.delimiters);

  if (data.length === 1 && data[0].type === 'text') {
    // There is no formula in the text.
    // Let's return null which means there is no need to replace
    // the current text node with a new one.
    return null;
  }

  var fragment = document.createDocumentFragment();

  for (var i = 0; i < data.length; i++) {
    if (data[i].type === "text") {
      fragment.appendChild(document.createTextNode(data[i].data));
    } else {
      var span = document.createElement("span");
      var math = data[i].data; // Override any display mode defined in the settings with that
      // defined by the text itself

      optionsCopy.displayMode = data[i].display;

      try {
        if (optionsCopy.preProcess) {
          math = optionsCopy.preProcess(math);
        }

        external_katex_default().render(math, span, optionsCopy);
      } catch (e) {
        if (!(e instanceof (external_katex_default()).ParseError)) {
          throw e;
        }

        optionsCopy.errorCallback("KaTeX auto-render: Failed to parse `" + data[i].data + "` with ", e);
        fragment.appendChild(document.createTextNode(data[i].rawData));
        continue;
      }

      fragment.appendChild(span);
    }
  }

  return fragment;
};

var renderElem = function renderElem(elem, optionsCopy) {
  for (var i = 0; i < elem.childNodes.length; i++) {
    var childNode = elem.childNodes[i];

    if (childNode.nodeType === 3) {
      // Text node
      var frag = renderMathInText(childNode.textContent, optionsCopy);

      if (frag) {
        i += frag.childNodes.length - 1;
        elem.replaceChild(frag, childNode);
      }
    } else if (childNode.nodeType === 1) {
      (function () {
        // Element node
        var className = ' ' + childNode.className + ' ';
        var shouldRender = optionsCopy.ignoredTags.indexOf(childNode.nodeName.toLowerCase()) === -1 && optionsCopy.ignoredClasses.every(function (x) {
          return className.indexOf(' ' + x + ' ') === -1;
        });

        if (shouldRender) {
          renderElem(childNode, optionsCopy);
        }
      })();
    } // Otherwise, it's something else, and ignore it.

  }
};

var renderMathInElement = function renderMathInElement(elem, options) {
  if (!elem) {
    throw new Error("No element provided to render");
  }

  var optionsCopy = {}; // Object.assign(optionsCopy, option)

  for (var option in options) {
    if (options.hasOwnProperty(option)) {
      optionsCopy[option] = options[option];
    }
  } // default options


  optionsCopy.delimiters = optionsCopy.delimiters || [{
    left: "$$",
    right: "$$",
    display: true
  }, {
    left: "\\(",
    right: "\\)",
    display: false
  }, // LaTeX uses $…$, but it ruins the display of normal `$` in text:
  // {left: "$", right: "$", display: false},
  // $ must come after $$
  // Render AMS environments even if outside $$…$$ delimiters.
  {
    left: "\\begin{equation}",
    right: "\\end{equation}",
    display: true
  }, {
    left: "\\begin{align}",
    right: "\\end{align}",
    display: true
  }, {
    left: "\\begin{alignat}",
    right: "\\end{alignat}",
    display: true
  }, {
    left: "\\begin{gather}",
    right: "\\end{gather}",
    display: true
  }, {
    left: "\\begin{CD}",
    right: "\\end{CD}",
    display: true
  }, {
    left: "\\[",
    right: "\\]",
    display: true
  }];
  optionsCopy.ignoredTags = optionsCopy.ignoredTags || ["script", "noscript", "style", "textarea", "pre", "code", "option"];
  optionsCopy.ignoredClasses = optionsCopy.ignoredClasses || [];
  optionsCopy.errorCallback = optionsCopy.errorCallback || console.error; // Enable sharing of global macros defined via `\gdef` between different
  // math elements within a single call to `renderMathInElement`.

  optionsCopy.macros = optionsCopy.macros || {};
  renderElem(elem, optionsCopy);
};

/* harmony default export */ var auto_render = (renderMathInElement);
}();
__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ 527:
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})((typeof self !== 'undefined' ? self : this), function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __nested_webpack_require_514__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__nested_webpack_require_514__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__nested_webpack_require_514__.o(definition, key) && !__nested_webpack_require_514__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__nested_webpack_require_514__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};

// EXPORTS
__nested_webpack_require_514__.d(__webpack_exports__, {
  "default": function() { return /* binding */ katex_webpack; }
});

;// CONCATENATED MODULE: ./src/ParseError.js


/**
 * This is the ParseError class, which is the main error thrown by KaTeX
 * functions when something has gone wrong. This is used to distinguish internal
 * errors from errors in the expression that the user provided.
 *
 * If possible, a caller should provide a Token or ParseNode with information
 * about where in the source string the problem occurred.
 */
var ParseError = // Error position based on passed-in Token or ParseNode.
function ParseError(message, // The error message
token // An object providing position information
) {
  this.position = void 0;
  var error = "KaTeX parse error: " + message;
  var start;
  var loc = token && token.loc;

  if (loc && loc.start <= loc.end) {
    // If we have the input and a position, make the error a bit fancier
    // Get the input
    var input = loc.lexer.input; // Prepend some information

    start = loc.start;
    var end = loc.end;

    if (start === input.length) {
      error += " at end of input: ";
    } else {
      error += " at position " + (start + 1) + ": ";
    } // Underline token in question using combining underscores


    var underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332"); // Extract some context from the input and add it to the error

    var left;

    if (start > 15) {
      left = "…" + input.slice(start - 15, start);
    } else {
      left = input.slice(0, start);
    }

    var right;

    if (end + 15 < input.length) {
      right = input.slice(end, end + 15) + "…";
    } else {
      right = input.slice(end);
    }

    error += left + underlined + right;
  } // Some hackery to make ParseError a prototype of Error
  // See http://stackoverflow.com/a/8460753


  var self = new Error(error);
  self.name = "ParseError"; // $FlowFixMe

  self.__proto__ = ParseError.prototype; // $FlowFixMe

  self.position = start;
  return self;
}; // $FlowFixMe More hackery


ParseError.prototype.__proto__ = Error.prototype;
/* harmony default export */ var src_ParseError = (ParseError);
;// CONCATENATED MODULE: ./src/utils.js
/**
 * This file contains a list of utility functions which are useful in other
 * files.
 */

/**
 * Return whether an element is contained in a list
 */
var contains = function contains(list, elem) {
  return list.indexOf(elem) !== -1;
};
/**
 * Provide a default value if a setting is undefined
 * NOTE: Couldn't use `T` as the output type due to facebook/flow#5022.
 */


var deflt = function deflt(setting, defaultIfUndefined) {
  return setting === undefined ? defaultIfUndefined : setting;
}; // hyphenate and escape adapted from Facebook's React under Apache 2 license


var uppercase = /([A-Z])/g;

var hyphenate = function hyphenate(str) {
  return str.replace(uppercase, "-$1").toLowerCase();
};

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};
var ESCAPE_REGEX = /[&><"']/g;
/**
 * Escapes text to prevent scripting attacks.
 */

function utils_escape(text) {
  return String(text).replace(ESCAPE_REGEX, function (match) {
    return ESCAPE_LOOKUP[match];
  });
}
/**
 * Sometimes we want to pull out the innermost element of a group. In most
 * cases, this will just be the group itself, but when ordgroups and colors have
 * a single element, we want to pull that out.
 */


var getBaseElem = function getBaseElem(group) {
  if (group.type === "ordgroup") {
    if (group.body.length === 1) {
      return getBaseElem(group.body[0]);
    } else {
      return group;
    }
  } else if (group.type === "color") {
    if (group.body.length === 1) {
      return getBaseElem(group.body[0]);
    } else {
      return group;
    }
  } else if (group.type === "font") {
    return getBaseElem(group.body);
  } else {
    return group;
  }
};
/**
 * TeXbook algorithms often reference "character boxes", which are simply groups
 * with a single character in them. To decide if something is a character box,
 * we find its innermost group, and see if it is a single character.
 */


var isCharacterBox = function isCharacterBox(group) {
  var baseElem = getBaseElem(group); // These are all they types of groups which hold single characters

  return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "atom";
};

var assert = function assert(value) {
  if (!value) {
    throw new Error('Expected non-null, but got ' + String(value));
  }

  return value;
};
/**
 * Return the protocol of a URL, or "_relative" if the URL does not specify a
 * protocol (and thus is relative).
 */

var protocolFromUrl = function protocolFromUrl(url) {
  var protocol = /^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(url);
  return protocol != null ? protocol[1] : "_relative";
};
/* harmony default export */ var utils = ({
  contains: contains,
  deflt: deflt,
  escape: utils_escape,
  hyphenate: hyphenate,
  getBaseElem: getBaseElem,
  isCharacterBox: isCharacterBox,
  protocolFromUrl: protocolFromUrl
});
;// CONCATENATED MODULE: ./src/Settings.js
/* eslint no-console:0 */

/**
 * This is a module for storing settings passed into KaTeX. It correctly handles
 * default settings.
 */




/**
 * The main Settings object
 *
 * The current options stored are:
 *  - displayMode: Whether the expression should be typeset as inline math
 *                 (false, the default), meaning that the math starts in
 *                 \textstyle and is placed in an inline-block); or as display
 *                 math (true), meaning that the math starts in \displaystyle
 *                 and is placed in a block with vertical margin.
 */
var Settings = /*#__PURE__*/function () {
  function Settings(options) {
    this.displayMode = void 0;
    this.output = void 0;
    this.leqno = void 0;
    this.fleqn = void 0;
    this.throwOnError = void 0;
    this.errorColor = void 0;
    this.macros = void 0;
    this.minRuleThickness = void 0;
    this.colorIsTextColor = void 0;
    this.strict = void 0;
    this.trust = void 0;
    this.maxSize = void 0;
    this.maxExpand = void 0;
    this.globalGroup = void 0;
    // allow null options
    options = options || {};
    this.displayMode = utils.deflt(options.displayMode, false);
    this.output = utils.deflt(options.output, "htmlAndMathml");
    this.leqno = utils.deflt(options.leqno, false);
    this.fleqn = utils.deflt(options.fleqn, false);
    this.throwOnError = utils.deflt(options.throwOnError, true);
    this.errorColor = utils.deflt(options.errorColor, "#cc0000");
    this.macros = options.macros || {};
    this.minRuleThickness = Math.max(0, utils.deflt(options.minRuleThickness, 0));
    this.colorIsTextColor = utils.deflt(options.colorIsTextColor, false);
    this.strict = utils.deflt(options.strict, "warn");
    this.trust = utils.deflt(options.trust, false);
    this.maxSize = Math.max(0, utils.deflt(options.maxSize, Infinity));
    this.maxExpand = Math.max(0, utils.deflt(options.maxExpand, 1000));
    this.globalGroup = utils.deflt(options.globalGroup, false);
  }
  /**
   * Report nonstrict (non-LaTeX-compatible) input.
   * Can safely not be called if `this.strict` is false in JavaScript.
   */


  var _proto = Settings.prototype;

  _proto.reportNonstrict = function reportNonstrict(errorCode, errorMsg, token) {
    var strict = this.strict;

    if (typeof strict === "function") {
      // Allow return value of strict function to be boolean or string
      // (or null/undefined, meaning no further processing).
      strict = strict(errorCode, errorMsg, token);
    }

    if (!strict || strict === "ignore") {
      return;
    } else if (strict === true || strict === "error") {
      throw new src_ParseError("LaTeX-incompatible input and strict mode is set to 'error': " + (errorMsg + " [" + errorCode + "]"), token);
    } else if (strict === "warn") {
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
    } else {
      // won't happen in type-safe code
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
    }
  }
  /**
   * Check whether to apply strict (LaTeX-adhering) behavior for unusual
   * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
   * instead, "error" translates to a return value of `true`, while "ignore"
   * translates to a return value of `false`.  May still print a warning:
   * "warn" prints a warning and returns `false`.
   * This is for the second category of `errorCode`s listed in the README.
   */
  ;

  _proto.useStrictBehavior = function useStrictBehavior(errorCode, errorMsg, token) {
    var strict = this.strict;

    if (typeof strict === "function") {
      // Allow return value of strict function to be boolean or string
      // (or null/undefined, meaning no further processing).
      // But catch any exceptions thrown by function, treating them
      // like "error".
      try {
        strict = strict(errorCode, errorMsg, token);
      } catch (error) {
        strict = "error";
      }
    }

    if (!strict || strict === "ignore") {
      return false;
    } else if (strict === true || strict === "error") {
      return true;
    } else if (strict === "warn") {
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
      return false;
    } else {
      // won't happen in type-safe code
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
      return false;
    }
  }
  /**
   * Check whether to test potentially dangerous input, and return
   * `true` (trusted) or `false` (untrusted).  The sole argument `context`
   * should be an object with `command` field specifying the relevant LaTeX
   * command (as a string starting with `\`), and any other arguments, etc.
   * If `context` has a `url` field, a `protocol` field will automatically
   * get added by this function (changing the specified object).
   */
  ;

  _proto.isTrusted = function isTrusted(context) {
    if (context.url && !context.protocol) {
      context.protocol = utils.protocolFromUrl(context.url);
    }

    var trust = typeof this.trust === "function" ? this.trust(context) : this.trust;
    return Boolean(trust);
  };

  return Settings;
}();


;// CONCATENATED MODULE: ./src/Style.js
/**
 * This file contains information and classes for the various kinds of styles
 * used in TeX. It provides a generic `Style` class, which holds information
 * about a specific style. It then provides instances of all the different kinds
 * of styles possible, and provides functions to move between them and get
 * information about them.
 */

/**
 * The main style class. Contains a unique id for the style, a size (which is
 * the same for cramped and uncramped version of a style), and a cramped flag.
 */
var Style = /*#__PURE__*/function () {
  function Style(id, size, cramped) {
    this.id = void 0;
    this.size = void 0;
    this.cramped = void 0;
    this.id = id;
    this.size = size;
    this.cramped = cramped;
  }
  /**
   * Get the style of a superscript given a base in the current style.
   */


  var _proto = Style.prototype;

  _proto.sup = function sup() {
    return styles[_sup[this.id]];
  }
  /**
   * Get the style of a subscript given a base in the current style.
   */
  ;

  _proto.sub = function sub() {
    return styles[_sub[this.id]];
  }
  /**
   * Get the style of a fraction numerator given the fraction in the current
   * style.
   */
  ;

  _proto.fracNum = function fracNum() {
    return styles[_fracNum[this.id]];
  }
  /**
   * Get the style of a fraction denominator given the fraction in the current
   * style.
   */
  ;

  _proto.fracDen = function fracDen() {
    return styles[_fracDen[this.id]];
  }
  /**
   * Get the cramped version of a style (in particular, cramping a cramped style
   * doesn't change the style).
   */
  ;

  _proto.cramp = function cramp() {
    return styles[_cramp[this.id]];
  }
  /**
   * Get a text or display version of this style.
   */
  ;

  _proto.text = function text() {
    return styles[_text[this.id]];
  }
  /**
   * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
   */
  ;

  _proto.isTight = function isTight() {
    return this.size >= 2;
  };

  return Style;
}(); // Export an interface for type checking, but don't expose the implementation.
// This way, no more styles can be generated.


// IDs of the different styles
var D = 0;
var Dc = 1;
var T = 2;
var Tc = 3;
var S = 4;
var Sc = 5;
var SS = 6;
var SSc = 7; // Instances of the different styles

var styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)]; // Lookup tables for switching from one style to another

var _sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
var _sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
var _fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
var _fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
var _cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
var _text = [D, Dc, T, Tc, T, Tc, T, Tc]; // We only export some of the styles.

/* harmony default export */ var src_Style = ({
  DISPLAY: styles[D],
  TEXT: styles[T],
  SCRIPT: styles[S],
  SCRIPTSCRIPT: styles[SS]
});
;// CONCATENATED MODULE: ./src/unicodeScripts.js
/*
 * This file defines the Unicode scripts and script families that we
 * support. To add new scripts or families, just add a new entry to the
 * scriptData array below. Adding scripts to the scriptData array allows
 * characters from that script to appear in \text{} environments.
 */

/**
 * Each script or script family has a name and an array of blocks.
 * Each block is an array of two numbers which specify the start and
 * end points (inclusive) of a block of Unicode codepoints.
 */

/**
 * Unicode block data for the families of scripts we support in \text{}.
 * Scripts only need to appear here if they do not have font metrics.
 */
var scriptData = [{
  // Latin characters beyond the Latin-1 characters we have metrics for.
  // Needed for Czech, Hungarian and Turkish text, for example.
  name: 'latin',
  blocks: [[0x0100, 0x024f], // Latin Extended-A and Latin Extended-B
  [0x0300, 0x036f] // Combining Diacritical marks
  ]
}, {
  // The Cyrillic script used by Russian and related languages.
  // A Cyrillic subset used to be supported as explicitly defined
  // symbols in symbols.js
  name: 'cyrillic',
  blocks: [[0x0400, 0x04ff]]
}, {
  // Armenian
  name: 'armenian',
  blocks: [[0x0530, 0x058F]]
}, {
  // The Brahmic scripts of South and Southeast Asia
  // Devanagari (0900–097F)
  // Bengali (0980–09FF)
  // Gurmukhi (0A00–0A7F)
  // Gujarati (0A80–0AFF)
  // Oriya (0B00–0B7F)
  // Tamil (0B80–0BFF)
  // Telugu (0C00–0C7F)
  // Kannada (0C80–0CFF)
  // Malayalam (0D00–0D7F)
  // Sinhala (0D80–0DFF)
  // Thai (0E00–0E7F)
  // Lao (0E80–0EFF)
  // Tibetan (0F00–0FFF)
  // Myanmar (1000–109F)
  name: 'brahmic',
  blocks: [[0x0900, 0x109F]]
}, {
  name: 'georgian',
  blocks: [[0x10A0, 0x10ff]]
}, {
  // Chinese and Japanese.
  // The "k" in cjk is for Korean, but we've separated Korean out
  name: "cjk",
  blocks: [[0x3000, 0x30FF], // CJK symbols and punctuation, Hiragana, Katakana
  [0x4E00, 0x9FAF], // CJK ideograms
  [0xFF00, 0xFF60] // Fullwidth punctuation
  // TODO: add halfwidth Katakana and Romanji glyphs
  ]
}, {
  // Korean
  name: 'hangul',
  blocks: [[0xAC00, 0xD7AF]]
}];
/**
 * Given a codepoint, return the name of the script or script family
 * it is from, or null if it is not part of a known block
 */

function scriptFromCodepoint(codepoint) {
  for (var i = 0; i < scriptData.length; i++) {
    var script = scriptData[i];

    for (var _i = 0; _i < script.blocks.length; _i++) {
      var block = script.blocks[_i];

      if (codepoint >= block[0] && codepoint <= block[1]) {
        return script.name;
      }
    }
  }

  return null;
}
/**
 * A flattened version of all the supported blocks in a single array.
 * This is an optimization to make supportedCodepoint() fast.
 */

var allBlocks = [];
scriptData.forEach(function (s) {
  return s.blocks.forEach(function (b) {
    return allBlocks.push.apply(allBlocks, b);
  });
});
/**
 * Given a codepoint, return true if it falls within one of the
 * scripts or script families defined above and false otherwise.
 *
 * Micro benchmarks shows that this is faster than
 * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
 * in Firefox, Chrome and Node.
 */

function supportedCodepoint(codepoint) {
  for (var i = 0; i < allBlocks.length; i += 2) {
    if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {
      return true;
    }
  }

  return false;
}
;// CONCATENATED MODULE: ./src/svgGeometry.js
/**
 * This file provides support to domTree.js and delimiter.js.
 * It's a storehouse of path geometry for SVG images.
 */
// In all paths below, the viewBox-to-em scale is 1000:1.
var hLinePad = 80; // padding above a sqrt viniculum. Prevents image cropping.
// The viniculum of a \sqrt can be made thicker by a KaTeX rendering option.
// Think of variable extraViniculum as two detours in the SVG path.
// The detour begins at the lower left of the area labeled extraViniculum below.
// The detour proceeds one extraViniculum distance up and slightly to the right,
// displacing the radiused corner between surd and viniculum. The radius is
// traversed as usual, then the detour resumes. It goes right, to the end of
// the very long viniculumn, then down one extraViniculum distance,
// after which it resumes regular path geometry for the radical.

/*                                                  viniculum
                                                   /
         /▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒←extraViniculum
        / █████████████████████←0.04em (40 unit) std viniculum thickness
       / /
      / /
     / /\
    / / surd
*/

var sqrtMain = function sqrtMain(extraViniculum, hLinePad) {
  // sqrtMain path geometry is from glyph U221A in the font KaTeX Main
  return "M95," + (622 + extraViniculum + hLinePad) + "\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl" + extraViniculum / 2.075 + " -" + extraViniculum + "\nc5.3,-9.3,12,-14,20,-14\nH400000v" + (40 + extraViniculum) + "H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM" + (834 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
};

var sqrtSize1 = function sqrtSize1(extraViniculum, hLinePad) {
  // size1 is from glyph U221A in the font KaTeX_Size1-Regular
  return "M263," + (601 + extraViniculum + hLinePad) + "c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl" + extraViniculum / 2.084 + " -" + extraViniculum + "\nc4.7,-7.3,11,-11,19,-11\nH40000v" + (40 + extraViniculum) + "H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
};

var sqrtSize2 = function sqrtSize2(extraViniculum, hLinePad) {
  // size2 is from glyph U221A in the font KaTeX_Size2-Regular
  return "M983 " + (10 + extraViniculum + hLinePad) + "\nl" + extraViniculum / 3.13 + " -" + extraViniculum + "\nc4,-6.7,10,-10,18,-10 H400000v" + (40 + extraViniculum) + "\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
};

var sqrtSize3 = function sqrtSize3(extraViniculum, hLinePad) {
  // size3 is from glyph U221A in the font KaTeX_Size3-Regular
  return "M424," + (2398 + extraViniculum + hLinePad) + "\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl" + extraViniculum / 4.223 + " -" + extraViniculum + "c4,-6.7,10,-10,18,-10 H400000\nv" + (40 + extraViniculum) + "H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M" + (1001 + extraViniculum) + " " + hLinePad + "\nh400000v" + (40 + extraViniculum) + "h-400000z";
};

var sqrtSize4 = function sqrtSize4(extraViniculum, hLinePad) {
  // size4 is from glyph U221A in the font KaTeX_Size4-Regular
  return "M473," + (2713 + extraViniculum + hLinePad) + "\nc339.3,-1799.3,509.3,-2700,510,-2702 l" + extraViniculum / 5.298 + " -" + extraViniculum + "\nc3.3,-7.3,9.3,-11,18,-11 H400000v" + (40 + extraViniculum) + "H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "H1017.7z";
};

var phasePath = function phasePath(y) {
  var x = y / 2; // x coordinate at top of angle

  return "M400000 " + y + " H0 L" + x + " 0 l65 45 L145 " + (y - 80) + " H400000z";
};

var sqrtTall = function sqrtTall(extraViniculum, hLinePad, viewBoxHeight) {
  // sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular
  // One path edge has a variable length. It runs vertically from the viniculumn
  // to a point near (14 units) the bottom of the surd. The viniculum
  // is normally 40 units thick. So the length of the line in question is:
  var vertSegment = viewBoxHeight - 54 - hLinePad - extraViniculum;
  return "M702 " + (extraViniculum + hLinePad) + "H400000" + (40 + extraViniculum) + "\nH742v" + vertSegment + "l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 " + hLinePad + "H400000v" + (40 + extraViniculum) + "H742z";
};

var sqrtPath = function sqrtPath(size, extraViniculum, viewBoxHeight) {
  extraViniculum = 1000 * extraViniculum; // Convert from document ems to viewBox.

  var path = "";

  switch (size) {
    case "sqrtMain":
      path = sqrtMain(extraViniculum, hLinePad);
      break;

    case "sqrtSize1":
      path = sqrtSize1(extraViniculum, hLinePad);
      break;

    case "sqrtSize2":
      path = sqrtSize2(extraViniculum, hLinePad);
      break;

    case "sqrtSize3":
      path = sqrtSize3(extraViniculum, hLinePad);
      break;

    case "sqrtSize4":
      path = sqrtSize4(extraViniculum, hLinePad);
      break;

    case "sqrtTall":
      path = sqrtTall(extraViniculum, hLinePad, viewBoxHeight);
  }

  return path;
};
var innerPath = function innerPath(name, height) {
  // The inner part of stretchy tall delimiters
  switch (name) {
    case "\u239C":
      return "M291 0 H417 V" + height + " H291z M291 0 H417 V" + height + " H291z";

    case "\u2223":
      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z";

    case "\u2225":
      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z" + ("M367 0 H410 V" + height + " H367z M367 0 H410 V" + height + " H367z");

    case "\u239F":
      return "M457 0 H583 V" + height + " H457z M457 0 H583 V" + height + " H457z";

    case "\u23A2":
      return "M319 0 H403 V" + height + " H319z M319 0 H403 V" + height + " H319z";

    case "\u23A5":
      return "M263 0 H347 V" + height + " H263z M263 0 H347 V" + height + " H263z";

    case "\u23AA":
      return "M384 0 H504 V" + height + " H384z M384 0 H504 V" + height + " H384z";

    case "\u23D0":
      return "M312 0 H355 V" + height + " H312z M312 0 H355 V" + height + " H312z";

    case "\u2016":
      return "M257 0 H300 V" + height + " H257z M257 0 H300 V" + height + " H257z" + ("M478 0 H521 V" + height + " H478z M478 0 H521 V" + height + " H478z");

    default:
      return "";
  }
};
var path = {
  // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
  doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
  // doublerightarrow is from glyph U+21D2 in font KaTeX Main
  doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
  // leftarrow is from glyph U+2190 in font KaTeX Main
  leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
  // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
  leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
  leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
  // overgroup is from the MnSymbol package (public domain)
  leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
  leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
  // Harpoons are from glyph U+21BD in font KaTeX Main
  leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
  leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
  leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
  leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
  // hook is from glyph U+21A9 in font KaTeX Main
  lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
  leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
  leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
  // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
  leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
  longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
  midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
  midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
  oiintSize1: "M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",
  oiintSize2: "M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",
  oiiintSize1: "M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",
  oiiintSize2: "M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",
  rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
  rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
  rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
  rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
  rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
  rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
  rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
  rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
  rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
  righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
  rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
  rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
  // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
  twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
  twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
  // tilde1 is a modified version of a glyph from the MnSymbol package
  tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
  // ditto tilde2, tilde3, & tilde4
  tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
  tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
  tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
  // vec is from glyph U+20D7 in font KaTeX Main
  vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
  // widehat1 is a modified version of a glyph from the MnSymbol package
  widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
  // ditto widehat2, widehat3, & widehat4
  widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
  widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
  widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
  // widecheck paths are all inverted versions of widehat
  widecheck1: "M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",
  widecheck2: "M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
  widecheck3: "M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
  widecheck4: "M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
  // The next ten paths support reaction arrows from the mhchem package.
  // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
  // baraboveleftarrow is mostly from from glyph U+2190 in font KaTeX Main
  baraboveleftarrow: "M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",
  // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
  rightarrowabovebar: "M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",
  // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
  // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
  baraboveshortleftharpoon: "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
  rightharpoonaboveshortbar: "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
  shortbaraboveleftharpoon: "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
  shortrightharpoonabovebar: "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"
};
;// CONCATENATED MODULE: ./src/tree.js


/**
 * This node represents a document fragment, which contains elements, but when
 * placed into the DOM doesn't have any representation itself. It only contains
 * children and doesn't have any DOM node properties.
 */
var DocumentFragment = /*#__PURE__*/function () {
  // HtmlDomNode
  // Never used; needed for satisfying interface.
  function DocumentFragment(children) {
    this.children = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    this.children = children;
    this.classes = [];
    this.height = 0;
    this.depth = 0;
    this.maxFontSize = 0;
    this.style = {};
  }

  var _proto = DocumentFragment.prototype;

  _proto.hasClass = function hasClass(className) {
    return utils.contains(this.classes, className);
  }
  /** Convert the fragment into a node. */
  ;

  _proto.toNode = function toNode() {
    var frag = document.createDocumentFragment();

    for (var i = 0; i < this.children.length; i++) {
      frag.appendChild(this.children[i].toNode());
    }

    return frag;
  }
  /** Convert the fragment into HTML markup. */
  ;

  _proto.toMarkup = function toMarkup() {
    var markup = ""; // Simply concatenate the markup for the children together.

    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }

    return markup;
  }
  /**
   * Converts the math node into a string, similar to innerText. Applies to
   * MathDomNode's only.
   */
  ;

  _proto.toText = function toText() {
    // To avoid this, we would subclass documentFragment separately for
    // MathML, but polyfills for subclassing is expensive per PR 1469.
    // $FlowFixMe: Only works for ChildType = MathDomNode.
    var toText = function toText(child) {
      return child.toText();
    };

    return this.children.map(toText).join("");
  };

  return DocumentFragment;
}();
;// CONCATENATED MODULE: ./src/fontMetricsData.js
// This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.
/* harmony default export */ var fontMetricsData = ({
  "AMS-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "65": [0, 0.68889, 0, 0, 0.72222],
    "66": [0, 0.68889, 0, 0, 0.66667],
    "67": [0, 0.68889, 0, 0, 0.72222],
    "68": [0, 0.68889, 0, 0, 0.72222],
    "69": [0, 0.68889, 0, 0, 0.66667],
    "70": [0, 0.68889, 0, 0, 0.61111],
    "71": [0, 0.68889, 0, 0, 0.77778],
    "72": [0, 0.68889, 0, 0, 0.77778],
    "73": [0, 0.68889, 0, 0, 0.38889],
    "74": [0.16667, 0.68889, 0, 0, 0.5],
    "75": [0, 0.68889, 0, 0, 0.77778],
    "76": [0, 0.68889, 0, 0, 0.66667],
    "77": [0, 0.68889, 0, 0, 0.94445],
    "78": [0, 0.68889, 0, 0, 0.72222],
    "79": [0.16667, 0.68889, 0, 0, 0.77778],
    "80": [0, 0.68889, 0, 0, 0.61111],
    "81": [0.16667, 0.68889, 0, 0, 0.77778],
    "82": [0, 0.68889, 0, 0, 0.72222],
    "83": [0, 0.68889, 0, 0, 0.55556],
    "84": [0, 0.68889, 0, 0, 0.66667],
    "85": [0, 0.68889, 0, 0, 0.72222],
    "86": [0, 0.68889, 0, 0, 0.72222],
    "87": [0, 0.68889, 0, 0, 1.0],
    "88": [0, 0.68889, 0, 0, 0.72222],
    "89": [0, 0.68889, 0, 0, 0.72222],
    "90": [0, 0.68889, 0, 0, 0.66667],
    "107": [0, 0.68889, 0, 0, 0.55556],
    "160": [0, 0, 0, 0, 0.25],
    "165": [0, 0.675, 0.025, 0, 0.75],
    "174": [0.15559, 0.69224, 0, 0, 0.94666],
    "240": [0, 0.68889, 0, 0, 0.55556],
    "295": [0, 0.68889, 0, 0, 0.54028],
    "710": [0, 0.825, 0, 0, 2.33334],
    "732": [0, 0.9, 0, 0, 2.33334],
    "770": [0, 0.825, 0, 0, 2.33334],
    "771": [0, 0.9, 0, 0, 2.33334],
    "989": [0.08167, 0.58167, 0, 0, 0.77778],
    "1008": [0, 0.43056, 0.04028, 0, 0.66667],
    "8245": [0, 0.54986, 0, 0, 0.275],
    "8463": [0, 0.68889, 0, 0, 0.54028],
    "8487": [0, 0.68889, 0, 0, 0.72222],
    "8498": [0, 0.68889, 0, 0, 0.55556],
    "8502": [0, 0.68889, 0, 0, 0.66667],
    "8503": [0, 0.68889, 0, 0, 0.44445],
    "8504": [0, 0.68889, 0, 0, 0.66667],
    "8513": [0, 0.68889, 0, 0, 0.63889],
    "8592": [-0.03598, 0.46402, 0, 0, 0.5],
    "8594": [-0.03598, 0.46402, 0, 0, 0.5],
    "8602": [-0.13313, 0.36687, 0, 0, 1.0],
    "8603": [-0.13313, 0.36687, 0, 0, 1.0],
    "8606": [0.01354, 0.52239, 0, 0, 1.0],
    "8608": [0.01354, 0.52239, 0, 0, 1.0],
    "8610": [0.01354, 0.52239, 0, 0, 1.11111],
    "8611": [0.01354, 0.52239, 0, 0, 1.11111],
    "8619": [0, 0.54986, 0, 0, 1.0],
    "8620": [0, 0.54986, 0, 0, 1.0],
    "8621": [-0.13313, 0.37788, 0, 0, 1.38889],
    "8622": [-0.13313, 0.36687, 0, 0, 1.0],
    "8624": [0, 0.69224, 0, 0, 0.5],
    "8625": [0, 0.69224, 0, 0, 0.5],
    "8630": [0, 0.43056, 0, 0, 1.0],
    "8631": [0, 0.43056, 0, 0, 1.0],
    "8634": [0.08198, 0.58198, 0, 0, 0.77778],
    "8635": [0.08198, 0.58198, 0, 0, 0.77778],
    "8638": [0.19444, 0.69224, 0, 0, 0.41667],
    "8639": [0.19444, 0.69224, 0, 0, 0.41667],
    "8642": [0.19444, 0.69224, 0, 0, 0.41667],
    "8643": [0.19444, 0.69224, 0, 0, 0.41667],
    "8644": [0.1808, 0.675, 0, 0, 1.0],
    "8646": [0.1808, 0.675, 0, 0, 1.0],
    "8647": [0.1808, 0.675, 0, 0, 1.0],
    "8648": [0.19444, 0.69224, 0, 0, 0.83334],
    "8649": [0.1808, 0.675, 0, 0, 1.0],
    "8650": [0.19444, 0.69224, 0, 0, 0.83334],
    "8651": [0.01354, 0.52239, 0, 0, 1.0],
    "8652": [0.01354, 0.52239, 0, 0, 1.0],
    "8653": [-0.13313, 0.36687, 0, 0, 1.0],
    "8654": [-0.13313, 0.36687, 0, 0, 1.0],
    "8655": [-0.13313, 0.36687, 0, 0, 1.0],
    "8666": [0.13667, 0.63667, 0, 0, 1.0],
    "8667": [0.13667, 0.63667, 0, 0, 1.0],
    "8669": [-0.13313, 0.37788, 0, 0, 1.0],
    "8672": [-0.064, 0.437, 0, 0, 1.334],
    "8674": [-0.064, 0.437, 0, 0, 1.334],
    "8705": [0, 0.825, 0, 0, 0.5],
    "8708": [0, 0.68889, 0, 0, 0.55556],
    "8709": [0.08167, 0.58167, 0, 0, 0.77778],
    "8717": [0, 0.43056, 0, 0, 0.42917],
    "8722": [-0.03598, 0.46402, 0, 0, 0.5],
    "8724": [0.08198, 0.69224, 0, 0, 0.77778],
    "8726": [0.08167, 0.58167, 0, 0, 0.77778],
    "8733": [0, 0.69224, 0, 0, 0.77778],
    "8736": [0, 0.69224, 0, 0, 0.72222],
    "8737": [0, 0.69224, 0, 0, 0.72222],
    "8738": [0.03517, 0.52239, 0, 0, 0.72222],
    "8739": [0.08167, 0.58167, 0, 0, 0.22222],
    "8740": [0.25142, 0.74111, 0, 0, 0.27778],
    "8741": [0.08167, 0.58167, 0, 0, 0.38889],
    "8742": [0.25142, 0.74111, 0, 0, 0.5],
    "8756": [0, 0.69224, 0, 0, 0.66667],
    "8757": [0, 0.69224, 0, 0, 0.66667],
    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
    "8765": [-0.13313, 0.37788, 0, 0, 0.77778],
    "8769": [-0.13313, 0.36687, 0, 0, 0.77778],
    "8770": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8774": [0.30274, 0.79383, 0, 0, 0.77778],
    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
    "8778": [0.08167, 0.58167, 0, 0, 0.77778],
    "8782": [0.06062, 0.54986, 0, 0, 0.77778],
    "8783": [0.06062, 0.54986, 0, 0, 0.77778],
    "8785": [0.08198, 0.58198, 0, 0, 0.77778],
    "8786": [0.08198, 0.58198, 0, 0, 0.77778],
    "8787": [0.08198, 0.58198, 0, 0, 0.77778],
    "8790": [0, 0.69224, 0, 0, 0.77778],
    "8791": [0.22958, 0.72958, 0, 0, 0.77778],
    "8796": [0.08198, 0.91667, 0, 0, 0.77778],
    "8806": [0.25583, 0.75583, 0, 0, 0.77778],
    "8807": [0.25583, 0.75583, 0, 0, 0.77778],
    "8808": [0.25142, 0.75726, 0, 0, 0.77778],
    "8809": [0.25142, 0.75726, 0, 0, 0.77778],
    "8812": [0.25583, 0.75583, 0, 0, 0.5],
    "8814": [0.20576, 0.70576, 0, 0, 0.77778],
    "8815": [0.20576, 0.70576, 0, 0, 0.77778],
    "8816": [0.30274, 0.79383, 0, 0, 0.77778],
    "8817": [0.30274, 0.79383, 0, 0, 0.77778],
    "8818": [0.22958, 0.72958, 0, 0, 0.77778],
    "8819": [0.22958, 0.72958, 0, 0, 0.77778],
    "8822": [0.1808, 0.675, 0, 0, 0.77778],
    "8823": [0.1808, 0.675, 0, 0, 0.77778],
    "8828": [0.13667, 0.63667, 0, 0, 0.77778],
    "8829": [0.13667, 0.63667, 0, 0, 0.77778],
    "8830": [0.22958, 0.72958, 0, 0, 0.77778],
    "8831": [0.22958, 0.72958, 0, 0, 0.77778],
    "8832": [0.20576, 0.70576, 0, 0, 0.77778],
    "8833": [0.20576, 0.70576, 0, 0, 0.77778],
    "8840": [0.30274, 0.79383, 0, 0, 0.77778],
    "8841": [0.30274, 0.79383, 0, 0, 0.77778],
    "8842": [0.13597, 0.63597, 0, 0, 0.77778],
    "8843": [0.13597, 0.63597, 0, 0, 0.77778],
    "8847": [0.03517, 0.54986, 0, 0, 0.77778],
    "8848": [0.03517, 0.54986, 0, 0, 0.77778],
    "8858": [0.08198, 0.58198, 0, 0, 0.77778],
    "8859": [0.08198, 0.58198, 0, 0, 0.77778],
    "8861": [0.08198, 0.58198, 0, 0, 0.77778],
    "8862": [0, 0.675, 0, 0, 0.77778],
    "8863": [0, 0.675, 0, 0, 0.77778],
    "8864": [0, 0.675, 0, 0, 0.77778],
    "8865": [0, 0.675, 0, 0, 0.77778],
    "8872": [0, 0.69224, 0, 0, 0.61111],
    "8873": [0, 0.69224, 0, 0, 0.72222],
    "8874": [0, 0.69224, 0, 0, 0.88889],
    "8876": [0, 0.68889, 0, 0, 0.61111],
    "8877": [0, 0.68889, 0, 0, 0.61111],
    "8878": [0, 0.68889, 0, 0, 0.72222],
    "8879": [0, 0.68889, 0, 0, 0.72222],
    "8882": [0.03517, 0.54986, 0, 0, 0.77778],
    "8883": [0.03517, 0.54986, 0, 0, 0.77778],
    "8884": [0.13667, 0.63667, 0, 0, 0.77778],
    "8885": [0.13667, 0.63667, 0, 0, 0.77778],
    "8888": [0, 0.54986, 0, 0, 1.11111],
    "8890": [0.19444, 0.43056, 0, 0, 0.55556],
    "8891": [0.19444, 0.69224, 0, 0, 0.61111],
    "8892": [0.19444, 0.69224, 0, 0, 0.61111],
    "8901": [0, 0.54986, 0, 0, 0.27778],
    "8903": [0.08167, 0.58167, 0, 0, 0.77778],
    "8905": [0.08167, 0.58167, 0, 0, 0.77778],
    "8906": [0.08167, 0.58167, 0, 0, 0.77778],
    "8907": [0, 0.69224, 0, 0, 0.77778],
    "8908": [0, 0.69224, 0, 0, 0.77778],
    "8909": [-0.03598, 0.46402, 0, 0, 0.77778],
    "8910": [0, 0.54986, 0, 0, 0.76042],
    "8911": [0, 0.54986, 0, 0, 0.76042],
    "8912": [0.03517, 0.54986, 0, 0, 0.77778],
    "8913": [0.03517, 0.54986, 0, 0, 0.77778],
    "8914": [0, 0.54986, 0, 0, 0.66667],
    "8915": [0, 0.54986, 0, 0, 0.66667],
    "8916": [0, 0.69224, 0, 0, 0.66667],
    "8918": [0.0391, 0.5391, 0, 0, 0.77778],
    "8919": [0.0391, 0.5391, 0, 0, 0.77778],
    "8920": [0.03517, 0.54986, 0, 0, 1.33334],
    "8921": [0.03517, 0.54986, 0, 0, 1.33334],
    "8922": [0.38569, 0.88569, 0, 0, 0.77778],
    "8923": [0.38569, 0.88569, 0, 0, 0.77778],
    "8926": [0.13667, 0.63667, 0, 0, 0.77778],
    "8927": [0.13667, 0.63667, 0, 0, 0.77778],
    "8928": [0.30274, 0.79383, 0, 0, 0.77778],
    "8929": [0.30274, 0.79383, 0, 0, 0.77778],
    "8934": [0.23222, 0.74111, 0, 0, 0.77778],
    "8935": [0.23222, 0.74111, 0, 0, 0.77778],
    "8936": [0.23222, 0.74111, 0, 0, 0.77778],
    "8937": [0.23222, 0.74111, 0, 0, 0.77778],
    "8938": [0.20576, 0.70576, 0, 0, 0.77778],
    "8939": [0.20576, 0.70576, 0, 0, 0.77778],
    "8940": [0.30274, 0.79383, 0, 0, 0.77778],
    "8941": [0.30274, 0.79383, 0, 0, 0.77778],
    "8994": [0.19444, 0.69224, 0, 0, 0.77778],
    "8995": [0.19444, 0.69224, 0, 0, 0.77778],
    "9416": [0.15559, 0.69224, 0, 0, 0.90222],
    "9484": [0, 0.69224, 0, 0, 0.5],
    "9488": [0, 0.69224, 0, 0, 0.5],
    "9492": [0, 0.37788, 0, 0, 0.5],
    "9496": [0, 0.37788, 0, 0, 0.5],
    "9585": [0.19444, 0.68889, 0, 0, 0.88889],
    "9586": [0.19444, 0.74111, 0, 0, 0.88889],
    "9632": [0, 0.675, 0, 0, 0.77778],
    "9633": [0, 0.675, 0, 0, 0.77778],
    "9650": [0, 0.54986, 0, 0, 0.72222],
    "9651": [0, 0.54986, 0, 0, 0.72222],
    "9654": [0.03517, 0.54986, 0, 0, 0.77778],
    "9660": [0, 0.54986, 0, 0, 0.72222],
    "9661": [0, 0.54986, 0, 0, 0.72222],
    "9664": [0.03517, 0.54986, 0, 0, 0.77778],
    "9674": [0.11111, 0.69224, 0, 0, 0.66667],
    "9733": [0.19444, 0.69224, 0, 0, 0.94445],
    "10003": [0, 0.69224, 0, 0, 0.83334],
    "10016": [0, 0.69224, 0, 0, 0.83334],
    "10731": [0.11111, 0.69224, 0, 0, 0.66667],
    "10846": [0.19444, 0.75583, 0, 0, 0.61111],
    "10877": [0.13667, 0.63667, 0, 0, 0.77778],
    "10878": [0.13667, 0.63667, 0, 0, 0.77778],
    "10885": [0.25583, 0.75583, 0, 0, 0.77778],
    "10886": [0.25583, 0.75583, 0, 0, 0.77778],
    "10887": [0.13597, 0.63597, 0, 0, 0.77778],
    "10888": [0.13597, 0.63597, 0, 0, 0.77778],
    "10889": [0.26167, 0.75726, 0, 0, 0.77778],
    "10890": [0.26167, 0.75726, 0, 0, 0.77778],
    "10891": [0.48256, 0.98256, 0, 0, 0.77778],
    "10892": [0.48256, 0.98256, 0, 0, 0.77778],
    "10901": [0.13667, 0.63667, 0, 0, 0.77778],
    "10902": [0.13667, 0.63667, 0, 0, 0.77778],
    "10933": [0.25142, 0.75726, 0, 0, 0.77778],
    "10934": [0.25142, 0.75726, 0, 0, 0.77778],
    "10935": [0.26167, 0.75726, 0, 0, 0.77778],
    "10936": [0.26167, 0.75726, 0, 0, 0.77778],
    "10937": [0.26167, 0.75726, 0, 0, 0.77778],
    "10938": [0.26167, 0.75726, 0, 0, 0.77778],
    "10949": [0.25583, 0.75583, 0, 0, 0.77778],
    "10950": [0.25583, 0.75583, 0, 0, 0.77778],
    "10955": [0.28481, 0.79383, 0, 0, 0.77778],
    "10956": [0.28481, 0.79383, 0, 0, 0.77778],
    "57350": [0.08167, 0.58167, 0, 0, 0.22222],
    "57351": [0.08167, 0.58167, 0, 0, 0.38889],
    "57352": [0.08167, 0.58167, 0, 0, 0.77778],
    "57353": [0, 0.43056, 0.04028, 0, 0.66667],
    "57356": [0.25142, 0.75726, 0, 0, 0.77778],
    "57357": [0.25142, 0.75726, 0, 0, 0.77778],
    "57358": [0.41951, 0.91951, 0, 0, 0.77778],
    "57359": [0.30274, 0.79383, 0, 0, 0.77778],
    "57360": [0.30274, 0.79383, 0, 0, 0.77778],
    "57361": [0.41951, 0.91951, 0, 0, 0.77778],
    "57366": [0.25142, 0.75726, 0, 0, 0.77778],
    "57367": [0.25142, 0.75726, 0, 0, 0.77778],
    "57368": [0.25142, 0.75726, 0, 0, 0.77778],
    "57369": [0.25142, 0.75726, 0, 0, 0.77778],
    "57370": [0.13597, 0.63597, 0, 0, 0.77778],
    "57371": [0.13597, 0.63597, 0, 0, 0.77778]
  },
  "Caligraphic-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "65": [0, 0.68333, 0, 0.19445, 0.79847],
    "66": [0, 0.68333, 0.03041, 0.13889, 0.65681],
    "67": [0, 0.68333, 0.05834, 0.13889, 0.52653],
    "68": [0, 0.68333, 0.02778, 0.08334, 0.77139],
    "69": [0, 0.68333, 0.08944, 0.11111, 0.52778],
    "70": [0, 0.68333, 0.09931, 0.11111, 0.71875],
    "71": [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
    "72": [0, 0.68333, 0.00965, 0.11111, 0.84452],
    "73": [0, 0.68333, 0.07382, 0, 0.54452],
    "74": [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
    "75": [0, 0.68333, 0.01445, 0.05556, 0.76195],
    "76": [0, 0.68333, 0, 0.13889, 0.68972],
    "77": [0, 0.68333, 0, 0.13889, 1.2009],
    "78": [0, 0.68333, 0.14736, 0.08334, 0.82049],
    "79": [0, 0.68333, 0.02778, 0.11111, 0.79611],
    "80": [0, 0.68333, 0.08222, 0.08334, 0.69556],
    "81": [0.09722, 0.68333, 0, 0.11111, 0.81667],
    "82": [0, 0.68333, 0, 0.08334, 0.8475],
    "83": [0, 0.68333, 0.075, 0.13889, 0.60556],
    "84": [0, 0.68333, 0.25417, 0, 0.54464],
    "85": [0, 0.68333, 0.09931, 0.08334, 0.62583],
    "86": [0, 0.68333, 0.08222, 0, 0.61278],
    "87": [0, 0.68333, 0.08222, 0.08334, 0.98778],
    "88": [0, 0.68333, 0.14643, 0.13889, 0.7133],
    "89": [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
    "90": [0, 0.68333, 0.07944, 0.13889, 0.72473],
    "160": [0, 0, 0, 0, 0.25]
  },
  "Fraktur-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69141, 0, 0, 0.29574],
    "34": [0, 0.69141, 0, 0, 0.21471],
    "38": [0, 0.69141, 0, 0, 0.73786],
    "39": [0, 0.69141, 0, 0, 0.21201],
    "40": [0.24982, 0.74947, 0, 0, 0.38865],
    "41": [0.24982, 0.74947, 0, 0, 0.38865],
    "42": [0, 0.62119, 0, 0, 0.27764],
    "43": [0.08319, 0.58283, 0, 0, 0.75623],
    "44": [0, 0.10803, 0, 0, 0.27764],
    "45": [0.08319, 0.58283, 0, 0, 0.75623],
    "46": [0, 0.10803, 0, 0, 0.27764],
    "47": [0.24982, 0.74947, 0, 0, 0.50181],
    "48": [0, 0.47534, 0, 0, 0.50181],
    "49": [0, 0.47534, 0, 0, 0.50181],
    "50": [0, 0.47534, 0, 0, 0.50181],
    "51": [0.18906, 0.47534, 0, 0, 0.50181],
    "52": [0.18906, 0.47534, 0, 0, 0.50181],
    "53": [0.18906, 0.47534, 0, 0, 0.50181],
    "54": [0, 0.69141, 0, 0, 0.50181],
    "55": [0.18906, 0.47534, 0, 0, 0.50181],
    "56": [0, 0.69141, 0, 0, 0.50181],
    "57": [0.18906, 0.47534, 0, 0, 0.50181],
    "58": [0, 0.47534, 0, 0, 0.21606],
    "59": [0.12604, 0.47534, 0, 0, 0.21606],
    "61": [-0.13099, 0.36866, 0, 0, 0.75623],
    "63": [0, 0.69141, 0, 0, 0.36245],
    "65": [0, 0.69141, 0, 0, 0.7176],
    "66": [0, 0.69141, 0, 0, 0.88397],
    "67": [0, 0.69141, 0, 0, 0.61254],
    "68": [0, 0.69141, 0, 0, 0.83158],
    "69": [0, 0.69141, 0, 0, 0.66278],
    "70": [0.12604, 0.69141, 0, 0, 0.61119],
    "71": [0, 0.69141, 0, 0, 0.78539],
    "72": [0.06302, 0.69141, 0, 0, 0.7203],
    "73": [0, 0.69141, 0, 0, 0.55448],
    "74": [0.12604, 0.69141, 0, 0, 0.55231],
    "75": [0, 0.69141, 0, 0, 0.66845],
    "76": [0, 0.69141, 0, 0, 0.66602],
    "77": [0, 0.69141, 0, 0, 1.04953],
    "78": [0, 0.69141, 0, 0, 0.83212],
    "79": [0, 0.69141, 0, 0, 0.82699],
    "80": [0.18906, 0.69141, 0, 0, 0.82753],
    "81": [0.03781, 0.69141, 0, 0, 0.82699],
    "82": [0, 0.69141, 0, 0, 0.82807],
    "83": [0, 0.69141, 0, 0, 0.82861],
    "84": [0, 0.69141, 0, 0, 0.66899],
    "85": [0, 0.69141, 0, 0, 0.64576],
    "86": [0, 0.69141, 0, 0, 0.83131],
    "87": [0, 0.69141, 0, 0, 1.04602],
    "88": [0, 0.69141, 0, 0, 0.71922],
    "89": [0.18906, 0.69141, 0, 0, 0.83293],
    "90": [0.12604, 0.69141, 0, 0, 0.60201],
    "91": [0.24982, 0.74947, 0, 0, 0.27764],
    "93": [0.24982, 0.74947, 0, 0, 0.27764],
    "94": [0, 0.69141, 0, 0, 0.49965],
    "97": [0, 0.47534, 0, 0, 0.50046],
    "98": [0, 0.69141, 0, 0, 0.51315],
    "99": [0, 0.47534, 0, 0, 0.38946],
    "100": [0, 0.62119, 0, 0, 0.49857],
    "101": [0, 0.47534, 0, 0, 0.40053],
    "102": [0.18906, 0.69141, 0, 0, 0.32626],
    "103": [0.18906, 0.47534, 0, 0, 0.5037],
    "104": [0.18906, 0.69141, 0, 0, 0.52126],
    "105": [0, 0.69141, 0, 0, 0.27899],
    "106": [0, 0.69141, 0, 0, 0.28088],
    "107": [0, 0.69141, 0, 0, 0.38946],
    "108": [0, 0.69141, 0, 0, 0.27953],
    "109": [0, 0.47534, 0, 0, 0.76676],
    "110": [0, 0.47534, 0, 0, 0.52666],
    "111": [0, 0.47534, 0, 0, 0.48885],
    "112": [0.18906, 0.52396, 0, 0, 0.50046],
    "113": [0.18906, 0.47534, 0, 0, 0.48912],
    "114": [0, 0.47534, 0, 0, 0.38919],
    "115": [0, 0.47534, 0, 0, 0.44266],
    "116": [0, 0.62119, 0, 0, 0.33301],
    "117": [0, 0.47534, 0, 0, 0.5172],
    "118": [0, 0.52396, 0, 0, 0.5118],
    "119": [0, 0.52396, 0, 0, 0.77351],
    "120": [0.18906, 0.47534, 0, 0, 0.38865],
    "121": [0.18906, 0.47534, 0, 0, 0.49884],
    "122": [0.18906, 0.47534, 0, 0, 0.39054],
    "160": [0, 0, 0, 0, 0.25],
    "8216": [0, 0.69141, 0, 0, 0.21471],
    "8217": [0, 0.69141, 0, 0, 0.21471],
    "58112": [0, 0.62119, 0, 0, 0.49749],
    "58113": [0, 0.62119, 0, 0, 0.4983],
    "58114": [0.18906, 0.69141, 0, 0, 0.33328],
    "58115": [0.18906, 0.69141, 0, 0, 0.32923],
    "58116": [0.18906, 0.47534, 0, 0, 0.50343],
    "58117": [0, 0.69141, 0, 0, 0.33301],
    "58118": [0, 0.62119, 0, 0, 0.33409],
    "58119": [0, 0.47534, 0, 0, 0.50073]
  },
  "Main-Bold": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.35],
    "34": [0, 0.69444, 0, 0, 0.60278],
    "35": [0.19444, 0.69444, 0, 0, 0.95833],
    "36": [0.05556, 0.75, 0, 0, 0.575],
    "37": [0.05556, 0.75, 0, 0, 0.95833],
    "38": [0, 0.69444, 0, 0, 0.89444],
    "39": [0, 0.69444, 0, 0, 0.31944],
    "40": [0.25, 0.75, 0, 0, 0.44722],
    "41": [0.25, 0.75, 0, 0, 0.44722],
    "42": [0, 0.75, 0, 0, 0.575],
    "43": [0.13333, 0.63333, 0, 0, 0.89444],
    "44": [0.19444, 0.15556, 0, 0, 0.31944],
    "45": [0, 0.44444, 0, 0, 0.38333],
    "46": [0, 0.15556, 0, 0, 0.31944],
    "47": [0.25, 0.75, 0, 0, 0.575],
    "48": [0, 0.64444, 0, 0, 0.575],
    "49": [0, 0.64444, 0, 0, 0.575],
    "50": [0, 0.64444, 0, 0, 0.575],
    "51": [0, 0.64444, 0, 0, 0.575],
    "52": [0, 0.64444, 0, 0, 0.575],
    "53": [0, 0.64444, 0, 0, 0.575],
    "54": [0, 0.64444, 0, 0, 0.575],
    "55": [0, 0.64444, 0, 0, 0.575],
    "56": [0, 0.64444, 0, 0, 0.575],
    "57": [0, 0.64444, 0, 0, 0.575],
    "58": [0, 0.44444, 0, 0, 0.31944],
    "59": [0.19444, 0.44444, 0, 0, 0.31944],
    "60": [0.08556, 0.58556, 0, 0, 0.89444],
    "61": [-0.10889, 0.39111, 0, 0, 0.89444],
    "62": [0.08556, 0.58556, 0, 0, 0.89444],
    "63": [0, 0.69444, 0, 0, 0.54305],
    "64": [0, 0.69444, 0, 0, 0.89444],
    "65": [0, 0.68611, 0, 0, 0.86944],
    "66": [0, 0.68611, 0, 0, 0.81805],
    "67": [0, 0.68611, 0, 0, 0.83055],
    "68": [0, 0.68611, 0, 0, 0.88194],
    "69": [0, 0.68611, 0, 0, 0.75555],
    "70": [0, 0.68611, 0, 0, 0.72361],
    "71": [0, 0.68611, 0, 0, 0.90416],
    "72": [0, 0.68611, 0, 0, 0.9],
    "73": [0, 0.68611, 0, 0, 0.43611],
    "74": [0, 0.68611, 0, 0, 0.59444],
    "75": [0, 0.68611, 0, 0, 0.90138],
    "76": [0, 0.68611, 0, 0, 0.69166],
    "77": [0, 0.68611, 0, 0, 1.09166],
    "78": [0, 0.68611, 0, 0, 0.9],
    "79": [0, 0.68611, 0, 0, 0.86388],
    "80": [0, 0.68611, 0, 0, 0.78611],
    "81": [0.19444, 0.68611, 0, 0, 0.86388],
    "82": [0, 0.68611, 0, 0, 0.8625],
    "83": [0, 0.68611, 0, 0, 0.63889],
    "84": [0, 0.68611, 0, 0, 0.8],
    "85": [0, 0.68611, 0, 0, 0.88472],
    "86": [0, 0.68611, 0.01597, 0, 0.86944],
    "87": [0, 0.68611, 0.01597, 0, 1.18888],
    "88": [0, 0.68611, 0, 0, 0.86944],
    "89": [0, 0.68611, 0.02875, 0, 0.86944],
    "90": [0, 0.68611, 0, 0, 0.70277],
    "91": [0.25, 0.75, 0, 0, 0.31944],
    "92": [0.25, 0.75, 0, 0, 0.575],
    "93": [0.25, 0.75, 0, 0, 0.31944],
    "94": [0, 0.69444, 0, 0, 0.575],
    "95": [0.31, 0.13444, 0.03194, 0, 0.575],
    "97": [0, 0.44444, 0, 0, 0.55902],
    "98": [0, 0.69444, 0, 0, 0.63889],
    "99": [0, 0.44444, 0, 0, 0.51111],
    "100": [0, 0.69444, 0, 0, 0.63889],
    "101": [0, 0.44444, 0, 0, 0.52708],
    "102": [0, 0.69444, 0.10903, 0, 0.35139],
    "103": [0.19444, 0.44444, 0.01597, 0, 0.575],
    "104": [0, 0.69444, 0, 0, 0.63889],
    "105": [0, 0.69444, 0, 0, 0.31944],
    "106": [0.19444, 0.69444, 0, 0, 0.35139],
    "107": [0, 0.69444, 0, 0, 0.60694],
    "108": [0, 0.69444, 0, 0, 0.31944],
    "109": [0, 0.44444, 0, 0, 0.95833],
    "110": [0, 0.44444, 0, 0, 0.63889],
    "111": [0, 0.44444, 0, 0, 0.575],
    "112": [0.19444, 0.44444, 0, 0, 0.63889],
    "113": [0.19444, 0.44444, 0, 0, 0.60694],
    "114": [0, 0.44444, 0, 0, 0.47361],
    "115": [0, 0.44444, 0, 0, 0.45361],
    "116": [0, 0.63492, 0, 0, 0.44722],
    "117": [0, 0.44444, 0, 0, 0.63889],
    "118": [0, 0.44444, 0.01597, 0, 0.60694],
    "119": [0, 0.44444, 0.01597, 0, 0.83055],
    "120": [0, 0.44444, 0, 0, 0.60694],
    "121": [0.19444, 0.44444, 0.01597, 0, 0.60694],
    "122": [0, 0.44444, 0, 0, 0.51111],
    "123": [0.25, 0.75, 0, 0, 0.575],
    "124": [0.25, 0.75, 0, 0, 0.31944],
    "125": [0.25, 0.75, 0, 0, 0.575],
    "126": [0.35, 0.34444, 0, 0, 0.575],
    "160": [0, 0, 0, 0, 0.25],
    "163": [0, 0.69444, 0, 0, 0.86853],
    "168": [0, 0.69444, 0, 0, 0.575],
    "172": [0, 0.44444, 0, 0, 0.76666],
    "176": [0, 0.69444, 0, 0, 0.86944],
    "177": [0.13333, 0.63333, 0, 0, 0.89444],
    "184": [0.17014, 0, 0, 0, 0.51111],
    "198": [0, 0.68611, 0, 0, 1.04166],
    "215": [0.13333, 0.63333, 0, 0, 0.89444],
    "216": [0.04861, 0.73472, 0, 0, 0.89444],
    "223": [0, 0.69444, 0, 0, 0.59722],
    "230": [0, 0.44444, 0, 0, 0.83055],
    "247": [0.13333, 0.63333, 0, 0, 0.89444],
    "248": [0.09722, 0.54167, 0, 0, 0.575],
    "305": [0, 0.44444, 0, 0, 0.31944],
    "338": [0, 0.68611, 0, 0, 1.16944],
    "339": [0, 0.44444, 0, 0, 0.89444],
    "567": [0.19444, 0.44444, 0, 0, 0.35139],
    "710": [0, 0.69444, 0, 0, 0.575],
    "711": [0, 0.63194, 0, 0, 0.575],
    "713": [0, 0.59611, 0, 0, 0.575],
    "714": [0, 0.69444, 0, 0, 0.575],
    "715": [0, 0.69444, 0, 0, 0.575],
    "728": [0, 0.69444, 0, 0, 0.575],
    "729": [0, 0.69444, 0, 0, 0.31944],
    "730": [0, 0.69444, 0, 0, 0.86944],
    "732": [0, 0.69444, 0, 0, 0.575],
    "733": [0, 0.69444, 0, 0, 0.575],
    "915": [0, 0.68611, 0, 0, 0.69166],
    "916": [0, 0.68611, 0, 0, 0.95833],
    "920": [0, 0.68611, 0, 0, 0.89444],
    "923": [0, 0.68611, 0, 0, 0.80555],
    "926": [0, 0.68611, 0, 0, 0.76666],
    "928": [0, 0.68611, 0, 0, 0.9],
    "931": [0, 0.68611, 0, 0, 0.83055],
    "933": [0, 0.68611, 0, 0, 0.89444],
    "934": [0, 0.68611, 0, 0, 0.83055],
    "936": [0, 0.68611, 0, 0, 0.89444],
    "937": [0, 0.68611, 0, 0, 0.83055],
    "8211": [0, 0.44444, 0.03194, 0, 0.575],
    "8212": [0, 0.44444, 0.03194, 0, 1.14999],
    "8216": [0, 0.69444, 0, 0, 0.31944],
    "8217": [0, 0.69444, 0, 0, 0.31944],
    "8220": [0, 0.69444, 0, 0, 0.60278],
    "8221": [0, 0.69444, 0, 0, 0.60278],
    "8224": [0.19444, 0.69444, 0, 0, 0.51111],
    "8225": [0.19444, 0.69444, 0, 0, 0.51111],
    "8242": [0, 0.55556, 0, 0, 0.34444],
    "8407": [0, 0.72444, 0.15486, 0, 0.575],
    "8463": [0, 0.69444, 0, 0, 0.66759],
    "8465": [0, 0.69444, 0, 0, 0.83055],
    "8467": [0, 0.69444, 0, 0, 0.47361],
    "8472": [0.19444, 0.44444, 0, 0, 0.74027],
    "8476": [0, 0.69444, 0, 0, 0.83055],
    "8501": [0, 0.69444, 0, 0, 0.70277],
    "8592": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8593": [0.19444, 0.69444, 0, 0, 0.575],
    "8594": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8595": [0.19444, 0.69444, 0, 0, 0.575],
    "8596": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8597": [0.25, 0.75, 0, 0, 0.575],
    "8598": [0.19444, 0.69444, 0, 0, 1.14999],
    "8599": [0.19444, 0.69444, 0, 0, 1.14999],
    "8600": [0.19444, 0.69444, 0, 0, 1.14999],
    "8601": [0.19444, 0.69444, 0, 0, 1.14999],
    "8636": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8637": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8640": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8641": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8656": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8657": [0.19444, 0.69444, 0, 0, 0.70277],
    "8658": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8659": [0.19444, 0.69444, 0, 0, 0.70277],
    "8660": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8661": [0.25, 0.75, 0, 0, 0.70277],
    "8704": [0, 0.69444, 0, 0, 0.63889],
    "8706": [0, 0.69444, 0.06389, 0, 0.62847],
    "8707": [0, 0.69444, 0, 0, 0.63889],
    "8709": [0.05556, 0.75, 0, 0, 0.575],
    "8711": [0, 0.68611, 0, 0, 0.95833],
    "8712": [0.08556, 0.58556, 0, 0, 0.76666],
    "8715": [0.08556, 0.58556, 0, 0, 0.76666],
    "8722": [0.13333, 0.63333, 0, 0, 0.89444],
    "8723": [0.13333, 0.63333, 0, 0, 0.89444],
    "8725": [0.25, 0.75, 0, 0, 0.575],
    "8726": [0.25, 0.75, 0, 0, 0.575],
    "8727": [-0.02778, 0.47222, 0, 0, 0.575],
    "8728": [-0.02639, 0.47361, 0, 0, 0.575],
    "8729": [-0.02639, 0.47361, 0, 0, 0.575],
    "8730": [0.18, 0.82, 0, 0, 0.95833],
    "8733": [0, 0.44444, 0, 0, 0.89444],
    "8734": [0, 0.44444, 0, 0, 1.14999],
    "8736": [0, 0.69224, 0, 0, 0.72222],
    "8739": [0.25, 0.75, 0, 0, 0.31944],
    "8741": [0.25, 0.75, 0, 0, 0.575],
    "8743": [0, 0.55556, 0, 0, 0.76666],
    "8744": [0, 0.55556, 0, 0, 0.76666],
    "8745": [0, 0.55556, 0, 0, 0.76666],
    "8746": [0, 0.55556, 0, 0, 0.76666],
    "8747": [0.19444, 0.69444, 0.12778, 0, 0.56875],
    "8764": [-0.10889, 0.39111, 0, 0, 0.89444],
    "8768": [0.19444, 0.69444, 0, 0, 0.31944],
    "8771": [0.00222, 0.50222, 0, 0, 0.89444],
    "8773": [0.027, 0.638, 0, 0, 0.894],
    "8776": [0.02444, 0.52444, 0, 0, 0.89444],
    "8781": [0.00222, 0.50222, 0, 0, 0.89444],
    "8801": [0.00222, 0.50222, 0, 0, 0.89444],
    "8804": [0.19667, 0.69667, 0, 0, 0.89444],
    "8805": [0.19667, 0.69667, 0, 0, 0.89444],
    "8810": [0.08556, 0.58556, 0, 0, 1.14999],
    "8811": [0.08556, 0.58556, 0, 0, 1.14999],
    "8826": [0.08556, 0.58556, 0, 0, 0.89444],
    "8827": [0.08556, 0.58556, 0, 0, 0.89444],
    "8834": [0.08556, 0.58556, 0, 0, 0.89444],
    "8835": [0.08556, 0.58556, 0, 0, 0.89444],
    "8838": [0.19667, 0.69667, 0, 0, 0.89444],
    "8839": [0.19667, 0.69667, 0, 0, 0.89444],
    "8846": [0, 0.55556, 0, 0, 0.76666],
    "8849": [0.19667, 0.69667, 0, 0, 0.89444],
    "8850": [0.19667, 0.69667, 0, 0, 0.89444],
    "8851": [0, 0.55556, 0, 0, 0.76666],
    "8852": [0, 0.55556, 0, 0, 0.76666],
    "8853": [0.13333, 0.63333, 0, 0, 0.89444],
    "8854": [0.13333, 0.63333, 0, 0, 0.89444],
    "8855": [0.13333, 0.63333, 0, 0, 0.89444],
    "8856": [0.13333, 0.63333, 0, 0, 0.89444],
    "8857": [0.13333, 0.63333, 0, 0, 0.89444],
    "8866": [0, 0.69444, 0, 0, 0.70277],
    "8867": [0, 0.69444, 0, 0, 0.70277],
    "8868": [0, 0.69444, 0, 0, 0.89444],
    "8869": [0, 0.69444, 0, 0, 0.89444],
    "8900": [-0.02639, 0.47361, 0, 0, 0.575],
    "8901": [-0.02639, 0.47361, 0, 0, 0.31944],
    "8902": [-0.02778, 0.47222, 0, 0, 0.575],
    "8968": [0.25, 0.75, 0, 0, 0.51111],
    "8969": [0.25, 0.75, 0, 0, 0.51111],
    "8970": [0.25, 0.75, 0, 0, 0.51111],
    "8971": [0.25, 0.75, 0, 0, 0.51111],
    "8994": [-0.13889, 0.36111, 0, 0, 1.14999],
    "8995": [-0.13889, 0.36111, 0, 0, 1.14999],
    "9651": [0.19444, 0.69444, 0, 0, 1.02222],
    "9657": [-0.02778, 0.47222, 0, 0, 0.575],
    "9661": [0.19444, 0.69444, 0, 0, 1.02222],
    "9667": [-0.02778, 0.47222, 0, 0, 0.575],
    "9711": [0.19444, 0.69444, 0, 0, 1.14999],
    "9824": [0.12963, 0.69444, 0, 0, 0.89444],
    "9825": [0.12963, 0.69444, 0, 0, 0.89444],
    "9826": [0.12963, 0.69444, 0, 0, 0.89444],
    "9827": [0.12963, 0.69444, 0, 0, 0.89444],
    "9837": [0, 0.75, 0, 0, 0.44722],
    "9838": [0.19444, 0.69444, 0, 0, 0.44722],
    "9839": [0.19444, 0.69444, 0, 0, 0.44722],
    "10216": [0.25, 0.75, 0, 0, 0.44722],
    "10217": [0.25, 0.75, 0, 0, 0.44722],
    "10815": [0, 0.68611, 0, 0, 0.9],
    "10927": [0.19667, 0.69667, 0, 0, 0.89444],
    "10928": [0.19667, 0.69667, 0, 0, 0.89444],
    "57376": [0.19444, 0.69444, 0, 0, 0]
  },
  "Main-BoldItalic": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0.11417, 0, 0.38611],
    "34": [0, 0.69444, 0.07939, 0, 0.62055],
    "35": [0.19444, 0.69444, 0.06833, 0, 0.94444],
    "37": [0.05556, 0.75, 0.12861, 0, 0.94444],
    "38": [0, 0.69444, 0.08528, 0, 0.88555],
    "39": [0, 0.69444, 0.12945, 0, 0.35555],
    "40": [0.25, 0.75, 0.15806, 0, 0.47333],
    "41": [0.25, 0.75, 0.03306, 0, 0.47333],
    "42": [0, 0.75, 0.14333, 0, 0.59111],
    "43": [0.10333, 0.60333, 0.03306, 0, 0.88555],
    "44": [0.19444, 0.14722, 0, 0, 0.35555],
    "45": [0, 0.44444, 0.02611, 0, 0.41444],
    "46": [0, 0.14722, 0, 0, 0.35555],
    "47": [0.25, 0.75, 0.15806, 0, 0.59111],
    "48": [0, 0.64444, 0.13167, 0, 0.59111],
    "49": [0, 0.64444, 0.13167, 0, 0.59111],
    "50": [0, 0.64444, 0.13167, 0, 0.59111],
    "51": [0, 0.64444, 0.13167, 0, 0.59111],
    "52": [0.19444, 0.64444, 0.13167, 0, 0.59111],
    "53": [0, 0.64444, 0.13167, 0, 0.59111],
    "54": [0, 0.64444, 0.13167, 0, 0.59111],
    "55": [0.19444, 0.64444, 0.13167, 0, 0.59111],
    "56": [0, 0.64444, 0.13167, 0, 0.59111],
    "57": [0, 0.64444, 0.13167, 0, 0.59111],
    "58": [0, 0.44444, 0.06695, 0, 0.35555],
    "59": [0.19444, 0.44444, 0.06695, 0, 0.35555],
    "61": [-0.10889, 0.39111, 0.06833, 0, 0.88555],
    "63": [0, 0.69444, 0.11472, 0, 0.59111],
    "64": [0, 0.69444, 0.09208, 0, 0.88555],
    "65": [0, 0.68611, 0, 0, 0.86555],
    "66": [0, 0.68611, 0.0992, 0, 0.81666],
    "67": [0, 0.68611, 0.14208, 0, 0.82666],
    "68": [0, 0.68611, 0.09062, 0, 0.87555],
    "69": [0, 0.68611, 0.11431, 0, 0.75666],
    "70": [0, 0.68611, 0.12903, 0, 0.72722],
    "71": [0, 0.68611, 0.07347, 0, 0.89527],
    "72": [0, 0.68611, 0.17208, 0, 0.8961],
    "73": [0, 0.68611, 0.15681, 0, 0.47166],
    "74": [0, 0.68611, 0.145, 0, 0.61055],
    "75": [0, 0.68611, 0.14208, 0, 0.89499],
    "76": [0, 0.68611, 0, 0, 0.69777],
    "77": [0, 0.68611, 0.17208, 0, 1.07277],
    "78": [0, 0.68611, 0.17208, 0, 0.8961],
    "79": [0, 0.68611, 0.09062, 0, 0.85499],
    "80": [0, 0.68611, 0.0992, 0, 0.78721],
    "81": [0.19444, 0.68611, 0.09062, 0, 0.85499],
    "82": [0, 0.68611, 0.02559, 0, 0.85944],
    "83": [0, 0.68611, 0.11264, 0, 0.64999],
    "84": [0, 0.68611, 0.12903, 0, 0.7961],
    "85": [0, 0.68611, 0.17208, 0, 0.88083],
    "86": [0, 0.68611, 0.18625, 0, 0.86555],
    "87": [0, 0.68611, 0.18625, 0, 1.15999],
    "88": [0, 0.68611, 0.15681, 0, 0.86555],
    "89": [0, 0.68611, 0.19803, 0, 0.86555],
    "90": [0, 0.68611, 0.14208, 0, 0.70888],
    "91": [0.25, 0.75, 0.1875, 0, 0.35611],
    "93": [0.25, 0.75, 0.09972, 0, 0.35611],
    "94": [0, 0.69444, 0.06709, 0, 0.59111],
    "95": [0.31, 0.13444, 0.09811, 0, 0.59111],
    "97": [0, 0.44444, 0.09426, 0, 0.59111],
    "98": [0, 0.69444, 0.07861, 0, 0.53222],
    "99": [0, 0.44444, 0.05222, 0, 0.53222],
    "100": [0, 0.69444, 0.10861, 0, 0.59111],
    "101": [0, 0.44444, 0.085, 0, 0.53222],
    "102": [0.19444, 0.69444, 0.21778, 0, 0.4],
    "103": [0.19444, 0.44444, 0.105, 0, 0.53222],
    "104": [0, 0.69444, 0.09426, 0, 0.59111],
    "105": [0, 0.69326, 0.11387, 0, 0.35555],
    "106": [0.19444, 0.69326, 0.1672, 0, 0.35555],
    "107": [0, 0.69444, 0.11111, 0, 0.53222],
    "108": [0, 0.69444, 0.10861, 0, 0.29666],
    "109": [0, 0.44444, 0.09426, 0, 0.94444],
    "110": [0, 0.44444, 0.09426, 0, 0.64999],
    "111": [0, 0.44444, 0.07861, 0, 0.59111],
    "112": [0.19444, 0.44444, 0.07861, 0, 0.59111],
    "113": [0.19444, 0.44444, 0.105, 0, 0.53222],
    "114": [0, 0.44444, 0.11111, 0, 0.50167],
    "115": [0, 0.44444, 0.08167, 0, 0.48694],
    "116": [0, 0.63492, 0.09639, 0, 0.385],
    "117": [0, 0.44444, 0.09426, 0, 0.62055],
    "118": [0, 0.44444, 0.11111, 0, 0.53222],
    "119": [0, 0.44444, 0.11111, 0, 0.76777],
    "120": [0, 0.44444, 0.12583, 0, 0.56055],
    "121": [0.19444, 0.44444, 0.105, 0, 0.56166],
    "122": [0, 0.44444, 0.13889, 0, 0.49055],
    "126": [0.35, 0.34444, 0.11472, 0, 0.59111],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.69444, 0.11473, 0, 0.59111],
    "176": [0, 0.69444, 0, 0, 0.94888],
    "184": [0.17014, 0, 0, 0, 0.53222],
    "198": [0, 0.68611, 0.11431, 0, 1.02277],
    "216": [0.04861, 0.73472, 0.09062, 0, 0.88555],
    "223": [0.19444, 0.69444, 0.09736, 0, 0.665],
    "230": [0, 0.44444, 0.085, 0, 0.82666],
    "248": [0.09722, 0.54167, 0.09458, 0, 0.59111],
    "305": [0, 0.44444, 0.09426, 0, 0.35555],
    "338": [0, 0.68611, 0.11431, 0, 1.14054],
    "339": [0, 0.44444, 0.085, 0, 0.82666],
    "567": [0.19444, 0.44444, 0.04611, 0, 0.385],
    "710": [0, 0.69444, 0.06709, 0, 0.59111],
    "711": [0, 0.63194, 0.08271, 0, 0.59111],
    "713": [0, 0.59444, 0.10444, 0, 0.59111],
    "714": [0, 0.69444, 0.08528, 0, 0.59111],
    "715": [0, 0.69444, 0, 0, 0.59111],
    "728": [0, 0.69444, 0.10333, 0, 0.59111],
    "729": [0, 0.69444, 0.12945, 0, 0.35555],
    "730": [0, 0.69444, 0, 0, 0.94888],
    "732": [0, 0.69444, 0.11472, 0, 0.59111],
    "733": [0, 0.69444, 0.11472, 0, 0.59111],
    "915": [0, 0.68611, 0.12903, 0, 0.69777],
    "916": [0, 0.68611, 0, 0, 0.94444],
    "920": [0, 0.68611, 0.09062, 0, 0.88555],
    "923": [0, 0.68611, 0, 0, 0.80666],
    "926": [0, 0.68611, 0.15092, 0, 0.76777],
    "928": [0, 0.68611, 0.17208, 0, 0.8961],
    "931": [0, 0.68611, 0.11431, 0, 0.82666],
    "933": [0, 0.68611, 0.10778, 0, 0.88555],
    "934": [0, 0.68611, 0.05632, 0, 0.82666],
    "936": [0, 0.68611, 0.10778, 0, 0.88555],
    "937": [0, 0.68611, 0.0992, 0, 0.82666],
    "8211": [0, 0.44444, 0.09811, 0, 0.59111],
    "8212": [0, 0.44444, 0.09811, 0, 1.18221],
    "8216": [0, 0.69444, 0.12945, 0, 0.35555],
    "8217": [0, 0.69444, 0.12945, 0, 0.35555],
    "8220": [0, 0.69444, 0.16772, 0, 0.62055],
    "8221": [0, 0.69444, 0.07939, 0, 0.62055]
  },
  "Main-Italic": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0.12417, 0, 0.30667],
    "34": [0, 0.69444, 0.06961, 0, 0.51444],
    "35": [0.19444, 0.69444, 0.06616, 0, 0.81777],
    "37": [0.05556, 0.75, 0.13639, 0, 0.81777],
    "38": [0, 0.69444, 0.09694, 0, 0.76666],
    "39": [0, 0.69444, 0.12417, 0, 0.30667],
    "40": [0.25, 0.75, 0.16194, 0, 0.40889],
    "41": [0.25, 0.75, 0.03694, 0, 0.40889],
    "42": [0, 0.75, 0.14917, 0, 0.51111],
    "43": [0.05667, 0.56167, 0.03694, 0, 0.76666],
    "44": [0.19444, 0.10556, 0, 0, 0.30667],
    "45": [0, 0.43056, 0.02826, 0, 0.35778],
    "46": [0, 0.10556, 0, 0, 0.30667],
    "47": [0.25, 0.75, 0.16194, 0, 0.51111],
    "48": [0, 0.64444, 0.13556, 0, 0.51111],
    "49": [0, 0.64444, 0.13556, 0, 0.51111],
    "50": [0, 0.64444, 0.13556, 0, 0.51111],
    "51": [0, 0.64444, 0.13556, 0, 0.51111],
    "52": [0.19444, 0.64444, 0.13556, 0, 0.51111],
    "53": [0, 0.64444, 0.13556, 0, 0.51111],
    "54": [0, 0.64444, 0.13556, 0, 0.51111],
    "55": [0.19444, 0.64444, 0.13556, 0, 0.51111],
    "56": [0, 0.64444, 0.13556, 0, 0.51111],
    "57": [0, 0.64444, 0.13556, 0, 0.51111],
    "58": [0, 0.43056, 0.0582, 0, 0.30667],
    "59": [0.19444, 0.43056, 0.0582, 0, 0.30667],
    "61": [-0.13313, 0.36687, 0.06616, 0, 0.76666],
    "63": [0, 0.69444, 0.1225, 0, 0.51111],
    "64": [0, 0.69444, 0.09597, 0, 0.76666],
    "65": [0, 0.68333, 0, 0, 0.74333],
    "66": [0, 0.68333, 0.10257, 0, 0.70389],
    "67": [0, 0.68333, 0.14528, 0, 0.71555],
    "68": [0, 0.68333, 0.09403, 0, 0.755],
    "69": [0, 0.68333, 0.12028, 0, 0.67833],
    "70": [0, 0.68333, 0.13305, 0, 0.65277],
    "71": [0, 0.68333, 0.08722, 0, 0.77361],
    "72": [0, 0.68333, 0.16389, 0, 0.74333],
    "73": [0, 0.68333, 0.15806, 0, 0.38555],
    "74": [0, 0.68333, 0.14028, 0, 0.525],
    "75": [0, 0.68333, 0.14528, 0, 0.76888],
    "76": [0, 0.68333, 0, 0, 0.62722],
    "77": [0, 0.68333, 0.16389, 0, 0.89666],
    "78": [0, 0.68333, 0.16389, 0, 0.74333],
    "79": [0, 0.68333, 0.09403, 0, 0.76666],
    "80": [0, 0.68333, 0.10257, 0, 0.67833],
    "81": [0.19444, 0.68333, 0.09403, 0, 0.76666],
    "82": [0, 0.68333, 0.03868, 0, 0.72944],
    "83": [0, 0.68333, 0.11972, 0, 0.56222],
    "84": [0, 0.68333, 0.13305, 0, 0.71555],
    "85": [0, 0.68333, 0.16389, 0, 0.74333],
    "86": [0, 0.68333, 0.18361, 0, 0.74333],
    "87": [0, 0.68333, 0.18361, 0, 0.99888],
    "88": [0, 0.68333, 0.15806, 0, 0.74333],
    "89": [0, 0.68333, 0.19383, 0, 0.74333],
    "90": [0, 0.68333, 0.14528, 0, 0.61333],
    "91": [0.25, 0.75, 0.1875, 0, 0.30667],
    "93": [0.25, 0.75, 0.10528, 0, 0.30667],
    "94": [0, 0.69444, 0.06646, 0, 0.51111],
    "95": [0.31, 0.12056, 0.09208, 0, 0.51111],
    "97": [0, 0.43056, 0.07671, 0, 0.51111],
    "98": [0, 0.69444, 0.06312, 0, 0.46],
    "99": [0, 0.43056, 0.05653, 0, 0.46],
    "100": [0, 0.69444, 0.10333, 0, 0.51111],
    "101": [0, 0.43056, 0.07514, 0, 0.46],
    "102": [0.19444, 0.69444, 0.21194, 0, 0.30667],
    "103": [0.19444, 0.43056, 0.08847, 0, 0.46],
    "104": [0, 0.69444, 0.07671, 0, 0.51111],
    "105": [0, 0.65536, 0.1019, 0, 0.30667],
    "106": [0.19444, 0.65536, 0.14467, 0, 0.30667],
    "107": [0, 0.69444, 0.10764, 0, 0.46],
    "108": [0, 0.69444, 0.10333, 0, 0.25555],
    "109": [0, 0.43056, 0.07671, 0, 0.81777],
    "110": [0, 0.43056, 0.07671, 0, 0.56222],
    "111": [0, 0.43056, 0.06312, 0, 0.51111],
    "112": [0.19444, 0.43056, 0.06312, 0, 0.51111],
    "113": [0.19444, 0.43056, 0.08847, 0, 0.46],
    "114": [0, 0.43056, 0.10764, 0, 0.42166],
    "115": [0, 0.43056, 0.08208, 0, 0.40889],
    "116": [0, 0.61508, 0.09486, 0, 0.33222],
    "117": [0, 0.43056, 0.07671, 0, 0.53666],
    "118": [0, 0.43056, 0.10764, 0, 0.46],
    "119": [0, 0.43056, 0.10764, 0, 0.66444],
    "120": [0, 0.43056, 0.12042, 0, 0.46389],
    "121": [0.19444, 0.43056, 0.08847, 0, 0.48555],
    "122": [0, 0.43056, 0.12292, 0, 0.40889],
    "126": [0.35, 0.31786, 0.11585, 0, 0.51111],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.66786, 0.10474, 0, 0.51111],
    "176": [0, 0.69444, 0, 0, 0.83129],
    "184": [0.17014, 0, 0, 0, 0.46],
    "198": [0, 0.68333, 0.12028, 0, 0.88277],
    "216": [0.04861, 0.73194, 0.09403, 0, 0.76666],
    "223": [0.19444, 0.69444, 0.10514, 0, 0.53666],
    "230": [0, 0.43056, 0.07514, 0, 0.71555],
    "248": [0.09722, 0.52778, 0.09194, 0, 0.51111],
    "338": [0, 0.68333, 0.12028, 0, 0.98499],
    "339": [0, 0.43056, 0.07514, 0, 0.71555],
    "710": [0, 0.69444, 0.06646, 0, 0.51111],
    "711": [0, 0.62847, 0.08295, 0, 0.51111],
    "713": [0, 0.56167, 0.10333, 0, 0.51111],
    "714": [0, 0.69444, 0.09694, 0, 0.51111],
    "715": [0, 0.69444, 0, 0, 0.51111],
    "728": [0, 0.69444, 0.10806, 0, 0.51111],
    "729": [0, 0.66786, 0.11752, 0, 0.30667],
    "730": [0, 0.69444, 0, 0, 0.83129],
    "732": [0, 0.66786, 0.11585, 0, 0.51111],
    "733": [0, 0.69444, 0.1225, 0, 0.51111],
    "915": [0, 0.68333, 0.13305, 0, 0.62722],
    "916": [0, 0.68333, 0, 0, 0.81777],
    "920": [0, 0.68333, 0.09403, 0, 0.76666],
    "923": [0, 0.68333, 0, 0, 0.69222],
    "926": [0, 0.68333, 0.15294, 0, 0.66444],
    "928": [0, 0.68333, 0.16389, 0, 0.74333],
    "931": [0, 0.68333, 0.12028, 0, 0.71555],
    "933": [0, 0.68333, 0.11111, 0, 0.76666],
    "934": [0, 0.68333, 0.05986, 0, 0.71555],
    "936": [0, 0.68333, 0.11111, 0, 0.76666],
    "937": [0, 0.68333, 0.10257, 0, 0.71555],
    "8211": [0, 0.43056, 0.09208, 0, 0.51111],
    "8212": [0, 0.43056, 0.09208, 0, 1.02222],
    "8216": [0, 0.69444, 0.12417, 0, 0.30667],
    "8217": [0, 0.69444, 0.12417, 0, 0.30667],
    "8220": [0, 0.69444, 0.1685, 0, 0.51444],
    "8221": [0, 0.69444, 0.06961, 0, 0.51444],
    "8463": [0, 0.68889, 0, 0, 0.54028]
  },
  "Main-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.27778],
    "34": [0, 0.69444, 0, 0, 0.5],
    "35": [0.19444, 0.69444, 0, 0, 0.83334],
    "36": [0.05556, 0.75, 0, 0, 0.5],
    "37": [0.05556, 0.75, 0, 0, 0.83334],
    "38": [0, 0.69444, 0, 0, 0.77778],
    "39": [0, 0.69444, 0, 0, 0.27778],
    "40": [0.25, 0.75, 0, 0, 0.38889],
    "41": [0.25, 0.75, 0, 0, 0.38889],
    "42": [0, 0.75, 0, 0, 0.5],
    "43": [0.08333, 0.58333, 0, 0, 0.77778],
    "44": [0.19444, 0.10556, 0, 0, 0.27778],
    "45": [0, 0.43056, 0, 0, 0.33333],
    "46": [0, 0.10556, 0, 0, 0.27778],
    "47": [0.25, 0.75, 0, 0, 0.5],
    "48": [0, 0.64444, 0, 0, 0.5],
    "49": [0, 0.64444, 0, 0, 0.5],
    "50": [0, 0.64444, 0, 0, 0.5],
    "51": [0, 0.64444, 0, 0, 0.5],
    "52": [0, 0.64444, 0, 0, 0.5],
    "53": [0, 0.64444, 0, 0, 0.5],
    "54": [0, 0.64444, 0, 0, 0.5],
    "55": [0, 0.64444, 0, 0, 0.5],
    "56": [0, 0.64444, 0, 0, 0.5],
    "57": [0, 0.64444, 0, 0, 0.5],
    "58": [0, 0.43056, 0, 0, 0.27778],
    "59": [0.19444, 0.43056, 0, 0, 0.27778],
    "60": [0.0391, 0.5391, 0, 0, 0.77778],
    "61": [-0.13313, 0.36687, 0, 0, 0.77778],
    "62": [0.0391, 0.5391, 0, 0, 0.77778],
    "63": [0, 0.69444, 0, 0, 0.47222],
    "64": [0, 0.69444, 0, 0, 0.77778],
    "65": [0, 0.68333, 0, 0, 0.75],
    "66": [0, 0.68333, 0, 0, 0.70834],
    "67": [0, 0.68333, 0, 0, 0.72222],
    "68": [0, 0.68333, 0, 0, 0.76389],
    "69": [0, 0.68333, 0, 0, 0.68056],
    "70": [0, 0.68333, 0, 0, 0.65278],
    "71": [0, 0.68333, 0, 0, 0.78472],
    "72": [0, 0.68333, 0, 0, 0.75],
    "73": [0, 0.68333, 0, 0, 0.36111],
    "74": [0, 0.68333, 0, 0, 0.51389],
    "75": [0, 0.68333, 0, 0, 0.77778],
    "76": [0, 0.68333, 0, 0, 0.625],
    "77": [0, 0.68333, 0, 0, 0.91667],
    "78": [0, 0.68333, 0, 0, 0.75],
    "79": [0, 0.68333, 0, 0, 0.77778],
    "80": [0, 0.68333, 0, 0, 0.68056],
    "81": [0.19444, 0.68333, 0, 0, 0.77778],
    "82": [0, 0.68333, 0, 0, 0.73611],
    "83": [0, 0.68333, 0, 0, 0.55556],
    "84": [0, 0.68333, 0, 0, 0.72222],
    "85": [0, 0.68333, 0, 0, 0.75],
    "86": [0, 0.68333, 0.01389, 0, 0.75],
    "87": [0, 0.68333, 0.01389, 0, 1.02778],
    "88": [0, 0.68333, 0, 0, 0.75],
    "89": [0, 0.68333, 0.025, 0, 0.75],
    "90": [0, 0.68333, 0, 0, 0.61111],
    "91": [0.25, 0.75, 0, 0, 0.27778],
    "92": [0.25, 0.75, 0, 0, 0.5],
    "93": [0.25, 0.75, 0, 0, 0.27778],
    "94": [0, 0.69444, 0, 0, 0.5],
    "95": [0.31, 0.12056, 0.02778, 0, 0.5],
    "97": [0, 0.43056, 0, 0, 0.5],
    "98": [0, 0.69444, 0, 0, 0.55556],
    "99": [0, 0.43056, 0, 0, 0.44445],
    "100": [0, 0.69444, 0, 0, 0.55556],
    "101": [0, 0.43056, 0, 0, 0.44445],
    "102": [0, 0.69444, 0.07778, 0, 0.30556],
    "103": [0.19444, 0.43056, 0.01389, 0, 0.5],
    "104": [0, 0.69444, 0, 0, 0.55556],
    "105": [0, 0.66786, 0, 0, 0.27778],
    "106": [0.19444, 0.66786, 0, 0, 0.30556],
    "107": [0, 0.69444, 0, 0, 0.52778],
    "108": [0, 0.69444, 0, 0, 0.27778],
    "109": [0, 0.43056, 0, 0, 0.83334],
    "110": [0, 0.43056, 0, 0, 0.55556],
    "111": [0, 0.43056, 0, 0, 0.5],
    "112": [0.19444, 0.43056, 0, 0, 0.55556],
    "113": [0.19444, 0.43056, 0, 0, 0.52778],
    "114": [0, 0.43056, 0, 0, 0.39167],
    "115": [0, 0.43056, 0, 0, 0.39445],
    "116": [0, 0.61508, 0, 0, 0.38889],
    "117": [0, 0.43056, 0, 0, 0.55556],
    "118": [0, 0.43056, 0.01389, 0, 0.52778],
    "119": [0, 0.43056, 0.01389, 0, 0.72222],
    "120": [0, 0.43056, 0, 0, 0.52778],
    "121": [0.19444, 0.43056, 0.01389, 0, 0.52778],
    "122": [0, 0.43056, 0, 0, 0.44445],
    "123": [0.25, 0.75, 0, 0, 0.5],
    "124": [0.25, 0.75, 0, 0, 0.27778],
    "125": [0.25, 0.75, 0, 0, 0.5],
    "126": [0.35, 0.31786, 0, 0, 0.5],
    "160": [0, 0, 0, 0, 0.25],
    "163": [0, 0.69444, 0, 0, 0.76909],
    "167": [0.19444, 0.69444, 0, 0, 0.44445],
    "168": [0, 0.66786, 0, 0, 0.5],
    "172": [0, 0.43056, 0, 0, 0.66667],
    "176": [0, 0.69444, 0, 0, 0.75],
    "177": [0.08333, 0.58333, 0, 0, 0.77778],
    "182": [0.19444, 0.69444, 0, 0, 0.61111],
    "184": [0.17014, 0, 0, 0, 0.44445],
    "198": [0, 0.68333, 0, 0, 0.90278],
    "215": [0.08333, 0.58333, 0, 0, 0.77778],
    "216": [0.04861, 0.73194, 0, 0, 0.77778],
    "223": [0, 0.69444, 0, 0, 0.5],
    "230": [0, 0.43056, 0, 0, 0.72222],
    "247": [0.08333, 0.58333, 0, 0, 0.77778],
    "248": [0.09722, 0.52778, 0, 0, 0.5],
    "305": [0, 0.43056, 0, 0, 0.27778],
    "338": [0, 0.68333, 0, 0, 1.01389],
    "339": [0, 0.43056, 0, 0, 0.77778],
    "567": [0.19444, 0.43056, 0, 0, 0.30556],
    "710": [0, 0.69444, 0, 0, 0.5],
    "711": [0, 0.62847, 0, 0, 0.5],
    "713": [0, 0.56778, 0, 0, 0.5],
    "714": [0, 0.69444, 0, 0, 0.5],
    "715": [0, 0.69444, 0, 0, 0.5],
    "728": [0, 0.69444, 0, 0, 0.5],
    "729": [0, 0.66786, 0, 0, 0.27778],
    "730": [0, 0.69444, 0, 0, 0.75],
    "732": [0, 0.66786, 0, 0, 0.5],
    "733": [0, 0.69444, 0, 0, 0.5],
    "915": [0, 0.68333, 0, 0, 0.625],
    "916": [0, 0.68333, 0, 0, 0.83334],
    "920": [0, 0.68333, 0, 0, 0.77778],
    "923": [0, 0.68333, 0, 0, 0.69445],
    "926": [0, 0.68333, 0, 0, 0.66667],
    "928": [0, 0.68333, 0, 0, 0.75],
    "931": [0, 0.68333, 0, 0, 0.72222],
    "933": [0, 0.68333, 0, 0, 0.77778],
    "934": [0, 0.68333, 0, 0, 0.72222],
    "936": [0, 0.68333, 0, 0, 0.77778],
    "937": [0, 0.68333, 0, 0, 0.72222],
    "8211": [0, 0.43056, 0.02778, 0, 0.5],
    "8212": [0, 0.43056, 0.02778, 0, 1.0],
    "8216": [0, 0.69444, 0, 0, 0.27778],
    "8217": [0, 0.69444, 0, 0, 0.27778],
    "8220": [0, 0.69444, 0, 0, 0.5],
    "8221": [0, 0.69444, 0, 0, 0.5],
    "8224": [0.19444, 0.69444, 0, 0, 0.44445],
    "8225": [0.19444, 0.69444, 0, 0, 0.44445],
    "8230": [0, 0.123, 0, 0, 1.172],
    "8242": [0, 0.55556, 0, 0, 0.275],
    "8407": [0, 0.71444, 0.15382, 0, 0.5],
    "8463": [0, 0.68889, 0, 0, 0.54028],
    "8465": [0, 0.69444, 0, 0, 0.72222],
    "8467": [0, 0.69444, 0, 0.11111, 0.41667],
    "8472": [0.19444, 0.43056, 0, 0.11111, 0.63646],
    "8476": [0, 0.69444, 0, 0, 0.72222],
    "8501": [0, 0.69444, 0, 0, 0.61111],
    "8592": [-0.13313, 0.36687, 0, 0, 1.0],
    "8593": [0.19444, 0.69444, 0, 0, 0.5],
    "8594": [-0.13313, 0.36687, 0, 0, 1.0],
    "8595": [0.19444, 0.69444, 0, 0, 0.5],
    "8596": [-0.13313, 0.36687, 0, 0, 1.0],
    "8597": [0.25, 0.75, 0, 0, 0.5],
    "8598": [0.19444, 0.69444, 0, 0, 1.0],
    "8599": [0.19444, 0.69444, 0, 0, 1.0],
    "8600": [0.19444, 0.69444, 0, 0, 1.0],
    "8601": [0.19444, 0.69444, 0, 0, 1.0],
    "8614": [0.011, 0.511, 0, 0, 1.0],
    "8617": [0.011, 0.511, 0, 0, 1.126],
    "8618": [0.011, 0.511, 0, 0, 1.126],
    "8636": [-0.13313, 0.36687, 0, 0, 1.0],
    "8637": [-0.13313, 0.36687, 0, 0, 1.0],
    "8640": [-0.13313, 0.36687, 0, 0, 1.0],
    "8641": [-0.13313, 0.36687, 0, 0, 1.0],
    "8652": [0.011, 0.671, 0, 0, 1.0],
    "8656": [-0.13313, 0.36687, 0, 0, 1.0],
    "8657": [0.19444, 0.69444, 0, 0, 0.61111],
    "8658": [-0.13313, 0.36687, 0, 0, 1.0],
    "8659": [0.19444, 0.69444, 0, 0, 0.61111],
    "8660": [-0.13313, 0.36687, 0, 0, 1.0],
    "8661": [0.25, 0.75, 0, 0, 0.61111],
    "8704": [0, 0.69444, 0, 0, 0.55556],
    "8706": [0, 0.69444, 0.05556, 0.08334, 0.5309],
    "8707": [0, 0.69444, 0, 0, 0.55556],
    "8709": [0.05556, 0.75, 0, 0, 0.5],
    "8711": [0, 0.68333, 0, 0, 0.83334],
    "8712": [0.0391, 0.5391, 0, 0, 0.66667],
    "8715": [0.0391, 0.5391, 0, 0, 0.66667],
    "8722": [0.08333, 0.58333, 0, 0, 0.77778],
    "8723": [0.08333, 0.58333, 0, 0, 0.77778],
    "8725": [0.25, 0.75, 0, 0, 0.5],
    "8726": [0.25, 0.75, 0, 0, 0.5],
    "8727": [-0.03472, 0.46528, 0, 0, 0.5],
    "8728": [-0.05555, 0.44445, 0, 0, 0.5],
    "8729": [-0.05555, 0.44445, 0, 0, 0.5],
    "8730": [0.2, 0.8, 0, 0, 0.83334],
    "8733": [0, 0.43056, 0, 0, 0.77778],
    "8734": [0, 0.43056, 0, 0, 1.0],
    "8736": [0, 0.69224, 0, 0, 0.72222],
    "8739": [0.25, 0.75, 0, 0, 0.27778],
    "8741": [0.25, 0.75, 0, 0, 0.5],
    "8743": [0, 0.55556, 0, 0, 0.66667],
    "8744": [0, 0.55556, 0, 0, 0.66667],
    "8745": [0, 0.55556, 0, 0, 0.66667],
    "8746": [0, 0.55556, 0, 0, 0.66667],
    "8747": [0.19444, 0.69444, 0.11111, 0, 0.41667],
    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
    "8768": [0.19444, 0.69444, 0, 0, 0.27778],
    "8771": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8773": [-0.022, 0.589, 0, 0, 0.778],
    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
    "8781": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8784": [-0.133, 0.673, 0, 0, 0.778],
    "8801": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8804": [0.13597, 0.63597, 0, 0, 0.77778],
    "8805": [0.13597, 0.63597, 0, 0, 0.77778],
    "8810": [0.0391, 0.5391, 0, 0, 1.0],
    "8811": [0.0391, 0.5391, 0, 0, 1.0],
    "8826": [0.0391, 0.5391, 0, 0, 0.77778],
    "8827": [0.0391, 0.5391, 0, 0, 0.77778],
    "8834": [0.0391, 0.5391, 0, 0, 0.77778],
    "8835": [0.0391, 0.5391, 0, 0, 0.77778],
    "8838": [0.13597, 0.63597, 0, 0, 0.77778],
    "8839": [0.13597, 0.63597, 0, 0, 0.77778],
    "8846": [0, 0.55556, 0, 0, 0.66667],
    "8849": [0.13597, 0.63597, 0, 0, 0.77778],
    "8850": [0.13597, 0.63597, 0, 0, 0.77778],
    "8851": [0, 0.55556, 0, 0, 0.66667],
    "8852": [0, 0.55556, 0, 0, 0.66667],
    "8853": [0.08333, 0.58333, 0, 0, 0.77778],
    "8854": [0.08333, 0.58333, 0, 0, 0.77778],
    "8855": [0.08333, 0.58333, 0, 0, 0.77778],
    "8856": [0.08333, 0.58333, 0, 0, 0.77778],
    "8857": [0.08333, 0.58333, 0, 0, 0.77778],
    "8866": [0, 0.69444, 0, 0, 0.61111],
    "8867": [0, 0.69444, 0, 0, 0.61111],
    "8868": [0, 0.69444, 0, 0, 0.77778],
    "8869": [0, 0.69444, 0, 0, 0.77778],
    "8872": [0.249, 0.75, 0, 0, 0.867],
    "8900": [-0.05555, 0.44445, 0, 0, 0.5],
    "8901": [-0.05555, 0.44445, 0, 0, 0.27778],
    "8902": [-0.03472, 0.46528, 0, 0, 0.5],
    "8904": [0.005, 0.505, 0, 0, 0.9],
    "8942": [0.03, 0.903, 0, 0, 0.278],
    "8943": [-0.19, 0.313, 0, 0, 1.172],
    "8945": [-0.1, 0.823, 0, 0, 1.282],
    "8968": [0.25, 0.75, 0, 0, 0.44445],
    "8969": [0.25, 0.75, 0, 0, 0.44445],
    "8970": [0.25, 0.75, 0, 0, 0.44445],
    "8971": [0.25, 0.75, 0, 0, 0.44445],
    "8994": [-0.14236, 0.35764, 0, 0, 1.0],
    "8995": [-0.14236, 0.35764, 0, 0, 1.0],
    "9136": [0.244, 0.744, 0, 0, 0.412],
    "9137": [0.244, 0.745, 0, 0, 0.412],
    "9651": [0.19444, 0.69444, 0, 0, 0.88889],
    "9657": [-0.03472, 0.46528, 0, 0, 0.5],
    "9661": [0.19444, 0.69444, 0, 0, 0.88889],
    "9667": [-0.03472, 0.46528, 0, 0, 0.5],
    "9711": [0.19444, 0.69444, 0, 0, 1.0],
    "9824": [0.12963, 0.69444, 0, 0, 0.77778],
    "9825": [0.12963, 0.69444, 0, 0, 0.77778],
    "9826": [0.12963, 0.69444, 0, 0, 0.77778],
    "9827": [0.12963, 0.69444, 0, 0, 0.77778],
    "9837": [0, 0.75, 0, 0, 0.38889],
    "9838": [0.19444, 0.69444, 0, 0, 0.38889],
    "9839": [0.19444, 0.69444, 0, 0, 0.38889],
    "10216": [0.25, 0.75, 0, 0, 0.38889],
    "10217": [0.25, 0.75, 0, 0, 0.38889],
    "10222": [0.244, 0.744, 0, 0, 0.412],
    "10223": [0.244, 0.745, 0, 0, 0.412],
    "10229": [0.011, 0.511, 0, 0, 1.609],
    "10230": [0.011, 0.511, 0, 0, 1.638],
    "10231": [0.011, 0.511, 0, 0, 1.859],
    "10232": [0.024, 0.525, 0, 0, 1.609],
    "10233": [0.024, 0.525, 0, 0, 1.638],
    "10234": [0.024, 0.525, 0, 0, 1.858],
    "10236": [0.011, 0.511, 0, 0, 1.638],
    "10815": [0, 0.68333, 0, 0, 0.75],
    "10927": [0.13597, 0.63597, 0, 0, 0.77778],
    "10928": [0.13597, 0.63597, 0, 0, 0.77778],
    "57376": [0.19444, 0.69444, 0, 0, 0]
  },
  "Math-BoldItalic": {
    "32": [0, 0, 0, 0, 0.25],
    "48": [0, 0.44444, 0, 0, 0.575],
    "49": [0, 0.44444, 0, 0, 0.575],
    "50": [0, 0.44444, 0, 0, 0.575],
    "51": [0.19444, 0.44444, 0, 0, 0.575],
    "52": [0.19444, 0.44444, 0, 0, 0.575],
    "53": [0.19444, 0.44444, 0, 0, 0.575],
    "54": [0, 0.64444, 0, 0, 0.575],
    "55": [0.19444, 0.44444, 0, 0, 0.575],
    "56": [0, 0.64444, 0, 0, 0.575],
    "57": [0.19444, 0.44444, 0, 0, 0.575],
    "65": [0, 0.68611, 0, 0, 0.86944],
    "66": [0, 0.68611, 0.04835, 0, 0.8664],
    "67": [0, 0.68611, 0.06979, 0, 0.81694],
    "68": [0, 0.68611, 0.03194, 0, 0.93812],
    "69": [0, 0.68611, 0.05451, 0, 0.81007],
    "70": [0, 0.68611, 0.15972, 0, 0.68889],
    "71": [0, 0.68611, 0, 0, 0.88673],
    "72": [0, 0.68611, 0.08229, 0, 0.98229],
    "73": [0, 0.68611, 0.07778, 0, 0.51111],
    "74": [0, 0.68611, 0.10069, 0, 0.63125],
    "75": [0, 0.68611, 0.06979, 0, 0.97118],
    "76": [0, 0.68611, 0, 0, 0.75555],
    "77": [0, 0.68611, 0.11424, 0, 1.14201],
    "78": [0, 0.68611, 0.11424, 0, 0.95034],
    "79": [0, 0.68611, 0.03194, 0, 0.83666],
    "80": [0, 0.68611, 0.15972, 0, 0.72309],
    "81": [0.19444, 0.68611, 0, 0, 0.86861],
    "82": [0, 0.68611, 0.00421, 0, 0.87235],
    "83": [0, 0.68611, 0.05382, 0, 0.69271],
    "84": [0, 0.68611, 0.15972, 0, 0.63663],
    "85": [0, 0.68611, 0.11424, 0, 0.80027],
    "86": [0, 0.68611, 0.25555, 0, 0.67778],
    "87": [0, 0.68611, 0.15972, 0, 1.09305],
    "88": [0, 0.68611, 0.07778, 0, 0.94722],
    "89": [0, 0.68611, 0.25555, 0, 0.67458],
    "90": [0, 0.68611, 0.06979, 0, 0.77257],
    "97": [0, 0.44444, 0, 0, 0.63287],
    "98": [0, 0.69444, 0, 0, 0.52083],
    "99": [0, 0.44444, 0, 0, 0.51342],
    "100": [0, 0.69444, 0, 0, 0.60972],
    "101": [0, 0.44444, 0, 0, 0.55361],
    "102": [0.19444, 0.69444, 0.11042, 0, 0.56806],
    "103": [0.19444, 0.44444, 0.03704, 0, 0.5449],
    "104": [0, 0.69444, 0, 0, 0.66759],
    "105": [0, 0.69326, 0, 0, 0.4048],
    "106": [0.19444, 0.69326, 0.0622, 0, 0.47083],
    "107": [0, 0.69444, 0.01852, 0, 0.6037],
    "108": [0, 0.69444, 0.0088, 0, 0.34815],
    "109": [0, 0.44444, 0, 0, 1.0324],
    "110": [0, 0.44444, 0, 0, 0.71296],
    "111": [0, 0.44444, 0, 0, 0.58472],
    "112": [0.19444, 0.44444, 0, 0, 0.60092],
    "113": [0.19444, 0.44444, 0.03704, 0, 0.54213],
    "114": [0, 0.44444, 0.03194, 0, 0.5287],
    "115": [0, 0.44444, 0, 0, 0.53125],
    "116": [0, 0.63492, 0, 0, 0.41528],
    "117": [0, 0.44444, 0, 0, 0.68102],
    "118": [0, 0.44444, 0.03704, 0, 0.56666],
    "119": [0, 0.44444, 0.02778, 0, 0.83148],
    "120": [0, 0.44444, 0, 0, 0.65903],
    "121": [0.19444, 0.44444, 0.03704, 0, 0.59028],
    "122": [0, 0.44444, 0.04213, 0, 0.55509],
    "160": [0, 0, 0, 0, 0.25],
    "915": [0, 0.68611, 0.15972, 0, 0.65694],
    "916": [0, 0.68611, 0, 0, 0.95833],
    "920": [0, 0.68611, 0.03194, 0, 0.86722],
    "923": [0, 0.68611, 0, 0, 0.80555],
    "926": [0, 0.68611, 0.07458, 0, 0.84125],
    "928": [0, 0.68611, 0.08229, 0, 0.98229],
    "931": [0, 0.68611, 0.05451, 0, 0.88507],
    "933": [0, 0.68611, 0.15972, 0, 0.67083],
    "934": [0, 0.68611, 0, 0, 0.76666],
    "936": [0, 0.68611, 0.11653, 0, 0.71402],
    "937": [0, 0.68611, 0.04835, 0, 0.8789],
    "945": [0, 0.44444, 0, 0, 0.76064],
    "946": [0.19444, 0.69444, 0.03403, 0, 0.65972],
    "947": [0.19444, 0.44444, 0.06389, 0, 0.59003],
    "948": [0, 0.69444, 0.03819, 0, 0.52222],
    "949": [0, 0.44444, 0, 0, 0.52882],
    "950": [0.19444, 0.69444, 0.06215, 0, 0.50833],
    "951": [0.19444, 0.44444, 0.03704, 0, 0.6],
    "952": [0, 0.69444, 0.03194, 0, 0.5618],
    "953": [0, 0.44444, 0, 0, 0.41204],
    "954": [0, 0.44444, 0, 0, 0.66759],
    "955": [0, 0.69444, 0, 0, 0.67083],
    "956": [0.19444, 0.44444, 0, 0, 0.70787],
    "957": [0, 0.44444, 0.06898, 0, 0.57685],
    "958": [0.19444, 0.69444, 0.03021, 0, 0.50833],
    "959": [0, 0.44444, 0, 0, 0.58472],
    "960": [0, 0.44444, 0.03704, 0, 0.68241],
    "961": [0.19444, 0.44444, 0, 0, 0.6118],
    "962": [0.09722, 0.44444, 0.07917, 0, 0.42361],
    "963": [0, 0.44444, 0.03704, 0, 0.68588],
    "964": [0, 0.44444, 0.13472, 0, 0.52083],
    "965": [0, 0.44444, 0.03704, 0, 0.63055],
    "966": [0.19444, 0.44444, 0, 0, 0.74722],
    "967": [0.19444, 0.44444, 0, 0, 0.71805],
    "968": [0.19444, 0.69444, 0.03704, 0, 0.75833],
    "969": [0, 0.44444, 0.03704, 0, 0.71782],
    "977": [0, 0.69444, 0, 0, 0.69155],
    "981": [0.19444, 0.69444, 0, 0, 0.7125],
    "982": [0, 0.44444, 0.03194, 0, 0.975],
    "1009": [0.19444, 0.44444, 0, 0, 0.6118],
    "1013": [0, 0.44444, 0, 0, 0.48333],
    "57649": [0, 0.44444, 0, 0, 0.39352],
    "57911": [0.19444, 0.44444, 0, 0, 0.43889]
  },
  "Math-Italic": {
    "32": [0, 0, 0, 0, 0.25],
    "48": [0, 0.43056, 0, 0, 0.5],
    "49": [0, 0.43056, 0, 0, 0.5],
    "50": [0, 0.43056, 0, 0, 0.5],
    "51": [0.19444, 0.43056, 0, 0, 0.5],
    "52": [0.19444, 0.43056, 0, 0, 0.5],
    "53": [0.19444, 0.43056, 0, 0, 0.5],
    "54": [0, 0.64444, 0, 0, 0.5],
    "55": [0.19444, 0.43056, 0, 0, 0.5],
    "56": [0, 0.64444, 0, 0, 0.5],
    "57": [0.19444, 0.43056, 0, 0, 0.5],
    "65": [0, 0.68333, 0, 0.13889, 0.75],
    "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
    "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
    "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
    "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
    "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
    "71": [0, 0.68333, 0, 0.08334, 0.78625],
    "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
    "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
    "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
    "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
    "76": [0, 0.68333, 0, 0.02778, 0.68056],
    "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
    "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
    "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
    "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
    "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
    "82": [0, 0.68333, 0.00773, 0.08334, 0.75929],
    "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
    "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
    "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
    "86": [0, 0.68333, 0.22222, 0, 0.58333],
    "87": [0, 0.68333, 0.13889, 0, 0.94445],
    "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
    "89": [0, 0.68333, 0.22222, 0, 0.58056],
    "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
    "97": [0, 0.43056, 0, 0, 0.52859],
    "98": [0, 0.69444, 0, 0, 0.42917],
    "99": [0, 0.43056, 0, 0.05556, 0.43276],
    "100": [0, 0.69444, 0, 0.16667, 0.52049],
    "101": [0, 0.43056, 0, 0.05556, 0.46563],
    "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
    "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
    "104": [0, 0.69444, 0, 0, 0.57616],
    "105": [0, 0.65952, 0, 0, 0.34451],
    "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
    "107": [0, 0.69444, 0.03148, 0, 0.5206],
    "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
    "109": [0, 0.43056, 0, 0, 0.87801],
    "110": [0, 0.43056, 0, 0, 0.60023],
    "111": [0, 0.43056, 0, 0.05556, 0.48472],
    "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
    "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
    "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
    "115": [0, 0.43056, 0, 0.05556, 0.46875],
    "116": [0, 0.61508, 0, 0.08334, 0.36111],
    "117": [0, 0.43056, 0, 0.02778, 0.57246],
    "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
    "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
    "120": [0, 0.43056, 0, 0.02778, 0.57153],
    "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
    "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
    "160": [0, 0, 0, 0, 0.25],
    "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
    "916": [0, 0.68333, 0, 0.16667, 0.83334],
    "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
    "923": [0, 0.68333, 0, 0.16667, 0.69445],
    "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
    "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
    "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
    "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
    "934": [0, 0.68333, 0, 0.08334, 0.66667],
    "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
    "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
    "945": [0, 0.43056, 0.0037, 0.02778, 0.6397],
    "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
    "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
    "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
    "949": [0, 0.43056, 0, 0.08334, 0.46632],
    "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
    "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
    "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
    "953": [0, 0.43056, 0, 0.05556, 0.35394],
    "954": [0, 0.43056, 0, 0, 0.57616],
    "955": [0, 0.69444, 0, 0, 0.58334],
    "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
    "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
    "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
    "959": [0, 0.43056, 0, 0.05556, 0.48472],
    "960": [0, 0.43056, 0.03588, 0, 0.57003],
    "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
    "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
    "963": [0, 0.43056, 0.03588, 0, 0.57141],
    "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
    "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
    "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
    "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
    "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
    "969": [0, 0.43056, 0.03588, 0, 0.62245],
    "977": [0, 0.69444, 0, 0.08334, 0.59144],
    "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
    "982": [0, 0.43056, 0.02778, 0, 0.82813],
    "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
    "1013": [0, 0.43056, 0, 0.05556, 0.4059],
    "57649": [0, 0.43056, 0, 0.02778, 0.32246],
    "57911": [0.19444, 0.43056, 0, 0.08334, 0.38403]
  },
  "SansSerif-Bold": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.36667],
    "34": [0, 0.69444, 0, 0, 0.55834],
    "35": [0.19444, 0.69444, 0, 0, 0.91667],
    "36": [0.05556, 0.75, 0, 0, 0.55],
    "37": [0.05556, 0.75, 0, 0, 1.02912],
    "38": [0, 0.69444, 0, 0, 0.83056],
    "39": [0, 0.69444, 0, 0, 0.30556],
    "40": [0.25, 0.75, 0, 0, 0.42778],
    "41": [0.25, 0.75, 0, 0, 0.42778],
    "42": [0, 0.75, 0, 0, 0.55],
    "43": [0.11667, 0.61667, 0, 0, 0.85556],
    "44": [0.10556, 0.13056, 0, 0, 0.30556],
    "45": [0, 0.45833, 0, 0, 0.36667],
    "46": [0, 0.13056, 0, 0, 0.30556],
    "47": [0.25, 0.75, 0, 0, 0.55],
    "48": [0, 0.69444, 0, 0, 0.55],
    "49": [0, 0.69444, 0, 0, 0.55],
    "50": [0, 0.69444, 0, 0, 0.55],
    "51": [0, 0.69444, 0, 0, 0.55],
    "52": [0, 0.69444, 0, 0, 0.55],
    "53": [0, 0.69444, 0, 0, 0.55],
    "54": [0, 0.69444, 0, 0, 0.55],
    "55": [0, 0.69444, 0, 0, 0.55],
    "56": [0, 0.69444, 0, 0, 0.55],
    "57": [0, 0.69444, 0, 0, 0.55],
    "58": [0, 0.45833, 0, 0, 0.30556],
    "59": [0.10556, 0.45833, 0, 0, 0.30556],
    "61": [-0.09375, 0.40625, 0, 0, 0.85556],
    "63": [0, 0.69444, 0, 0, 0.51945],
    "64": [0, 0.69444, 0, 0, 0.73334],
    "65": [0, 0.69444, 0, 0, 0.73334],
    "66": [0, 0.69444, 0, 0, 0.73334],
    "67": [0, 0.69444, 0, 0, 0.70278],
    "68": [0, 0.69444, 0, 0, 0.79445],
    "69": [0, 0.69444, 0, 0, 0.64167],
    "70": [0, 0.69444, 0, 0, 0.61111],
    "71": [0, 0.69444, 0, 0, 0.73334],
    "72": [0, 0.69444, 0, 0, 0.79445],
    "73": [0, 0.69444, 0, 0, 0.33056],
    "74": [0, 0.69444, 0, 0, 0.51945],
    "75": [0, 0.69444, 0, 0, 0.76389],
    "76": [0, 0.69444, 0, 0, 0.58056],
    "77": [0, 0.69444, 0, 0, 0.97778],
    "78": [0, 0.69444, 0, 0, 0.79445],
    "79": [0, 0.69444, 0, 0, 0.79445],
    "80": [0, 0.69444, 0, 0, 0.70278],
    "81": [0.10556, 0.69444, 0, 0, 0.79445],
    "82": [0, 0.69444, 0, 0, 0.70278],
    "83": [0, 0.69444, 0, 0, 0.61111],
    "84": [0, 0.69444, 0, 0, 0.73334],
    "85": [0, 0.69444, 0, 0, 0.76389],
    "86": [0, 0.69444, 0.01528, 0, 0.73334],
    "87": [0, 0.69444, 0.01528, 0, 1.03889],
    "88": [0, 0.69444, 0, 0, 0.73334],
    "89": [0, 0.69444, 0.0275, 0, 0.73334],
    "90": [0, 0.69444, 0, 0, 0.67223],
    "91": [0.25, 0.75, 0, 0, 0.34306],
    "93": [0.25, 0.75, 0, 0, 0.34306],
    "94": [0, 0.69444, 0, 0, 0.55],
    "95": [0.35, 0.10833, 0.03056, 0, 0.55],
    "97": [0, 0.45833, 0, 0, 0.525],
    "98": [0, 0.69444, 0, 0, 0.56111],
    "99": [0, 0.45833, 0, 0, 0.48889],
    "100": [0, 0.69444, 0, 0, 0.56111],
    "101": [0, 0.45833, 0, 0, 0.51111],
    "102": [0, 0.69444, 0.07639, 0, 0.33611],
    "103": [0.19444, 0.45833, 0.01528, 0, 0.55],
    "104": [0, 0.69444, 0, 0, 0.56111],
    "105": [0, 0.69444, 0, 0, 0.25556],
    "106": [0.19444, 0.69444, 0, 0, 0.28611],
    "107": [0, 0.69444, 0, 0, 0.53056],
    "108": [0, 0.69444, 0, 0, 0.25556],
    "109": [0, 0.45833, 0, 0, 0.86667],
    "110": [0, 0.45833, 0, 0, 0.56111],
    "111": [0, 0.45833, 0, 0, 0.55],
    "112": [0.19444, 0.45833, 0, 0, 0.56111],
    "113": [0.19444, 0.45833, 0, 0, 0.56111],
    "114": [0, 0.45833, 0.01528, 0, 0.37222],
    "115": [0, 0.45833, 0, 0, 0.42167],
    "116": [0, 0.58929, 0, 0, 0.40417],
    "117": [0, 0.45833, 0, 0, 0.56111],
    "118": [0, 0.45833, 0.01528, 0, 0.5],
    "119": [0, 0.45833, 0.01528, 0, 0.74445],
    "120": [0, 0.45833, 0, 0, 0.5],
    "121": [0.19444, 0.45833, 0.01528, 0, 0.5],
    "122": [0, 0.45833, 0, 0, 0.47639],
    "126": [0.35, 0.34444, 0, 0, 0.55],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.69444, 0, 0, 0.55],
    "176": [0, 0.69444, 0, 0, 0.73334],
    "180": [0, 0.69444, 0, 0, 0.55],
    "184": [0.17014, 0, 0, 0, 0.48889],
    "305": [0, 0.45833, 0, 0, 0.25556],
    "567": [0.19444, 0.45833, 0, 0, 0.28611],
    "710": [0, 0.69444, 0, 0, 0.55],
    "711": [0, 0.63542, 0, 0, 0.55],
    "713": [0, 0.63778, 0, 0, 0.55],
    "728": [0, 0.69444, 0, 0, 0.55],
    "729": [0, 0.69444, 0, 0, 0.30556],
    "730": [0, 0.69444, 0, 0, 0.73334],
    "732": [0, 0.69444, 0, 0, 0.55],
    "733": [0, 0.69444, 0, 0, 0.55],
    "915": [0, 0.69444, 0, 0, 0.58056],
    "916": [0, 0.69444, 0, 0, 0.91667],
    "920": [0, 0.69444, 0, 0, 0.85556],
    "923": [0, 0.69444, 0, 0, 0.67223],
    "926": [0, 0.69444, 0, 0, 0.73334],
    "928": [0, 0.69444, 0, 0, 0.79445],
    "931": [0, 0.69444, 0, 0, 0.79445],
    "933": [0, 0.69444, 0, 0, 0.85556],
    "934": [0, 0.69444, 0, 0, 0.79445],
    "936": [0, 0.69444, 0, 0, 0.85556],
    "937": [0, 0.69444, 0, 0, 0.79445],
    "8211": [0, 0.45833, 0.03056, 0, 0.55],
    "8212": [0, 0.45833, 0.03056, 0, 1.10001],
    "8216": [0, 0.69444, 0, 0, 0.30556],
    "8217": [0, 0.69444, 0, 0, 0.30556],
    "8220": [0, 0.69444, 0, 0, 0.55834],
    "8221": [0, 0.69444, 0, 0, 0.55834]
  },
  "SansSerif-Italic": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0.05733, 0, 0.31945],
    "34": [0, 0.69444, 0.00316, 0, 0.5],
    "35": [0.19444, 0.69444, 0.05087, 0, 0.83334],
    "36": [0.05556, 0.75, 0.11156, 0, 0.5],
    "37": [0.05556, 0.75, 0.03126, 0, 0.83334],
    "38": [0, 0.69444, 0.03058, 0, 0.75834],
    "39": [0, 0.69444, 0.07816, 0, 0.27778],
    "40": [0.25, 0.75, 0.13164, 0, 0.38889],
    "41": [0.25, 0.75, 0.02536, 0, 0.38889],
    "42": [0, 0.75, 0.11775, 0, 0.5],
    "43": [0.08333, 0.58333, 0.02536, 0, 0.77778],
    "44": [0.125, 0.08333, 0, 0, 0.27778],
    "45": [0, 0.44444, 0.01946, 0, 0.33333],
    "46": [0, 0.08333, 0, 0, 0.27778],
    "47": [0.25, 0.75, 0.13164, 0, 0.5],
    "48": [0, 0.65556, 0.11156, 0, 0.5],
    "49": [0, 0.65556, 0.11156, 0, 0.5],
    "50": [0, 0.65556, 0.11156, 0, 0.5],
    "51": [0, 0.65556, 0.11156, 0, 0.5],
    "52": [0, 0.65556, 0.11156, 0, 0.5],
    "53": [0, 0.65556, 0.11156, 0, 0.5],
    "54": [0, 0.65556, 0.11156, 0, 0.5],
    "55": [0, 0.65556, 0.11156, 0, 0.5],
    "56": [0, 0.65556, 0.11156, 0, 0.5],
    "57": [0, 0.65556, 0.11156, 0, 0.5],
    "58": [0, 0.44444, 0.02502, 0, 0.27778],
    "59": [0.125, 0.44444, 0.02502, 0, 0.27778],
    "61": [-0.13, 0.37, 0.05087, 0, 0.77778],
    "63": [0, 0.69444, 0.11809, 0, 0.47222],
    "64": [0, 0.69444, 0.07555, 0, 0.66667],
    "65": [0, 0.69444, 0, 0, 0.66667],
    "66": [0, 0.69444, 0.08293, 0, 0.66667],
    "67": [0, 0.69444, 0.11983, 0, 0.63889],
    "68": [0, 0.69444, 0.07555, 0, 0.72223],
    "69": [0, 0.69444, 0.11983, 0, 0.59722],
    "70": [0, 0.69444, 0.13372, 0, 0.56945],
    "71": [0, 0.69444, 0.11983, 0, 0.66667],
    "72": [0, 0.69444, 0.08094, 0, 0.70834],
    "73": [0, 0.69444, 0.13372, 0, 0.27778],
    "74": [0, 0.69444, 0.08094, 0, 0.47222],
    "75": [0, 0.69444, 0.11983, 0, 0.69445],
    "76": [0, 0.69444, 0, 0, 0.54167],
    "77": [0, 0.69444, 0.08094, 0, 0.875],
    "78": [0, 0.69444, 0.08094, 0, 0.70834],
    "79": [0, 0.69444, 0.07555, 0, 0.73611],
    "80": [0, 0.69444, 0.08293, 0, 0.63889],
    "81": [0.125, 0.69444, 0.07555, 0, 0.73611],
    "82": [0, 0.69444, 0.08293, 0, 0.64584],
    "83": [0, 0.69444, 0.09205, 0, 0.55556],
    "84": [0, 0.69444, 0.13372, 0, 0.68056],
    "85": [0, 0.69444, 0.08094, 0, 0.6875],
    "86": [0, 0.69444, 0.1615, 0, 0.66667],
    "87": [0, 0.69444, 0.1615, 0, 0.94445],
    "88": [0, 0.69444, 0.13372, 0, 0.66667],
    "89": [0, 0.69444, 0.17261, 0, 0.66667],
    "90": [0, 0.69444, 0.11983, 0, 0.61111],
    "91": [0.25, 0.75, 0.15942, 0, 0.28889],
    "93": [0.25, 0.75, 0.08719, 0, 0.28889],
    "94": [0, 0.69444, 0.0799, 0, 0.5],
    "95": [0.35, 0.09444, 0.08616, 0, 0.5],
    "97": [0, 0.44444, 0.00981, 0, 0.48056],
    "98": [0, 0.69444, 0.03057, 0, 0.51667],
    "99": [0, 0.44444, 0.08336, 0, 0.44445],
    "100": [0, 0.69444, 0.09483, 0, 0.51667],
    "101": [0, 0.44444, 0.06778, 0, 0.44445],
    "102": [0, 0.69444, 0.21705, 0, 0.30556],
    "103": [0.19444, 0.44444, 0.10836, 0, 0.5],
    "104": [0, 0.69444, 0.01778, 0, 0.51667],
    "105": [0, 0.67937, 0.09718, 0, 0.23889],
    "106": [0.19444, 0.67937, 0.09162, 0, 0.26667],
    "107": [0, 0.69444, 0.08336, 0, 0.48889],
    "108": [0, 0.69444, 0.09483, 0, 0.23889],
    "109": [0, 0.44444, 0.01778, 0, 0.79445],
    "110": [0, 0.44444, 0.01778, 0, 0.51667],
    "111": [0, 0.44444, 0.06613, 0, 0.5],
    "112": [0.19444, 0.44444, 0.0389, 0, 0.51667],
    "113": [0.19444, 0.44444, 0.04169, 0, 0.51667],
    "114": [0, 0.44444, 0.10836, 0, 0.34167],
    "115": [0, 0.44444, 0.0778, 0, 0.38333],
    "116": [0, 0.57143, 0.07225, 0, 0.36111],
    "117": [0, 0.44444, 0.04169, 0, 0.51667],
    "118": [0, 0.44444, 0.10836, 0, 0.46111],
    "119": [0, 0.44444, 0.10836, 0, 0.68334],
    "120": [0, 0.44444, 0.09169, 0, 0.46111],
    "121": [0.19444, 0.44444, 0.10836, 0, 0.46111],
    "122": [0, 0.44444, 0.08752, 0, 0.43472],
    "126": [0.35, 0.32659, 0.08826, 0, 0.5],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.67937, 0.06385, 0, 0.5],
    "176": [0, 0.69444, 0, 0, 0.73752],
    "184": [0.17014, 0, 0, 0, 0.44445],
    "305": [0, 0.44444, 0.04169, 0, 0.23889],
    "567": [0.19444, 0.44444, 0.04169, 0, 0.26667],
    "710": [0, 0.69444, 0.0799, 0, 0.5],
    "711": [0, 0.63194, 0.08432, 0, 0.5],
    "713": [0, 0.60889, 0.08776, 0, 0.5],
    "714": [0, 0.69444, 0.09205, 0, 0.5],
    "715": [0, 0.69444, 0, 0, 0.5],
    "728": [0, 0.69444, 0.09483, 0, 0.5],
    "729": [0, 0.67937, 0.07774, 0, 0.27778],
    "730": [0, 0.69444, 0, 0, 0.73752],
    "732": [0, 0.67659, 0.08826, 0, 0.5],
    "733": [0, 0.69444, 0.09205, 0, 0.5],
    "915": [0, 0.69444, 0.13372, 0, 0.54167],
    "916": [0, 0.69444, 0, 0, 0.83334],
    "920": [0, 0.69444, 0.07555, 0, 0.77778],
    "923": [0, 0.69444, 0, 0, 0.61111],
    "926": [0, 0.69444, 0.12816, 0, 0.66667],
    "928": [0, 0.69444, 0.08094, 0, 0.70834],
    "931": [0, 0.69444, 0.11983, 0, 0.72222],
    "933": [0, 0.69444, 0.09031, 0, 0.77778],
    "934": [0, 0.69444, 0.04603, 0, 0.72222],
    "936": [0, 0.69444, 0.09031, 0, 0.77778],
    "937": [0, 0.69444, 0.08293, 0, 0.72222],
    "8211": [0, 0.44444, 0.08616, 0, 0.5],
    "8212": [0, 0.44444, 0.08616, 0, 1.0],
    "8216": [0, 0.69444, 0.07816, 0, 0.27778],
    "8217": [0, 0.69444, 0.07816, 0, 0.27778],
    "8220": [0, 0.69444, 0.14205, 0, 0.5],
    "8221": [0, 0.69444, 0.00316, 0, 0.5]
  },
  "SansSerif-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.31945],
    "34": [0, 0.69444, 0, 0, 0.5],
    "35": [0.19444, 0.69444, 0, 0, 0.83334],
    "36": [0.05556, 0.75, 0, 0, 0.5],
    "37": [0.05556, 0.75, 0, 0, 0.83334],
    "38": [0, 0.69444, 0, 0, 0.75834],
    "39": [0, 0.69444, 0, 0, 0.27778],
    "40": [0.25, 0.75, 0, 0, 0.38889],
    "41": [0.25, 0.75, 0, 0, 0.38889],
    "42": [0, 0.75, 0, 0, 0.5],
    "43": [0.08333, 0.58333, 0, 0, 0.77778],
    "44": [0.125, 0.08333, 0, 0, 0.27778],
    "45": [0, 0.44444, 0, 0, 0.33333],
    "46": [0, 0.08333, 0, 0, 0.27778],
    "47": [0.25, 0.75, 0, 0, 0.5],
    "48": [0, 0.65556, 0, 0, 0.5],
    "49": [0, 0.65556, 0, 0, 0.5],
    "50": [0, 0.65556, 0, 0, 0.5],
    "51": [0, 0.65556, 0, 0, 0.5],
    "52": [0, 0.65556, 0, 0, 0.5],
    "53": [0, 0.65556, 0, 0, 0.5],
    "54": [0, 0.65556, 0, 0, 0.5],
    "55": [0, 0.65556, 0, 0, 0.5],
    "56": [0, 0.65556, 0, 0, 0.5],
    "57": [0, 0.65556, 0, 0, 0.5],
    "58": [0, 0.44444, 0, 0, 0.27778],
    "59": [0.125, 0.44444, 0, 0, 0.27778],
    "61": [-0.13, 0.37, 0, 0, 0.77778],
    "63": [0, 0.69444, 0, 0, 0.47222],
    "64": [0, 0.69444, 0, 0, 0.66667],
    "65": [0, 0.69444, 0, 0, 0.66667],
    "66": [0, 0.69444, 0, 0, 0.66667],
    "67": [0, 0.69444, 0, 0, 0.63889],
    "68": [0, 0.69444, 0, 0, 0.72223],
    "69": [0, 0.69444, 0, 0, 0.59722],
    "70": [0, 0.69444, 0, 0, 0.56945],
    "71": [0, 0.69444, 0, 0, 0.66667],
    "72": [0, 0.69444, 0, 0, 0.70834],
    "73": [0, 0.69444, 0, 0, 0.27778],
    "74": [0, 0.69444, 0, 0, 0.47222],
    "75": [0, 0.69444, 0, 0, 0.69445],
    "76": [0, 0.69444, 0, 0, 0.54167],
    "77": [0, 0.69444, 0, 0, 0.875],
    "78": [0, 0.69444, 0, 0, 0.70834],
    "79": [0, 0.69444, 0, 0, 0.73611],
    "80": [0, 0.69444, 0, 0, 0.63889],
    "81": [0.125, 0.69444, 0, 0, 0.73611],
    "82": [0, 0.69444, 0, 0, 0.64584],
    "83": [0, 0.69444, 0, 0, 0.55556],
    "84": [0, 0.69444, 0, 0, 0.68056],
    "85": [0, 0.69444, 0, 0, 0.6875],
    "86": [0, 0.69444, 0.01389, 0, 0.66667],
    "87": [0, 0.69444, 0.01389, 0, 0.94445],
    "88": [0, 0.69444, 0, 0, 0.66667],
    "89": [0, 0.69444, 0.025, 0, 0.66667],
    "90": [0, 0.69444, 0, 0, 0.61111],
    "91": [0.25, 0.75, 0, 0, 0.28889],
    "93": [0.25, 0.75, 0, 0, 0.28889],
    "94": [0, 0.69444, 0, 0, 0.5],
    "95": [0.35, 0.09444, 0.02778, 0, 0.5],
    "97": [0, 0.44444, 0, 0, 0.48056],
    "98": [0, 0.69444, 0, 0, 0.51667],
    "99": [0, 0.44444, 0, 0, 0.44445],
    "100": [0, 0.69444, 0, 0, 0.51667],
    "101": [0, 0.44444, 0, 0, 0.44445],
    "102": [0, 0.69444, 0.06944, 0, 0.30556],
    "103": [0.19444, 0.44444, 0.01389, 0, 0.5],
    "104": [0, 0.69444, 0, 0, 0.51667],
    "105": [0, 0.67937, 0, 0, 0.23889],
    "106": [0.19444, 0.67937, 0, 0, 0.26667],
    "107": [0, 0.69444, 0, 0, 0.48889],
    "108": [0, 0.69444, 0, 0, 0.23889],
    "109": [0, 0.44444, 0, 0, 0.79445],
    "110": [0, 0.44444, 0, 0, 0.51667],
    "111": [0, 0.44444, 0, 0, 0.5],
    "112": [0.19444, 0.44444, 0, 0, 0.51667],
    "113": [0.19444, 0.44444, 0, 0, 0.51667],
    "114": [0, 0.44444, 0.01389, 0, 0.34167],
    "115": [0, 0.44444, 0, 0, 0.38333],
    "116": [0, 0.57143, 0, 0, 0.36111],
    "117": [0, 0.44444, 0, 0, 0.51667],
    "118": [0, 0.44444, 0.01389, 0, 0.46111],
    "119": [0, 0.44444, 0.01389, 0, 0.68334],
    "120": [0, 0.44444, 0, 0, 0.46111],
    "121": [0.19444, 0.44444, 0.01389, 0, 0.46111],
    "122": [0, 0.44444, 0, 0, 0.43472],
    "126": [0.35, 0.32659, 0, 0, 0.5],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.67937, 0, 0, 0.5],
    "176": [0, 0.69444, 0, 0, 0.66667],
    "184": [0.17014, 0, 0, 0, 0.44445],
    "305": [0, 0.44444, 0, 0, 0.23889],
    "567": [0.19444, 0.44444, 0, 0, 0.26667],
    "710": [0, 0.69444, 0, 0, 0.5],
    "711": [0, 0.63194, 0, 0, 0.5],
    "713": [0, 0.60889, 0, 0, 0.5],
    "714": [0, 0.69444, 0, 0, 0.5],
    "715": [0, 0.69444, 0, 0, 0.5],
    "728": [0, 0.69444, 0, 0, 0.5],
    "729": [0, 0.67937, 0, 0, 0.27778],
    "730": [0, 0.69444, 0, 0, 0.66667],
    "732": [0, 0.67659, 0, 0, 0.5],
    "733": [0, 0.69444, 0, 0, 0.5],
    "915": [0, 0.69444, 0, 0, 0.54167],
    "916": [0, 0.69444, 0, 0, 0.83334],
    "920": [0, 0.69444, 0, 0, 0.77778],
    "923": [0, 0.69444, 0, 0, 0.61111],
    "926": [0, 0.69444, 0, 0, 0.66667],
    "928": [0, 0.69444, 0, 0, 0.70834],
    "931": [0, 0.69444, 0, 0, 0.72222],
    "933": [0, 0.69444, 0, 0, 0.77778],
    "934": [0, 0.69444, 0, 0, 0.72222],
    "936": [0, 0.69444, 0, 0, 0.77778],
    "937": [0, 0.69444, 0, 0, 0.72222],
    "8211": [0, 0.44444, 0.02778, 0, 0.5],
    "8212": [0, 0.44444, 0.02778, 0, 1.0],
    "8216": [0, 0.69444, 0, 0, 0.27778],
    "8217": [0, 0.69444, 0, 0, 0.27778],
    "8220": [0, 0.69444, 0, 0, 0.5],
    "8221": [0, 0.69444, 0, 0, 0.5]
  },
  "Script-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "65": [0, 0.7, 0.22925, 0, 0.80253],
    "66": [0, 0.7, 0.04087, 0, 0.90757],
    "67": [0, 0.7, 0.1689, 0, 0.66619],
    "68": [0, 0.7, 0.09371, 0, 0.77443],
    "69": [0, 0.7, 0.18583, 0, 0.56162],
    "70": [0, 0.7, 0.13634, 0, 0.89544],
    "71": [0, 0.7, 0.17322, 0, 0.60961],
    "72": [0, 0.7, 0.29694, 0, 0.96919],
    "73": [0, 0.7, 0.19189, 0, 0.80907],
    "74": [0.27778, 0.7, 0.19189, 0, 1.05159],
    "75": [0, 0.7, 0.31259, 0, 0.91364],
    "76": [0, 0.7, 0.19189, 0, 0.87373],
    "77": [0, 0.7, 0.15981, 0, 1.08031],
    "78": [0, 0.7, 0.3525, 0, 0.9015],
    "79": [0, 0.7, 0.08078, 0, 0.73787],
    "80": [0, 0.7, 0.08078, 0, 1.01262],
    "81": [0, 0.7, 0.03305, 0, 0.88282],
    "82": [0, 0.7, 0.06259, 0, 0.85],
    "83": [0, 0.7, 0.19189, 0, 0.86767],
    "84": [0, 0.7, 0.29087, 0, 0.74697],
    "85": [0, 0.7, 0.25815, 0, 0.79996],
    "86": [0, 0.7, 0.27523, 0, 0.62204],
    "87": [0, 0.7, 0.27523, 0, 0.80532],
    "88": [0, 0.7, 0.26006, 0, 0.94445],
    "89": [0, 0.7, 0.2939, 0, 0.70961],
    "90": [0, 0.7, 0.24037, 0, 0.8212],
    "160": [0, 0, 0, 0, 0.25]
  },
  "Size1-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [0.35001, 0.85, 0, 0, 0.45834],
    "41": [0.35001, 0.85, 0, 0, 0.45834],
    "47": [0.35001, 0.85, 0, 0, 0.57778],
    "91": [0.35001, 0.85, 0, 0, 0.41667],
    "92": [0.35001, 0.85, 0, 0, 0.57778],
    "93": [0.35001, 0.85, 0, 0, 0.41667],
    "123": [0.35001, 0.85, 0, 0, 0.58334],
    "125": [0.35001, 0.85, 0, 0, 0.58334],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.72222, 0, 0, 0.55556],
    "732": [0, 0.72222, 0, 0, 0.55556],
    "770": [0, 0.72222, 0, 0, 0.55556],
    "771": [0, 0.72222, 0, 0, 0.55556],
    "8214": [-0.00099, 0.601, 0, 0, 0.77778],
    "8593": [1e-05, 0.6, 0, 0, 0.66667],
    "8595": [1e-05, 0.6, 0, 0, 0.66667],
    "8657": [1e-05, 0.6, 0, 0, 0.77778],
    "8659": [1e-05, 0.6, 0, 0, 0.77778],
    "8719": [0.25001, 0.75, 0, 0, 0.94445],
    "8720": [0.25001, 0.75, 0, 0, 0.94445],
    "8721": [0.25001, 0.75, 0, 0, 1.05556],
    "8730": [0.35001, 0.85, 0, 0, 1.0],
    "8739": [-0.00599, 0.606, 0, 0, 0.33333],
    "8741": [-0.00599, 0.606, 0, 0, 0.55556],
    "8747": [0.30612, 0.805, 0.19445, 0, 0.47222],
    "8748": [0.306, 0.805, 0.19445, 0, 0.47222],
    "8749": [0.306, 0.805, 0.19445, 0, 0.47222],
    "8750": [0.30612, 0.805, 0.19445, 0, 0.47222],
    "8896": [0.25001, 0.75, 0, 0, 0.83334],
    "8897": [0.25001, 0.75, 0, 0, 0.83334],
    "8898": [0.25001, 0.75, 0, 0, 0.83334],
    "8899": [0.25001, 0.75, 0, 0, 0.83334],
    "8968": [0.35001, 0.85, 0, 0, 0.47222],
    "8969": [0.35001, 0.85, 0, 0, 0.47222],
    "8970": [0.35001, 0.85, 0, 0, 0.47222],
    "8971": [0.35001, 0.85, 0, 0, 0.47222],
    "9168": [-0.00099, 0.601, 0, 0, 0.66667],
    "10216": [0.35001, 0.85, 0, 0, 0.47222],
    "10217": [0.35001, 0.85, 0, 0, 0.47222],
    "10752": [0.25001, 0.75, 0, 0, 1.11111],
    "10753": [0.25001, 0.75, 0, 0, 1.11111],
    "10754": [0.25001, 0.75, 0, 0, 1.11111],
    "10756": [0.25001, 0.75, 0, 0, 0.83334],
    "10758": [0.25001, 0.75, 0, 0, 0.83334]
  },
  "Size2-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [0.65002, 1.15, 0, 0, 0.59722],
    "41": [0.65002, 1.15, 0, 0, 0.59722],
    "47": [0.65002, 1.15, 0, 0, 0.81111],
    "91": [0.65002, 1.15, 0, 0, 0.47222],
    "92": [0.65002, 1.15, 0, 0, 0.81111],
    "93": [0.65002, 1.15, 0, 0, 0.47222],
    "123": [0.65002, 1.15, 0, 0, 0.66667],
    "125": [0.65002, 1.15, 0, 0, 0.66667],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.75, 0, 0, 1.0],
    "732": [0, 0.75, 0, 0, 1.0],
    "770": [0, 0.75, 0, 0, 1.0],
    "771": [0, 0.75, 0, 0, 1.0],
    "8719": [0.55001, 1.05, 0, 0, 1.27778],
    "8720": [0.55001, 1.05, 0, 0, 1.27778],
    "8721": [0.55001, 1.05, 0, 0, 1.44445],
    "8730": [0.65002, 1.15, 0, 0, 1.0],
    "8747": [0.86225, 1.36, 0.44445, 0, 0.55556],
    "8748": [0.862, 1.36, 0.44445, 0, 0.55556],
    "8749": [0.862, 1.36, 0.44445, 0, 0.55556],
    "8750": [0.86225, 1.36, 0.44445, 0, 0.55556],
    "8896": [0.55001, 1.05, 0, 0, 1.11111],
    "8897": [0.55001, 1.05, 0, 0, 1.11111],
    "8898": [0.55001, 1.05, 0, 0, 1.11111],
    "8899": [0.55001, 1.05, 0, 0, 1.11111],
    "8968": [0.65002, 1.15, 0, 0, 0.52778],
    "8969": [0.65002, 1.15, 0, 0, 0.52778],
    "8970": [0.65002, 1.15, 0, 0, 0.52778],
    "8971": [0.65002, 1.15, 0, 0, 0.52778],
    "10216": [0.65002, 1.15, 0, 0, 0.61111],
    "10217": [0.65002, 1.15, 0, 0, 0.61111],
    "10752": [0.55001, 1.05, 0, 0, 1.51112],
    "10753": [0.55001, 1.05, 0, 0, 1.51112],
    "10754": [0.55001, 1.05, 0, 0, 1.51112],
    "10756": [0.55001, 1.05, 0, 0, 1.11111],
    "10758": [0.55001, 1.05, 0, 0, 1.11111]
  },
  "Size3-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [0.95003, 1.45, 0, 0, 0.73611],
    "41": [0.95003, 1.45, 0, 0, 0.73611],
    "47": [0.95003, 1.45, 0, 0, 1.04445],
    "91": [0.95003, 1.45, 0, 0, 0.52778],
    "92": [0.95003, 1.45, 0, 0, 1.04445],
    "93": [0.95003, 1.45, 0, 0, 0.52778],
    "123": [0.95003, 1.45, 0, 0, 0.75],
    "125": [0.95003, 1.45, 0, 0, 0.75],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.75, 0, 0, 1.44445],
    "732": [0, 0.75, 0, 0, 1.44445],
    "770": [0, 0.75, 0, 0, 1.44445],
    "771": [0, 0.75, 0, 0, 1.44445],
    "8730": [0.95003, 1.45, 0, 0, 1.0],
    "8968": [0.95003, 1.45, 0, 0, 0.58334],
    "8969": [0.95003, 1.45, 0, 0, 0.58334],
    "8970": [0.95003, 1.45, 0, 0, 0.58334],
    "8971": [0.95003, 1.45, 0, 0, 0.58334],
    "10216": [0.95003, 1.45, 0, 0, 0.75],
    "10217": [0.95003, 1.45, 0, 0, 0.75]
  },
  "Size4-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [1.25003, 1.75, 0, 0, 0.79167],
    "41": [1.25003, 1.75, 0, 0, 0.79167],
    "47": [1.25003, 1.75, 0, 0, 1.27778],
    "91": [1.25003, 1.75, 0, 0, 0.58334],
    "92": [1.25003, 1.75, 0, 0, 1.27778],
    "93": [1.25003, 1.75, 0, 0, 0.58334],
    "123": [1.25003, 1.75, 0, 0, 0.80556],
    "125": [1.25003, 1.75, 0, 0, 0.80556],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.825, 0, 0, 1.8889],
    "732": [0, 0.825, 0, 0, 1.8889],
    "770": [0, 0.825, 0, 0, 1.8889],
    "771": [0, 0.825, 0, 0, 1.8889],
    "8730": [1.25003, 1.75, 0, 0, 1.0],
    "8968": [1.25003, 1.75, 0, 0, 0.63889],
    "8969": [1.25003, 1.75, 0, 0, 0.63889],
    "8970": [1.25003, 1.75, 0, 0, 0.63889],
    "8971": [1.25003, 1.75, 0, 0, 0.63889],
    "9115": [0.64502, 1.155, 0, 0, 0.875],
    "9116": [1e-05, 0.6, 0, 0, 0.875],
    "9117": [0.64502, 1.155, 0, 0, 0.875],
    "9118": [0.64502, 1.155, 0, 0, 0.875],
    "9119": [1e-05, 0.6, 0, 0, 0.875],
    "9120": [0.64502, 1.155, 0, 0, 0.875],
    "9121": [0.64502, 1.155, 0, 0, 0.66667],
    "9122": [-0.00099, 0.601, 0, 0, 0.66667],
    "9123": [0.64502, 1.155, 0, 0, 0.66667],
    "9124": [0.64502, 1.155, 0, 0, 0.66667],
    "9125": [-0.00099, 0.601, 0, 0, 0.66667],
    "9126": [0.64502, 1.155, 0, 0, 0.66667],
    "9127": [1e-05, 0.9, 0, 0, 0.88889],
    "9128": [0.65002, 1.15, 0, 0, 0.88889],
    "9129": [0.90001, 0, 0, 0, 0.88889],
    "9130": [0, 0.3, 0, 0, 0.88889],
    "9131": [1e-05, 0.9, 0, 0, 0.88889],
    "9132": [0.65002, 1.15, 0, 0, 0.88889],
    "9133": [0.90001, 0, 0, 0, 0.88889],
    "9143": [0.88502, 0.915, 0, 0, 1.05556],
    "10216": [1.25003, 1.75, 0, 0, 0.80556],
    "10217": [1.25003, 1.75, 0, 0, 0.80556],
    "57344": [-0.00499, 0.605, 0, 0, 1.05556],
    "57345": [-0.00499, 0.605, 0, 0, 1.05556],
    "57680": [0, 0.12, 0, 0, 0.45],
    "57681": [0, 0.12, 0, 0, 0.45],
    "57682": [0, 0.12, 0, 0, 0.45],
    "57683": [0, 0.12, 0, 0, 0.45]
  },
  "Typewriter-Regular": {
    "32": [0, 0, 0, 0, 0.525],
    "33": [0, 0.61111, 0, 0, 0.525],
    "34": [0, 0.61111, 0, 0, 0.525],
    "35": [0, 0.61111, 0, 0, 0.525],
    "36": [0.08333, 0.69444, 0, 0, 0.525],
    "37": [0.08333, 0.69444, 0, 0, 0.525],
    "38": [0, 0.61111, 0, 0, 0.525],
    "39": [0, 0.61111, 0, 0, 0.525],
    "40": [0.08333, 0.69444, 0, 0, 0.525],
    "41": [0.08333, 0.69444, 0, 0, 0.525],
    "42": [0, 0.52083, 0, 0, 0.525],
    "43": [-0.08056, 0.53055, 0, 0, 0.525],
    "44": [0.13889, 0.125, 0, 0, 0.525],
    "45": [-0.08056, 0.53055, 0, 0, 0.525],
    "46": [0, 0.125, 0, 0, 0.525],
    "47": [0.08333, 0.69444, 0, 0, 0.525],
    "48": [0, 0.61111, 0, 0, 0.525],
    "49": [0, 0.61111, 0, 0, 0.525],
    "50": [0, 0.61111, 0, 0, 0.525],
    "51": [0, 0.61111, 0, 0, 0.525],
    "52": [0, 0.61111, 0, 0, 0.525],
    "53": [0, 0.61111, 0, 0, 0.525],
    "54": [0, 0.61111, 0, 0, 0.525],
    "55": [0, 0.61111, 0, 0, 0.525],
    "56": [0, 0.61111, 0, 0, 0.525],
    "57": [0, 0.61111, 0, 0, 0.525],
    "58": [0, 0.43056, 0, 0, 0.525],
    "59": [0.13889, 0.43056, 0, 0, 0.525],
    "60": [-0.05556, 0.55556, 0, 0, 0.525],
    "61": [-0.19549, 0.41562, 0, 0, 0.525],
    "62": [-0.05556, 0.55556, 0, 0, 0.525],
    "63": [0, 0.61111, 0, 0, 0.525],
    "64": [0, 0.61111, 0, 0, 0.525],
    "65": [0, 0.61111, 0, 0, 0.525],
    "66": [0, 0.61111, 0, 0, 0.525],
    "67": [0, 0.61111, 0, 0, 0.525],
    "68": [0, 0.61111, 0, 0, 0.525],
    "69": [0, 0.61111, 0, 0, 0.525],
    "70": [0, 0.61111, 0, 0, 0.525],
    "71": [0, 0.61111, 0, 0, 0.525],
    "72": [0, 0.61111, 0, 0, 0.525],
    "73": [0, 0.61111, 0, 0, 0.525],
    "74": [0, 0.61111, 0, 0, 0.525],
    "75": [0, 0.61111, 0, 0, 0.525],
    "76": [0, 0.61111, 0, 0, 0.525],
    "77": [0, 0.61111, 0, 0, 0.525],
    "78": [0, 0.61111, 0, 0, 0.525],
    "79": [0, 0.61111, 0, 0, 0.525],
    "80": [0, 0.61111, 0, 0, 0.525],
    "81": [0.13889, 0.61111, 0, 0, 0.525],
    "82": [0, 0.61111, 0, 0, 0.525],
    "83": [0, 0.61111, 0, 0, 0.525],
    "84": [0, 0.61111, 0, 0, 0.525],
    "85": [0, 0.61111, 0, 0, 0.525],
    "86": [0, 0.61111, 0, 0, 0.525],
    "87": [0, 0.61111, 0, 0, 0.525],
    "88": [0, 0.61111, 0, 0, 0.525],
    "89": [0, 0.61111, 0, 0, 0.525],
    "90": [0, 0.61111, 0, 0, 0.525],
    "91": [0.08333, 0.69444, 0, 0, 0.525],
    "92": [0.08333, 0.69444, 0, 0, 0.525],
    "93": [0.08333, 0.69444, 0, 0, 0.525],
    "94": [0, 0.61111, 0, 0, 0.525],
    "95": [0.09514, 0, 0, 0, 0.525],
    "96": [0, 0.61111, 0, 0, 0.525],
    "97": [0, 0.43056, 0, 0, 0.525],
    "98": [0, 0.61111, 0, 0, 0.525],
    "99": [0, 0.43056, 0, 0, 0.525],
    "100": [0, 0.61111, 0, 0, 0.525],
    "101": [0, 0.43056, 0, 0, 0.525],
    "102": [0, 0.61111, 0, 0, 0.525],
    "103": [0.22222, 0.43056, 0, 0, 0.525],
    "104": [0, 0.61111, 0, 0, 0.525],
    "105": [0, 0.61111, 0, 0, 0.525],
    "106": [0.22222, 0.61111, 0, 0, 0.525],
    "107": [0, 0.61111, 0, 0, 0.525],
    "108": [0, 0.61111, 0, 0, 0.525],
    "109": [0, 0.43056, 0, 0, 0.525],
    "110": [0, 0.43056, 0, 0, 0.525],
    "111": [0, 0.43056, 0, 0, 0.525],
    "112": [0.22222, 0.43056, 0, 0, 0.525],
    "113": [0.22222, 0.43056, 0, 0, 0.525],
    "114": [0, 0.43056, 0, 0, 0.525],
    "115": [0, 0.43056, 0, 0, 0.525],
    "116": [0, 0.55358, 0, 0, 0.525],
    "117": [0, 0.43056, 0, 0, 0.525],
    "118": [0, 0.43056, 0, 0, 0.525],
    "119": [0, 0.43056, 0, 0, 0.525],
    "120": [0, 0.43056, 0, 0, 0.525],
    "121": [0.22222, 0.43056, 0, 0, 0.525],
    "122": [0, 0.43056, 0, 0, 0.525],
    "123": [0.08333, 0.69444, 0, 0, 0.525],
    "124": [0.08333, 0.69444, 0, 0, 0.525],
    "125": [0.08333, 0.69444, 0, 0, 0.525],
    "126": [0, 0.61111, 0, 0, 0.525],
    "127": [0, 0.61111, 0, 0, 0.525],
    "160": [0, 0, 0, 0, 0.525],
    "176": [0, 0.61111, 0, 0, 0.525],
    "184": [0.19445, 0, 0, 0, 0.525],
    "305": [0, 0.43056, 0, 0, 0.525],
    "567": [0.22222, 0.43056, 0, 0, 0.525],
    "711": [0, 0.56597, 0, 0, 0.525],
    "713": [0, 0.56555, 0, 0, 0.525],
    "714": [0, 0.61111, 0, 0, 0.525],
    "715": [0, 0.61111, 0, 0, 0.525],
    "728": [0, 0.61111, 0, 0, 0.525],
    "730": [0, 0.61111, 0, 0, 0.525],
    "770": [0, 0.61111, 0, 0, 0.525],
    "771": [0, 0.61111, 0, 0, 0.525],
    "776": [0, 0.61111, 0, 0, 0.525],
    "915": [0, 0.61111, 0, 0, 0.525],
    "916": [0, 0.61111, 0, 0, 0.525],
    "920": [0, 0.61111, 0, 0, 0.525],
    "923": [0, 0.61111, 0, 0, 0.525],
    "926": [0, 0.61111, 0, 0, 0.525],
    "928": [0, 0.61111, 0, 0, 0.525],
    "931": [0, 0.61111, 0, 0, 0.525],
    "933": [0, 0.61111, 0, 0, 0.525],
    "934": [0, 0.61111, 0, 0, 0.525],
    "936": [0, 0.61111, 0, 0, 0.525],
    "937": [0, 0.61111, 0, 0, 0.525],
    "8216": [0, 0.61111, 0, 0, 0.525],
    "8217": [0, 0.61111, 0, 0, 0.525],
    "8242": [0, 0.61111, 0, 0, 0.525],
    "9251": [0.11111, 0.21944, 0, 0, 0.525]
  }
});
;// CONCATENATED MODULE: ./src/fontMetrics.js


/**
 * This file contains metrics regarding fonts and individual symbols. The sigma
 * and xi variables, as well as the metricMap map contain data extracted from
 * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
 * `metrics` variable and the getCharacterMetrics function.
 */
// In TeX, there are actually three sets of dimensions, one for each of
// textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:
// 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are
// provided in the the arrays below, in that order.
//
// The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.
// This was determined by running the following script:
//
//     latex -interaction=nonstopmode \
//     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
//     '$a$ \expandafter\show\the\textfont2' \
//     '\expandafter\show\the\scriptfont2' \
//     '\expandafter\show\the\scriptscriptfont2' \
//     '\stop'
//
// The metrics themselves were retreived using the following commands:
//
//     tftopl cmsy10
//     tftopl cmsy7
//     tftopl cmsy5
//
// The output of each of these commands is quite lengthy.  The only part we
// care about is the FONTDIMEN section. Each value is measured in EMs.
var sigmasAndXis = {
  slant: [0.250, 0.250, 0.250],
  // sigma1
  space: [0.000, 0.000, 0.000],
  // sigma2
  stretch: [0.000, 0.000, 0.000],
  // sigma3
  shrink: [0.000, 0.000, 0.000],
  // sigma4
  xHeight: [0.431, 0.431, 0.431],
  // sigma5
  quad: [1.000, 1.171, 1.472],
  // sigma6
  extraSpace: [0.000, 0.000, 0.000],
  // sigma7
  num1: [0.677, 0.732, 0.925],
  // sigma8
  num2: [0.394, 0.384, 0.387],
  // sigma9
  num3: [0.444, 0.471, 0.504],
  // sigma10
  denom1: [0.686, 0.752, 1.025],
  // sigma11
  denom2: [0.345, 0.344, 0.532],
  // sigma12
  sup1: [0.413, 0.503, 0.504],
  // sigma13
  sup2: [0.363, 0.431, 0.404],
  // sigma14
  sup3: [0.289, 0.286, 0.294],
  // sigma15
  sub1: [0.150, 0.143, 0.200],
  // sigma16
  sub2: [0.247, 0.286, 0.400],
  // sigma17
  supDrop: [0.386, 0.353, 0.494],
  // sigma18
  subDrop: [0.050, 0.071, 0.100],
  // sigma19
  delim1: [2.390, 1.700, 1.980],
  // sigma20
  delim2: [1.010, 1.157, 1.420],
  // sigma21
  axisHeight: [0.250, 0.250, 0.250],
  // sigma22
  // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
  // they correspond to the font parameters of the extension fonts (family 3).
  // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
  // match cmex7, we'd use cmex7.tfm values for script and scriptscript
  // values.
  defaultRuleThickness: [0.04, 0.049, 0.049],
  // xi8; cmex7: 0.049
  bigOpSpacing1: [0.111, 0.111, 0.111],
  // xi9
  bigOpSpacing2: [0.166, 0.166, 0.166],
  // xi10
  bigOpSpacing3: [0.2, 0.2, 0.2],
  // xi11
  bigOpSpacing4: [0.6, 0.611, 0.611],
  // xi12; cmex7: 0.611
  bigOpSpacing5: [0.1, 0.143, 0.143],
  // xi13; cmex7: 0.143
  // The \sqrt rule width is taken from the height of the surd character.
  // Since we use the same font at all sizes, this thickness doesn't scale.
  sqrtRuleThickness: [0.04, 0.04, 0.04],
  // This value determines how large a pt is, for metrics which are defined
  // in terms of pts.
  // This value is also used in katex.less; if you change it make sure the
  // values match.
  ptPerEm: [10.0, 10.0, 10.0],
  // The space between adjacent `|` columns in an array definition. From
  // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
  doubleRuleSep: [0.2, 0.2, 0.2],
  // The width of separator lines in {array} environments. From
  // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
  arrayRuleWidth: [0.04, 0.04, 0.04],
  // Two values from LaTeX source2e:
  fboxsep: [0.3, 0.3, 0.3],
  //        3 pt / ptPerEm
  fboxrule: [0.04, 0.04, 0.04] // 0.4 pt / ptPerEm

}; // This map contains a mapping from font name and character code to character
// metrics, including height, depth, italic correction, and skew (kern from the
// character to the corresponding \skewchar)
// This map is generated via `make metrics`. It should not be changed manually.

 // These are very rough approximations.  We default to Times New Roman which
// should have Latin-1 and Cyrillic characters, but may not depending on the
// operating system.  The metrics do not account for extra height from the
// accents.  In the case of Cyrillic characters which have both ascenders and
// descenders we prefer approximations with ascenders, primarily to prevent
// the fraction bar or root line from intersecting the glyph.
// TODO(kevinb) allow union of multiple glyph metrics for better accuracy.

var extraCharacterMap = {
  // Latin-1
  'Å': 'A',
  'Ð': 'D',
  'Þ': 'o',
  'å': 'a',
  'ð': 'd',
  'þ': 'o',
  // Cyrillic
  'А': 'A',
  'Б': 'B',
  'В': 'B',
  'Г': 'F',
  'Д': 'A',
  'Е': 'E',
  'Ж': 'K',
  'З': '3',
  'И': 'N',
  'Й': 'N',
  'К': 'K',
  'Л': 'N',
  'М': 'M',
  'Н': 'H',
  'О': 'O',
  'П': 'N',
  'Р': 'P',
  'С': 'C',
  'Т': 'T',
  'У': 'y',
  'Ф': 'O',
  'Х': 'X',
  'Ц': 'U',
  'Ч': 'h',
  'Ш': 'W',
  'Щ': 'W',
  'Ъ': 'B',
  'Ы': 'X',
  'Ь': 'B',
  'Э': '3',
  'Ю': 'X',
  'Я': 'R',
  'а': 'a',
  'б': 'b',
  'в': 'a',
  'г': 'r',
  'д': 'y',
  'е': 'e',
  'ж': 'm',
  'з': 'e',
  'и': 'n',
  'й': 'n',
  'к': 'n',
  'л': 'n',
  'м': 'm',
  'н': 'n',
  'о': 'o',
  'п': 'n',
  'р': 'p',
  'с': 'c',
  'т': 'o',
  'у': 'y',
  'ф': 'b',
  'х': 'x',
  'ц': 'n',
  'ч': 'n',
  'ш': 'w',
  'щ': 'w',
  'ъ': 'a',
  'ы': 'm',
  'ь': 'a',
  'э': 'e',
  'ю': 'm',
  'я': 'r'
};

/**
 * This function adds new font metrics to default metricMap
 * It can also override existing metrics
 */
function setFontMetrics(fontName, metrics) {
  fontMetricsData[fontName] = metrics;
}
/**
 * This function is a convenience function for looking up information in the
 * metricMap table. It takes a character as a string, and a font.
 *
 * Note: the `width` property may be undefined if fontMetricsData.js wasn't
 * built using `Make extended_metrics`.
 */

function getCharacterMetrics(character, font, mode) {
  if (!fontMetricsData[font]) {
    throw new Error("Font metrics not found for font: " + font + ".");
  }

  var ch = character.charCodeAt(0);
  var metrics = fontMetricsData[font][ch];

  if (!metrics && character[0] in extraCharacterMap) {
    ch = extraCharacterMap[character[0]].charCodeAt(0);
    metrics = fontMetricsData[font][ch];
  }

  if (!metrics && mode === 'text') {
    // We don't typically have font metrics for Asian scripts.
    // But since we support them in text mode, we need to return
    // some sort of metrics.
    // So if the character is in a script we support but we
    // don't have metrics for it, just use the metrics for
    // the Latin capital letter M. This is close enough because
    // we (currently) only care about the height of the glpyh
    // not its width.
    if (supportedCodepoint(ch)) {
      metrics = fontMetricsData[font][77]; // 77 is the charcode for 'M'
    }
  }

  if (metrics) {
    return {
      depth: metrics[0],
      height: metrics[1],
      italic: metrics[2],
      skew: metrics[3],
      width: metrics[4]
    };
  }
}
var fontMetricsBySizeIndex = {};
/**
 * Get the font metrics for a given size.
 */

function getGlobalMetrics(size) {
  var sizeIndex;

  if (size >= 5) {
    sizeIndex = 0;
  } else if (size >= 3) {
    sizeIndex = 1;
  } else {
    sizeIndex = 2;
  }

  if (!fontMetricsBySizeIndex[sizeIndex]) {
    var metrics = fontMetricsBySizeIndex[sizeIndex] = {
      cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
    };

    for (var key in sigmasAndXis) {
      if (sigmasAndXis.hasOwnProperty(key)) {
        metrics[key] = sigmasAndXis[key][sizeIndex];
      }
    }
  }

  return fontMetricsBySizeIndex[sizeIndex];
}
;// CONCATENATED MODULE: ./src/Options.js
/**
 * This file contains information about the options that the Parser carries
 * around with it while parsing. Data is held in an `Options` object, and when
 * recursing, a new `Options` object can be created with the `.with*` and
 * `.reset` functions.
 */

var sizeStyleMap = [// Each element contains [textsize, scriptsize, scriptscriptsize].
// The size mappings are taken from TeX with \normalsize=10pt.
[1, 1, 1], // size1: [5, 5, 5]              \tiny
[2, 1, 1], // size2: [6, 5, 5]
[3, 1, 1], // size3: [7, 5, 5]              \scriptsize
[4, 2, 1], // size4: [8, 6, 5]              \footnotesize
[5, 2, 1], // size5: [9, 6, 5]              \small
[6, 3, 1], // size6: [10, 7, 5]             \normalsize
[7, 4, 2], // size7: [12, 8, 6]             \large
[8, 6, 3], // size8: [14.4, 10, 7]          \Large
[9, 7, 6], // size9: [17.28, 12, 10]        \LARGE
[10, 8, 7], // size10: [20.74, 14.4, 12]     \huge
[11, 10, 9] // size11: [24.88, 20.74, 17.28] \HUGE
];
var sizeMultipliers = [// fontMetrics.js:getGlobalMetrics also uses size indexes, so if
// you change size indexes, change that function.
0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.44, 1.728, 2.074, 2.488];

var sizeAtStyle = function sizeAtStyle(size, style) {
  return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
}; // In these types, "" (empty string) means "no change".


/**
 * This is the main options class. It contains the current style, size, color,
 * and font.
 *
 * Options objects should not be modified. To create a new Options with
 * different properties, call a `.having*` method.
 */
var Options = /*#__PURE__*/function () {
  // A font family applies to a group of fonts (i.e. SansSerif), while a font
  // represents a specific font (i.e. SansSerif Bold).
  // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm

  /**
   * The base size index.
   */
  function Options(data) {
    this.style = void 0;
    this.color = void 0;
    this.size = void 0;
    this.textSize = void 0;
    this.phantom = void 0;
    this.font = void 0;
    this.fontFamily = void 0;
    this.fontWeight = void 0;
    this.fontShape = void 0;
    this.sizeMultiplier = void 0;
    this.maxSize = void 0;
    this.minRuleThickness = void 0;
    this._fontMetrics = void 0;
    this.style = data.style;
    this.color = data.color;
    this.size = data.size || Options.BASESIZE;
    this.textSize = data.textSize || this.size;
    this.phantom = !!data.phantom;
    this.font = data.font || "";
    this.fontFamily = data.fontFamily || "";
    this.fontWeight = data.fontWeight || '';
    this.fontShape = data.fontShape || '';
    this.sizeMultiplier = sizeMultipliers[this.size - 1];
    this.maxSize = data.maxSize;
    this.minRuleThickness = data.minRuleThickness;
    this._fontMetrics = undefined;
  }
  /**
   * Returns a new options object with the same properties as "this".  Properties
   * from "extension" will be copied to the new options object.
   */


  var _proto = Options.prototype;

  _proto.extend = function extend(extension) {
    var data = {
      style: this.style,
      size: this.size,
      textSize: this.textSize,
      color: this.color,
      phantom: this.phantom,
      font: this.font,
      fontFamily: this.fontFamily,
      fontWeight: this.fontWeight,
      fontShape: this.fontShape,
      maxSize: this.maxSize,
      minRuleThickness: this.minRuleThickness
    };

    for (var key in extension) {
      if (extension.hasOwnProperty(key)) {
        data[key] = extension[key];
      }
    }

    return new Options(data);
  }
  /**
   * Return an options object with the given style. If `this.style === style`,
   * returns `this`.
   */
  ;

  _proto.havingStyle = function havingStyle(style) {
    if (this.style === style) {
      return this;
    } else {
      return this.extend({
        style: style,
        size: sizeAtStyle(this.textSize, style)
      });
    }
  }
  /**
   * Return an options object with a cramped version of the current style. If
   * the current style is cramped, returns `this`.
   */
  ;

  _proto.havingCrampedStyle = function havingCrampedStyle() {
    return this.havingStyle(this.style.cramp());
  }
  /**
   * Return an options object with the given size and in at least `\textstyle`.
   * Returns `this` if appropriate.
   */
  ;

  _proto.havingSize = function havingSize(size) {
    if (this.size === size && this.textSize === size) {
      return this;
    } else {
      return this.extend({
        style: this.style.text(),
        size: size,
        textSize: size,
        sizeMultiplier: sizeMultipliers[size - 1]
      });
    }
  }
  /**
   * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
   * changes to at least `\textstyle`.
   */
  ;

  _proto.havingBaseStyle = function havingBaseStyle(style) {
    style = style || this.style.text();
    var wantSize = sizeAtStyle(Options.BASESIZE, style);

    if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {
      return this;
    } else {
      return this.extend({
        style: style,
        size: wantSize
      });
    }
  }
  /**
   * Remove the effect of sizing changes such as \Huge.
   * Keep the effect of the current style, such as \scriptstyle.
   */
  ;

  _proto.havingBaseSizing = function havingBaseSizing() {
    var size;

    switch (this.style.id) {
      case 4:
      case 5:
        size = 3; // normalsize in scriptstyle

        break;

      case 6:
      case 7:
        size = 1; // normalsize in scriptscriptstyle

        break;

      default:
        size = 6;
      // normalsize in textstyle or displaystyle
    }

    return this.extend({
      style: this.style.text(),
      size: size
    });
  }
  /**
   * Create a new options object with the given color.
   */
  ;

  _proto.withColor = function withColor(color) {
    return this.extend({
      color: color
    });
  }
  /**
   * Create a new options object with "phantom" set to true.
   */
  ;

  _proto.withPhantom = function withPhantom() {
    return this.extend({
      phantom: true
    });
  }
  /**
   * Creates a new options object with the given math font or old text font.
   * @type {[type]}
   */
  ;

  _proto.withFont = function withFont(font) {
    return this.extend({
      font: font
    });
  }
  /**
   * Create a new options objects with the given fontFamily.
   */
  ;

  _proto.withTextFontFamily = function withTextFontFamily(fontFamily) {
    return this.extend({
      fontFamily: fontFamily,
      font: ""
    });
  }
  /**
   * Creates a new options object with the given font weight
   */
  ;

  _proto.withTextFontWeight = function withTextFontWeight(fontWeight) {
    return this.extend({
      fontWeight: fontWeight,
      font: ""
    });
  }
  /**
   * Creates a new options object with the given font weight
   */
  ;

  _proto.withTextFontShape = function withTextFontShape(fontShape) {
    return this.extend({
      fontShape: fontShape,
      font: ""
    });
  }
  /**
   * Return the CSS sizing classes required to switch from enclosing options
   * `oldOptions` to `this`. Returns an array of classes.
   */
  ;

  _proto.sizingClasses = function sizingClasses(oldOptions) {
    if (oldOptions.size !== this.size) {
      return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
    } else {
      return [];
    }
  }
  /**
   * Return the CSS sizing classes required to switch to the base size. Like
   * `this.havingSize(BASESIZE).sizingClasses(this)`.
   */
  ;

  _proto.baseSizingClasses = function baseSizingClasses() {
    if (this.size !== Options.BASESIZE) {
      return ["sizing", "reset-size" + this.size, "size" + Options.BASESIZE];
    } else {
      return [];
    }
  }
  /**
   * Return the font metrics for this size.
   */
  ;

  _proto.fontMetrics = function fontMetrics() {
    if (!this._fontMetrics) {
      this._fontMetrics = getGlobalMetrics(this.size);
    }

    return this._fontMetrics;
  }
  /**
   * Gets the CSS color of the current options object
   */
  ;

  _proto.getColor = function getColor() {
    if (this.phantom) {
      return "transparent";
    } else {
      return this.color;
    }
  };

  return Options;
}();

Options.BASESIZE = 6;
/* harmony default export */ var src_Options = (Options);
;// CONCATENATED MODULE: ./src/units.js
/**
 * This file does conversion between units.  In particular, it provides
 * calculateSize to convert other units into ems.
 */

 // This table gives the number of TeX pts in one of each *absolute* TeX unit.
// Thus, multiplying a length by this number converts the length from units
// into pts.  Dividing the result by ptPerEm gives the number of ems
// *assuming* a font size of ptPerEm (normal size, normal style).

var ptPerUnit = {
  // https://en.wikibooks.org/wiki/LaTeX/Lengths and
  // https://tex.stackexchange.com/a/8263
  "pt": 1,
  // TeX point
  "mm": 7227 / 2540,
  // millimeter
  "cm": 7227 / 254,
  // centimeter
  "in": 72.27,
  // inch
  "bp": 803 / 800,
  // big (PostScript) points
  "pc": 12,
  // pica
  "dd": 1238 / 1157,
  // didot
  "cc": 14856 / 1157,
  // cicero (12 didot)
  "nd": 685 / 642,
  // new didot
  "nc": 1370 / 107,
  // new cicero (12 new didot)
  "sp": 1 / 65536,
  // scaled point (TeX's internal smallest unit)
  // https://tex.stackexchange.com/a/41371
  "px": 803 / 800 // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX

}; // Dictionary of relative units, for fast validity testing.

var relativeUnit = {
  "ex": true,
  "em": true,
  "mu": true
};

/**
 * Determine whether the specified unit (either a string defining the unit
 * or a "size" parse node containing a unit field) is valid.
 */
var validUnit = function validUnit(unit) {
  if (typeof unit !== "string") {
    unit = unit.unit;
  }

  return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
};
/*
 * Convert a "size" parse node (with numeric "number" and string "unit" fields,
 * as parsed by functions.js argType "size") into a CSS em value for the
 * current style/scale.  `options` gives the current options.
 */

var calculateSize = function calculateSize(sizeValue, options) {
  var scale;

  if (sizeValue.unit in ptPerUnit) {
    // Absolute units
    scale = ptPerUnit[sizeValue.unit] // Convert unit to pt
    / options.fontMetrics().ptPerEm // Convert pt to CSS em
    / options.sizeMultiplier; // Unscale to make absolute units
  } else if (sizeValue.unit === "mu") {
    // `mu` units scale with scriptstyle/scriptscriptstyle.
    scale = options.fontMetrics().cssEmPerMu;
  } else {
    // Other relative units always refer to the *textstyle* font
    // in the current size.
    var unitOptions;

    if (options.style.isTight()) {
      // isTight() means current style is script/scriptscript.
      unitOptions = options.havingStyle(options.style.text());
    } else {
      unitOptions = options;
    } // TODO: In TeX these units are relative to the quad of the current
    // *text* font, e.g. cmr10. KaTeX instead uses values from the
    // comparably-sized *Computer Modern symbol* font. At 10pt, these
    // match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;
    // cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.
    // TeX \showlists shows a kern of 1.13889 * fontsize;
    // KaTeX shows a kern of 1.171 * fontsize.


    if (sizeValue.unit === "ex") {
      scale = unitOptions.fontMetrics().xHeight;
    } else if (sizeValue.unit === "em") {
      scale = unitOptions.fontMetrics().quad;
    } else {
      throw new src_ParseError("Invalid unit: '" + sizeValue.unit + "'");
    }

    if (unitOptions !== options) {
      scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
    }
  }

  return Math.min(sizeValue.number * scale, options.maxSize);
};
/**
 * Round `n` to 4 decimal places, or to the nearest 1/10,000th em. See
 * https://github.com/KaTeX/KaTeX/pull/2460.
 */

var makeEm = function makeEm(n) {
  return +n.toFixed(4) + "em";
};
;// CONCATENATED MODULE: ./src/domTree.js
/**
 * These objects store the data about the DOM nodes we create, as well as some
 * extra data. They can then be transformed into real DOM nodes with the
 * `toNode` function or HTML markup using `toMarkup`. They are useful for both
 * storing extra properties on the nodes, as well as providing a way to easily
 * work with the DOM.
 *
 * Similar functions for working with MathML nodes exist in mathMLTree.js.
 *
 * TODO: refactor `span` and `anchor` into common superclass when
 * target environments support class inheritance
 */






/**
 * Create an HTML className based on a list of classes. In addition to joining
 * with spaces, we also remove empty classes.
 */
var createClass = function createClass(classes) {
  return classes.filter(function (cls) {
    return cls;
  }).join(" ");
};

var initNode = function initNode(classes, options, style) {
  this.classes = classes || [];
  this.attributes = {};
  this.height = 0;
  this.depth = 0;
  this.maxFontSize = 0;
  this.style = style || {};

  if (options) {
    if (options.style.isTight()) {
      this.classes.push("mtight");
    }

    var color = options.getColor();

    if (color) {
      this.style.color = color;
    }
  }
};
/**
 * Convert into an HTML node
 */


var _toNode = function toNode(tagName) {
  var node = document.createElement(tagName); // Apply the class

  node.className = createClass(this.classes); // Apply inline styles

  for (var style in this.style) {
    if (this.style.hasOwnProperty(style)) {
      // $FlowFixMe Flow doesn't seem to understand span.style's type.
      node.style[style] = this.style[style];
    }
  } // Apply attributes


  for (var attr in this.attributes) {
    if (this.attributes.hasOwnProperty(attr)) {
      node.setAttribute(attr, this.attributes[attr]);
    }
  } // Append the children, also as HTML nodes


  for (var i = 0; i < this.children.length; i++) {
    node.appendChild(this.children[i].toNode());
  }

  return node;
};
/**
 * Convert into an HTML markup string
 */


var _toMarkup = function toMarkup(tagName) {
  var markup = "<" + tagName; // Add the class

  if (this.classes.length) {
    markup += " class=\"" + utils.escape(createClass(this.classes)) + "\"";
  }

  var styles = ""; // Add the styles, after hyphenation

  for (var style in this.style) {
    if (this.style.hasOwnProperty(style)) {
      styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
    }
  }

  if (styles) {
    markup += " style=\"" + utils.escape(styles) + "\"";
  } // Add the attributes


  for (var attr in this.attributes) {
    if (this.attributes.hasOwnProperty(attr)) {
      markup += " " + attr + "=\"" + utils.escape(this.attributes[attr]) + "\"";
    }
  }

  markup += ">"; // Add the markup of the children, also as markup

  for (var i = 0; i < this.children.length; i++) {
    markup += this.children[i].toMarkup();
  }

  markup += "</" + tagName + ">";
  return markup;
}; // Making the type below exact with all optional fields doesn't work due to
// - https://github.com/facebook/flow/issues/4582
// - https://github.com/facebook/flow/issues/5688
// However, since *all* fields are optional, $Shape<> works as suggested in 5688
// above.
// This type does not include all CSS properties. Additional properties should
// be added as needed.


/**
 * This node represents a span node, with a className, a list of children, and
 * an inline style. It also contains information about its height, depth, and
 * maxFontSize.
 *
 * Represents two types with different uses: SvgSpan to wrap an SVG and DomSpan
 * otherwise. This typesafety is important when HTML builders access a span's
 * children.
 */
var Span = /*#__PURE__*/function () {
  function Span(classes, children, options, style) {
    this.children = void 0;
    this.attributes = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.width = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    initNode.call(this, classes, options, style);
    this.children = children || [];
  }
  /**
   * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
   * all browsers support attributes the same, and having too many custom
   * attributes is probably bad.
   */


  var _proto = Span.prototype;

  _proto.setAttribute = function setAttribute(attribute, value) {
    this.attributes[attribute] = value;
  };

  _proto.hasClass = function hasClass(className) {
    return utils.contains(this.classes, className);
  };

  _proto.toNode = function toNode() {
    return _toNode.call(this, "span");
  };

  _proto.toMarkup = function toMarkup() {
    return _toMarkup.call(this, "span");
  };

  return Span;
}();
/**
 * This node represents an anchor (<a>) element with a hyperlink.  See `span`
 * for further details.
 */

var Anchor = /*#__PURE__*/function () {
  function Anchor(href, classes, children, options) {
    this.children = void 0;
    this.attributes = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    initNode.call(this, classes, options);
    this.children = children || [];
    this.setAttribute('href', href);
  }

  var _proto2 = Anchor.prototype;

  _proto2.setAttribute = function setAttribute(attribute, value) {
    this.attributes[attribute] = value;
  };

  _proto2.hasClass = function hasClass(className) {
    return utils.contains(this.classes, className);
  };

  _proto2.toNode = function toNode() {
    return _toNode.call(this, "a");
  };

  _proto2.toMarkup = function toMarkup() {
    return _toMarkup.call(this, "a");
  };

  return Anchor;
}();
/**
 * This node represents an image embed (<img>) element.
 */

var Img = /*#__PURE__*/function () {
  function Img(src, alt, style) {
    this.src = void 0;
    this.alt = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    this.alt = alt;
    this.src = src;
    this.classes = ["mord"];
    this.style = style;
  }

  var _proto3 = Img.prototype;

  _proto3.hasClass = function hasClass(className) {
    return utils.contains(this.classes, className);
  };

  _proto3.toNode = function toNode() {
    var node = document.createElement("img");
    node.src = this.src;
    node.alt = this.alt;
    node.className = "mord"; // Apply inline styles

    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        // $FlowFixMe
        node.style[style] = this.style[style];
      }
    }

    return node;
  };

  _proto3.toMarkup = function toMarkup() {
    var markup = "<img  src='" + this.src + " 'alt='" + this.alt + "' "; // Add the styles, after hyphenation

    var styles = "";

    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
      }
    }

    if (styles) {
      markup += " style=\"" + utils.escape(styles) + "\"";
    }

    markup += "'/>";
    return markup;
  };

  return Img;
}();
var iCombinations = {
  'î': "\u0131\u0302",
  'ï': "\u0131\u0308",
  'í': "\u0131\u0301",
  // 'ī': '\u0131\u0304', // enable when we add Extended Latin
  'ì': "\u0131\u0300"
};
/**
 * A symbol node contains information about a single symbol. It either renders
 * to a single text node, or a span with a single text node in it, depending on
 * whether it has CSS classes, styles, or needs italic correction.
 */

var SymbolNode = /*#__PURE__*/function () {
  function SymbolNode(text, height, depth, italic, skew, width, classes, style) {
    this.text = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.italic = void 0;
    this.skew = void 0;
    this.width = void 0;
    this.maxFontSize = void 0;
    this.classes = void 0;
    this.style = void 0;
    this.text = text;
    this.height = height || 0;
    this.depth = depth || 0;
    this.italic = italic || 0;
    this.skew = skew || 0;
    this.width = width || 0;
    this.classes = classes || [];
    this.style = style || {};
    this.maxFontSize = 0; // Mark text from non-Latin scripts with specific classes so that we
    // can specify which fonts to use.  This allows us to render these
    // characters with a serif font in situations where the browser would
    // either default to a sans serif or render a placeholder character.
    // We use CSS class names like cjk_fallback, hangul_fallback and
    // brahmic_fallback. See ./unicodeScripts.js for the set of possible
    // script names

    var script = scriptFromCodepoint(this.text.charCodeAt(0));

    if (script) {
      this.classes.push(script + "_fallback");
    }

    if (/[îïíì]/.test(this.text)) {
      // add ī when we add Extended Latin
      this.text = iCombinations[this.text];
    }
  }

  var _proto4 = SymbolNode.prototype;

  _proto4.hasClass = function hasClass(className) {
    return utils.contains(this.classes, className);
  }
  /**
   * Creates a text node or span from a symbol node. Note that a span is only
   * created if it is needed.
   */
  ;

  _proto4.toNode = function toNode() {
    var node = document.createTextNode(this.text);
    var span = null;

    if (this.italic > 0) {
      span = document.createElement("span");
      span.style.marginRight = makeEm(this.italic);
    }

    if (this.classes.length > 0) {
      span = span || document.createElement("span");
      span.className = createClass(this.classes);
    }

    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        span = span || document.createElement("span"); // $FlowFixMe Flow doesn't seem to understand span.style's type.

        span.style[style] = this.style[style];
      }
    }

    if (span) {
      span.appendChild(node);
      return span;
    } else {
      return node;
    }
  }
  /**
   * Creates markup for a symbol node.
   */
  ;

  _proto4.toMarkup = function toMarkup() {
    // TODO(alpert): More duplication than I'd like from
    // span.prototype.toMarkup and symbolNode.prototype.toNode...
    var needsSpan = false;
    var markup = "<span";

    if (this.classes.length) {
      needsSpan = true;
      markup += " class=\"";
      markup += utils.escape(createClass(this.classes));
      markup += "\"";
    }

    var styles = "";

    if (this.italic > 0) {
      styles += "margin-right:" + this.italic + "em;";
    }

    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
      }
    }

    if (styles) {
      needsSpan = true;
      markup += " style=\"" + utils.escape(styles) + "\"";
    }

    var escaped = utils.escape(this.text);

    if (needsSpan) {
      markup += ">";
      markup += escaped;
      markup += "</span>";
      return markup;
    } else {
      return escaped;
    }
  };

  return SymbolNode;
}();
/**
 * SVG nodes are used to render stretchy wide elements.
 */

var SvgNode = /*#__PURE__*/function () {
  function SvgNode(children, attributes) {
    this.children = void 0;
    this.attributes = void 0;
    this.children = children || [];
    this.attributes = attributes || {};
  }

  var _proto5 = SvgNode.prototype;

  _proto5.toNode = function toNode() {
    var svgNS = "http://www.w3.org/2000/svg";
    var node = document.createElementNS(svgNS, "svg"); // Apply attributes

    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }

    for (var i = 0; i < this.children.length; i++) {
      node.appendChild(this.children[i].toNode());
    }

    return node;
  };

  _proto5.toMarkup = function toMarkup() {
    var markup = "<svg xmlns=\"http://www.w3.org/2000/svg\""; // Apply attributes

    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + "='" + this.attributes[attr] + "'";
      }
    }

    markup += ">";

    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }

    markup += "</svg>";
    return markup;
  };

  return SvgNode;
}();
var PathNode = /*#__PURE__*/function () {
  function PathNode(pathName, alternate) {
    this.pathName = void 0;
    this.alternate = void 0;
    this.pathName = pathName;
    this.alternate = alternate; // Used only for \sqrt, \phase, & tall delims
  }

  var _proto6 = PathNode.prototype;

  _proto6.toNode = function toNode() {
    var svgNS = "http://www.w3.org/2000/svg";
    var node = document.createElementNS(svgNS, "path");

    if (this.alternate) {
      node.setAttribute("d", this.alternate);
    } else {
      node.setAttribute("d", path[this.pathName]);
    }

    return node;
  };

  _proto6.toMarkup = function toMarkup() {
    if (this.alternate) {
      return "<path d='" + this.alternate + "'/>";
    } else {
      return "<path d='" + path[this.pathName] + "'/>";
    }
  };

  return PathNode;
}();
var LineNode = /*#__PURE__*/function () {
  function LineNode(attributes) {
    this.attributes = void 0;
    this.attributes = attributes || {};
  }

  var _proto7 = LineNode.prototype;

  _proto7.toNode = function toNode() {
    var svgNS = "http://www.w3.org/2000/svg";
    var node = document.createElementNS(svgNS, "line"); // Apply attributes

    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }

    return node;
  };

  _proto7.toMarkup = function toMarkup() {
    var markup = "<line";

    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + "='" + this.attributes[attr] + "'";
      }
    }

    markup += "/>";
    return markup;
  };

  return LineNode;
}();
function assertSymbolDomNode(group) {
  if (group instanceof SymbolNode) {
    return group;
  } else {
    throw new Error("Expected symbolNode but got " + String(group) + ".");
  }
}
function assertSpan(group) {
  if (group instanceof Span) {
    return group;
  } else {
    throw new Error("Expected span<HtmlDomNode> but got " + String(group) + ".");
  }
}
;// CONCATENATED MODULE: ./src/symbols.js
/**
 * This file holds a list of all no-argument functions and single-character
 * symbols (like 'a' or ';').
 *
 * For each of the symbols, there are three properties they can have:
 * - font (required): the font to be used for this symbol. Either "main" (the
     normal font), or "ams" (the ams fonts).
 * - group (required): the ParseNode group type the symbol should have (i.e.
     "textord", "mathord", etc).
     See https://github.com/KaTeX/KaTeX/wiki/Examining-TeX#group-types
 * - replace: the character that this symbol or function should be
 *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
 *   character in the main font).
 *
 * The outermost map in the table indicates what mode the symbols should be
 * accepted in (e.g. "math" or "text").
 */
// Some of these have a "-token" suffix since these are also used as `ParseNode`
// types for raw text tokens, and we want to avoid conflicts with higher-level
// `ParseNode` types. These `ParseNode`s are constructed within `Parser` by
// looking up the `symbols` map.
var ATOMS = {
  "bin": 1,
  "close": 1,
  "inner": 1,
  "open": 1,
  "punct": 1,
  "rel": 1
};
var NON_ATOMS = {
  "accent-token": 1,
  "mathord": 1,
  "op-token": 1,
  "spacing": 1,
  "textord": 1
};
var symbols = {
  "math": {},
  "text": {}
};
/* harmony default export */ var src_symbols = (symbols);
/** `acceptUnicodeChar = true` is only applicable if `replace` is set. */

function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {
  symbols[mode][name] = {
    font: font,
    group: group,
    replace: replace
  };

  if (acceptUnicodeChar && replace) {
    symbols[mode][replace] = symbols[mode][name];
  }
} // Some abbreviations for commonly used strings.
// This helps minify the code, and also spotting typos using jshint.
// modes:

var math = "math";
var symbols_text = "text"; // fonts:

var main = "main";
var ams = "ams"; // groups:

var accent = "accent-token";
var bin = "bin";
var symbols_close = "close";
var inner = "inner";
var mathord = "mathord";
var op = "op-token";
var symbols_open = "open";
var punct = "punct";
var rel = "rel";
var spacing = "spacing";
var textord = "textord"; // Now comes the symbol table
// Relation Symbols

defineSymbol(math, main, rel, "\u2261", "\\equiv", true);
defineSymbol(math, main, rel, "\u227A", "\\prec", true);
defineSymbol(math, main, rel, "\u227B", "\\succ", true);
defineSymbol(math, main, rel, "\u223C", "\\sim", true);
defineSymbol(math, main, rel, "\u22A5", "\\perp");
defineSymbol(math, main, rel, "\u2AAF", "\\preceq", true);
defineSymbol(math, main, rel, "\u2AB0", "\\succeq", true);
defineSymbol(math, main, rel, "\u2243", "\\simeq", true);
defineSymbol(math, main, rel, "\u2223", "\\mid", true);
defineSymbol(math, main, rel, "\u226A", "\\ll", true);
defineSymbol(math, main, rel, "\u226B", "\\gg", true);
defineSymbol(math, main, rel, "\u224D", "\\asymp", true);
defineSymbol(math, main, rel, "\u2225", "\\parallel");
defineSymbol(math, main, rel, "\u22C8", "\\bowtie", true);
defineSymbol(math, main, rel, "\u2323", "\\smile", true);
defineSymbol(math, main, rel, "\u2291", "\\sqsubseteq", true);
defineSymbol(math, main, rel, "\u2292", "\\sqsupseteq", true);
defineSymbol(math, main, rel, "\u2250", "\\doteq", true);
defineSymbol(math, main, rel, "\u2322", "\\frown", true);
defineSymbol(math, main, rel, "\u220B", "\\ni", true);
defineSymbol(math, main, rel, "\u221D", "\\propto", true);
defineSymbol(math, main, rel, "\u22A2", "\\vdash", true);
defineSymbol(math, main, rel, "\u22A3", "\\dashv", true);
defineSymbol(math, main, rel, "\u220B", "\\owns"); // Punctuation

defineSymbol(math, main, punct, ".", "\\ldotp");
defineSymbol(math, main, punct, "\u22C5", "\\cdotp"); // Misc Symbols

defineSymbol(math, main, textord, "#", "\\#");
defineSymbol(symbols_text, main, textord, "#", "\\#");
defineSymbol(math, main, textord, "&", "\\&");
defineSymbol(symbols_text, main, textord, "&", "\\&");
defineSymbol(math, main, textord, "\u2135", "\\aleph", true);
defineSymbol(math, main, textord, "\u2200", "\\forall", true);
defineSymbol(math, main, textord, "\u210F", "\\hbar", true);
defineSymbol(math, main, textord, "\u2203", "\\exists", true);
defineSymbol(math, main, textord, "\u2207", "\\nabla", true);
defineSymbol(math, main, textord, "\u266D", "\\flat", true);
defineSymbol(math, main, textord, "\u2113", "\\ell", true);
defineSymbol(math, main, textord, "\u266E", "\\natural", true);
defineSymbol(math, main, textord, "\u2663", "\\clubsuit", true);
defineSymbol(math, main, textord, "\u2118", "\\wp", true);
defineSymbol(math, main, textord, "\u266F", "\\sharp", true);
defineSymbol(math, main, textord, "\u2662", "\\diamondsuit", true);
defineSymbol(math, main, textord, "\u211C", "\\Re", true);
defineSymbol(math, main, textord, "\u2661", "\\heartsuit", true);
defineSymbol(math, main, textord, "\u2111", "\\Im", true);
defineSymbol(math, main, textord, "\u2660", "\\spadesuit", true);
defineSymbol(math, main, textord, "\xA7", "\\S", true);
defineSymbol(symbols_text, main, textord, "\xA7", "\\S");
defineSymbol(math, main, textord, "\xB6", "\\P", true);
defineSymbol(symbols_text, main, textord, "\xB6", "\\P"); // Math and Text

defineSymbol(math, main, textord, "\u2020", "\\dag");
defineSymbol(symbols_text, main, textord, "\u2020", "\\dag");
defineSymbol(symbols_text, main, textord, "\u2020", "\\textdagger");
defineSymbol(math, main, textord, "\u2021", "\\ddag");
defineSymbol(symbols_text, main, textord, "\u2021", "\\ddag");
defineSymbol(symbols_text, main, textord, "\u2021", "\\textdaggerdbl"); // Large Delimiters

defineSymbol(math, main, symbols_close, "\u23B1", "\\rmoustache", true);
defineSymbol(math, main, symbols_open, "\u23B0", "\\lmoustache", true);
defineSymbol(math, main, symbols_close, "\u27EF", "\\rgroup", true);
defineSymbol(math, main, symbols_open, "\u27EE", "\\lgroup", true); // Binary Operators

defineSymbol(math, main, bin, "\u2213", "\\mp", true);
defineSymbol(math, main, bin, "\u2296", "\\ominus", true);
defineSymbol(math, main, bin, "\u228E", "\\uplus", true);
defineSymbol(math, main, bin, "\u2293", "\\sqcap", true);
defineSymbol(math, main, bin, "\u2217", "\\ast");
defineSymbol(math, main, bin, "\u2294", "\\sqcup", true);
defineSymbol(math, main, bin, "\u25EF", "\\bigcirc", true);
defineSymbol(math, main, bin, "\u2219", "\\bullet");
defineSymbol(math, main, bin, "\u2021", "\\ddagger");
defineSymbol(math, main, bin, "\u2240", "\\wr", true);
defineSymbol(math, main, bin, "\u2A3F", "\\amalg");
defineSymbol(math, main, bin, "&", "\\And"); // from amsmath
// Arrow Symbols

defineSymbol(math, main, rel, "\u27F5", "\\longleftarrow", true);
defineSymbol(math, main, rel, "\u21D0", "\\Leftarrow", true);
defineSymbol(math, main, rel, "\u27F8", "\\Longleftarrow", true);
defineSymbol(math, main, rel, "\u27F6", "\\longrightarrow", true);
defineSymbol(math, main, rel, "\u21D2", "\\Rightarrow", true);
defineSymbol(math, main, rel, "\u27F9", "\\Longrightarrow", true);
defineSymbol(math, main, rel, "\u2194", "\\leftrightarrow", true);
defineSymbol(math, main, rel, "\u27F7", "\\longleftrightarrow", true);
defineSymbol(math, main, rel, "\u21D4", "\\Leftrightarrow", true);
defineSymbol(math, main, rel, "\u27FA", "\\Longleftrightarrow", true);
defineSymbol(math, main, rel, "\u21A6", "\\mapsto", true);
defineSymbol(math, main, rel, "\u27FC", "\\longmapsto", true);
defineSymbol(math, main, rel, "\u2197", "\\nearrow", true);
defineSymbol(math, main, rel, "\u21A9", "\\hookleftarrow", true);
defineSymbol(math, main, rel, "\u21AA", "\\hookrightarrow", true);
defineSymbol(math, main, rel, "\u2198", "\\searrow", true);
defineSymbol(math, main, rel, "\u21BC", "\\leftharpoonup", true);
defineSymbol(math, main, rel, "\u21C0", "\\rightharpoonup", true);
defineSymbol(math, main, rel, "\u2199", "\\swarrow", true);
defineSymbol(math, main, rel, "\u21BD", "\\leftharpoondown", true);
defineSymbol(math, main, rel, "\u21C1", "\\rightharpoondown", true);
defineSymbol(math, main, rel, "\u2196", "\\nwarrow", true);
defineSymbol(math, main, rel, "\u21CC", "\\rightleftharpoons", true); // AMS Negated Binary Relations

defineSymbol(math, ams, rel, "\u226E", "\\nless", true); // Symbol names preceeded by "@" each have a corresponding macro.

defineSymbol(math, ams, rel, "\uE010", "\\@nleqslant");
defineSymbol(math, ams, rel, "\uE011", "\\@nleqq");
defineSymbol(math, ams, rel, "\u2A87", "\\lneq", true);
defineSymbol(math, ams, rel, "\u2268", "\\lneqq", true);
defineSymbol(math, ams, rel, "\uE00C", "\\@lvertneqq");
defineSymbol(math, ams, rel, "\u22E6", "\\lnsim", true);
defineSymbol(math, ams, rel, "\u2A89", "\\lnapprox", true);
defineSymbol(math, ams, rel, "\u2280", "\\nprec", true); // unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.

defineSymbol(math, ams, rel, "\u22E0", "\\npreceq", true);
defineSymbol(math, ams, rel, "\u22E8", "\\precnsim", true);
defineSymbol(math, ams, rel, "\u2AB9", "\\precnapprox", true);
defineSymbol(math, ams, rel, "\u2241", "\\nsim", true);
defineSymbol(math, ams, rel, "\uE006", "\\@nshortmid");
defineSymbol(math, ams, rel, "\u2224", "\\nmid", true);
defineSymbol(math, ams, rel, "\u22AC", "\\nvdash", true);
defineSymbol(math, ams, rel, "\u22AD", "\\nvDash", true);
defineSymbol(math, ams, rel, "\u22EA", "\\ntriangleleft");
defineSymbol(math, ams, rel, "\u22EC", "\\ntrianglelefteq", true);
defineSymbol(math, ams, rel, "\u228A", "\\subsetneq", true);
defineSymbol(math, ams, rel, "\uE01A", "\\@varsubsetneq");
defineSymbol(math, ams, rel, "\u2ACB", "\\subsetneqq", true);
defineSymbol(math, ams, rel, "\uE017", "\\@varsubsetneqq");
defineSymbol(math, ams, rel, "\u226F", "\\ngtr", true);
defineSymbol(math, ams, rel, "\uE00F", "\\@ngeqslant");
defineSymbol(math, ams, rel, "\uE00E", "\\@ngeqq");
defineSymbol(math, ams, rel, "\u2A88", "\\gneq", true);
defineSymbol(math, ams, rel, "\u2269", "\\gneqq", true);
defineSymbol(math, ams, rel, "\uE00D", "\\@gvertneqq");
defineSymbol(math, ams, rel, "\u22E7", "\\gnsim", true);
defineSymbol(math, ams, rel, "\u2A8A", "\\gnapprox", true);
defineSymbol(math, ams, rel, "\u2281", "\\nsucc", true); // unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.

defineSymbol(math, ams, rel, "\u22E1", "\\nsucceq", true);
defineSymbol(math, ams, rel, "\u22E9", "\\succnsim", true);
defineSymbol(math, ams, rel, "\u2ABA", "\\succnapprox", true); // unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.

defineSymbol(math, ams, rel, "\u2246", "\\ncong", true);
defineSymbol(math, ams, rel, "\uE007", "\\@nshortparallel");
defineSymbol(math, ams, rel, "\u2226", "\\nparallel", true);
defineSymbol(math, ams, rel, "\u22AF", "\\nVDash", true);
defineSymbol(math, ams, rel, "\u22EB", "\\ntriangleright");
defineSymbol(math, ams, rel, "\u22ED", "\\ntrianglerighteq", true);
defineSymbol(math, ams, rel, "\uE018", "\\@nsupseteqq");
defineSymbol(math, ams, rel, "\u228B", "\\supsetneq", true);
defineSymbol(math, ams, rel, "\uE01B", "\\@varsupsetneq");
defineSymbol(math, ams, rel, "\u2ACC", "\\supsetneqq", true);
defineSymbol(math, ams, rel, "\uE019", "\\@varsupsetneqq");
defineSymbol(math, ams, rel, "\u22AE", "\\nVdash", true);
defineSymbol(math, ams, rel, "\u2AB5", "\\precneqq", true);
defineSymbol(math, ams, rel, "\u2AB6", "\\succneqq", true);
defineSymbol(math, ams, rel, "\uE016", "\\@nsubseteqq");
defineSymbol(math, ams, bin, "\u22B4", "\\unlhd");
defineSymbol(math, ams, bin, "\u22B5", "\\unrhd"); // AMS Negated Arrows

defineSymbol(math, ams, rel, "\u219A", "\\nleftarrow", true);
defineSymbol(math, ams, rel, "\u219B", "\\nrightarrow", true);
defineSymbol(math, ams, rel, "\u21CD", "\\nLeftarrow", true);
defineSymbol(math, ams, rel, "\u21CF", "\\nRightarrow", true);
defineSymbol(math, ams, rel, "\u21AE", "\\nleftrightarrow", true);
defineSymbol(math, ams, rel, "\u21CE", "\\nLeftrightarrow", true); // AMS Misc

defineSymbol(math, ams, rel, "\u25B3", "\\vartriangle");
defineSymbol(math, ams, textord, "\u210F", "\\hslash");
defineSymbol(math, ams, textord, "\u25BD", "\\triangledown");
defineSymbol(math, ams, textord, "\u25CA", "\\lozenge");
defineSymbol(math, ams, textord, "\u24C8", "\\circledS");
defineSymbol(math, ams, textord, "\xAE", "\\circledR");
defineSymbol(symbols_text, ams, textord, "\xAE", "\\circledR");
defineSymbol(math, ams, textord, "\u2221", "\\measuredangle", true);
defineSymbol(math, ams, textord, "\u2204", "\\nexists");
defineSymbol(math, ams, textord, "\u2127", "\\mho");
defineSymbol(math, ams, textord, "\u2132", "\\Finv", true);
defineSymbol(math, ams, textord, "\u2141", "\\Game", true);
defineSymbol(math, ams, textord, "\u2035", "\\backprime");
defineSymbol(math, ams, textord, "\u25B2", "\\blacktriangle");
defineSymbol(math, ams, textord, "\u25BC", "\\blacktriangledown");
defineSymbol(math, ams, textord, "\u25A0", "\\blacksquare");
defineSymbol(math, ams, textord, "\u29EB", "\\blacklozenge");
defineSymbol(math, ams, textord, "\u2605", "\\bigstar");
defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle", true);
defineSymbol(math, ams, textord, "\u2201", "\\complement", true); // unicode-math maps U+F0 to \matheth. We map to AMS function \eth

defineSymbol(math, ams, textord, "\xF0", "\\eth", true);
defineSymbol(symbols_text, main, textord, "\xF0", "\xF0");
defineSymbol(math, ams, textord, "\u2571", "\\diagup");
defineSymbol(math, ams, textord, "\u2572", "\\diagdown");
defineSymbol(math, ams, textord, "\u25A1", "\\square");
defineSymbol(math, ams, textord, "\u25A1", "\\Box");
defineSymbol(math, ams, textord, "\u25CA", "\\Diamond"); // unicode-math maps U+A5 to \mathyen. We map to AMS function \yen

defineSymbol(math, ams, textord, "\xA5", "\\yen", true);
defineSymbol(symbols_text, ams, textord, "\xA5", "\\yen", true);
defineSymbol(math, ams, textord, "\u2713", "\\checkmark", true);
defineSymbol(symbols_text, ams, textord, "\u2713", "\\checkmark"); // AMS Hebrew

defineSymbol(math, ams, textord, "\u2136", "\\beth", true);
defineSymbol(math, ams, textord, "\u2138", "\\daleth", true);
defineSymbol(math, ams, textord, "\u2137", "\\gimel", true); // AMS Greek

defineSymbol(math, ams, textord, "\u03DD", "\\digamma", true);
defineSymbol(math, ams, textord, "\u03F0", "\\varkappa"); // AMS Delimiters

defineSymbol(math, ams, symbols_open, "\u250C", "\\@ulcorner", true);
defineSymbol(math, ams, symbols_close, "\u2510", "\\@urcorner", true);
defineSymbol(math, ams, symbols_open, "\u2514", "\\@llcorner", true);
defineSymbol(math, ams, symbols_close, "\u2518", "\\@lrcorner", true); // AMS Binary Relations

defineSymbol(math, ams, rel, "\u2266", "\\leqq", true);
defineSymbol(math, ams, rel, "\u2A7D", "\\leqslant", true);
defineSymbol(math, ams, rel, "\u2A95", "\\eqslantless", true);
defineSymbol(math, ams, rel, "\u2272", "\\lesssim", true);
defineSymbol(math, ams, rel, "\u2A85", "\\lessapprox", true);
defineSymbol(math, ams, rel, "\u224A", "\\approxeq", true);
defineSymbol(math, ams, bin, "\u22D6", "\\lessdot");
defineSymbol(math, ams, rel, "\u22D8", "\\lll", true);
defineSymbol(math, ams, rel, "\u2276", "\\lessgtr", true);
defineSymbol(math, ams, rel, "\u22DA", "\\lesseqgtr", true);
defineSymbol(math, ams, rel, "\u2A8B", "\\lesseqqgtr", true);
defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");
defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq", true);
defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq", true);
defineSymbol(math, ams, rel, "\u223D", "\\backsim", true);
defineSymbol(math, ams, rel, "\u22CD", "\\backsimeq", true);
defineSymbol(math, ams, rel, "\u2AC5", "\\subseteqq", true);
defineSymbol(math, ams, rel, "\u22D0", "\\Subset", true);
defineSymbol(math, ams, rel, "\u228F", "\\sqsubset", true);
defineSymbol(math, ams, rel, "\u227C", "\\preccurlyeq", true);
defineSymbol(math, ams, rel, "\u22DE", "\\curlyeqprec", true);
defineSymbol(math, ams, rel, "\u227E", "\\precsim", true);
defineSymbol(math, ams, rel, "\u2AB7", "\\precapprox", true);
defineSymbol(math, ams, rel, "\u22B2", "\\vartriangleleft");
defineSymbol(math, ams, rel, "\u22B4", "\\trianglelefteq");
defineSymbol(math, ams, rel, "\u22A8", "\\vDash", true);
defineSymbol(math, ams, rel, "\u22AA", "\\Vvdash", true);
defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");
defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");
defineSymbol(math, ams, rel, "\u224F", "\\bumpeq", true);
defineSymbol(math, ams, rel, "\u224E", "\\Bumpeq", true);
defineSymbol(math, ams, rel, "\u2267", "\\geqq", true);
defineSymbol(math, ams, rel, "\u2A7E", "\\geqslant", true);
defineSymbol(math, ams, rel, "\u2A96", "\\eqslantgtr", true);
defineSymbol(math, ams, rel, "\u2273", "\\gtrsim", true);
defineSymbol(math, ams, rel, "\u2A86", "\\gtrapprox", true);
defineSymbol(math, ams, bin, "\u22D7", "\\gtrdot");
defineSymbol(math, ams, rel, "\u22D9", "\\ggg", true);
defineSymbol(math, ams, rel, "\u2277", "\\gtrless", true);
defineSymbol(math, ams, rel, "\u22DB", "\\gtreqless", true);
defineSymbol(math, ams, rel, "\u2A8C", "\\gtreqqless", true);
defineSymbol(math, ams, rel, "\u2256", "\\eqcirc", true);
defineSymbol(math, ams, rel, "\u2257", "\\circeq", true);
defineSymbol(math, ams, rel, "\u225C", "\\triangleq", true);
defineSymbol(math, ams, rel, "\u223C", "\\thicksim");
defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");
defineSymbol(math, ams, rel, "\u2AC6", "\\supseteqq", true);
defineSymbol(math, ams, rel, "\u22D1", "\\Supset", true);
defineSymbol(math, ams, rel, "\u2290", "\\sqsupset", true);
defineSymbol(math, ams, rel, "\u227D", "\\succcurlyeq", true);
defineSymbol(math, ams, rel, "\u22DF", "\\curlyeqsucc", true);
defineSymbol(math, ams, rel, "\u227F", "\\succsim", true);
defineSymbol(math, ams, rel, "\u2AB8", "\\succapprox", true);
defineSymbol(math, ams, rel, "\u22B3", "\\vartriangleright");
defineSymbol(math, ams, rel, "\u22B5", "\\trianglerighteq");
defineSymbol(math, ams, rel, "\u22A9", "\\Vdash", true);
defineSymbol(math, ams, rel, "\u2223", "\\shortmid");
defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");
defineSymbol(math, ams, rel, "\u226C", "\\between", true);
defineSymbol(math, ams, rel, "\u22D4", "\\pitchfork", true);
defineSymbol(math, ams, rel, "\u221D", "\\varpropto");
defineSymbol(math, ams, rel, "\u25C0", "\\blacktriangleleft"); // unicode-math says that \therefore is a mathord atom.
// We kept the amssymb atom type, which is rel.

defineSymbol(math, ams, rel, "\u2234", "\\therefore", true);
defineSymbol(math, ams, rel, "\u220D", "\\backepsilon");
defineSymbol(math, ams, rel, "\u25B6", "\\blacktriangleright"); // unicode-math says that \because is a mathord atom.
// We kept the amssymb atom type, which is rel.

defineSymbol(math, ams, rel, "\u2235", "\\because", true);
defineSymbol(math, ams, rel, "\u22D8", "\\llless");
defineSymbol(math, ams, rel, "\u22D9", "\\gggtr");
defineSymbol(math, ams, bin, "\u22B2", "\\lhd");
defineSymbol(math, ams, bin, "\u22B3", "\\rhd");
defineSymbol(math, ams, rel, "\u2242", "\\eqsim", true);
defineSymbol(math, main, rel, "\u22C8", "\\Join");
defineSymbol(math, ams, rel, "\u2251", "\\Doteq", true); // AMS Binary Operators

defineSymbol(math, ams, bin, "\u2214", "\\dotplus", true);
defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");
defineSymbol(math, ams, bin, "\u22D2", "\\Cap", true);
defineSymbol(math, ams, bin, "\u22D3", "\\Cup", true);
defineSymbol(math, ams, bin, "\u2A5E", "\\doublebarwedge", true);
defineSymbol(math, ams, bin, "\u229F", "\\boxminus", true);
defineSymbol(math, ams, bin, "\u229E", "\\boxplus", true);
defineSymbol(math, ams, bin, "\u22C7", "\\divideontimes", true);
defineSymbol(math, ams, bin, "\u22C9", "\\ltimes", true);
defineSymbol(math, ams, bin, "\u22CA", "\\rtimes", true);
defineSymbol(math, ams, bin, "\u22CB", "\\leftthreetimes", true);
defineSymbol(math, ams, bin, "\u22CC", "\\rightthreetimes", true);
defineSymbol(math, ams, bin, "\u22CF", "\\curlywedge", true);
defineSymbol(math, ams, bin, "\u22CE", "\\curlyvee", true);
defineSymbol(math, ams, bin, "\u229D", "\\circleddash", true);
defineSymbol(math, ams, bin, "\u229B", "\\circledast", true);
defineSymbol(math, ams, bin, "\u22C5", "\\centerdot");
defineSymbol(math, ams, bin, "\u22BA", "\\intercal", true);
defineSymbol(math, ams, bin, "\u22D2", "\\doublecap");
defineSymbol(math, ams, bin, "\u22D3", "\\doublecup");
defineSymbol(math, ams, bin, "\u22A0", "\\boxtimes", true); // AMS Arrows
// Note: unicode-math maps \u21e2 to their own function \rightdasharrow.
// We'll map it to AMS function \dashrightarrow. It produces the same atom.

defineSymbol(math, ams, rel, "\u21E2", "\\dashrightarrow", true); // unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.

defineSymbol(math, ams, rel, "\u21E0", "\\dashleftarrow", true);
defineSymbol(math, ams, rel, "\u21C7", "\\leftleftarrows", true);
defineSymbol(math, ams, rel, "\u21C6", "\\leftrightarrows", true);
defineSymbol(math, ams, rel, "\u21DA", "\\Lleftarrow", true);
defineSymbol(math, ams, rel, "\u219E", "\\twoheadleftarrow", true);
defineSymbol(math, ams, rel, "\u21A2", "\\leftarrowtail", true);
defineSymbol(math, ams, rel, "\u21AB", "\\looparrowleft", true);
defineSymbol(math, ams, rel, "\u21CB", "\\leftrightharpoons", true);
defineSymbol(math, ams, rel, "\u21B6", "\\curvearrowleft", true); // unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.

defineSymbol(math, ams, rel, "\u21BA", "\\circlearrowleft", true);
defineSymbol(math, ams, rel, "\u21B0", "\\Lsh", true);
defineSymbol(math, ams, rel, "\u21C8", "\\upuparrows", true);
defineSymbol(math, ams, rel, "\u21BF", "\\upharpoonleft", true);
defineSymbol(math, ams, rel, "\u21C3", "\\downharpoonleft", true);
defineSymbol(math, main, rel, "\u22B6", "\\origof", true); // not in font

defineSymbol(math, main, rel, "\u22B7", "\\imageof", true); // not in font

defineSymbol(math, ams, rel, "\u22B8", "\\multimap", true);
defineSymbol(math, ams, rel, "\u21AD", "\\leftrightsquigarrow", true);
defineSymbol(math, ams, rel, "\u21C9", "\\rightrightarrows", true);
defineSymbol(math, ams, rel, "\u21C4", "\\rightleftarrows", true);
defineSymbol(math, ams, rel, "\u21A0", "\\twoheadrightarrow", true);
defineSymbol(math, ams, rel, "\u21A3", "\\rightarrowtail", true);
defineSymbol(math, ams, rel, "\u21AC", "\\looparrowright", true);
defineSymbol(math, ams, rel, "\u21B7", "\\curvearrowright", true); // unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.

defineSymbol(math, ams, rel, "\u21BB", "\\circlearrowright", true);
defineSymbol(math, ams, rel, "\u21B1", "\\Rsh", true);
defineSymbol(math, ams, rel, "\u21CA", "\\downdownarrows", true);
defineSymbol(math, ams, rel, "\u21BE", "\\upharpoonright", true);
defineSymbol(math, ams, rel, "\u21C2", "\\downharpoonright", true);
defineSymbol(math, ams, rel, "\u21DD", "\\rightsquigarrow", true);
defineSymbol(math, ams, rel, "\u21DD", "\\leadsto");
defineSymbol(math, ams, rel, "\u21DB", "\\Rrightarrow", true);
defineSymbol(math, ams, rel, "\u21BE", "\\restriction");
defineSymbol(math, main, textord, "\u2018", "`");
defineSymbol(math, main, textord, "$", "\\$");
defineSymbol(symbols_text, main, textord, "$", "\\$");
defineSymbol(symbols_text, main, textord, "$", "\\textdollar");
defineSymbol(math, main, textord, "%", "\\%");
defineSymbol(symbols_text, main, textord, "%", "\\%");
defineSymbol(math, main, textord, "_", "\\_");
defineSymbol(symbols_text, main, textord, "_", "\\_");
defineSymbol(symbols_text, main, textord, "_", "\\textunderscore");
defineSymbol(math, main, textord, "\u2220", "\\angle", true);
defineSymbol(math, main, textord, "\u221E", "\\infty", true);
defineSymbol(math, main, textord, "\u2032", "\\prime");
defineSymbol(math, main, textord, "\u25B3", "\\triangle");
defineSymbol(math, main, textord, "\u0393", "\\Gamma", true);
defineSymbol(math, main, textord, "\u0394", "\\Delta", true);
defineSymbol(math, main, textord, "\u0398", "\\Theta", true);
defineSymbol(math, main, textord, "\u039B", "\\Lambda", true);
defineSymbol(math, main, textord, "\u039E", "\\Xi", true);
defineSymbol(math, main, textord, "\u03A0", "\\Pi", true);
defineSymbol(math, main, textord, "\u03A3", "\\Sigma", true);
defineSymbol(math, main, textord, "\u03A5", "\\Upsilon", true);
defineSymbol(math, main, textord, "\u03A6", "\\Phi", true);
defineSymbol(math, main, textord, "\u03A8", "\\Psi", true);
defineSymbol(math, main, textord, "\u03A9", "\\Omega", true);
defineSymbol(math, main, textord, "A", "\u0391");
defineSymbol(math, main, textord, "B", "\u0392");
defineSymbol(math, main, textord, "E", "\u0395");
defineSymbol(math, main, textord, "Z", "\u0396");
defineSymbol(math, main, textord, "H", "\u0397");
defineSymbol(math, main, textord, "I", "\u0399");
defineSymbol(math, main, textord, "K", "\u039A");
defineSymbol(math, main, textord, "M", "\u039C");
defineSymbol(math, main, textord, "N", "\u039D");
defineSymbol(math, main, textord, "O", "\u039F");
defineSymbol(math, main, textord, "P", "\u03A1");
defineSymbol(math, main, textord, "T", "\u03A4");
defineSymbol(math, main, textord, "X", "\u03A7");
defineSymbol(math, main, textord, "\xAC", "\\neg", true);
defineSymbol(math, main, textord, "\xAC", "\\lnot");
defineSymbol(math, main, textord, "\u22A4", "\\top");
defineSymbol(math, main, textord, "\u22A5", "\\bot");
defineSymbol(math, main, textord, "\u2205", "\\emptyset");
defineSymbol(math, ams, textord, "\u2205", "\\varnothing");
defineSymbol(math, main, mathord, "\u03B1", "\\alpha", true);
defineSymbol(math, main, mathord, "\u03B2", "\\beta", true);
defineSymbol(math, main, mathord, "\u03B3", "\\gamma", true);
defineSymbol(math, main, mathord, "\u03B4", "\\delta", true);
defineSymbol(math, main, mathord, "\u03F5", "\\epsilon", true);
defineSymbol(math, main, mathord, "\u03B6", "\\zeta", true);
defineSymbol(math, main, mathord, "\u03B7", "\\eta", true);
defineSymbol(math, main, mathord, "\u03B8", "\\theta", true);
defineSymbol(math, main, mathord, "\u03B9", "\\iota", true);
defineSymbol(math, main, mathord, "\u03BA", "\\kappa", true);
defineSymbol(math, main, mathord, "\u03BB", "\\lambda", true);
defineSymbol(math, main, mathord, "\u03BC", "\\mu", true);
defineSymbol(math, main, mathord, "\u03BD", "\\nu", true);
defineSymbol(math, main, mathord, "\u03BE", "\\xi", true);
defineSymbol(math, main, mathord, "\u03BF", "\\omicron", true);
defineSymbol(math, main, mathord, "\u03C0", "\\pi", true);
defineSymbol(math, main, mathord, "\u03C1", "\\rho", true);
defineSymbol(math, main, mathord, "\u03C3", "\\sigma", true);
defineSymbol(math, main, mathord, "\u03C4", "\\tau", true);
defineSymbol(math, main, mathord, "\u03C5", "\\upsilon", true);
defineSymbol(math, main, mathord, "\u03D5", "\\phi", true);
defineSymbol(math, main, mathord, "\u03C7", "\\chi", true);
defineSymbol(math, main, mathord, "\u03C8", "\\psi", true);
defineSymbol(math, main, mathord, "\u03C9", "\\omega", true);
defineSymbol(math, main, mathord, "\u03B5", "\\varepsilon", true);
defineSymbol(math, main, mathord, "\u03D1", "\\vartheta", true);
defineSymbol(math, main, mathord, "\u03D6", "\\varpi", true);
defineSymbol(math, main, mathord, "\u03F1", "\\varrho", true);
defineSymbol(math, main, mathord, "\u03C2", "\\varsigma", true);
defineSymbol(math, main, mathord, "\u03C6", "\\varphi", true);
defineSymbol(math, main, bin, "\u2217", "*", true);
defineSymbol(math, main, bin, "+", "+");
defineSymbol(math, main, bin, "\u2212", "-", true);
defineSymbol(math, main, bin, "\u22C5", "\\cdot", true);
defineSymbol(math, main, bin, "\u2218", "\\circ");
defineSymbol(math, main, bin, "\xF7", "\\div", true);
defineSymbol(math, main, bin, "\xB1", "\\pm", true);
defineSymbol(math, main, bin, "\xD7", "\\times", true);
defineSymbol(math, main, bin, "\u2229", "\\cap", true);
defineSymbol(math, main, bin, "\u222A", "\\cup", true);
defineSymbol(math, main, bin, "\u2216", "\\setminus");
defineSymbol(math, main, bin, "\u2227", "\\land");
defineSymbol(math, main, bin, "\u2228", "\\lor");
defineSymbol(math, main, bin, "\u2227", "\\wedge", true);
defineSymbol(math, main, bin, "\u2228", "\\vee", true);
defineSymbol(math, main, textord, "\u221A", "\\surd");
defineSymbol(math, main, symbols_open, "\u27E8", "\\langle", true);
defineSymbol(math, main, symbols_open, "\u2223", "\\lvert");
defineSymbol(math, main, symbols_open, "\u2225", "\\lVert");
defineSymbol(math, main, symbols_close, "?", "?");
defineSymbol(math, main, symbols_close, "!", "!");
defineSymbol(math, main, symbols_close, "\u27E9", "\\rangle", true);
defineSymbol(math, main, symbols_close, "\u2223", "\\rvert");
defineSymbol(math, main, symbols_close, "\u2225", "\\rVert");
defineSymbol(math, main, rel, "=", "=");
defineSymbol(math, main, rel, ":", ":");
defineSymbol(math, main, rel, "\u2248", "\\approx", true);
defineSymbol(math, main, rel, "\u2245", "\\cong", true);
defineSymbol(math, main, rel, "\u2265", "\\ge");
defineSymbol(math, main, rel, "\u2265", "\\geq", true);
defineSymbol(math, main, rel, "\u2190", "\\gets");
defineSymbol(math, main, rel, ">", "\\gt", true);
defineSymbol(math, main, rel, "\u2208", "\\in", true);
defineSymbol(math, main, rel, "\uE020", "\\@not");
defineSymbol(math, main, rel, "\u2282", "\\subset", true);
defineSymbol(math, main, rel, "\u2283", "\\supset", true);
defineSymbol(math, main, rel, "\u2286", "\\subseteq", true);
defineSymbol(math, main, rel, "\u2287", "\\supseteq", true);
defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq", true);
defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq", true);
defineSymbol(math, main, rel, "\u22A8", "\\models");
defineSymbol(math, main, rel, "\u2190", "\\leftarrow", true);
defineSymbol(math, main, rel, "\u2264", "\\le");
defineSymbol(math, main, rel, "\u2264", "\\leq", true);
defineSymbol(math, main, rel, "<", "\\lt", true);
defineSymbol(math, main, rel, "\u2192", "\\rightarrow", true);
defineSymbol(math, main, rel, "\u2192", "\\to");
defineSymbol(math, ams, rel, "\u2271", "\\ngeq", true);
defineSymbol(math, ams, rel, "\u2270", "\\nleq", true);
defineSymbol(math, main, spacing, "\xA0", "\\ ");
defineSymbol(math, main, spacing, "\xA0", "\\space"); // Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%

defineSymbol(math, main, spacing, "\xA0", "\\nobreakspace");
defineSymbol(symbols_text, main, spacing, "\xA0", "\\ ");
defineSymbol(symbols_text, main, spacing, "\xA0", " ");
defineSymbol(symbols_text, main, spacing, "\xA0", "\\space");
defineSymbol(symbols_text, main, spacing, "\xA0", "\\nobreakspace");
defineSymbol(math, main, spacing, null, "\\nobreak");
defineSymbol(math, main, spacing, null, "\\allowbreak");
defineSymbol(math, main, punct, ",", ",");
defineSymbol(math, main, punct, ";", ";");
defineSymbol(math, ams, bin, "\u22BC", "\\barwedge", true);
defineSymbol(math, ams, bin, "\u22BB", "\\veebar", true);
defineSymbol(math, main, bin, "\u2299", "\\odot", true);
defineSymbol(math, main, bin, "\u2295", "\\oplus", true);
defineSymbol(math, main, bin, "\u2297", "\\otimes", true);
defineSymbol(math, main, textord, "\u2202", "\\partial", true);
defineSymbol(math, main, bin, "\u2298", "\\oslash", true);
defineSymbol(math, ams, bin, "\u229A", "\\circledcirc", true);
defineSymbol(math, ams, bin, "\u22A1", "\\boxdot", true);
defineSymbol(math, main, bin, "\u25B3", "\\bigtriangleup");
defineSymbol(math, main, bin, "\u25BD", "\\bigtriangledown");
defineSymbol(math, main, bin, "\u2020", "\\dagger");
defineSymbol(math, main, bin, "\u22C4", "\\diamond");
defineSymbol(math, main, bin, "\u22C6", "\\star");
defineSymbol(math, main, bin, "\u25C3", "\\triangleleft");
defineSymbol(math, main, bin, "\u25B9", "\\triangleright");
defineSymbol(math, main, symbols_open, "{", "\\{");
defineSymbol(symbols_text, main, textord, "{", "\\{");
defineSymbol(symbols_text, main, textord, "{", "\\textbraceleft");
defineSymbol(math, main, symbols_close, "}", "\\}");
defineSymbol(symbols_text, main, textord, "}", "\\}");
defineSymbol(symbols_text, main, textord, "}", "\\textbraceright");
defineSymbol(math, main, symbols_open, "{", "\\lbrace");
defineSymbol(math, main, symbols_close, "}", "\\rbrace");
defineSymbol(math, main, symbols_open, "[", "\\lbrack", true);
defineSymbol(symbols_text, main, textord, "[", "\\lbrack", true);
defineSymbol(math, main, symbols_close, "]", "\\rbrack", true);
defineSymbol(symbols_text, main, textord, "]", "\\rbrack", true);
defineSymbol(math, main, symbols_open, "(", "\\lparen", true);
defineSymbol(math, main, symbols_close, ")", "\\rparen", true);
defineSymbol(symbols_text, main, textord, "<", "\\textless", true); // in T1 fontenc

defineSymbol(symbols_text, main, textord, ">", "\\textgreater", true); // in T1 fontenc

defineSymbol(math, main, symbols_open, "\u230A", "\\lfloor", true);
defineSymbol(math, main, symbols_close, "\u230B", "\\rfloor", true);
defineSymbol(math, main, symbols_open, "\u2308", "\\lceil", true);
defineSymbol(math, main, symbols_close, "\u2309", "\\rceil", true);
defineSymbol(math, main, textord, "\\", "\\backslash");
defineSymbol(math, main, textord, "\u2223", "|");
defineSymbol(math, main, textord, "\u2223", "\\vert");
defineSymbol(symbols_text, main, textord, "|", "\\textbar", true); // in T1 fontenc

defineSymbol(math, main, textord, "\u2225", "\\|");
defineSymbol(math, main, textord, "\u2225", "\\Vert");
defineSymbol(symbols_text, main, textord, "\u2225", "\\textbardbl");
defineSymbol(symbols_text, main, textord, "~", "\\textasciitilde");
defineSymbol(symbols_text, main, textord, "\\", "\\textbackslash");
defineSymbol(symbols_text, main, textord, "^", "\\textasciicircum");
defineSymbol(math, main, rel, "\u2191", "\\uparrow", true);
defineSymbol(math, main, rel, "\u21D1", "\\Uparrow", true);
defineSymbol(math, main, rel, "\u2193", "\\downarrow", true);
defineSymbol(math, main, rel, "\u21D3", "\\Downarrow", true);
defineSymbol(math, main, rel, "\u2195", "\\updownarrow", true);
defineSymbol(math, main, rel, "\u21D5", "\\Updownarrow", true);
defineSymbol(math, main, op, "\u2210", "\\coprod");
defineSymbol(math, main, op, "\u22C1", "\\bigvee");
defineSymbol(math, main, op, "\u22C0", "\\bigwedge");
defineSymbol(math, main, op, "\u2A04", "\\biguplus");
defineSymbol(math, main, op, "\u22C2", "\\bigcap");
defineSymbol(math, main, op, "\u22C3", "\\bigcup");
defineSymbol(math, main, op, "\u222B", "\\int");
defineSymbol(math, main, op, "\u222B", "\\intop");
defineSymbol(math, main, op, "\u222C", "\\iint");
defineSymbol(math, main, op, "\u222D", "\\iiint");
defineSymbol(math, main, op, "\u220F", "\\prod");
defineSymbol(math, main, op, "\u2211", "\\sum");
defineSymbol(math, main, op, "\u2A02", "\\bigotimes");
defineSymbol(math, main, op, "\u2A01", "\\bigoplus");
defineSymbol(math, main, op, "\u2A00", "\\bigodot");
defineSymbol(math, main, op, "\u222E", "\\oint");
defineSymbol(math, main, op, "\u222F", "\\oiint");
defineSymbol(math, main, op, "\u2230", "\\oiiint");
defineSymbol(math, main, op, "\u2A06", "\\bigsqcup");
defineSymbol(math, main, op, "\u222B", "\\smallint");
defineSymbol(symbols_text, main, inner, "\u2026", "\\textellipsis");
defineSymbol(math, main, inner, "\u2026", "\\mathellipsis");
defineSymbol(symbols_text, main, inner, "\u2026", "\\ldots", true);
defineSymbol(math, main, inner, "\u2026", "\\ldots", true);
defineSymbol(math, main, inner, "\u22EF", "\\@cdots", true);
defineSymbol(math, main, inner, "\u22F1", "\\ddots", true);
defineSymbol(math, main, textord, "\u22EE", "\\varvdots"); // \vdots is a macro

defineSymbol(math, main, accent, "\u02CA", "\\acute");
defineSymbol(math, main, accent, "\u02CB", "\\grave");
defineSymbol(math, main, accent, "\xA8", "\\ddot");
defineSymbol(math, main, accent, "~", "\\tilde");
defineSymbol(math, main, accent, "\u02C9", "\\bar");
defineSymbol(math, main, accent, "\u02D8", "\\breve");
defineSymbol(math, main, accent, "\u02C7", "\\check");
defineSymbol(math, main, accent, "^", "\\hat");
defineSymbol(math, main, accent, "\u20D7", "\\vec");
defineSymbol(math, main, accent, "\u02D9", "\\dot");
defineSymbol(math, main, accent, "\u02DA", "\\mathring"); // \imath and \jmath should be invariant to \mathrm, \mathbf, etc., so use PUA

defineSymbol(math, main, mathord, "\uE131", "\\@imath");
defineSymbol(math, main, mathord, "\uE237", "\\@jmath");
defineSymbol(math, main, textord, "\u0131", "\u0131");
defineSymbol(math, main, textord, "\u0237", "\u0237");
defineSymbol(symbols_text, main, textord, "\u0131", "\\i", true);
defineSymbol(symbols_text, main, textord, "\u0237", "\\j", true);
defineSymbol(symbols_text, main, textord, "\xDF", "\\ss", true);
defineSymbol(symbols_text, main, textord, "\xE6", "\\ae", true);
defineSymbol(symbols_text, main, textord, "\u0153", "\\oe", true);
defineSymbol(symbols_text, main, textord, "\xF8", "\\o", true);
defineSymbol(symbols_text, main, textord, "\xC6", "\\AE", true);
defineSymbol(symbols_text, main, textord, "\u0152", "\\OE", true);
defineSymbol(symbols_text, main, textord, "\xD8", "\\O", true);
defineSymbol(symbols_text, main, accent, "\u02CA", "\\'"); // acute

defineSymbol(symbols_text, main, accent, "\u02CB", "\\`"); // grave

defineSymbol(symbols_text, main, accent, "\u02C6", "\\^"); // circumflex

defineSymbol(symbols_text, main, accent, "\u02DC", "\\~"); // tilde

defineSymbol(symbols_text, main, accent, "\u02C9", "\\="); // macron

defineSymbol(symbols_text, main, accent, "\u02D8", "\\u"); // breve

defineSymbol(symbols_text, main, accent, "\u02D9", "\\."); // dot above

defineSymbol(symbols_text, main, accent, "\xB8", "\\c"); // cedilla

defineSymbol(symbols_text, main, accent, "\u02DA", "\\r"); // ring above

defineSymbol(symbols_text, main, accent, "\u02C7", "\\v"); // caron

defineSymbol(symbols_text, main, accent, "\xA8", '\\"'); // diaresis

defineSymbol(symbols_text, main, accent, "\u02DD", "\\H"); // double acute

defineSymbol(symbols_text, main, accent, "\u25EF", "\\textcircled"); // \bigcirc glyph
// These ligatures are detected and created in Parser.js's `formLigatures`.

var ligatures = {
  "--": true,
  "---": true,
  "``": true,
  "''": true
};
defineSymbol(symbols_text, main, textord, "\u2013", "--", true);
defineSymbol(symbols_text, main, textord, "\u2013", "\\textendash");
defineSymbol(symbols_text, main, textord, "\u2014", "---", true);
defineSymbol(symbols_text, main, textord, "\u2014", "\\textemdash");
defineSymbol(symbols_text, main, textord, "\u2018", "`", true);
defineSymbol(symbols_text, main, textord, "\u2018", "\\textquoteleft");
defineSymbol(symbols_text, main, textord, "\u2019", "'", true);
defineSymbol(symbols_text, main, textord, "\u2019", "\\textquoteright");
defineSymbol(symbols_text, main, textord, "\u201C", "``", true);
defineSymbol(symbols_text, main, textord, "\u201C", "\\textquotedblleft");
defineSymbol(symbols_text, main, textord, "\u201D", "''", true);
defineSymbol(symbols_text, main, textord, "\u201D", "\\textquotedblright"); //  \degree from gensymb package

defineSymbol(math, main, textord, "\xB0", "\\degree", true);
defineSymbol(symbols_text, main, textord, "\xB0", "\\degree"); // \textdegree from inputenc package

defineSymbol(symbols_text, main, textord, "\xB0", "\\textdegree", true); // TODO: In LaTeX, \pounds can generate a different character in text and math
// mode, but among our fonts, only Main-Regular defines this character "163".

defineSymbol(math, main, textord, "\xA3", "\\pounds");
defineSymbol(math, main, textord, "\xA3", "\\mathsterling", true);
defineSymbol(symbols_text, main, textord, "\xA3", "\\pounds");
defineSymbol(symbols_text, main, textord, "\xA3", "\\textsterling", true);
defineSymbol(math, ams, textord, "\u2720", "\\maltese");
defineSymbol(symbols_text, ams, textord, "\u2720", "\\maltese"); // There are lots of symbols which are the same, so we add them in afterwards.
// All of these are textords in math mode

var mathTextSymbols = "0123456789/@.\"";

for (var i = 0; i < mathTextSymbols.length; i++) {
  var ch = mathTextSymbols.charAt(i);
  defineSymbol(math, main, textord, ch, ch);
} // All of these are textords in text mode


var textSymbols = "0123456789!@*()-=+\";:?/.,";

for (var _i = 0; _i < textSymbols.length; _i++) {
  var _ch = textSymbols.charAt(_i);

  defineSymbol(symbols_text, main, textord, _ch, _ch);
} // All of these are textords in text mode, and mathords in math mode


var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

for (var _i2 = 0; _i2 < letters.length; _i2++) {
  var _ch2 = letters.charAt(_i2);

  defineSymbol(math, main, mathord, _ch2, _ch2);
  defineSymbol(symbols_text, main, textord, _ch2, _ch2);
} // Blackboard bold and script letters in Unicode range


defineSymbol(math, ams, textord, "C", "\u2102"); // blackboard bold

defineSymbol(symbols_text, ams, textord, "C", "\u2102");
defineSymbol(math, ams, textord, "H", "\u210D");
defineSymbol(symbols_text, ams, textord, "H", "\u210D");
defineSymbol(math, ams, textord, "N", "\u2115");
defineSymbol(symbols_text, ams, textord, "N", "\u2115");
defineSymbol(math, ams, textord, "P", "\u2119");
defineSymbol(symbols_text, ams, textord, "P", "\u2119");
defineSymbol(math, ams, textord, "Q", "\u211A");
defineSymbol(symbols_text, ams, textord, "Q", "\u211A");
defineSymbol(math, ams, textord, "R", "\u211D");
defineSymbol(symbols_text, ams, textord, "R", "\u211D");
defineSymbol(math, ams, textord, "Z", "\u2124");
defineSymbol(symbols_text, ams, textord, "Z", "\u2124");
defineSymbol(math, main, mathord, "h", "\u210E"); // italic h, Planck constant

defineSymbol(symbols_text, main, mathord, "h", "\u210E"); // The next loop loads wide (surrogate pair) characters.
// We support some letters in the Unicode range U+1D400 to U+1D7FF,
// Mathematical Alphanumeric Symbols.
// Some editors do not deal well with wide characters. So don't write the
// string into this file. Instead, create the string from the surrogate pair.

var wideChar = "";

for (var _i3 = 0; _i3 < letters.length; _i3++) {
  var _ch3 = letters.charAt(_i3); // The hex numbers in the next line are a surrogate pair.
  // 0xD835 is the high surrogate for all letters in the range we support.
  // 0xDC00 is the low surrogate for bold A.


  wideChar = String.fromCharCode(0xD835, 0xDC00 + _i3); // A-Z a-z bold

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDC34 + _i3); // A-Z a-z italic

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDC68 + _i3); // A-Z a-z bold italic

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDD04 + _i3); // A-Z a-z Fractur

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDDA0 + _i3); // A-Z a-z sans-serif

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDDD4 + _i3); // A-Z a-z sans bold

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDE08 + _i3); // A-Z a-z sans italic

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDE70 + _i3); // A-Z a-z monospace

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);

  if (_i3 < 26) {
    // KaTeX fonts have only capital letters for blackboard bold and script.
    // See exception for k below.
    wideChar = String.fromCharCode(0xD835, 0xDD38 + _i3); // A-Z double struck

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(symbols_text, main, textord, _ch3, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDC9C + _i3); // A-Z script

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  } // TODO: Add bold script when it is supported by a KaTeX font.

} // "k" is the only double struck lower case letter in the KaTeX fonts.


wideChar = String.fromCharCode(0xD835, 0xDD5C); // k double struck

defineSymbol(math, main, mathord, "k", wideChar);
defineSymbol(symbols_text, main, textord, "k", wideChar); // Next, some wide character numerals

for (var _i4 = 0; _i4 < 10; _i4++) {
  var _ch4 = _i4.toString();

  wideChar = String.fromCharCode(0xD835, 0xDFCE + _i4); // 0-9 bold

  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(symbols_text, main, textord, _ch4, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDFE2 + _i4); // 0-9 sans serif

  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(symbols_text, main, textord, _ch4, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDFEC + _i4); // 0-9 bold sans

  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(symbols_text, main, textord, _ch4, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDFF6 + _i4); // 0-9 monospace

  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(symbols_text, main, textord, _ch4, wideChar);
} // We add these Latin-1 letters as symbols for backwards-compatibility,
// but they are not actually in the font, nor are they supported by the
// Unicode accent mechanism, so they fall back to Times font and look ugly.
// TODO(edemaine): Fix this.


var extraLatin = "\xD0\xDE\xFE";

for (var _i5 = 0; _i5 < extraLatin.length; _i5++) {
  var _ch5 = extraLatin.charAt(_i5);

  defineSymbol(math, main, mathord, _ch5, _ch5);
  defineSymbol(symbols_text, main, textord, _ch5, _ch5);
}
;// CONCATENATED MODULE: ./src/wide-character.js
/**
 * This file provides support for Unicode range U+1D400 to U+1D7FF,
 * Mathematical Alphanumeric Symbols.
 *
 * Function wideCharacterFont takes a wide character as input and returns
 * the font information necessary to render it properly.
 */

/**
 * Data below is from https://www.unicode.org/charts/PDF/U1D400.pdf
 * That document sorts characters into groups by font type, say bold or italic.
 *
 * In the arrays below, each subarray consists three elements:
 *      * The CSS class of that group when in math mode.
 *      * The CSS class of that group when in text mode.
 *      * The font name, so that KaTeX can get font metrics.
 */

var wideLatinLetterData = [["mathbf", "textbf", "Main-Bold"], // A-Z bold upright
["mathbf", "textbf", "Main-Bold"], // a-z bold upright
["mathnormal", "textit", "Math-Italic"], // A-Z italic
["mathnormal", "textit", "Math-Italic"], // a-z italic
["boldsymbol", "boldsymbol", "Main-BoldItalic"], // A-Z bold italic
["boldsymbol", "boldsymbol", "Main-BoldItalic"], // a-z bold italic
// Map fancy A-Z letters to script, not calligraphic.
// This aligns with unicode-math and math fonts (except Cambria Math).
["mathscr", "textscr", "Script-Regular"], // A-Z script
["", "", ""], // a-z script.  No font
["", "", ""], // A-Z bold script. No font
["", "", ""], // a-z bold script. No font
["mathfrak", "textfrak", "Fraktur-Regular"], // A-Z Fraktur
["mathfrak", "textfrak", "Fraktur-Regular"], // a-z Fraktur
["mathbb", "textbb", "AMS-Regular"], // A-Z double-struck
["mathbb", "textbb", "AMS-Regular"], // k double-struck
["", "", ""], // A-Z bold Fraktur No font metrics
["", "", ""], // a-z bold Fraktur.   No font.
["mathsf", "textsf", "SansSerif-Regular"], // A-Z sans-serif
["mathsf", "textsf", "SansSerif-Regular"], // a-z sans-serif
["mathboldsf", "textboldsf", "SansSerif-Bold"], // A-Z bold sans-serif
["mathboldsf", "textboldsf", "SansSerif-Bold"], // a-z bold sans-serif
["mathitsf", "textitsf", "SansSerif-Italic"], // A-Z italic sans-serif
["mathitsf", "textitsf", "SansSerif-Italic"], // a-z italic sans-serif
["", "", ""], // A-Z bold italic sans. No font
["", "", ""], // a-z bold italic sans. No font
["mathtt", "texttt", "Typewriter-Regular"], // A-Z monospace
["mathtt", "texttt", "Typewriter-Regular"] // a-z monospace
];
var wideNumeralData = [["mathbf", "textbf", "Main-Bold"], // 0-9 bold
["", "", ""], // 0-9 double-struck. No KaTeX font.
["mathsf", "textsf", "SansSerif-Regular"], // 0-9 sans-serif
["mathboldsf", "textboldsf", "SansSerif-Bold"], // 0-9 bold sans-serif
["mathtt", "texttt", "Typewriter-Regular"] // 0-9 monospace
];
var wideCharacterFont = function wideCharacterFont(wideChar, mode) {
  // IE doesn't support codePointAt(). So work with the surrogate pair.
  var H = wideChar.charCodeAt(0); // high surrogate

  var L = wideChar.charCodeAt(1); // low surrogate

  var codePoint = (H - 0xD800) * 0x400 + (L - 0xDC00) + 0x10000;
  var j = mode === "math" ? 0 : 1; // column index for CSS class.

  if (0x1D400 <= codePoint && codePoint < 0x1D6A4) {
    // wideLatinLetterData contains exactly 26 chars on each row.
    // So we can calculate the relevant row. No traverse necessary.
    var i = Math.floor((codePoint - 0x1D400) / 26);
    return [wideLatinLetterData[i][2], wideLatinLetterData[i][j]];
  } else if (0x1D7CE <= codePoint && codePoint <= 0x1D7FF) {
    // Numerals, ten per row.
    var _i = Math.floor((codePoint - 0x1D7CE) / 10);

    return [wideNumeralData[_i][2], wideNumeralData[_i][j]];
  } else if (codePoint === 0x1D6A5 || codePoint === 0x1D6A6) {
    // dotless i or j
    return [wideLatinLetterData[0][2], wideLatinLetterData[0][j]];
  } else if (0x1D6A6 < codePoint && codePoint < 0x1D7CE) {
    // Greek letters. Not supported, yet.
    return ["", ""];
  } else {
    // We don't support any wide characters outside 1D400–1D7FF.
    throw new src_ParseError("Unsupported character: " + wideChar);
  }
};
;// CONCATENATED MODULE: ./src/buildCommon.js
/* eslint no-console:0 */

/**
 * This module contains general functions that can be used for building
 * different kinds of domTree nodes in a consistent manner.
 */







/**
 * Looks up the given symbol in fontMetrics, after applying any symbol
 * replacements defined in symbol.js
 */
var lookupSymbol = function lookupSymbol(value, // TODO(#963): Use a union type for this.
fontName, mode) {
  // Replace the value with its replaced value from symbol.js
  if (src_symbols[mode][value] && src_symbols[mode][value].replace) {
    value = src_symbols[mode][value].replace;
  }

  return {
    value: value,
    metrics: getCharacterMetrics(value, fontName, mode)
  };
};
/**
 * Makes a symbolNode after translation via the list of symbols in symbols.js.
 * Correctly pulls out metrics for the character, and optionally takes a list of
 * classes to be attached to the node.
 *
 * TODO: make argument order closer to makeSpan
 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
 * should if present come first in `classes`.
 * TODO(#953): Make `options` mandatory and always pass it in.
 */


var makeSymbol = function makeSymbol(value, fontName, mode, options, classes) {
  var lookup = lookupSymbol(value, fontName, mode);
  var metrics = lookup.metrics;
  value = lookup.value;
  var symbolNode;

  if (metrics) {
    var italic = metrics.italic;

    if (mode === "text" || options && options.font === "mathit") {
      italic = 0;
    }

    symbolNode = new SymbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);
  } else {
    // TODO(emily): Figure out a good way to only print this in development
    typeof console !== "undefined" && console.warn("No character metrics " + ("for '" + value + "' in style '" + fontName + "' and mode '" + mode + "'"));
    symbolNode = new SymbolNode(value, 0, 0, 0, 0, 0, classes);
  }

  if (options) {
    symbolNode.maxFontSize = options.sizeMultiplier;

    if (options.style.isTight()) {
      symbolNode.classes.push("mtight");
    }

    var color = options.getColor();

    if (color) {
      symbolNode.style.color = color;
    }
  }

  return symbolNode;
};
/**
 * Makes a symbol in Main-Regular or AMS-Regular.
 * Used for rel, bin, open, close, inner, and punct.
 */


var mathsym = function mathsym(value, mode, options, classes) {
  if (classes === void 0) {
    classes = [];
  }

  // Decide what font to render the symbol in by its entry in the symbols
  // table.
  // Have a special case for when the value = \ because the \ is used as a
  // textord in unsupported command errors but cannot be parsed as a regular
  // text ordinal and is therefore not present as a symbol in the symbols
  // table for text, as well as a special case for boldsymbol because it
  // can be used for bold + and -
  if (options.font === "boldsymbol" && lookupSymbol(value, "Main-Bold", mode).metrics) {
    return makeSymbol(value, "Main-Bold", mode, options, classes.concat(["mathbf"]));
  } else if (value === "\\" || src_symbols[mode][value].font === "main") {
    return makeSymbol(value, "Main-Regular", mode, options, classes);
  } else {
    return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
  }
};
/**
 * Determines which of the two font names (Main-Bold and Math-BoldItalic) and
 * corresponding style tags (mathbf or boldsymbol) to use for font "boldsymbol",
 * depending on the symbol.  Use this function instead of fontMap for font
 * "boldsymbol".
 */


var boldsymbol = function boldsymbol(value, mode, options, classes, type) {
  if (type !== "textord" && lookupSymbol(value, "Math-BoldItalic", mode).metrics) {
    return {
      fontName: "Math-BoldItalic",
      fontClass: "boldsymbol"
    };
  } else {
    // Some glyphs do not exist in Math-BoldItalic so we need to use
    // Main-Bold instead.
    return {
      fontName: "Main-Bold",
      fontClass: "mathbf"
    };
  }
};
/**
 * Makes either a mathord or textord in the correct font and color.
 */


var makeOrd = function makeOrd(group, options, type) {
  var mode = group.mode;
  var text = group.text;
  var classes = ["mord"]; // Math mode or Old font (i.e. \rm)

  var isFont = mode === "math" || mode === "text" && options.font;
  var fontOrFamily = isFont ? options.font : options.fontFamily;

  if (text.charCodeAt(0) === 0xD835) {
    // surrogate pairs get special treatment
    var _wideCharacterFont = wideCharacterFont(text, mode),
        wideFontName = _wideCharacterFont[0],
        wideFontClass = _wideCharacterFont[1];

    return makeSymbol(text, wideFontName, mode, options, classes.concat(wideFontClass));
  } else if (fontOrFamily) {
    var fontName;
    var fontClasses;

    if (fontOrFamily === "boldsymbol") {
      var fontData = boldsymbol(text, mode, options, classes, type);
      fontName = fontData.fontName;
      fontClasses = [fontData.fontClass];
    } else if (isFont) {
      fontName = fontMap[fontOrFamily].fontName;
      fontClasses = [fontOrFamily];
    } else {
      fontName = retrieveTextFontName(fontOrFamily, options.fontWeight, options.fontShape);
      fontClasses = [fontOrFamily, options.fontWeight, options.fontShape];
    }

    if (lookupSymbol(text, fontName, mode).metrics) {
      return makeSymbol(text, fontName, mode, options, classes.concat(fontClasses));
    } else if (ligatures.hasOwnProperty(text) && fontName.substr(0, 10) === "Typewriter") {
      // Deconstruct ligatures in monospace fonts (\texttt, \tt).
      var parts = [];

      for (var i = 0; i < text.length; i++) {
        parts.push(makeSymbol(text[i], fontName, mode, options, classes.concat(fontClasses)));
      }

      return makeFragment(parts);
    }
  } // Makes a symbol in the default font for mathords and textords.


  if (type === "mathord") {
    return makeSymbol(text, "Math-Italic", mode, options, classes.concat(["mathnormal"]));
  } else if (type === "textord") {
    var font = src_symbols[mode][text] && src_symbols[mode][text].font;

    if (font === "ams") {
      var _fontName = retrieveTextFontName("amsrm", options.fontWeight, options.fontShape);

      return makeSymbol(text, _fontName, mode, options, classes.concat("amsrm", options.fontWeight, options.fontShape));
    } else if (font === "main" || !font) {
      var _fontName2 = retrieveTextFontName("textrm", options.fontWeight, options.fontShape);

      return makeSymbol(text, _fontName2, mode, options, classes.concat(options.fontWeight, options.fontShape));
    } else {
      // fonts added by plugins
      var _fontName3 = retrieveTextFontName(font, options.fontWeight, options.fontShape); // We add font name as a css class


      return makeSymbol(text, _fontName3, mode, options, classes.concat(_fontName3, options.fontWeight, options.fontShape));
    }
  } else {
    throw new Error("unexpected type: " + type + " in makeOrd");
  }
};
/**
 * Returns true if subsequent symbolNodes have the same classes, skew, maxFont,
 * and styles.
 */


var canCombine = function canCombine(prev, next) {
  if (createClass(prev.classes) !== createClass(next.classes) || prev.skew !== next.skew || prev.maxFontSize !== next.maxFontSize) {
    return false;
  } // If prev and next both are just "mbin"s or "mord"s we don't combine them
  // so that the proper spacing can be preserved.


  if (prev.classes.length === 1) {
    var cls = prev.classes[0];

    if (cls === "mbin" || cls === "mord") {
      return false;
    }
  }

  for (var style in prev.style) {
    if (prev.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {
      return false;
    }
  }

  for (var _style in next.style) {
    if (next.style.hasOwnProperty(_style) && prev.style[_style] !== next.style[_style]) {
      return false;
    }
  }

  return true;
};
/**
 * Combine consecutive domTree.symbolNodes into a single symbolNode.
 * Note: this function mutates the argument.
 */


var tryCombineChars = function tryCombineChars(chars) {
  for (var i = 0; i < chars.length - 1; i++) {
    var prev = chars[i];
    var next = chars[i + 1];

    if (prev instanceof SymbolNode && next instanceof SymbolNode && canCombine(prev, next)) {
      prev.text += next.text;
      prev.height = Math.max(prev.height, next.height);
      prev.depth = Math.max(prev.depth, next.depth); // Use the last character's italic correction since we use
      // it to add padding to the right of the span created from
      // the combined characters.

      prev.italic = next.italic;
      chars.splice(i + 1, 1);
      i--;
    }
  }

  return chars;
};
/**
 * Calculate the height, depth, and maxFontSize of an element based on its
 * children.
 */


var sizeElementFromChildren = function sizeElementFromChildren(elem) {
  var height = 0;
  var depth = 0;
  var maxFontSize = 0;

  for (var i = 0; i < elem.children.length; i++) {
    var child = elem.children[i];

    if (child.height > height) {
      height = child.height;
    }

    if (child.depth > depth) {
      depth = child.depth;
    }

    if (child.maxFontSize > maxFontSize) {
      maxFontSize = child.maxFontSize;
    }
  }

  elem.height = height;
  elem.depth = depth;
  elem.maxFontSize = maxFontSize;
};
/**
 * Makes a span with the given list of classes, list of children, and options.
 *
 * TODO(#953): Ensure that `options` is always provided (currently some call
 * sites don't pass it) and make the type below mandatory.
 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
 * should if present come first in `classes`.
 */


var makeSpan = function makeSpan(classes, children, options, style) {
  var span = new Span(classes, children, options, style);
  sizeElementFromChildren(span);
  return span;
}; // SVG one is simpler -- doesn't require height, depth, max-font setting.
// This is also a separate method for typesafety.


var makeSvgSpan = function makeSvgSpan(classes, children, options, style) {
  return new Span(classes, children, options, style);
};

var makeLineSpan = function makeLineSpan(className, options, thickness) {
  var line = makeSpan([className], [], options);
  line.height = Math.max(thickness || options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
  line.style.borderBottomWidth = makeEm(line.height);
  line.maxFontSize = 1.0;
  return line;
};
/**
 * Makes an anchor with the given href, list of classes, list of children,
 * and options.
 */


var makeAnchor = function makeAnchor(href, classes, children, options) {
  var anchor = new Anchor(href, classes, children, options);
  sizeElementFromChildren(anchor);
  return anchor;
};
/**
 * Makes a document fragment with the given list of children.
 */


var makeFragment = function makeFragment(children) {
  var fragment = new DocumentFragment(children);
  sizeElementFromChildren(fragment);
  return fragment;
};
/**
 * Wraps group in a span if it's a document fragment, allowing to apply classes
 * and styles
 */


var wrapFragment = function wrapFragment(group, options) {
  if (group instanceof DocumentFragment) {
    return makeSpan([], [group], options);
  }

  return group;
}; // These are exact object types to catch typos in the names of the optional fields.


// Computes the updated `children` list and the overall depth.
//
// This helper function for makeVList makes it easier to enforce type safety by
// allowing early exits (returns) in the logic.
var getVListChildrenAndDepth = function getVListChildrenAndDepth(params) {
  if (params.positionType === "individualShift") {
    var oldChildren = params.children;
    var children = [oldChildren[0]]; // Add in kerns to the list of params.children to get each element to be
    // shifted to the correct specified shift

    var _depth = -oldChildren[0].shift - oldChildren[0].elem.depth;

    var currPos = _depth;

    for (var i = 1; i < oldChildren.length; i++) {
      var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;
      var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);
      currPos = currPos + diff;
      children.push({
        type: "kern",
        size: size
      });
      children.push(oldChildren[i]);
    }

    return {
      children: children,
      depth: _depth
    };
  }

  var depth;

  if (params.positionType === "top") {
    // We always start at the bottom, so calculate the bottom by adding up
    // all the sizes
    var bottom = params.positionData;

    for (var _i = 0; _i < params.children.length; _i++) {
      var child = params.children[_i];
      bottom -= child.type === "kern" ? child.size : child.elem.height + child.elem.depth;
    }

    depth = bottom;
  } else if (params.positionType === "bottom") {
    depth = -params.positionData;
  } else {
    var firstChild = params.children[0];

    if (firstChild.type !== "elem") {
      throw new Error('First child must have type "elem".');
    }

    if (params.positionType === "shift") {
      depth = -firstChild.elem.depth - params.positionData;
    } else if (params.positionType === "firstBaseline") {
      depth = -firstChild.elem.depth;
    } else {
      throw new Error("Invalid positionType " + params.positionType + ".");
    }
  }

  return {
    children: params.children,
    depth: depth
  };
};
/**
 * Makes a vertical list by stacking elements and kerns on top of each other.
 * Allows for many different ways of specifying the positioning method.
 *
 * See VListParam documentation above.
 */


var makeVList = function makeVList(params, options) {
  var _getVListChildrenAndD = getVListChildrenAndDepth(params),
      children = _getVListChildrenAndD.children,
      depth = _getVListChildrenAndD.depth; // Create a strut that is taller than any list item. The strut is added to
  // each item, where it will determine the item's baseline. Since it has
  // `overflow:hidden`, the strut's top edge will sit on the item's line box's
  // top edge and the strut's bottom edge will sit on the item's baseline,
  // with no additional line-height spacing. This allows the item baseline to
  // be positioned precisely without worrying about font ascent and
  // line-height.


  var pstrutSize = 0;

  for (var i = 0; i < children.length; i++) {
    var child = children[i];

    if (child.type === "elem") {
      var elem = child.elem;
      pstrutSize = Math.max(pstrutSize, elem.maxFontSize, elem.height);
    }
  }

  pstrutSize += 2;
  var pstrut = makeSpan(["pstrut"], []);
  pstrut.style.height = makeEm(pstrutSize); // Create a new list of actual children at the correct offsets

  var realChildren = [];
  var minPos = depth;
  var maxPos = depth;
  var currPos = depth;

  for (var _i2 = 0; _i2 < children.length; _i2++) {
    var _child = children[_i2];

    if (_child.type === "kern") {
      currPos += _child.size;
    } else {
      var _elem = _child.elem;
      var classes = _child.wrapperClasses || [];
      var style = _child.wrapperStyle || {};
      var childWrap = makeSpan(classes, [pstrut, _elem], undefined, style);
      childWrap.style.top = makeEm(-pstrutSize - currPos - _elem.depth);

      if (_child.marginLeft) {
        childWrap.style.marginLeft = _child.marginLeft;
      }

      if (_child.marginRight) {
        childWrap.style.marginRight = _child.marginRight;
      }

      realChildren.push(childWrap);
      currPos += _elem.height + _elem.depth;
    }

    minPos = Math.min(minPos, currPos);
    maxPos = Math.max(maxPos, currPos);
  } // The vlist contents go in a table-cell with `vertical-align:bottom`.
  // This cell's bottom edge will determine the containing table's baseline
  // without overly expanding the containing line-box.


  var vlist = makeSpan(["vlist"], realChildren);
  vlist.style.height = makeEm(maxPos); // A second row is used if necessary to represent the vlist's depth.

  var rows;

  if (minPos < 0) {
    // We will define depth in an empty span with display: table-cell.
    // It should render with the height that we define. But Chrome, in
    // contenteditable mode only, treats that span as if it contains some
    // text content. And that min-height over-rides our desired height.
    // So we put another empty span inside the depth strut span.
    var emptySpan = makeSpan([], []);
    var depthStrut = makeSpan(["vlist"], [emptySpan]);
    depthStrut.style.height = makeEm(-minPos); // Safari wants the first row to have inline content; otherwise it
    // puts the bottom of the *second* row on the baseline.

    var topStrut = makeSpan(["vlist-s"], [new SymbolNode("\u200B")]);
    rows = [makeSpan(["vlist-r"], [vlist, topStrut]), makeSpan(["vlist-r"], [depthStrut])];
  } else {
    rows = [makeSpan(["vlist-r"], [vlist])];
  }

  var vtable = makeSpan(["vlist-t"], rows);

  if (rows.length === 2) {
    vtable.classes.push("vlist-t2");
  }

  vtable.height = maxPos;
  vtable.depth = -minPos;
  return vtable;
}; // Glue is a concept from TeX which is a flexible space between elements in
// either a vertical or horizontal list. In KaTeX, at least for now, it's
// static space between elements in a horizontal layout.


var makeGlue = function makeGlue(measurement, options) {
  // Make an empty span for the space
  var rule = makeSpan(["mspace"], [], options);
  var size = calculateSize(measurement, options);
  rule.style.marginRight = makeEm(size);
  return rule;
}; // Takes font options, and returns the appropriate fontLookup name


var retrieveTextFontName = function retrieveTextFontName(fontFamily, fontWeight, fontShape) {
  var baseFontName = "";

  switch (fontFamily) {
    case "amsrm":
      baseFontName = "AMS";
      break;

    case "textrm":
      baseFontName = "Main";
      break;

    case "textsf":
      baseFontName = "SansSerif";
      break;

    case "texttt":
      baseFontName = "Typewriter";
      break;

    default:
      baseFontName = fontFamily;
    // use fonts added by a plugin
  }

  var fontStylesName;

  if (fontWeight === "textbf" && fontShape === "textit") {
    fontStylesName = "BoldItalic";
  } else if (fontWeight === "textbf") {
    fontStylesName = "Bold";
  } else if (fontWeight === "textit") {
    fontStylesName = "Italic";
  } else {
    fontStylesName = "Regular";
  }

  return baseFontName + "-" + fontStylesName;
};
/**
 * Maps TeX font commands to objects containing:
 * - variant: string used for "mathvariant" attribute in buildMathML.js
 * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
 */
// A map between tex font commands an MathML mathvariant attribute values


var fontMap = {
  // styles
  "mathbf": {
    variant: "bold",
    fontName: "Main-Bold"
  },
  "mathrm": {
    variant: "normal",
    fontName: "Main-Regular"
  },
  "textit": {
    variant: "italic",
    fontName: "Main-Italic"
  },
  "mathit": {
    variant: "italic",
    fontName: "Main-Italic"
  },
  "mathnormal": {
    variant: "italic",
    fontName: "Math-Italic"
  },
  // "boldsymbol" is missing because they require the use of multiple fonts:
  // Math-BoldItalic and Main-Bold.  This is handled by a special case in
  // makeOrd which ends up calling boldsymbol.
  // families
  "mathbb": {
    variant: "double-struck",
    fontName: "AMS-Regular"
  },
  "mathcal": {
    variant: "script",
    fontName: "Caligraphic-Regular"
  },
  "mathfrak": {
    variant: "fraktur",
    fontName: "Fraktur-Regular"
  },
  "mathscr": {
    variant: "script",
    fontName: "Script-Regular"
  },
  "mathsf": {
    variant: "sans-serif",
    fontName: "SansSerif-Regular"
  },
  "mathtt": {
    variant: "monospace",
    fontName: "Typewriter-Regular"
  }
};
var svgData = {
  //   path, width, height
  vec: ["vec", 0.471, 0.714],
  // values from the font glyph
  oiintSize1: ["oiintSize1", 0.957, 0.499],
  // oval to overlay the integrand
  oiintSize2: ["oiintSize2", 1.472, 0.659],
  oiiintSize1: ["oiiintSize1", 1.304, 0.499],
  oiiintSize2: ["oiiintSize2", 1.98, 0.659]
};

var staticSvg = function staticSvg(value, options) {
  // Create a span with inline SVG for the element.
  var _svgData$value = svgData[value],
      pathName = _svgData$value[0],
      width = _svgData$value[1],
      height = _svgData$value[2];
  var path = new PathNode(pathName);
  var svgNode = new SvgNode([path], {
    "width": makeEm(width),
    "height": makeEm(height),
    // Override CSS rule `.katex svg { width: 100% }`
    "style": "width:" + makeEm(width),
    "viewBox": "0 0 " + 1000 * width + " " + 1000 * height,
    "preserveAspectRatio": "xMinYMin"
  });
  var span = makeSvgSpan(["overlay"], [svgNode], options);
  span.height = height;
  span.style.height = makeEm(height);
  span.style.width = makeEm(width);
  return span;
};

/* harmony default export */ var buildCommon = ({
  fontMap: fontMap,
  makeSymbol: makeSymbol,
  mathsym: mathsym,
  makeSpan: makeSpan,
  makeSvgSpan: makeSvgSpan,
  makeLineSpan: makeLineSpan,
  makeAnchor: makeAnchor,
  makeFragment: makeFragment,
  wrapFragment: wrapFragment,
  makeVList: makeVList,
  makeOrd: makeOrd,
  makeGlue: makeGlue,
  staticSvg: staticSvg,
  svgData: svgData,
  tryCombineChars: tryCombineChars
});
;// CONCATENATED MODULE: ./src/spacingData.js
/**
 * Describes spaces between different classes of atoms.
 */
var thinspace = {
  number: 3,
  unit: "mu"
};
var mediumspace = {
  number: 4,
  unit: "mu"
};
var thickspace = {
  number: 5,
  unit: "mu"
}; // Making the type below exact with all optional fields doesn't work due to
// - https://github.com/facebook/flow/issues/4582
// - https://github.com/facebook/flow/issues/5688
// However, since *all* fields are optional, $Shape<> works as suggested in 5688
// above.

// Spacing relationships for display and text styles
var spacings = {
  mord: {
    mop: thinspace,
    mbin: mediumspace,
    mrel: thickspace,
    minner: thinspace
  },
  mop: {
    mord: thinspace,
    mop: thinspace,
    mrel: thickspace,
    minner: thinspace
  },
  mbin: {
    mord: mediumspace,
    mop: mediumspace,
    mopen: mediumspace,
    minner: mediumspace
  },
  mrel: {
    mord: thickspace,
    mop: thickspace,
    mopen: thickspace,
    minner: thickspace
  },
  mopen: {},
  mclose: {
    mop: thinspace,
    mbin: mediumspace,
    mrel: thickspace,
    minner: thinspace
  },
  mpunct: {
    mord: thinspace,
    mop: thinspace,
    mrel: thickspace,
    mopen: thinspace,
    mclose: thinspace,
    mpunct: thinspace,
    minner: thinspace
  },
  minner: {
    mord: thinspace,
    mop: thinspace,
    mbin: mediumspace,
    mrel: thickspace,
    mopen: thinspace,
    mpunct: thinspace,
    minner: thinspace
  }
}; // Spacing relationships for script and scriptscript styles

var tightSpacings = {
  mord: {
    mop: thinspace
  },
  mop: {
    mord: thinspace,
    mop: thinspace
  },
  mbin: {},
  mrel: {},
  mopen: {},
  mclose: {
    mop: thinspace
  },
  mpunct: {},
  minner: {
    mop: thinspace
  }
};
;// CONCATENATED MODULE: ./src/defineFunction.js
/** Context provided to function handlers for error messages. */
// Note: reverse the order of the return type union will cause a flow error.
// See https://github.com/facebook/flow/issues/3663.
// More general version of `HtmlBuilder` for nodes (e.g. \sum, accent types)
// whose presence impacts super/subscripting. In this case, ParseNode<"supsub">
// delegates its HTML building to the HtmlBuilder corresponding to these nodes.

/**
 * Final function spec for use at parse time.
 * This is almost identical to `FunctionPropSpec`, except it
 * 1. includes the function handler, and
 * 2. requires all arguments except argTypes.
 * It is generated by `defineFunction()` below.
 */

/**
 * All registered functions.
 * `functions.js` just exports this same dictionary again and makes it public.
 * `Parser.js` requires this dictionary.
 */
var _functions = {};
/**
 * All HTML builders. Should be only used in the `define*` and the `build*ML`
 * functions.
 */

var _htmlGroupBuilders = {};
/**
 * All MathML builders. Should be only used in the `define*` and the `build*ML`
 * functions.
 */

var _mathmlGroupBuilders = {};
function defineFunction(_ref) {
  var type = _ref.type,
      names = _ref.names,
      props = _ref.props,
      handler = _ref.handler,
      htmlBuilder = _ref.htmlBuilder,
      mathmlBuilder = _ref.mathmlBuilder;
  // Set default values of functions
  var data = {
    type: type,
    numArgs: props.numArgs,
    argTypes: props.argTypes,
    allowedInArgument: !!props.allowedInArgument,
    allowedInText: !!props.allowedInText,
    allowedInMath: props.allowedInMath === undefined ? true : props.allowedInMath,
    numOptionalArgs: props.numOptionalArgs || 0,
    infix: !!props.infix,
    primitive: !!props.primitive,
    handler: handler
  };

  for (var i = 0; i < names.length; ++i) {
    _functions[names[i]] = data;
  }

  if (type) {
    if (htmlBuilder) {
      _htmlGroupBuilders[type] = htmlBuilder;
    }

    if (mathmlBuilder) {
      _mathmlGroupBuilders[type] = mathmlBuilder;
    }
  }
}
/**
 * Use this to register only the HTML and MathML builders for a function (e.g.
 * if the function's ParseNode is generated in Parser.js rather than via a
 * stand-alone handler provided to `defineFunction`).
 */

function defineFunctionBuilders(_ref2) {
  var type = _ref2.type,
      htmlBuilder = _ref2.htmlBuilder,
      mathmlBuilder = _ref2.mathmlBuilder;
  defineFunction({
    type: type,
    names: [],
    props: {
      numArgs: 0
    },
    handler: function handler() {
      throw new Error('Should never be called.');
    },
    htmlBuilder: htmlBuilder,
    mathmlBuilder: mathmlBuilder
  });
}
var normalizeArgument = function normalizeArgument(arg) {
  return arg.type === "ordgroup" && arg.body.length === 1 ? arg.body[0] : arg;
}; // Since the corresponding buildHTML/buildMathML function expects a
// list of elements, we normalize for different kinds of arguments

var ordargument = function ordargument(arg) {
  return arg.type === "ordgroup" ? arg.body : [arg];
};
;// CONCATENATED MODULE: ./src/buildHTML.js
/**
 * This file does the main work of building a domTree structure from a parse
 * tree. The entry point is the `buildHTML` function, which takes a parse tree.
 * Then, the buildExpression, buildGroup, and various groupBuilders functions
 * are called, to produce a final HTML tree.
 */









var buildHTML_makeSpan = buildCommon.makeSpan; // Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)
// depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,
// and the text before Rule 19.

var binLeftCanceller = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"];
var binRightCanceller = ["rightmost", "mrel", "mclose", "mpunct"];
var styleMap = {
  "display": src_Style.DISPLAY,
  "text": src_Style.TEXT,
  "script": src_Style.SCRIPT,
  "scriptscript": src_Style.SCRIPTSCRIPT
};
var DomEnum = {
  mord: "mord",
  mop: "mop",
  mbin: "mbin",
  mrel: "mrel",
  mopen: "mopen",
  mclose: "mclose",
  mpunct: "mpunct",
  minner: "minner"
};

/**
 * Take a list of nodes, build them in order, and return a list of the built
 * nodes. documentFragments are flattened into their contents, so the
 * returned list contains no fragments. `isRealGroup` is true if `expression`
 * is a real group (no atoms will be added on either side), as opposed to
 * a partial group (e.g. one created by \color). `surrounding` is an array
 * consisting type of nodes that will be added to the left and right.
 */
var buildExpression = function buildExpression(expression, options, isRealGroup, surrounding) {
  if (surrounding === void 0) {
    surrounding = [null, null];
  }

  // Parse expressions into `groups`.
  var groups = [];

  for (var i = 0; i < expression.length; i++) {
    var output = buildGroup(expression[i], options);

    if (output instanceof DocumentFragment) {
      var children = output.children;
      groups.push.apply(groups, children);
    } else {
      groups.push(output);
    }
  } // Combine consecutive domTree.symbolNodes into a single symbolNode.


  buildCommon.tryCombineChars(groups); // If `expression` is a partial group, let the parent handle spacings
  // to avoid processing groups multiple times.

  if (!isRealGroup) {
    return groups;
  }

  var glueOptions = options;

  if (expression.length === 1) {
    var node = expression[0];

    if (node.type === "sizing") {
      glueOptions = options.havingSize(node.size);
    } else if (node.type === "styling") {
      glueOptions = options.havingStyle(styleMap[node.style]);
    }
  } // Dummy spans for determining spacings between surrounding atoms.
  // If `expression` has no atoms on the left or right, class "leftmost"
  // or "rightmost", respectively, is used to indicate it.


  var dummyPrev = buildHTML_makeSpan([surrounding[0] || "leftmost"], [], options);
  var dummyNext = buildHTML_makeSpan([surrounding[1] || "rightmost"], [], options); // TODO: These code assumes that a node's math class is the first element
  // of its `classes` array. A later cleanup should ensure this, for
  // instance by changing the signature of `makeSpan`.
  // Before determining what spaces to insert, perform bin cancellation.
  // Binary operators change to ordinary symbols in some contexts.

  var isRoot = isRealGroup === "root";
  traverseNonSpaceNodes(groups, function (node, prev) {
    var prevType = prev.classes[0];
    var type = node.classes[0];

    if (prevType === "mbin" && utils.contains(binRightCanceller, type)) {
      prev.classes[0] = "mord";
    } else if (type === "mbin" && utils.contains(binLeftCanceller, prevType)) {
      node.classes[0] = "mord";
    }
  }, {
    node: dummyPrev
  }, dummyNext, isRoot);
  traverseNonSpaceNodes(groups, function (node, prev) {
    var prevType = getTypeOfDomTree(prev);
    var type = getTypeOfDomTree(node); // 'mtight' indicates that the node is script or scriptscript style.

    var space = prevType && type ? node.hasClass("mtight") ? tightSpacings[prevType][type] : spacings[prevType][type] : null;

    if (space) {
      // Insert glue (spacing) after the `prev`.
      return buildCommon.makeGlue(space, glueOptions);
    }
  }, {
    node: dummyPrev
  }, dummyNext, isRoot);
  return groups;
}; // Depth-first traverse non-space `nodes`, calling `callback` with the current and
// previous node as arguments, optionally returning a node to insert after the
// previous node. `prev` is an object with the previous node and `insertAfter`
// function to insert after it. `next` is a node that will be added to the right.
// Used for bin cancellation and inserting spacings.

var traverseNonSpaceNodes = function traverseNonSpaceNodes(nodes, callback, prev, next, isRoot) {
  if (next) {
    // temporarily append the right node, if exists
    nodes.push(next);
  }

  var i = 0;

  for (; i < nodes.length; i++) {
    var node = nodes[i];
    var partialGroup = checkPartialGroup(node);

    if (partialGroup) {
      // Recursive DFS
      // $FlowFixMe: make nodes a $ReadOnlyArray by returning a new array
      traverseNonSpaceNodes(partialGroup.children, callback, prev, null, isRoot);
      continue;
    } // Ignore explicit spaces (e.g., \;, \,) when determining what implicit
    // spacing should go between atoms of different classes


    var nonspace = !node.hasClass("mspace");

    if (nonspace) {
      var result = callback(node, prev.node);

      if (result) {
        if (prev.insertAfter) {
          prev.insertAfter(result);
        } else {
          // insert at front
          nodes.unshift(result);
          i++;
        }
      }
    }

    if (nonspace) {
      prev.node = node;
    } else if (isRoot && node.hasClass("newline")) {
      prev.node = buildHTML_makeSpan(["leftmost"]); // treat like beginning of line
    }

    prev.insertAfter = function (index) {
      return function (n) {
        nodes.splice(index + 1, 0, n);
        i++;
      };
    }(i);
  }

  if (next) {
    nodes.pop();
  }
}; // Check if given node is a partial group, i.e., does not affect spacing around.


var checkPartialGroup = function checkPartialGroup(node) {
  if (node instanceof DocumentFragment || node instanceof Anchor || node instanceof Span && node.hasClass("enclosing")) {
    return node;
  }

  return null;
}; // Return the outermost node of a domTree.


var getOutermostNode = function getOutermostNode(node, side) {
  var partialGroup = checkPartialGroup(node);

  if (partialGroup) {
    var children = partialGroup.children;

    if (children.length) {
      if (side === "right") {
        return getOutermostNode(children[children.length - 1], "right");
      } else if (side === "left") {
        return getOutermostNode(children[0], "left");
      }
    }
  }

  return node;
}; // Return math atom class (mclass) of a domTree.
// If `side` is given, it will get the type of the outermost node at given side.


var getTypeOfDomTree = function getTypeOfDomTree(node, side) {
  if (!node) {
    return null;
  }

  if (side) {
    node = getOutermostNode(node, side);
  } // This makes a lot of assumptions as to where the type of atom
  // appears.  We should do a better job of enforcing this.


  return DomEnum[node.classes[0]] || null;
};
var makeNullDelimiter = function makeNullDelimiter(options, classes) {
  var moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
  return buildHTML_makeSpan(classes.concat(moreClasses));
};
/**
 * buildGroup is the function that takes a group and calls the correct groupType
 * function for it. It also handles the interaction of size and style changes
 * between parents and children.
 */

var buildGroup = function buildGroup(group, options, baseOptions) {
  if (!group) {
    return buildHTML_makeSpan();
  }

  if (_htmlGroupBuilders[group.type]) {
    // Call the groupBuilders function
    // $FlowFixMe
    var groupNode = _htmlGroupBuilders[group.type](group, options); // If the size changed between the parent and the current group, account
    // for that size difference.

    if (baseOptions && options.size !== baseOptions.size) {
      groupNode = buildHTML_makeSpan(options.sizingClasses(baseOptions), [groupNode], options);
      var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
      groupNode.height *= multiplier;
      groupNode.depth *= multiplier;
    }

    return groupNode;
  } else {
    throw new src_ParseError("Got group of unknown type: '" + group.type + "'");
  }
};
/**
 * Combine an array of HTML DOM nodes (e.g., the output of `buildExpression`)
 * into an unbreakable HTML node of class .base, with proper struts to
 * guarantee correct vertical extent.  `buildHTML` calls this repeatedly to
 * make up the entire expression as a sequence of unbreakable units.
 */

function buildHTMLUnbreakable(children, options) {
  // Compute height and depth of this chunk.
  var body = buildHTML_makeSpan(["base"], children, options); // Add strut, which ensures that the top of the HTML element falls at
  // the height of the expression, and the bottom of the HTML element
  // falls at the depth of the expression.

  var strut = buildHTML_makeSpan(["strut"]);
  strut.style.height = makeEm(body.height + body.depth);

  if (body.depth) {
    strut.style.verticalAlign = makeEm(-body.depth);
  }

  body.children.unshift(strut);
  return body;
}
/**
 * Take an entire parse tree, and build it into an appropriate set of HTML
 * nodes.
 */


function buildHTML(tree, options) {
  // Strip off outer tag wrapper for processing below.
  var tag = null;

  if (tree.length === 1 && tree[0].type === "tag") {
    tag = tree[0].tag;
    tree = tree[0].body;
  } // Build the expression contained in the tree


  var expression = buildExpression(tree, options, "root");
  var eqnNum;

  if (expression.length === 2 && expression[1].hasClass("tag")) {
    // An environment with automatic equation numbers, e.g. {gather}.
    eqnNum = expression.pop();
  }

  var children = []; // Create one base node for each chunk between potential line breaks.
  // The TeXBook [p.173] says "A formula will be broken only after a
  // relation symbol like $=$ or $<$ or $\rightarrow$, or after a binary
  // operation symbol like $+$ or $-$ or $\times$, where the relation or
  // binary operation is on the ``outer level'' of the formula (i.e., not
  // enclosed in {...} and not part of an \over construction)."

  var parts = [];

  for (var i = 0; i < expression.length; i++) {
    parts.push(expression[i]);

    if (expression[i].hasClass("mbin") || expression[i].hasClass("mrel") || expression[i].hasClass("allowbreak")) {
      // Put any post-operator glue on same line as operator.
      // Watch for \nobreak along the way, and stop at \newline.
      var nobreak = false;

      while (i < expression.length - 1 && expression[i + 1].hasClass("mspace") && !expression[i + 1].hasClass("newline")) {
        i++;
        parts.push(expression[i]);

        if (expression[i].hasClass("nobreak")) {
          nobreak = true;
        }
      } // Don't allow break if \nobreak among the post-operator glue.


      if (!nobreak) {
        children.push(buildHTMLUnbreakable(parts, options));
        parts = [];
      }
    } else if (expression[i].hasClass("newline")) {
      // Write the line except the newline
      parts.pop();

      if (parts.length > 0) {
        children.push(buildHTMLUnbreakable(parts, options));
        parts = [];
      } // Put the newline at the top level


      children.push(expression[i]);
    }
  }

  if (parts.length > 0) {
    children.push(buildHTMLUnbreakable(parts, options));
  } // Now, if there was a tag, build it too and append it as a final child.


  var tagChild;

  if (tag) {
    tagChild = buildHTMLUnbreakable(buildExpression(tag, options, true));
    tagChild.classes = ["tag"];
    children.push(tagChild);
  } else if (eqnNum) {
    children.push(eqnNum);
  }

  var htmlNode = buildHTML_makeSpan(["katex-html"], children);
  htmlNode.setAttribute("aria-hidden", "true"); // Adjust the strut of the tag to be the maximum height of all children
  // (the height of the enclosing htmlNode) for proper vertical alignment.

  if (tagChild) {
    var strut = tagChild.children[0];
    strut.style.height = makeEm(htmlNode.height + htmlNode.depth);

    if (htmlNode.depth) {
      strut.style.verticalAlign = makeEm(-htmlNode.depth);
    }
  }

  return htmlNode;
}
;// CONCATENATED MODULE: ./src/mathMLTree.js
/**
 * These objects store data about MathML nodes. This is the MathML equivalent
 * of the types in domTree.js. Since MathML handles its own rendering, and
 * since we're mainly using MathML to improve accessibility, we don't manage
 * any of the styling state that the plain DOM nodes do.
 *
 * The `toNode` and `toMarkup` functions work simlarly to how they do in
 * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
 */




function newDocumentFragment(children) {
  return new DocumentFragment(children);
}
/**
 * This node represents a general purpose MathML node of any type. The
 * constructor requires the type of node to create (for example, `"mo"` or
 * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
 */

var MathNode = /*#__PURE__*/function () {
  function MathNode(type, children, classes) {
    this.type = void 0;
    this.attributes = void 0;
    this.children = void 0;
    this.classes = void 0;
    this.type = type;
    this.attributes = {};
    this.children = children || [];
    this.classes = classes || [];
  }
  /**
   * Sets an attribute on a MathML node. MathML depends on attributes to convey a
   * semantic content, so this is used heavily.
   */


  var _proto = MathNode.prototype;

  _proto.setAttribute = function setAttribute(name, value) {
    this.attributes[name] = value;
  }
  /**
   * Gets an attribute on a MathML node.
   */
  ;

  _proto.getAttribute = function getAttribute(name) {
    return this.attributes[name];
  }
  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */
  ;

  _proto.toNode = function toNode() {
    var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);

    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }

    if (this.classes.length > 0) {
      node.className = createClass(this.classes);
    }

    for (var i = 0; i < this.children.length; i++) {
      node.appendChild(this.children[i].toNode());
    }

    return node;
  }
  /**
   * Converts the math node into an HTML markup string.
   */
  ;

  _proto.toMarkup = function toMarkup() {
    var markup = "<" + this.type; // Add the attributes

    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + "=\"";
        markup += utils.escape(this.attributes[attr]);
        markup += "\"";
      }
    }

    if (this.classes.length > 0) {
      markup += " class =\"" + utils.escape(createClass(this.classes)) + "\"";
    }

    markup += ">";

    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }

    markup += "</" + this.type + ">";
    return markup;
  }
  /**
   * Converts the math node into a string, similar to innerText, but escaped.
   */
  ;

  _proto.toText = function toText() {
    return this.children.map(function (child) {
      return child.toText();
    }).join("");
  };

  return MathNode;
}();
/**
 * This node represents a piece of text.
 */

var TextNode = /*#__PURE__*/function () {
  function TextNode(text) {
    this.text = void 0;
    this.text = text;
  }
  /**
   * Converts the text node into a DOM text node.
   */


  var _proto2 = TextNode.prototype;

  _proto2.toNode = function toNode() {
    return document.createTextNode(this.text);
  }
  /**
   * Converts the text node into escaped HTML markup
   * (representing the text itself).
   */
  ;

  _proto2.toMarkup = function toMarkup() {
    return utils.escape(this.toText());
  }
  /**
   * Converts the text node into a string
   * (representing the text iteself).
   */
  ;

  _proto2.toText = function toText() {
    return this.text;
  };

  return TextNode;
}();
/**
 * This node represents a space, but may render as <mspace.../> or as text,
 * depending on the width.
 */

var SpaceNode = /*#__PURE__*/function () {
  /**
   * Create a Space node with width given in CSS ems.
   */
  function SpaceNode(width) {
    this.width = void 0;
    this.character = void 0;
    this.width = width; // See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html
    // for a table of space-like characters.  We use Unicode
    // representations instead of &LongNames; as it's not clear how to
    // make the latter via document.createTextNode.

    if (width >= 0.05555 && width <= 0.05556) {
      this.character = "\u200A"; // &VeryThinSpace;
    } else if (width >= 0.1666 && width <= 0.1667) {
      this.character = "\u2009"; // &ThinSpace;
    } else if (width >= 0.2222 && width <= 0.2223) {
      this.character = "\u2005"; // &MediumSpace;
    } else if (width >= 0.2777 && width <= 0.2778) {
      this.character = "\u2005\u200A"; // &ThickSpace;
    } else if (width >= -0.05556 && width <= -0.05555) {
      this.character = "\u200A\u2063"; // &NegativeVeryThinSpace;
    } else if (width >= -0.1667 && width <= -0.1666) {
      this.character = "\u2009\u2063"; // &NegativeThinSpace;
    } else if (width >= -0.2223 && width <= -0.2222) {
      this.character = "\u205F\u2063"; // &NegativeMediumSpace;
    } else if (width >= -0.2778 && width <= -0.2777) {
      this.character = "\u2005\u2063"; // &NegativeThickSpace;
    } else {
      this.character = null;
    }
  }
  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */


  var _proto3 = SpaceNode.prototype;

  _proto3.toNode = function toNode() {
    if (this.character) {
      return document.createTextNode(this.character);
    } else {
      var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
      node.setAttribute("width", makeEm(this.width));
      return node;
    }
  }
  /**
   * Converts the math node into an HTML markup string.
   */
  ;

  _proto3.toMarkup = function toMarkup() {
    if (this.character) {
      return "<mtext>" + this.character + "</mtext>";
    } else {
      return "<mspace width=\"" + makeEm(this.width) + "\"/>";
    }
  }
  /**
   * Converts the math node into a string, similar to innerText.
   */
  ;

  _proto3.toText = function toText() {
    if (this.character) {
      return this.character;
    } else {
      return " ";
    }
  };

  return SpaceNode;
}();

/* harmony default export */ var mathMLTree = ({
  MathNode: MathNode,
  TextNode: TextNode,
  SpaceNode: SpaceNode,
  newDocumentFragment: newDocumentFragment
});
;// CONCATENATED MODULE: ./src/buildMathML.js
/**
 * This file converts a parse tree into a cooresponding MathML tree. The main
 * entry point is the `buildMathML` function, which takes a parse tree from the
 * parser.
 */









/**
 * Takes a symbol and converts it into a MathML text node after performing
 * optional replacement from symbols.js.
 */
var makeText = function makeText(text, mode, options) {
  if (src_symbols[mode][text] && src_symbols[mode][text].replace && text.charCodeAt(0) !== 0xD835 && !(ligatures.hasOwnProperty(text) && options && (options.fontFamily && options.fontFamily.substr(4, 2) === "tt" || options.font && options.font.substr(4, 2) === "tt"))) {
    text = src_symbols[mode][text].replace;
  }

  return new mathMLTree.TextNode(text);
};
/**
 * Wrap the given array of nodes in an <mrow> node if needed, i.e.,
 * unless the array has length 1.  Always returns a single node.
 */

var makeRow = function makeRow(body) {
  if (body.length === 1) {
    return body[0];
  } else {
    return new mathMLTree.MathNode("mrow", body);
  }
};
/**
 * Returns the math variant as a string or null if none is required.
 */

var getVariant = function getVariant(group, options) {
  // Handle \text... font specifiers as best we can.
  // MathML has a limited list of allowable mathvariant specifiers; see
  // https://www.w3.org/TR/MathML3/chapter3.html#presm.commatt
  if (options.fontFamily === "texttt") {
    return "monospace";
  } else if (options.fontFamily === "textsf") {
    if (options.fontShape === "textit" && options.fontWeight === "textbf") {
      return "sans-serif-bold-italic";
    } else if (options.fontShape === "textit") {
      return "sans-serif-italic";
    } else if (options.fontWeight === "textbf") {
      return "bold-sans-serif";
    } else {
      return "sans-serif";
    }
  } else if (options.fontShape === "textit" && options.fontWeight === "textbf") {
    return "bold-italic";
  } else if (options.fontShape === "textit") {
    return "italic";
  } else if (options.fontWeight === "textbf") {
    return "bold";
  }

  var font = options.font;

  if (!font || font === "mathnormal") {
    return null;
  }

  var mode = group.mode;

  if (font === "mathit") {
    return "italic";
  } else if (font === "boldsymbol") {
    return group.type === "textord" ? "bold" : "bold-italic";
  } else if (font === "mathbf") {
    return "bold";
  } else if (font === "mathbb") {
    return "double-struck";
  } else if (font === "mathfrak") {
    return "fraktur";
  } else if (font === "mathscr" || font === "mathcal") {
    // MathML makes no distinction between script and caligrahpic
    return "script";
  } else if (font === "mathsf") {
    return "sans-serif";
  } else if (font === "mathtt") {
    return "monospace";
  }

  var text = group.text;

  if (utils.contains(["\\imath", "\\jmath"], text)) {
    return null;
  }

  if (src_symbols[mode][text] && src_symbols[mode][text].replace) {
    text = src_symbols[mode][text].replace;
  }

  var fontName = buildCommon.fontMap[font].fontName;

  if (getCharacterMetrics(text, fontName, mode)) {
    return buildCommon.fontMap[font].variant;
  }

  return null;
};
/**
 * Takes a list of nodes, builds them, and returns a list of the generated
 * MathML nodes.  Also combine consecutive <mtext> outputs into a single
 * <mtext> tag.
 */

var buildMathML_buildExpression = function buildExpression(expression, options, isOrdgroup) {
  if (expression.length === 1) {
    var group = buildMathML_buildGroup(expression[0], options);

    if (isOrdgroup && group instanceof MathNode && group.type === "mo") {
      // When TeX writers want to suppress spacing on an operator,
      // they often put the operator by itself inside braces.
      group.setAttribute("lspace", "0em");
      group.setAttribute("rspace", "0em");
    }

    return [group];
  }

  var groups = [];
  var lastGroup;

  for (var i = 0; i < expression.length; i++) {
    var _group = buildMathML_buildGroup(expression[i], options);

    if (_group instanceof MathNode && lastGroup instanceof MathNode) {
      // Concatenate adjacent <mtext>s
      if (_group.type === 'mtext' && lastGroup.type === 'mtext' && _group.getAttribute('mathvariant') === lastGroup.getAttribute('mathvariant')) {
        var _lastGroup$children;

        (_lastGroup$children = lastGroup.children).push.apply(_lastGroup$children, _group.children);

        continue; // Concatenate adjacent <mn>s
      } else if (_group.type === 'mn' && lastGroup.type === 'mn') {
        var _lastGroup$children2;

        (_lastGroup$children2 = lastGroup.children).push.apply(_lastGroup$children2, _group.children);

        continue; // Concatenate <mn>...</mn> followed by <mi>.</mi>
      } else if (_group.type === 'mi' && _group.children.length === 1 && lastGroup.type === 'mn') {
        var child = _group.children[0];

        if (child instanceof TextNode && child.text === '.') {
          var _lastGroup$children3;

          (_lastGroup$children3 = lastGroup.children).push.apply(_lastGroup$children3, _group.children);

          continue;
        }
      } else if (lastGroup.type === 'mi' && lastGroup.children.length === 1) {
        var lastChild = lastGroup.children[0];

        if (lastChild instanceof TextNode && lastChild.text === "\u0338" && (_group.type === 'mo' || _group.type === 'mi' || _group.type === 'mn')) {
          var _child = _group.children[0];

          if (_child instanceof TextNode && _child.text.length > 0) {
            // Overlay with combining character long solidus
            _child.text = _child.text.slice(0, 1) + "\u0338" + _child.text.slice(1);
            groups.pop();
          }
        }
      }
    }

    groups.push(_group);
    lastGroup = _group;
  }

  return groups;
};
/**
 * Equivalent to buildExpression, but wraps the elements in an <mrow>
 * if there's more than one.  Returns a single node instead of an array.
 */

var buildExpressionRow = function buildExpressionRow(expression, options, isOrdgroup) {
  return makeRow(buildMathML_buildExpression(expression, options, isOrdgroup));
};
/**
 * Takes a group from the parser and calls the appropriate groupBuilders function
 * on it to produce a MathML node.
 */

var buildMathML_buildGroup = function buildGroup(group, options) {
  if (!group) {
    return new mathMLTree.MathNode("mrow");
  }

  if (_mathmlGroupBuilders[group.type]) {
    // Call the groupBuilders function
    // $FlowFixMe
    var result = _mathmlGroupBuilders[group.type](group, options); // $FlowFixMe

    return result;
  } else {
    throw new src_ParseError("Got group of unknown type: '" + group.type + "'");
  }
};
/**
 * Takes a full parse tree and settings and builds a MathML representation of
 * it. In particular, we put the elements from building the parse tree into a
 * <semantics> tag so we can also include that TeX source as an annotation.
 *
 * Note that we actually return a domTree element with a `<math>` inside it so
 * we can do appropriate styling.
 */

function buildMathML(tree, texExpression, options, isDisplayMode, forMathmlOnly) {
  var expression = buildMathML_buildExpression(tree, options); // TODO: Make a pass thru the MathML similar to buildHTML.traverseNonSpaceNodes
  // and add spacing nodes. This is necessary only adjacent to math operators
  // like \sin or \lim or to subsup elements that contain math operators.
  // MathML takes care of the other spacing issues.
  // Wrap up the expression in an mrow so it is presented in the semantics
  // tag correctly, unless it's a single <mrow> or <mtable>.

  var wrapper;

  if (expression.length === 1 && expression[0] instanceof MathNode && utils.contains(["mrow", "mtable"], expression[0].type)) {
    wrapper = expression[0];
  } else {
    wrapper = new mathMLTree.MathNode("mrow", expression);
  } // Build a TeX annotation of the source


  var annotation = new mathMLTree.MathNode("annotation", [new mathMLTree.TextNode(texExpression)]);
  annotation.setAttribute("encoding", "application/x-tex");
  var semantics = new mathMLTree.MathNode("semantics", [wrapper, annotation]);
  var math = new mathMLTree.MathNode("math", [semantics]);
  math.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML");

  if (isDisplayMode) {
    math.setAttribute("display", "block");
  } // You can't style <math> nodes, so we wrap the node in a span.
  // NOTE: The span class is not typed to have <math> nodes as children, and
  // we don't want to make the children type more generic since the children
  // of span are expected to have more fields in `buildHtml` contexts.


  var wrapperClass = forMathmlOnly ? "katex" : "katex-mathml"; // $FlowFixMe

  return buildCommon.makeSpan([wrapperClass], [math]);
}
;// CONCATENATED MODULE: ./src/buildTree.js







var optionsFromSettings = function optionsFromSettings(settings) {
  return new src_Options({
    style: settings.displayMode ? src_Style.DISPLAY : src_Style.TEXT,
    maxSize: settings.maxSize,
    minRuleThickness: settings.minRuleThickness
  });
};

var displayWrap = function displayWrap(node, settings) {
  if (settings.displayMode) {
    var classes = ["katex-display"];

    if (settings.leqno) {
      classes.push("leqno");
    }

    if (settings.fleqn) {
      classes.push("fleqn");
    }

    node = buildCommon.makeSpan(classes, [node]);
  }

  return node;
};

var buildTree = function buildTree(tree, expression, settings) {
  var options = optionsFromSettings(settings);
  var katexNode;

  if (settings.output === "mathml") {
    return buildMathML(tree, expression, options, settings.displayMode, true);
  } else if (settings.output === "html") {
    var htmlNode = buildHTML(tree, options);
    katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
  } else {
    var mathMLNode = buildMathML(tree, expression, options, settings.displayMode, false);

    var _htmlNode = buildHTML(tree, options);

    katexNode = buildCommon.makeSpan(["katex"], [mathMLNode, _htmlNode]);
  }

  return displayWrap(katexNode, settings);
};
var buildHTMLTree = function buildHTMLTree(tree, expression, settings) {
  var options = optionsFromSettings(settings);
  var htmlNode = buildHTML(tree, options);
  var katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
  return displayWrap(katexNode, settings);
};
/* harmony default export */ var src_buildTree = ((/* unused pure expression or super */ null && (0)));
;// CONCATENATED MODULE: ./src/stretchy.js
/**
 * This file provides support to buildMathML.js and buildHTML.js
 * for stretchy wide elements rendered from SVG files
 * and other CSS trickery.
 */





var stretchyCodePoint = {
  widehat: "^",
  widecheck: "ˇ",
  widetilde: "~",
  utilde: "~",
  overleftarrow: "\u2190",
  underleftarrow: "\u2190",
  xleftarrow: "\u2190",
  overrightarrow: "\u2192",
  underrightarrow: "\u2192",
  xrightarrow: "\u2192",
  underbrace: "\u23DF",
  overbrace: "\u23DE",
  overgroup: "\u23E0",
  undergroup: "\u23E1",
  overleftrightarrow: "\u2194",
  underleftrightarrow: "\u2194",
  xleftrightarrow: "\u2194",
  Overrightarrow: "\u21D2",
  xRightarrow: "\u21D2",
  overleftharpoon: "\u21BC",
  xleftharpoonup: "\u21BC",
  overrightharpoon: "\u21C0",
  xrightharpoonup: "\u21C0",
  xLeftarrow: "\u21D0",
  xLeftrightarrow: "\u21D4",
  xhookleftarrow: "\u21A9",
  xhookrightarrow: "\u21AA",
  xmapsto: "\u21A6",
  xrightharpoondown: "\u21C1",
  xleftharpoondown: "\u21BD",
  xrightleftharpoons: "\u21CC",
  xleftrightharpoons: "\u21CB",
  xtwoheadleftarrow: "\u219E",
  xtwoheadrightarrow: "\u21A0",
  xlongequal: "=",
  xtofrom: "\u21C4",
  xrightleftarrows: "\u21C4",
  xrightequilibrium: "\u21CC",
  // Not a perfect match.
  xleftequilibrium: "\u21CB",
  // None better available.
  "\\cdrightarrow": "\u2192",
  "\\cdleftarrow": "\u2190",
  "\\cdlongequal": "="
};

var mathMLnode = function mathMLnode(label) {
  var node = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(stretchyCodePoint[label.replace(/^\\/, '')])]);
  node.setAttribute("stretchy", "true");
  return node;
}; // Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.
// Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)
// Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)
// Licensed under the SIL Open Font License, Version 1.1.
// See \nhttp://scripts.sil.org/OFL
// Very Long SVGs
//    Many of the KaTeX stretchy wide elements use a long SVG image and an
//    overflow: hidden tactic to achieve a stretchy image while avoiding
//    distortion of arrowheads or brace corners.
//    The SVG typically contains a very long (400 em) arrow.
//    The SVG is in a container span that has overflow: hidden, so the span
//    acts like a window that exposes only part of the  SVG.
//    The SVG always has a longer, thinner aspect ratio than the container span.
//    After the SVG fills 100% of the height of the container span,
//    there is a long arrow shaft left over. That left-over shaft is not shown.
//    Instead, it is sliced off because the span's CSS has overflow: hidden.
//    Thus, the reader sees an arrow that matches the subject matter width
//    without distortion.
//    Some functions, such as \cancel, need to vary their aspect ratio. These
//    functions do not get the overflow SVG treatment.
// Second Brush Stroke
//    Low resolution monitors struggle to display images in fine detail.
//    So browsers apply anti-aliasing. A long straight arrow shaft therefore
//    will sometimes appear as if it has a blurred edge.
//    To mitigate this, these SVG files contain a second "brush-stroke" on the
//    arrow shafts. That is, a second long thin rectangular SVG path has been
//    written directly on top of each arrow shaft. This reinforcement causes
//    some of the screen pixels to display as black instead of the anti-aliased
//    gray pixel that a  single path would generate. So we get arrow shafts
//    whose edges appear to be sharper.
// In the katexImagesData object just below, the dimensions all
// correspond to path geometry inside the relevant SVG.
// For example, \overrightarrow uses the same arrowhead as glyph U+2192
// from the KaTeX Main font. The scaling factor is 1000.
// That is, inside the font, that arrowhead is 522 units tall, which
// corresponds to 0.522 em inside the document.


var katexImagesData = {
  //   path(s), minWidth, height, align
  overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
  "\\cdrightarrow": [["rightarrow"], 3.0, 522, "xMaxYMin"],
  // CD minwwidth2.5pc
  xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
  "\\cdleftarrow": [["leftarrow"], 3.0, 522, "xMinYMin"],
  Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
  xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
  xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
  overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
  overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
  xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
  "\\cdlongequal": [["longequal"], 3.0, 334, "xMinYMin"],
  xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
  xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
  overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
  underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
  underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
  xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
  xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
  xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
  xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
  xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
  overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
  undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
  xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
  xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
  // The next three arrows are from the mhchem package.
  // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
  // document as \xrightarrow or \xrightleftharpoons. Those have
  // min-length = 1.75em, so we set min-length on these next three to match.
  xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
  xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
  xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
};

var groupLength = function groupLength(arg) {
  if (arg.type === "ordgroup") {
    return arg.body.length;
  } else {
    return 1;
  }
};

var svgSpan = function svgSpan(group, options) {
  // Create a span with inline SVG for the element.
  function buildSvgSpan_() {
    var viewBoxWidth = 400000; // default

    var label = group.label.substr(1);

    if (utils.contains(["widehat", "widecheck", "widetilde", "utilde"], label)) {
      // Each type in the `if` statement corresponds to one of the ParseNode
      // types below. This narrowing is required to access `grp.base`.
      // $FlowFixMe
      var grp = group; // There are four SVG images available for each function.
      // Choose a taller image when there are more characters.

      var numChars = groupLength(grp.base);
      var viewBoxHeight;
      var pathName;

      var _height;

      if (numChars > 5) {
        if (label === "widehat" || label === "widecheck") {
          viewBoxHeight = 420;
          viewBoxWidth = 2364;
          _height = 0.42;
          pathName = label + "4";
        } else {
          viewBoxHeight = 312;
          viewBoxWidth = 2340;
          _height = 0.34;
          pathName = "tilde4";
        }
      } else {
        var imgIndex = [1, 1, 2, 2, 3, 3][numChars];

        if (label === "widehat" || label === "widecheck") {
          viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
          viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
          _height = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
          pathName = label + imgIndex;
        } else {
          viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
          viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
          _height = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
          pathName = "tilde" + imgIndex;
        }
      }

      var path = new PathNode(pathName);
      var svgNode = new SvgNode([path], {
        "width": "100%",
        "height": makeEm(_height),
        "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
        "preserveAspectRatio": "none"
      });
      return {
        span: buildCommon.makeSvgSpan([], [svgNode], options),
        minWidth: 0,
        height: _height
      };
    } else {
      var spans = [];
      var data = katexImagesData[label];
      var paths = data[0],
          _minWidth = data[1],
          _viewBoxHeight = data[2];

      var _height2 = _viewBoxHeight / 1000;

      var numSvgChildren = paths.length;
      var widthClasses;
      var aligns;

      if (numSvgChildren === 1) {
        // $FlowFixMe: All these cases must be of the 4-tuple type.
        var align1 = data[3];
        widthClasses = ["hide-tail"];
        aligns = [align1];
      } else if (numSvgChildren === 2) {
        widthClasses = ["halfarrow-left", "halfarrow-right"];
        aligns = ["xMinYMin", "xMaxYMin"];
      } else if (numSvgChildren === 3) {
        widthClasses = ["brace-left", "brace-center", "brace-right"];
        aligns = ["xMinYMin", "xMidYMin", "xMaxYMin"];
      } else {
        throw new Error("Correct katexImagesData or update code here to support\n                    " + numSvgChildren + " children.");
      }

      for (var i = 0; i < numSvgChildren; i++) {
        var _path = new PathNode(paths[i]);

        var _svgNode = new SvgNode([_path], {
          "width": "400em",
          "height": makeEm(_height2),
          "viewBox": "0 0 " + viewBoxWidth + " " + _viewBoxHeight,
          "preserveAspectRatio": aligns[i] + " slice"
        });

        var _span = buildCommon.makeSvgSpan([widthClasses[i]], [_svgNode], options);

        if (numSvgChildren === 1) {
          return {
            span: _span,
            minWidth: _minWidth,
            height: _height2
          };
        } else {
          _span.style.height = makeEm(_height2);
          spans.push(_span);
        }
      }

      return {
        span: buildCommon.makeSpan(["stretchy"], spans, options),
        minWidth: _minWidth,
        height: _height2
      };
    }
  } // buildSvgSpan_()


  var _buildSvgSpan_ = buildSvgSpan_(),
      span = _buildSvgSpan_.span,
      minWidth = _buildSvgSpan_.minWidth,
      height = _buildSvgSpan_.height; // Note that we are returning span.depth = 0.
  // Any adjustments relative to the baseline must be done in buildHTML.


  span.height = height;
  span.style.height = makeEm(height);

  if (minWidth > 0) {
    span.style.minWidth = makeEm(minWidth);
  }

  return span;
};

var encloseSpan = function encloseSpan(inner, label, topPad, bottomPad, options) {
  // Return an image span for \cancel, \bcancel, \xcancel, \fbox, or \angl
  var img;
  var totalHeight = inner.height + inner.depth + topPad + bottomPad;

  if (/fbox|color|angl/.test(label)) {
    img = buildCommon.makeSpan(["stretchy", label], [], options);

    if (label === "fbox") {
      var color = options.color && options.getColor();

      if (color) {
        img.style.borderColor = color;
      }
    }
  } else {
    // \cancel, \bcancel, or \xcancel
    // Since \cancel's SVG is inline and it omits the viewBox attribute,
    // its stroke-width will not vary with span area.
    var lines = [];

    if (/^[bx]cancel$/.test(label)) {
      lines.push(new LineNode({
        "x1": "0",
        "y1": "0",
        "x2": "100%",
        "y2": "100%",
        "stroke-width": "0.046em"
      }));
    }

    if (/^x?cancel$/.test(label)) {
      lines.push(new LineNode({
        "x1": "0",
        "y1": "100%",
        "x2": "100%",
        "y2": "0",
        "stroke-width": "0.046em"
      }));
    }

    var svgNode = new SvgNode(lines, {
      "width": "100%",
      "height": makeEm(totalHeight)
    });
    img = buildCommon.makeSvgSpan([], [svgNode], options);
  }

  img.height = totalHeight;
  img.style.height = makeEm(totalHeight);
  return img;
};

/* harmony default export */ var stretchy = ({
  encloseSpan: encloseSpan,
  mathMLnode: mathMLnode,
  svgSpan: svgSpan
});
;// CONCATENATED MODULE: ./src/parseNode.js


/**
 * Asserts that the node is of the given type and returns it with stricter
 * typing. Throws if the node's type does not match.
 */
function assertNodeType(node, type) {
  if (!node || node.type !== type) {
    throw new Error("Expected node of type " + type + ", but got " + (node ? "node of type " + node.type : String(node)));
  } // $FlowFixMe, >=0.125


  return node;
}
/**
 * Returns the node more strictly typed iff it is of the given type. Otherwise,
 * returns null.
 */

function assertSymbolNodeType(node) {
  var typedNode = checkSymbolNodeType(node);

  if (!typedNode) {
    throw new Error("Expected node of symbol group type, but got " + (node ? "node of type " + node.type : String(node)));
  }

  return typedNode;
}
/**
 * Returns the node more strictly typed iff it is of the given type. Otherwise,
 * returns null.
 */

function checkSymbolNodeType(node) {
  if (node && (node.type === "atom" || NON_ATOMS.hasOwnProperty(node.type))) {
    // $FlowFixMe
    return node;
  }

  return null;
}
;// CONCATENATED MODULE: ./src/functions/accent.js










// NOTE: Unlike most `htmlBuilder`s, this one handles not only "accent", but
// also "supsub" since an accent can affect super/subscripting.
var htmlBuilder = function htmlBuilder(grp, options) {
  // Accents are handled in the TeXbook pg. 443, rule 12.
  var base;
  var group;
  var supSubGroup;

  if (grp && grp.type === "supsub") {
    // If our base is a character box, and we have superscripts and
    // subscripts, the supsub will defer to us. In particular, we want
    // to attach the superscripts and subscripts to the inner body (so
    // that the position of the superscripts and subscripts won't be
    // affected by the height of the accent). We accomplish this by
    // sticking the base of the accent into the base of the supsub, and
    // rendering that, while keeping track of where the accent is.
    // The real accent group is the base of the supsub group
    group = assertNodeType(grp.base, "accent"); // The character box is the base of the accent group

    base = group.base; // Stick the character box into the base of the supsub group

    grp.base = base; // Rerender the supsub group with its new base, and store that
    // result.

    supSubGroup = assertSpan(buildGroup(grp, options)); // reset original base

    grp.base = group;
  } else {
    group = assertNodeType(grp, "accent");
    base = group.base;
  } // Build the base group


  var body = buildGroup(base, options.havingCrampedStyle()); // Does the accent need to shift for the skew of a character?

  var mustShift = group.isShifty && utils.isCharacterBox(base); // Calculate the skew of the accent. This is based on the line "If the
  // nucleus is not a single character, let s = 0; otherwise set s to the
  // kern amount for the nucleus followed by the \skewchar of its font."
  // Note that our skew metrics are just the kern between each character
  // and the skewchar.

  var skew = 0;

  if (mustShift) {
    // If the base is a character box, then we want the skew of the
    // innermost character. To do that, we find the innermost character:
    var baseChar = utils.getBaseElem(base); // Then, we render its group to get the symbol inside it

    var baseGroup = buildGroup(baseChar, options.havingCrampedStyle()); // Finally, we pull the skew off of the symbol.

    skew = assertSymbolDomNode(baseGroup).skew; // Note that we now throw away baseGroup, because the layers we
    // removed with getBaseElem might contain things like \color which
    // we can't get rid of.
    // TODO(emily): Find a better way to get the skew
  }

  var accentBelow = group.label === "\\c"; // calculate the amount of space between the body and the accent

  var clearance = accentBelow ? body.height + body.depth : Math.min(body.height, options.fontMetrics().xHeight); // Build the accent

  var accentBody;

  if (!group.isStretchy) {
    var accent;
    var width;

    if (group.label === "\\vec") {
      // Before version 0.9, \vec used the combining font glyph U+20D7.
      // But browsers, especially Safari, are not consistent in how they
      // render combining characters when not preceded by a character.
      // So now we use an SVG.
      // If Safari reforms, we should consider reverting to the glyph.
      accent = buildCommon.staticSvg("vec", options);
      width = buildCommon.svgData.vec[1];
    } else {
      accent = buildCommon.makeOrd({
        mode: group.mode,
        text: group.label
      }, options, "textord");
      accent = assertSymbolDomNode(accent); // Remove the italic correction of the accent, because it only serves to
      // shift the accent over to a place we don't want.

      accent.italic = 0;
      width = accent.width;

      if (accentBelow) {
        clearance += accent.depth;
      }
    }

    accentBody = buildCommon.makeSpan(["accent-body"], [accent]); // "Full" accents expand the width of the resulting symbol to be
    // at least the width of the accent, and overlap directly onto the
    // character without any vertical offset.

    var accentFull = group.label === "\\textcircled";

    if (accentFull) {
      accentBody.classes.push('accent-full');
      clearance = body.height;
    } // Shift the accent over by the skew.


    var left = skew; // CSS defines `.katex .accent .accent-body:not(.accent-full) { width: 0 }`
    // so that the accent doesn't contribute to the bounding box.
    // We need to shift the character by its width (effectively half
    // its width) to compensate.

    if (!accentFull) {
      left -= width / 2;
    }

    accentBody.style.left = makeEm(left); // \textcircled uses the \bigcirc glyph, so it needs some
    // vertical adjustment to match LaTeX.

    if (group.label === "\\textcircled") {
      accentBody.style.top = ".2em";
    }

    accentBody = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: body
      }, {
        type: "kern",
        size: -clearance
      }, {
        type: "elem",
        elem: accentBody
      }]
    }, options);
  } else {
    accentBody = stretchy.svgSpan(group, options);
    accentBody = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: body
      }, {
        type: "elem",
        elem: accentBody,
        wrapperClasses: ["svg-align"],
        wrapperStyle: skew > 0 ? {
          width: "calc(100% - " + makeEm(2 * skew) + ")",
          marginLeft: makeEm(2 * skew)
        } : undefined
      }]
    }, options);
  }

  var accentWrap = buildCommon.makeSpan(["mord", "accent"], [accentBody], options);

  if (supSubGroup) {
    // Here, we replace the "base" child of the supsub with our newly
    // generated accent.
    supSubGroup.children[0] = accentWrap; // Since we don't rerun the height calculation after replacing the
    // accent, we manually recalculate height.

    supSubGroup.height = Math.max(accentWrap.height, supSubGroup.height); // Accents should always be ords, even when their innards are not.

    supSubGroup.classes[0] = "mord";
    return supSubGroup;
  } else {
    return accentWrap;
  }
};

var mathmlBuilder = function mathmlBuilder(group, options) {
  var accentNode = group.isStretchy ? stretchy.mathMLnode(group.label) : new mathMLTree.MathNode("mo", [makeText(group.label, group.mode)]);
  var node = new mathMLTree.MathNode("mover", [buildMathML_buildGroup(group.base, options), accentNode]);
  node.setAttribute("accent", "true");
  return node;
};

var NON_STRETCHY_ACCENT_REGEX = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map(function (accent) {
  return "\\" + accent;
}).join("|")); // Accents

defineFunction({
  type: "accent",
  names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
  props: {
    numArgs: 1
  },
  handler: function handler(context, args) {
    var base = normalizeArgument(args[0]);
    var isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);
    var isShifty = !isStretchy || context.funcName === "\\widehat" || context.funcName === "\\widetilde" || context.funcName === "\\widecheck";
    return {
      type: "accent",
      mode: context.parser.mode,
      label: context.funcName,
      isStretchy: isStretchy,
      isShifty: isShifty,
      base: base
    };
  },
  htmlBuilder: htmlBuilder,
  mathmlBuilder: mathmlBuilder
}); // Text-mode accents

defineFunction({
  type: "accent",
  names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\c", "\\r", "\\H", "\\v", "\\textcircled"],
  props: {
    numArgs: 1,
    allowedInText: true,
    allowedInMath: true,
    // unless in strict mode
    argTypes: ["primitive"]
  },
  handler: function handler(context, args) {
    var base = args[0];
    var mode = context.parser.mode;

    if (mode === "math") {
      context.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + context.funcName + " works only in text mode");
      mode = "text";
    }

    return {
      type: "accent",
      mode: mode,
      label: context.funcName,
      isStretchy: false,
      isShifty: true,
      base: base
    };
  },
  htmlBuilder: htmlBuilder,
  mathmlBuilder: mathmlBuilder
});
;// CONCATENATED MODULE: ./src/functions/accentunder.js
// Horizontal overlap functions






defineFunction({
  type: "accentUnder",
  names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var base = args[0];
    return {
      type: "accentUnder",
      mode: parser.mode,
      label: funcName,
      base: base
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Treat under accents much like underlines.
    var innerGroup = buildGroup(group.base, options);
    var accentBody = stretchy.svgSpan(group, options);
    var kern = group.label === "\\utilde" ? 0.12 : 0; // Generate the vlist, with the appropriate kerns

    var vlist = buildCommon.makeVList({
      positionType: "top",
      positionData: innerGroup.height,
      children: [{
        type: "elem",
        elem: accentBody,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: kern
      }, {
        type: "elem",
        elem: innerGroup
      }]
    }, options);
    return buildCommon.makeSpan(["mord", "accentunder"], [vlist], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var accentNode = stretchy.mathMLnode(group.label);
    var node = new mathMLTree.MathNode("munder", [buildMathML_buildGroup(group.base, options), accentNode]);
    node.setAttribute("accentunder", "true");
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/arrow.js







// Helper function
var paddedNode = function paddedNode(group) {
  var node = new mathMLTree.MathNode("mpadded", group ? [group] : []);
  node.setAttribute("width", "+0.6em");
  node.setAttribute("lspace", "0.3em");
  return node;
}; // Stretchy arrows with an optional argument


defineFunction({
  type: "xArrow",
  names: ["\\xleftarrow", "\\xrightarrow", "\\xLeftarrow", "\\xRightarrow", "\\xleftrightarrow", "\\xLeftrightarrow", "\\xhookleftarrow", "\\xhookrightarrow", "\\xmapsto", "\\xrightharpoondown", "\\xrightharpoonup", "\\xleftharpoondown", "\\xleftharpoonup", "\\xrightleftharpoons", "\\xleftrightharpoons", "\\xlongequal", "\\xtwoheadrightarrow", "\\xtwoheadleftarrow", "\\xtofrom", // The next 3 functions are here to support the mhchem extension.
  // Direct use of these functions is discouraged and may break someday.
  "\\xrightleftarrows", "\\xrightequilibrium", "\\xleftequilibrium", // The next 3 functions are here only to support the {CD} environment.
  "\\\\cdrightarrow", "\\\\cdleftarrow", "\\\\cdlongequal"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    return {
      type: "xArrow",
      mode: parser.mode,
      label: funcName,
      body: args[0],
      below: optArgs[0]
    };
  },
  // Flow is unable to correctly infer the type of `group`, even though it's
  // unamibiguously determined from the passed-in `type` above.
  htmlBuilder: function htmlBuilder(group, options) {
    var style = options.style; // Build the argument groups in the appropriate style.
    // Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%
    // Some groups can return document fragments.  Handle those by wrapping
    // them in a span.

    var newOptions = options.havingStyle(style.sup());
    var upperGroup = buildCommon.wrapFragment(buildGroup(group.body, newOptions, options), options);
    var arrowPrefix = group.label.slice(0, 2) === "\\x" ? "x" : "cd";
    upperGroup.classes.push(arrowPrefix + "-arrow-pad");
    var lowerGroup;

    if (group.below) {
      // Build the lower group
      newOptions = options.havingStyle(style.sub());
      lowerGroup = buildCommon.wrapFragment(buildGroup(group.below, newOptions, options), options);
      lowerGroup.classes.push(arrowPrefix + "-arrow-pad");
    }

    var arrowBody = stretchy.svgSpan(group, options); // Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.
    // The point we want on the math axis is at 0.5 * arrowBody.height.

    var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height; // 2 mu kern. Ref: amsmath.dtx: #7\if0#2\else\mkern#2mu\fi

    var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111; // 0.111 em = 2 mu

    if (upperGroup.depth > 0.25 || group.label === "\\xleftequilibrium") {
      upperShift -= upperGroup.depth; // shift up if depth encroaches
    } // Generate the vlist


    var vlist;

    if (lowerGroup) {
      var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
      vlist = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: upperGroup,
          shift: upperShift
        }, {
          type: "elem",
          elem: arrowBody,
          shift: arrowShift
        }, {
          type: "elem",
          elem: lowerGroup,
          shift: lowerShift
        }]
      }, options);
    } else {
      vlist = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: upperGroup,
          shift: upperShift
        }, {
          type: "elem",
          elem: arrowBody,
          shift: arrowShift
        }]
      }, options);
    } // $FlowFixMe: Replace this with passing "svg-align" into makeVList.


    vlist.children[0].children[0].children[1].classes.push("svg-align");
    return buildCommon.makeSpan(["mrel", "x-arrow"], [vlist], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var arrowNode = stretchy.mathMLnode(group.label);
    arrowNode.setAttribute("minsize", group.label.charAt(0) === "x" ? "1.75em" : "3.0em");
    var node;

    if (group.body) {
      var upperNode = paddedNode(buildMathML_buildGroup(group.body, options));

      if (group.below) {
        var lowerNode = paddedNode(buildMathML_buildGroup(group.below, options));
        node = new mathMLTree.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
      } else {
        node = new mathMLTree.MathNode("mover", [arrowNode, upperNode]);
      }
    } else if (group.below) {
      var _lowerNode = paddedNode(buildMathML_buildGroup(group.below, options));

      node = new mathMLTree.MathNode("munder", [arrowNode, _lowerNode]);
    } else {
      // This should never happen.
      // Parser.js throws an error if there is no argument.
      node = paddedNode();
      node = new mathMLTree.MathNode("mover", [arrowNode, node]);
    }

    return node;
  }
});
;// CONCATENATED MODULE: ./src/environments/cd.js








var cdArrowFunctionName = {
  ">": "\\\\cdrightarrow",
  "<": "\\\\cdleftarrow",
  "=": "\\\\cdlongequal",
  "A": "\\uparrow",
  "V": "\\downarrow",
  "|": "\\Vert",
  ".": "no arrow"
};

var newCell = function newCell() {
  // Create an empty cell, to be filled below with parse nodes.
  // The parseTree from this module must be constructed like the
  // one created by parseArray(), so an empty CD cell must
  // be a ParseNode<"styling">. And CD is always displaystyle.
  // So these values are fixed and flow can do implicit typing.
  return {
    type: "styling",
    body: [],
    mode: "math",
    style: "display"
  };
};

var isStartOfArrow = function isStartOfArrow(node) {
  return node.type === "textord" && node.text === "@";
};

var isLabelEnd = function isLabelEnd(node, endChar) {
  return (node.type === "mathord" || node.type === "atom") && node.text === endChar;
};

function cdArrow(arrowChar, labels, parser) {
  // Return a parse tree of an arrow and its labels.
  // This acts in a way similar to a macro expansion.
  var funcName = cdArrowFunctionName[arrowChar];

  switch (funcName) {
    case "\\\\cdrightarrow":
    case "\\\\cdleftarrow":
      return parser.callFunction(funcName, [labels[0]], [labels[1]]);

    case "\\uparrow":
    case "\\downarrow":
      {
        var leftLabel = parser.callFunction("\\\\cdleft", [labels[0]], []);
        var bareArrow = {
          type: "atom",
          text: funcName,
          mode: "math",
          family: "rel"
        };
        var sizedArrow = parser.callFunction("\\Big", [bareArrow], []);
        var rightLabel = parser.callFunction("\\\\cdright", [labels[1]], []);
        var arrowGroup = {
          type: "ordgroup",
          mode: "math",
          body: [leftLabel, sizedArrow, rightLabel]
        };
        return parser.callFunction("\\\\cdparent", [arrowGroup], []);
      }

    case "\\\\cdlongequal":
      return parser.callFunction("\\\\cdlongequal", [], []);

    case "\\Vert":
      {
        var arrow = {
          type: "textord",
          text: "\\Vert",
          mode: "math"
        };
        return parser.callFunction("\\Big", [arrow], []);
      }

    default:
      return {
        type: "textord",
        text: " ",
        mode: "math"
      };
  }
}

function parseCD(parser) {
  // Get the array's parse nodes with \\ temporarily mapped to \cr.
  var parsedRows = [];
  parser.gullet.beginGroup();
  parser.gullet.macros.set("\\cr", "\\\\\\relax");
  parser.gullet.beginGroup();

  while (true) {
    // eslint-disable-line no-constant-condition
    // Get the parse nodes for the next row.
    parsedRows.push(parser.parseExpression(false, "\\\\"));
    parser.gullet.endGroup();
    parser.gullet.beginGroup();
    var next = parser.fetch().text;

    if (next === "&" || next === "\\\\") {
      parser.consume();
    } else if (next === "\\end") {
      if (parsedRows[parsedRows.length - 1].length === 0) {
        parsedRows.pop(); // final row ended in \\
      }

      break;
    } else {
      throw new src_ParseError("Expected \\\\ or \\cr or \\end", parser.nextToken);
    }
  }

  var row = [];
  var body = [row]; // Loop thru the parse nodes. Collect them into cells and arrows.

  for (var i = 0; i < parsedRows.length; i++) {
    // Start a new row.
    var rowNodes = parsedRows[i]; // Create the first cell.

    var cell = newCell();

    for (var j = 0; j < rowNodes.length; j++) {
      if (!isStartOfArrow(rowNodes[j])) {
        // If a parseNode is not an arrow, it goes into a cell.
        cell.body.push(rowNodes[j]);
      } else {
        // Parse node j is an "@", the start of an arrow.
        // Before starting on the arrow, push the cell into `row`.
        row.push(cell); // Now collect parseNodes into an arrow.
        // The character after "@" defines the arrow type.

        j += 1;
        var arrowChar = assertSymbolNodeType(rowNodes[j]).text; // Create two empty label nodes. We may or may not use them.

        var labels = new Array(2);
        labels[0] = {
          type: "ordgroup",
          mode: "math",
          body: []
        };
        labels[1] = {
          type: "ordgroup",
          mode: "math",
          body: []
        }; // Process the arrow.

        if ("=|.".indexOf(arrowChar) > -1) {// Three "arrows", ``@=`, `@|`, and `@.`, do not take labels.
          // Do nothing here.
        } else if ("<>AV".indexOf(arrowChar) > -1) {
          // Four arrows, `@>>>`, `@<<<`, `@AAA`, and `@VVV`, each take
          // two optional labels. E.g. the right-point arrow syntax is
          // really:  @>{optional label}>{optional label}>
          // Collect parseNodes into labels.
          for (var labelNum = 0; labelNum < 2; labelNum++) {
            var inLabel = true;

            for (var k = j + 1; k < rowNodes.length; k++) {
              if (isLabelEnd(rowNodes[k], arrowChar)) {
                inLabel = false;
                j = k;
                break;
              }

              if (isStartOfArrow(rowNodes[k])) {
                throw new src_ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[k]);
              }

              labels[labelNum].body.push(rowNodes[k]);
            }

            if (inLabel) {
              // isLabelEnd never returned a true.
              throw new src_ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[j]);
            }
          }
        } else {
          throw new src_ParseError("Expected one of \"<>AV=|.\" after @", rowNodes[j]);
        } // Now join the arrow to its labels.


        var arrow = cdArrow(arrowChar, labels, parser); // Wrap the arrow in  ParseNode<"styling">.
        // This is done to match parseArray() behavior.

        var wrappedArrow = {
          type: "styling",
          body: [arrow],
          mode: "math",
          style: "display" // CD is always displaystyle.

        };
        row.push(wrappedArrow); // In CD's syntax, cells are implicit. That is, everything that
        // is not an arrow gets collected into a cell. So create an empty
        // cell now. It will collect upcoming parseNodes.

        cell = newCell();
      }
    }

    if (i % 2 === 0) {
      // Even-numbered rows consist of: cell, arrow, cell, arrow, ... cell
      // The last cell is not yet pushed into `row`, so:
      row.push(cell);
    } else {
      // Odd-numbered rows consist of: vert arrow, empty cell, ... vert arrow
      // Remove the empty cell that was placed at the beginning of `row`.
      row.shift();
    }

    row = [];
    body.push(row);
  } // End row group


  parser.gullet.endGroup(); // End array group defining \\

  parser.gullet.endGroup(); // define column separation.

  var cols = new Array(body[0].length).fill({
    type: "align",
    align: "c",
    pregap: 0.25,
    // CD package sets \enskip between columns.
    postgap: 0.25 // So pre and post each get half an \enskip, i.e. 0.25em.

  });
  return {
    type: "array",
    mode: "math",
    body: body,
    arraystretch: 1,
    addJot: true,
    rowGaps: [null],
    cols: cols,
    colSeparationType: "CD",
    hLinesBeforeRow: new Array(body.length + 1).fill([])
  };
} // The functions below are not available for general use.
// They are here only for internal use by the {CD} environment in placing labels
// next to vertical arrows.
// We don't need any such functions for horizontal arrows because we can reuse
// the functionality that already exists for extensible arrows.

defineFunction({
  type: "cdlabel",
  names: ["\\\\cdleft", "\\\\cdright"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    return {
      type: "cdlabel",
      mode: parser.mode,
      side: funcName.slice(4),
      label: args[0]
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var newOptions = options.havingStyle(options.style.sup());
    var label = buildCommon.wrapFragment(buildGroup(group.label, newOptions, options), options);
    label.classes.push("cd-label-" + group.side);
    label.style.bottom = makeEm(0.8 - label.depth); // Zero out label height & depth, so vertical align of arrow is set
    // by the arrow height, not by the label.

    label.height = 0;
    label.depth = 0;
    return label;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var label = new mathMLTree.MathNode("mrow", [buildMathML_buildGroup(group.label, options)]);
    label = new mathMLTree.MathNode("mpadded", [label]);
    label.setAttribute("width", "0");

    if (group.side === "left") {
      label.setAttribute("lspace", "-1width");
    } // We have to guess at vertical alignment. We know the arrow is 1.8em tall,
    // But we don't know the height or depth of the label.


    label.setAttribute("voffset", "0.7em");
    label = new mathMLTree.MathNode("mstyle", [label]);
    label.setAttribute("displaystyle", "false");
    label.setAttribute("scriptlevel", "1");
    return label;
  }
});
defineFunction({
  type: "cdlabelparent",
  names: ["\\\\cdparent"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser;
    return {
      type: "cdlabelparent",
      mode: parser.mode,
      fragment: args[0]
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Wrap the vertical arrow and its labels.
    // The parent gets position: relative. The child gets position: absolute.
    // So CSS can locate the label correctly.
    var parent = buildCommon.wrapFragment(buildGroup(group.fragment, options), options);
    parent.classes.push("cd-vert-arrow");
    return parent;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    return new mathMLTree.MathNode("mrow", [buildMathML_buildGroup(group.fragment, options)]);
  }
});
;// CONCATENATED MODULE: ./src/functions/char.js


 // \@char is an internal function that takes a grouped decimal argument like
// {123} and converts into symbol with code 123.  It is used by the *macro*
// \char defined in macros.js.

defineFunction({
  type: "textord",
  names: ["\\@char"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    var arg = assertNodeType(args[0], "ordgroup");
    var group = arg.body;
    var number = "";

    for (var i = 0; i < group.length; i++) {
      var node = assertNodeType(group[i], "textord");
      number += node.text;
    }

    var code = parseInt(number);
    var text;

    if (isNaN(code)) {
      throw new src_ParseError("\\@char has non-numeric argument " + number); // If we drop IE support, the following code could be replaced with
      // text = String.fromCodePoint(code)
    } else if (code < 0 || code >= 0x10ffff) {
      throw new src_ParseError("\\@char with invalid code point " + number);
    } else if (code <= 0xffff) {
      text = String.fromCharCode(code);
    } else {
      // Astral code point; split into surrogate halves
      code -= 0x10000;
      text = String.fromCharCode((code >> 10) + 0xd800, (code & 0x3ff) + 0xdc00);
    }

    return {
      type: "textord",
      mode: parser.mode,
      text: text
    };
  }
});
;// CONCATENATED MODULE: ./src/functions/color.js







var color_htmlBuilder = function htmlBuilder(group, options) {
  var elements = buildExpression(group.body, options.withColor(group.color), false); // \color isn't supposed to affect the type of the elements it contains.
  // To accomplish this, we wrap the results in a fragment, so the inner
  // elements will be able to directly interact with their neighbors. For
  // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`

  return buildCommon.makeFragment(elements);
};

var color_mathmlBuilder = function mathmlBuilder(group, options) {
  var inner = buildMathML_buildExpression(group.body, options.withColor(group.color));
  var node = new mathMLTree.MathNode("mstyle", inner);
  node.setAttribute("mathcolor", group.color);
  return node;
};

defineFunction({
  type: "color",
  names: ["\\textcolor"],
  props: {
    numArgs: 2,
    allowedInText: true,
    argTypes: ["color", "original"]
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    var color = assertNodeType(args[0], "color-token").color;
    var body = args[1];
    return {
      type: "color",
      mode: parser.mode,
      color: color,
      body: ordargument(body)
    };
  },
  htmlBuilder: color_htmlBuilder,
  mathmlBuilder: color_mathmlBuilder
});
defineFunction({
  type: "color",
  names: ["\\color"],
  props: {
    numArgs: 1,
    allowedInText: true,
    argTypes: ["color"]
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser,
        breakOnTokenText = _ref2.breakOnTokenText;
    var color = assertNodeType(args[0], "color-token").color; // Set macro \current@color in current namespace to store the current
    // color, mimicking the behavior of color.sty.
    // This is currently used just to correctly color a \right
    // that follows a \color command.

    parser.gullet.macros.set("\\current@color", color); // Parse out the implicit body that should be colored.

    var body = parser.parseExpression(true, breakOnTokenText);
    return {
      type: "color",
      mode: parser.mode,
      color: color,
      body: body
    };
  },
  htmlBuilder: color_htmlBuilder,
  mathmlBuilder: color_mathmlBuilder
});
;// CONCATENATED MODULE: ./src/functions/cr.js
// Row breaks within tabular environments, and line breaks at top level




 // \DeclareRobustCommand\\{...\@xnewline}

defineFunction({
  type: "cr",
  names: ["\\\\"],
  props: {
    numArgs: 0,
    numOptionalArgs: 1,
    argTypes: ["size"],
    allowedInText: true
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser;
    var size = optArgs[0];
    var newLine = !parser.settings.displayMode || !parser.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline " + "does nothing in display mode");
    return {
      type: "cr",
      mode: parser.mode,
      newLine: newLine,
      size: size && assertNodeType(size, "size").value
    };
  },
  // The following builders are called only at the top level,
  // not within tabular/array environments.
  htmlBuilder: function htmlBuilder(group, options) {
    var span = buildCommon.makeSpan(["mspace"], [], options);

    if (group.newLine) {
      span.classes.push("newline");

      if (group.size) {
        span.style.marginTop = makeEm(calculateSize(group.size, options));
      }
    }

    return span;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mspace");

    if (group.newLine) {
      node.setAttribute("linebreak", "newline");

      if (group.size) {
        node.setAttribute("height", makeEm(calculateSize(group.size, options)));
      }
    }

    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/def.js



var globalMap = {
  "\\global": "\\global",
  "\\long": "\\\\globallong",
  "\\\\globallong": "\\\\globallong",
  "\\def": "\\gdef",
  "\\gdef": "\\gdef",
  "\\edef": "\\xdef",
  "\\xdef": "\\xdef",
  "\\let": "\\\\globallet",
  "\\futurelet": "\\\\globalfuture"
};

var checkControlSequence = function checkControlSequence(tok) {
  var name = tok.text;

  if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
    throw new src_ParseError("Expected a control sequence", tok);
  }

  return name;
};

var getRHS = function getRHS(parser) {
  var tok = parser.gullet.popToken();

  if (tok.text === "=") {
    // consume optional equals
    tok = parser.gullet.popToken();

    if (tok.text === " ") {
      // consume one optional space
      tok = parser.gullet.popToken();
    }
  }

  return tok;
};

var letCommand = function letCommand(parser, name, tok, global) {
  var macro = parser.gullet.macros.get(tok.text);

  if (macro == null) {
    // don't expand it later even if a macro with the same name is defined
    // e.g., \let\foo=\frac \def\frac{\relax} \frac12
    tok.noexpand = true;
    macro = {
      tokens: [tok],
      numArgs: 0,
      // reproduce the same behavior in expansion
      unexpandable: !parser.gullet.isExpandable(tok.text)
    };
  }

  parser.gullet.macros.set(name, macro, global);
}; // <assignment> -> <non-macro assignment>|<macro assignment>
// <non-macro assignment> -> <simple assignment>|\global<non-macro assignment>
// <macro assignment> -> <definition>|<prefix><macro assignment>
// <prefix> -> \global|\long|\outer


defineFunction({
  type: "internal",
  names: ["\\global", "\\long", "\\\\globallong" // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: function handler(_ref) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    parser.consumeSpaces();
    var token = parser.fetch();

    if (globalMap[token.text]) {
      // KaTeX doesn't have \par, so ignore \long
      if (funcName === "\\global" || funcName === "\\\\globallong") {
        token.text = globalMap[token.text];
      }

      return assertNodeType(parser.parseFunction(), "internal");
    }

    throw new src_ParseError("Invalid token after macro prefix", token);
  }
}); // Basic support for macro definitions: \def, \gdef, \edef, \xdef
// <definition> -> <def><control sequence><definition text>
// <def> -> \def|\gdef|\edef|\xdef
// <definition text> -> <parameter text><left brace><balanced text><right brace>

defineFunction({
  type: "internal",
  names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler: function handler(_ref2) {
    var parser = _ref2.parser,
        funcName = _ref2.funcName;
    var tok = parser.gullet.popToken();
    var name = tok.text;

    if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
      throw new src_ParseError("Expected a control sequence", tok);
    }

    var numArgs = 0;
    var insert;
    var delimiters = [[]]; // <parameter text> contains no braces

    while (parser.gullet.future().text !== "{") {
      tok = parser.gullet.popToken();

      if (tok.text === "#") {
        // If the very last character of the <parameter text> is #, so that
        // this # is immediately followed by {, TeX will behave as if the {
        // had been inserted at the right end of both the parameter text
        // and the replacement text.
        if (parser.gullet.future().text === "{") {
          insert = parser.gullet.future();
          delimiters[numArgs].push("{");
          break;
        } // A parameter, the first appearance of # must be followed by 1,
        // the next by 2, and so on; up to nine #’s are allowed


        tok = parser.gullet.popToken();

        if (!/^[1-9]$/.test(tok.text)) {
          throw new src_ParseError("Invalid argument number \"" + tok.text + "\"");
        }

        if (parseInt(tok.text) !== numArgs + 1) {
          throw new src_ParseError("Argument number \"" + tok.text + "\" out of order");
        }

        numArgs++;
        delimiters.push([]);
      } else if (tok.text === "EOF") {
        throw new src_ParseError("Expected a macro definition");
      } else {
        delimiters[numArgs].push(tok.text);
      }
    } // replacement text, enclosed in '{' and '}' and properly nested


    var _parser$gullet$consum = parser.gullet.consumeArg(),
        tokens = _parser$gullet$consum.tokens;

    if (insert) {
      tokens.unshift(insert);
    }

    if (funcName === "\\edef" || funcName === "\\xdef") {
      tokens = parser.gullet.expandTokens(tokens);
      tokens.reverse(); // to fit in with stack order
    } // Final arg is the expansion of the macro


    parser.gullet.macros.set(name, {
      tokens: tokens,
      numArgs: numArgs,
      delimiters: delimiters
    }, funcName === globalMap[funcName]);
    return {
      type: "internal",
      mode: parser.mode
    };
  }
}); // <simple assignment> -> <let assignment>
// <let assignment> -> \futurelet<control sequence><token><token>
//     | \let<control sequence><equals><one optional space><token>
// <equals> -> <optional spaces>|<optional spaces>=

defineFunction({
  type: "internal",
  names: ["\\let", "\\\\globallet" // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler: function handler(_ref3) {
    var parser = _ref3.parser,
        funcName = _ref3.funcName;
    var name = checkControlSequence(parser.gullet.popToken());
    parser.gullet.consumeSpaces();
    var tok = getRHS(parser);
    letCommand(parser, name, tok, funcName === "\\\\globallet");
    return {
      type: "internal",
      mode: parser.mode
    };
  }
}); // ref: https://www.tug.org/TUGboat/tb09-3/tb22bechtolsheim.pdf

defineFunction({
  type: "internal",
  names: ["\\futurelet", "\\\\globalfuture" // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler: function handler(_ref4) {
    var parser = _ref4.parser,
        funcName = _ref4.funcName;
    var name = checkControlSequence(parser.gullet.popToken());
    var middle = parser.gullet.popToken();
    var tok = parser.gullet.popToken();
    letCommand(parser, name, tok, funcName === "\\\\globalfuture");
    parser.gullet.pushToken(tok);
    parser.gullet.pushToken(middle);
    return {
      type: "internal",
      mode: parser.mode
    };
  }
});
;// CONCATENATED MODULE: ./src/delimiter.js
/**
 * This file deals with creating delimiters of various sizes. The TeXbook
 * discusses these routines on page 441-442, in the "Another subroutine sets box
 * x to a specified variable delimiter" paragraph.
 *
 * There are three main routines here. `makeSmallDelim` makes a delimiter in the
 * normal font, but in either text, script, or scriptscript style.
 * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
 * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
 * smaller pieces that are stacked on top of one another.
 *
 * The functions take a parameter `center`, which determines if the delimiter
 * should be centered around the axis.
 *
 * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
 * one of the given sizes. This is used for things like `\bigl`.
 * `customSizedDelim` makes a delimiter with a given total height+depth. It is
 * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
 * delimiter which surrounds an expression of a given height an depth. It is
 * used in `\left` and `\right`.
 */











/**
 * Get the metrics for a given symbol and font, after transformation (i.e.
 * after following replacement from symbols.js)
 */
var getMetrics = function getMetrics(symbol, font, mode) {
  var replace = src_symbols.math[symbol] && src_symbols.math[symbol].replace;
  var metrics = getCharacterMetrics(replace || symbol, font, mode);

  if (!metrics) {
    throw new Error("Unsupported symbol " + symbol + " and font size " + font + ".");
  }

  return metrics;
};
/**
 * Puts a delimiter span in a given style, and adds appropriate height, depth,
 * and maxFontSizes.
 */


var styleWrap = function styleWrap(delim, toStyle, options, classes) {
  var newOptions = options.havingBaseStyle(toStyle);
  var span = buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)), [delim], options);
  var delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
  span.height *= delimSizeMultiplier;
  span.depth *= delimSizeMultiplier;
  span.maxFontSize = newOptions.sizeMultiplier;
  return span;
};

var centerSpan = function centerSpan(span, options, style) {
  var newOptions = options.havingBaseStyle(style);
  var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;
  span.classes.push("delimcenter");
  span.style.top = makeEm(shift);
  span.height -= shift;
  span.depth += shift;
};
/**
 * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
 * font, but is restyled to either be in textstyle, scriptstyle, or
 * scriptscriptstyle.
 */


var makeSmallDelim = function makeSmallDelim(delim, style, center, options, mode, classes) {
  var text = buildCommon.makeSymbol(delim, "Main-Regular", mode, options);
  var span = styleWrap(text, style, options, classes);

  if (center) {
    centerSpan(span, options, style);
  }

  return span;
};
/**
 * Builds a symbol in the given font size (note size is an integer)
 */


var mathrmSize = function mathrmSize(value, size, mode, options) {
  return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode, options);
};
/**
 * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
 * Size3, or Size4 fonts. It is always rendered in textstyle.
 */


var makeLargeDelim = function makeLargeDelim(delim, size, center, options, mode, classes) {
  var inner = mathrmSize(delim, size, mode, options);
  var span = styleWrap(buildCommon.makeSpan(["delimsizing", "size" + size], [inner], options), src_Style.TEXT, options, classes);

  if (center) {
    centerSpan(span, options, src_Style.TEXT);
  }

  return span;
};
/**
 * Make a span from a font glyph with the given offset and in the given font.
 * This is used in makeStackedDelim to make the stacking pieces for the delimiter.
 */


var makeGlyphSpan = function makeGlyphSpan(symbol, font, mode) {
  var sizeClass; // Apply the correct CSS class to choose the right font.

  if (font === "Size1-Regular") {
    sizeClass = "delim-size1";
  } else
    /* if (font === "Size4-Regular") */
    {
      sizeClass = "delim-size4";
    }

  var corner = buildCommon.makeSpan(["delimsizinginner", sizeClass], [buildCommon.makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]); // Since this will be passed into `makeVList` in the end, wrap the element
  // in the appropriate tag that VList uses.

  return {
    type: "elem",
    elem: corner
  };
};

var makeInner = function makeInner(ch, height, options) {
  // Create a span with inline SVG for the inner part of a tall stacked delimiter.
  var width = fontMetricsData["Size4-Regular"][ch.charCodeAt(0)] ? fontMetricsData["Size4-Regular"][ch.charCodeAt(0)][4] : fontMetricsData["Size1-Regular"][ch.charCodeAt(0)][4];
  var path = new PathNode("inner", innerPath(ch, Math.round(1000 * height)));
  var svgNode = new SvgNode([path], {
    "width": makeEm(width),
    "height": makeEm(height),
    // Override CSS rule `.katex svg { width: 100% }`
    "style": "width:" + makeEm(width),
    "viewBox": "0 0 " + 1000 * width + " " + Math.round(1000 * height),
    "preserveAspectRatio": "xMinYMin"
  });
  var span = buildCommon.makeSvgSpan([], [svgNode], options);
  span.height = height;
  span.style.height = makeEm(height);
  span.style.width = makeEm(width);
  return {
    type: "elem",
    elem: span
  };
}; // Helpers for makeStackedDelim


var lapInEms = 0.008;
var lap = {
  type: "kern",
  size: -1 * lapInEms
};
var verts = ["|", "\\lvert", "\\rvert", "\\vert"];
var doubleVerts = ["\\|", "\\lVert", "\\rVert", "\\Vert"];
/**
 * Make a stacked delimiter out of a given delimiter, with the total height at
 * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
 */

var makeStackedDelim = function makeStackedDelim(delim, heightTotal, center, options, mode, classes) {
  // There are four parts, the top, an optional middle, a repeated part, and a
  // bottom.
  var top;
  var middle;
  var repeat;
  var bottom;
  top = repeat = bottom = delim;
  middle = null; // Also keep track of what font the delimiters are in

  var font = "Size1-Regular"; // We set the parts and font based on the symbol. Note that we use
  // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
  // repeats of the arrows

  if (delim === "\\uparrow") {
    repeat = bottom = "\u23D0";
  } else if (delim === "\\Uparrow") {
    repeat = bottom = "\u2016";
  } else if (delim === "\\downarrow") {
    top = repeat = "\u23D0";
  } else if (delim === "\\Downarrow") {
    top = repeat = "\u2016";
  } else if (delim === "\\updownarrow") {
    top = "\\uparrow";
    repeat = "\u23D0";
    bottom = "\\downarrow";
  } else if (delim === "\\Updownarrow") {
    top = "\\Uparrow";
    repeat = "\u2016";
    bottom = "\\Downarrow";
  } else if (utils.contains(verts, delim)) {
    repeat = "\u2223";
  } else if (utils.contains(doubleVerts, delim)) {
    repeat = "\u2225";
  } else if (delim === "[" || delim === "\\lbrack") {
    top = "\u23A1";
    repeat = "\u23A2";
    bottom = "\u23A3";
    font = "Size4-Regular";
  } else if (delim === "]" || delim === "\\rbrack") {
    top = "\u23A4";
    repeat = "\u23A5";
    bottom = "\u23A6";
    font = "Size4-Regular";
  } else if (delim === "\\lfloor" || delim === "\u230A") {
    repeat = top = "\u23A2";
    bottom = "\u23A3";
    font = "Size4-Regular";
  } else if (delim === "\\lceil" || delim === "\u2308") {
    top = "\u23A1";
    repeat = bottom = "\u23A2";
    font = "Size4-Regular";
  } else if (delim === "\\rfloor" || delim === "\u230B") {
    repeat = top = "\u23A5";
    bottom = "\u23A6";
    font = "Size4-Regular";
  } else if (delim === "\\rceil" || delim === "\u2309") {
    top = "\u23A4";
    repeat = bottom = "\u23A5";
    font = "Size4-Regular";
  } else if (delim === "(" || delim === "\\lparen") {
    top = "\u239B";
    repeat = "\u239C";
    bottom = "\u239D";
    font = "Size4-Regular";
  } else if (delim === ")" || delim === "\\rparen") {
    top = "\u239E";
    repeat = "\u239F";
    bottom = "\u23A0";
    font = "Size4-Regular";
  } else if (delim === "\\{" || delim === "\\lbrace") {
    top = "\u23A7";
    middle = "\u23A8";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\}" || delim === "\\rbrace") {
    top = "\u23AB";
    middle = "\u23AC";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\lgroup" || delim === "\u27EE") {
    top = "\u23A7";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\rgroup" || delim === "\u27EF") {
    top = "\u23AB";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\lmoustache" || delim === "\u23B0") {
    top = "\u23A7";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\rmoustache" || delim === "\u23B1") {
    top = "\u23AB";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } // Get the metrics of the four sections


  var topMetrics = getMetrics(top, font, mode);
  var topHeightTotal = topMetrics.height + topMetrics.depth;
  var repeatMetrics = getMetrics(repeat, font, mode);
  var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
  var bottomMetrics = getMetrics(bottom, font, mode);
  var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
  var middleHeightTotal = 0;
  var middleFactor = 1;

  if (middle !== null) {
    var middleMetrics = getMetrics(middle, font, mode);
    middleHeightTotal = middleMetrics.height + middleMetrics.depth;
    middleFactor = 2; // repeat symmetrically above and below middle
  } // Calcuate the minimal height that the delimiter can have.
  // It is at least the size of the top, bottom, and optional middle combined.


  var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal; // Compute the number of copies of the repeat symbol we will need

  var repeatCount = Math.max(0, Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal))); // Compute the total height of the delimiter including all the symbols

  var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal; // The center of the delimiter is placed at the center of the axis. Note
  // that in this context, "center" means that the delimiter should be
  // centered around the axis in the current style, while normally it is
  // centered around the axis in textstyle.

  var axisHeight = options.fontMetrics().axisHeight;

  if (center) {
    axisHeight *= options.sizeMultiplier;
  } // Calculate the depth


  var depth = realHeightTotal / 2 - axisHeight; // Now, we start building the pieces that will go into the vlist
  // Keep a list of the pieces of the stacked delimiter

  var stack = []; // Add the bottom symbol

  stack.push(makeGlyphSpan(bottom, font, mode));
  stack.push(lap); // overlap

  if (middle === null) {
    // The middle section will be an SVG. Make it an extra 0.016em tall.
    // We'll overlap by 0.008em at top and bottom.
    var innerHeight = realHeightTotal - topHeightTotal - bottomHeightTotal + 2 * lapInEms;
    stack.push(makeInner(repeat, innerHeight, options));
  } else {
    // When there is a middle bit, we need the middle part and two repeated
    // sections
    var _innerHeight = (realHeightTotal - topHeightTotal - bottomHeightTotal - middleHeightTotal) / 2 + 2 * lapInEms;

    stack.push(makeInner(repeat, _innerHeight, options)); // Now insert the middle of the brace.

    stack.push(lap);
    stack.push(makeGlyphSpan(middle, font, mode));
    stack.push(lap);
    stack.push(makeInner(repeat, _innerHeight, options));
  } // Add the top symbol


  stack.push(lap);
  stack.push(makeGlyphSpan(top, font, mode)); // Finally, build the vlist

  var newOptions = options.havingBaseStyle(src_Style.TEXT);
  var inner = buildCommon.makeVList({
    positionType: "bottom",
    positionData: depth,
    children: stack
  }, newOptions);
  return styleWrap(buildCommon.makeSpan(["delimsizing", "mult"], [inner], newOptions), src_Style.TEXT, options, classes);
}; // All surds have 0.08em padding above the viniculum inside the SVG.
// That keeps browser span height rounding error from pinching the line.


var vbPad = 80; // padding above the surd, measured inside the viewBox.

var emPad = 0.08; // padding, in ems, measured in the document.

var sqrtSvg = function sqrtSvg(sqrtName, height, viewBoxHeight, extraViniculum, options) {
  var path = sqrtPath(sqrtName, extraViniculum, viewBoxHeight);
  var pathNode = new PathNode(sqrtName, path);
  var svg = new SvgNode([pathNode], {
    // Note: 1000:1 ratio of viewBox to document em width.
    "width": "400em",
    "height": makeEm(height),
    "viewBox": "0 0 400000 " + viewBoxHeight,
    "preserveAspectRatio": "xMinYMin slice"
  });
  return buildCommon.makeSvgSpan(["hide-tail"], [svg], options);
};
/**
 * Make a sqrt image of the given height,
 */


var makeSqrtImage = function makeSqrtImage(height, options) {
  // Define a newOptions that removes the effect of size changes such as \Huge.
  // We don't pick different a height surd for \Huge. For it, we scale up.
  var newOptions = options.havingBaseSizing(); // Pick the desired surd glyph from a sequence of surds.

  var delim = traverseSequence("\\surd", height * newOptions.sizeMultiplier, stackLargeDelimiterSequence, newOptions);
  var sizeMultiplier = newOptions.sizeMultiplier; // default
  // The standard sqrt SVGs each have a 0.04em thick viniculum.
  // If Settings.minRuleThickness is larger than that, we add extraViniculum.

  var extraViniculum = Math.max(0, options.minRuleThickness - options.fontMetrics().sqrtRuleThickness); // Create a span containing an SVG image of a sqrt symbol.

  var span;
  var spanHeight = 0;
  var texHeight = 0;
  var viewBoxHeight = 0;
  var advanceWidth; // We create viewBoxes with 80 units of "padding" above each surd.
  // Then browser rounding error on the parent span height will not
  // encroach on the ink of the viniculum. But that padding is not
  // included in the TeX-like `height` used for calculation of
  // vertical alignment. So texHeight = span.height < span.style.height.

  if (delim.type === "small") {
    // Get an SVG that is derived from glyph U+221A in font KaTeX-Main.
    // 1000 unit normal glyph height.
    viewBoxHeight = 1000 + 1000 * extraViniculum + vbPad;

    if (height < 1.0) {
      sizeMultiplier = 1.0; // mimic a \textfont radical
    } else if (height < 1.4) {
      sizeMultiplier = 0.7; // mimic a \scriptfont radical
    }

    spanHeight = (1.0 + extraViniculum + emPad) / sizeMultiplier;
    texHeight = (1.00 + extraViniculum) / sizeMultiplier;
    span = sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, extraViniculum, options);
    span.style.minWidth = "0.853em";
    advanceWidth = 0.833 / sizeMultiplier; // from the font.
  } else if (delim.type === "large") {
    // These SVGs come from fonts: KaTeX_Size1, _Size2, etc.
    viewBoxHeight = (1000 + vbPad) * sizeToMaxHeight[delim.size];
    texHeight = (sizeToMaxHeight[delim.size] + extraViniculum) / sizeMultiplier;
    spanHeight = (sizeToMaxHeight[delim.size] + extraViniculum + emPad) / sizeMultiplier;
    span = sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, extraViniculum, options);
    span.style.minWidth = "1.02em";
    advanceWidth = 1.0 / sizeMultiplier; // 1.0 from the font.
  } else {
    // Tall sqrt. In TeX, this would be stacked using multiple glyphs.
    // We'll use a single SVG to accomplish the same thing.
    spanHeight = height + extraViniculum + emPad;
    texHeight = height + extraViniculum;
    viewBoxHeight = Math.floor(1000 * height + extraViniculum) + vbPad;
    span = sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, extraViniculum, options);
    span.style.minWidth = "0.742em";
    advanceWidth = 1.056;
  }

  span.height = texHeight;
  span.style.height = makeEm(spanHeight);
  return {
    span: span,
    advanceWidth: advanceWidth,
    // Calculate the actual line width.
    // This actually should depend on the chosen font -- e.g. \boldmath
    // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
    // have thicker rules.
    ruleWidth: (options.fontMetrics().sqrtRuleThickness + extraViniculum) * sizeMultiplier
  };
}; // There are three kinds of delimiters, delimiters that stack when they become
// too large


var stackLargeDelimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230A", "\u230B", "\\lceil", "\\rceil", "\u2308", "\u2309", "\\surd"]; // delimiters that always stack

var stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27EE", "\u27EF", "\\lmoustache", "\\rmoustache", "\u23B0", "\u23B1"]; // and delimiters that never stack

var stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"]; // Metrics of the different sizes. Found by looking at TeX's output of
// $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.

var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];
/**
 * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
 */

var makeSizedDelim = function makeSizedDelim(delim, size, options, mode, classes) {
  // < and > turn into \langle and \rangle in delimiters
  if (delim === "<" || delim === "\\lt" || delim === "\u27E8") {
    delim = "\\langle";
  } else if (delim === ">" || delim === "\\gt" || delim === "\u27E9") {
    delim = "\\rangle";
  } // Sized delimiters are never centered.


  if (utils.contains(stackLargeDelimiters, delim) || utils.contains(stackNeverDelimiters, delim)) {
    return makeLargeDelim(delim, size, false, options, mode, classes);
  } else if (utils.contains(stackAlwaysDelimiters, delim)) {
    return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
  } else {
    throw new src_ParseError("Illegal delimiter: '" + delim + "'");
  }
};
/**
 * There are three different sequences of delimiter sizes that the delimiters
 * follow depending on the kind of delimiter. This is used when creating custom
 * sized delimiters to decide whether to create a small, large, or stacked
 * delimiter.
 *
 * In real TeX, these sequences aren't explicitly defined, but are instead
 * defined inside the font metrics. Since there are only three sequences that
 * are possible for the delimiters that TeX defines, it is easier to just encode
 * them explicitly here.
 */


// Delimiters that never stack try small delimiters and large delimiters only
var stackNeverDelimiterSequence = [{
  type: "small",
  style: src_Style.SCRIPTSCRIPT
}, {
  type: "small",
  style: src_Style.SCRIPT
}, {
  type: "small",
  style: src_Style.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}]; // Delimiters that always stack try the small delimiters first, then stack

var stackAlwaysDelimiterSequence = [{
  type: "small",
  style: src_Style.SCRIPTSCRIPT
}, {
  type: "small",
  style: src_Style.SCRIPT
}, {
  type: "small",
  style: src_Style.TEXT
}, {
  type: "stack"
}]; // Delimiters that stack when large try the small and then large delimiters, and
// stack afterwards

var stackLargeDelimiterSequence = [{
  type: "small",
  style: src_Style.SCRIPTSCRIPT
}, {
  type: "small",
  style: src_Style.SCRIPT
}, {
  type: "small",
  style: src_Style.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}, {
  type: "stack"
}];
/**
 * Get the font used in a delimiter based on what kind of delimiter it is.
 * TODO(#963) Use more specific font family return type once that is introduced.
 */

var delimTypeToFont = function delimTypeToFont(type) {
  if (type.type === "small") {
    return "Main-Regular";
  } else if (type.type === "large") {
    return "Size" + type.size + "-Regular";
  } else if (type.type === "stack") {
    return "Size4-Regular";
  } else {
    throw new Error("Add support for delim type '" + type.type + "' here.");
  }
};
/**
 * Traverse a sequence of types of delimiters to decide what kind of delimiter
 * should be used to create a delimiter of the given height+depth.
 */


var traverseSequence = function traverseSequence(delim, height, sequence, options) {
  // Here, we choose the index we should start at in the sequences. In smaller
  // sizes (which correspond to larger numbers in style.size) we start earlier
  // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
  // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
  var start = Math.min(2, 3 - options.style.size);

  for (var i = start; i < sequence.length; i++) {
    if (sequence[i].type === "stack") {
      // This is always the last delimiter, so we just break the loop now.
      break;
    }

    var metrics = getMetrics(delim, delimTypeToFont(sequence[i]), "math");
    var heightDepth = metrics.height + metrics.depth; // Small delimiters are scaled down versions of the same font, so we
    // account for the style change size.

    if (sequence[i].type === "small") {
      var newOptions = options.havingBaseStyle(sequence[i].style);
      heightDepth *= newOptions.sizeMultiplier;
    } // Check if the delimiter at this size works for the given height.


    if (heightDepth > height) {
      return sequence[i];
    }
  } // If we reached the end of the sequence, return the last sequence element.


  return sequence[sequence.length - 1];
};
/**
 * Make a delimiter of a given height+depth, with optional centering. Here, we
 * traverse the sequences, and create a delimiter that the sequence tells us to.
 */


var makeCustomSizedDelim = function makeCustomSizedDelim(delim, height, center, options, mode, classes) {
  if (delim === "<" || delim === "\\lt" || delim === "\u27E8") {
    delim = "\\langle";
  } else if (delim === ">" || delim === "\\gt" || delim === "\u27E9") {
    delim = "\\rangle";
  } // Decide what sequence to use


  var sequence;

  if (utils.contains(stackNeverDelimiters, delim)) {
    sequence = stackNeverDelimiterSequence;
  } else if (utils.contains(stackLargeDelimiters, delim)) {
    sequence = stackLargeDelimiterSequence;
  } else {
    sequence = stackAlwaysDelimiterSequence;
  } // Look through the sequence


  var delimType = traverseSequence(delim, height, sequence, options); // Get the delimiter from font glyphs.
  // Depending on the sequence element we decided on, call the
  // appropriate function.

  if (delimType.type === "small") {
    return makeSmallDelim(delim, delimType.style, center, options, mode, classes);
  } else if (delimType.type === "large") {
    return makeLargeDelim(delim, delimType.size, center, options, mode, classes);
  } else
    /* if (delimType.type === "stack") */
    {
      return makeStackedDelim(delim, height, center, options, mode, classes);
    }
};
/**
 * Make a delimiter for use with `\left` and `\right`, given a height and depth
 * of an expression that the delimiters surround.
 */


var makeLeftRightDelim = function makeLeftRightDelim(delim, height, depth, options, mode, classes) {
  // We always center \left/\right delimiters, so the axis is always shifted
  var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier; // Taken from TeX source, tex.web, function make_left_right

  var delimiterFactor = 901;
  var delimiterExtend = 5.0 / options.fontMetrics().ptPerEm;
  var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
  var totalHeight = Math.max( // In real TeX, calculations are done using integral values which are
  // 65536 per pt, or 655360 per em. So, the division here truncates in
  // TeX but doesn't here, producing different results. If we wanted to
  // exactly match TeX's calculation, we could do
  //   Math.floor(655360 * maxDistFromAxis / 500) *
  //    delimiterFactor / 655360
  // (To see the difference, compare
  //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
  // in TeX and KaTeX)
  maxDistFromAxis / 500 * delimiterFactor, 2 * maxDistFromAxis - delimiterExtend); // Finally, we defer to `makeCustomSizedDelim` with our calculated total
  // height

  return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
};

/* harmony default export */ var delimiter = ({
  sqrtImage: makeSqrtImage,
  sizedDelim: makeSizedDelim,
  sizeToMaxHeight: sizeToMaxHeight,
  customSizedDelim: makeCustomSizedDelim,
  leftRightDelim: makeLeftRightDelim
});
;// CONCATENATED MODULE: ./src/functions/delimsizing.js










// Extra data needed for the delimiter handler down below
var delimiterSizes = {
  "\\bigl": {
    mclass: "mopen",
    size: 1
  },
  "\\Bigl": {
    mclass: "mopen",
    size: 2
  },
  "\\biggl": {
    mclass: "mopen",
    size: 3
  },
  "\\Biggl": {
    mclass: "mopen",
    size: 4
  },
  "\\bigr": {
    mclass: "mclose",
    size: 1
  },
  "\\Bigr": {
    mclass: "mclose",
    size: 2
  },
  "\\biggr": {
    mclass: "mclose",
    size: 3
  },
  "\\Biggr": {
    mclass: "mclose",
    size: 4
  },
  "\\bigm": {
    mclass: "mrel",
    size: 1
  },
  "\\Bigm": {
    mclass: "mrel",
    size: 2
  },
  "\\biggm": {
    mclass: "mrel",
    size: 3
  },
  "\\Biggm": {
    mclass: "mrel",
    size: 4
  },
  "\\big": {
    mclass: "mord",
    size: 1
  },
  "\\Big": {
    mclass: "mord",
    size: 2
  },
  "\\bigg": {
    mclass: "mord",
    size: 3
  },
  "\\Bigg": {
    mclass: "mord",
    size: 4
  }
};
var delimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230A", "\u230B", "\\lceil", "\\rceil", "\u2308", "\u2309", "<", ">", "\\langle", "\u27E8", "\\rangle", "\u27E9", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27EE", "\u27EF", "\\lmoustache", "\\rmoustache", "\u23B0", "\u23B1", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];

// Delimiter functions
function checkDelimiter(delim, context) {
  var symDelim = checkSymbolNodeType(delim);

  if (symDelim && utils.contains(delimiters, symDelim.text)) {
    return symDelim;
  } else if (symDelim) {
    throw new src_ParseError("Invalid delimiter '" + symDelim.text + "' after '" + context.funcName + "'", delim);
  } else {
    throw new src_ParseError("Invalid delimiter type '" + delim.type + "'", delim);
  }
}

defineFunction({
  type: "delimsizing",
  names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
  props: {
    numArgs: 1,
    argTypes: ["primitive"]
  },
  handler: function handler(context, args) {
    var delim = checkDelimiter(args[0], context);
    return {
      type: "delimsizing",
      mode: context.parser.mode,
      size: delimiterSizes[context.funcName].size,
      mclass: delimiterSizes[context.funcName].mclass,
      delim: delim.text
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    if (group.delim === ".") {
      // Empty delimiters still count as elements, even though they don't
      // show anything.
      return buildCommon.makeSpan([group.mclass]);
    } // Use delimiter.sizedDelim to generate the delimiter.


    return delimiter.sizedDelim(group.delim, group.size, options, group.mode, [group.mclass]);
  },
  mathmlBuilder: function mathmlBuilder(group) {
    var children = [];

    if (group.delim !== ".") {
      children.push(makeText(group.delim, group.mode));
    }

    var node = new mathMLTree.MathNode("mo", children);

    if (group.mclass === "mopen" || group.mclass === "mclose") {
      // Only some of the delimsizing functions act as fences, and they
      // return "mopen" or "mclose" mclass.
      node.setAttribute("fence", "true");
    } else {
      // Explicitly disable fencing if it's not a fence, to override the
      // defaults.
      node.setAttribute("fence", "false");
    }

    node.setAttribute("stretchy", "true");
    var size = makeEm(delimiter.sizeToMaxHeight[group.size]);
    node.setAttribute("minsize", size);
    node.setAttribute("maxsize", size);
    return node;
  }
});

function assertParsed(group) {
  if (!group.body) {
    throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
  }
}

defineFunction({
  type: "leftright-right",
  names: ["\\right"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: function handler(context, args) {
    // \left case below triggers parsing of \right in
    //   `const right = parser.parseFunction();`
    // uses this return value.
    var color = context.parser.gullet.macros.get("\\current@color");

    if (color && typeof color !== "string") {
      throw new src_ParseError("\\current@color set to non-string in \\right");
    }

    return {
      type: "leftright-right",
      mode: context.parser.mode,
      delim: checkDelimiter(args[0], context).text,
      color: color // undefined if not set via \color

    };
  }
});
defineFunction({
  type: "leftright",
  names: ["\\left"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: function handler(context, args) {
    var delim = checkDelimiter(args[0], context);
    var parser = context.parser; // Parse out the implicit body

    ++parser.leftrightDepth; // parseExpression stops before '\\right'

    var body = parser.parseExpression(false);
    --parser.leftrightDepth; // Check the next token

    parser.expect("\\right", false);
    var right = assertNodeType(parser.parseFunction(), "leftright-right");
    return {
      type: "leftright",
      mode: parser.mode,
      body: body,
      left: delim.text,
      right: right.delim,
      rightColor: right.color
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    assertParsed(group); // Build the inner expression

    var inner = buildExpression(group.body, options, true, ["mopen", "mclose"]);
    var innerHeight = 0;
    var innerDepth = 0;
    var hadMiddle = false; // Calculate its height and depth

    for (var i = 0; i < inner.length; i++) {
      // Property `isMiddle` not defined on `span`. See comment in
      // "middle"'s htmlBuilder.
      // $FlowFixMe
      if (inner[i].isMiddle) {
        hadMiddle = true;
      } else {
        innerHeight = Math.max(inner[i].height, innerHeight);
        innerDepth = Math.max(inner[i].depth, innerDepth);
      }
    } // The size of delimiters is the same, regardless of what style we are
    // in. Thus, to correctly calculate the size of delimiter we need around
    // a group, we scale down the inner size based on the size.


    innerHeight *= options.sizeMultiplier;
    innerDepth *= options.sizeMultiplier;
    var leftDelim;

    if (group.left === ".") {
      // Empty delimiters in \left and \right make null delimiter spaces.
      leftDelim = makeNullDelimiter(options, ["mopen"]);
    } else {
      // Otherwise, use leftRightDelim to generate the correct sized
      // delimiter.
      leftDelim = delimiter.leftRightDelim(group.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
    } // Add it to the beginning of the expression


    inner.unshift(leftDelim); // Handle middle delimiters

    if (hadMiddle) {
      for (var _i = 1; _i < inner.length; _i++) {
        var middleDelim = inner[_i]; // Property `isMiddle` not defined on `span`. See comment in
        // "middle"'s htmlBuilder.
        // $FlowFixMe

        var isMiddle = middleDelim.isMiddle;

        if (isMiddle) {
          // Apply the options that were active when \middle was called
          inner[_i] = delimiter.leftRightDelim(isMiddle.delim, innerHeight, innerDepth, isMiddle.options, group.mode, []);
        }
      }
    }

    var rightDelim; // Same for the right delimiter, but using color specified by \color

    if (group.right === ".") {
      rightDelim = makeNullDelimiter(options, ["mclose"]);
    } else {
      var colorOptions = group.rightColor ? options.withColor(group.rightColor) : options;
      rightDelim = delimiter.leftRightDelim(group.right, innerHeight, innerDepth, colorOptions, group.mode, ["mclose"]);
    } // Add it to the end of the expression.


    inner.push(rightDelim);
    return buildCommon.makeSpan(["minner"], inner, options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    assertParsed(group);
    var inner = buildMathML_buildExpression(group.body, options);

    if (group.left !== ".") {
      var leftNode = new mathMLTree.MathNode("mo", [makeText(group.left, group.mode)]);
      leftNode.setAttribute("fence", "true");
      inner.unshift(leftNode);
    }

    if (group.right !== ".") {
      var rightNode = new mathMLTree.MathNode("mo", [makeText(group.right, group.mode)]);
      rightNode.setAttribute("fence", "true");

      if (group.rightColor) {
        rightNode.setAttribute("mathcolor", group.rightColor);
      }

      inner.push(rightNode);
    }

    return makeRow(inner);
  }
});
defineFunction({
  type: "middle",
  names: ["\\middle"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: function handler(context, args) {
    var delim = checkDelimiter(args[0], context);

    if (!context.parser.leftrightDepth) {
      throw new src_ParseError("\\middle without preceding \\left", delim);
    }

    return {
      type: "middle",
      mode: context.parser.mode,
      delim: delim.text
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var middleDelim;

    if (group.delim === ".") {
      middleDelim = makeNullDelimiter(options, []);
    } else {
      middleDelim = delimiter.sizedDelim(group.delim, 1, options, group.mode, []);
      var isMiddle = {
        delim: group.delim,
        options: options
      }; // Property `isMiddle` not defined on `span`. It is only used in
      // this file above.
      // TODO: Fix this violation of the `span` type and possibly rename
      // things since `isMiddle` sounds like a boolean, but is a struct.
      // $FlowFixMe

      middleDelim.isMiddle = isMiddle;
    }

    return middleDelim;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    // A Firefox \middle will strech a character vertically only if it
    // is in the fence part of the operator dictionary at:
    // https://www.w3.org/TR/MathML3/appendixc.html.
    // So we need to avoid U+2223 and use plain "|" instead.
    var textNode = group.delim === "\\vert" || group.delim === "|" ? makeText("|", "text") : makeText(group.delim, group.mode);
    var middleNode = new mathMLTree.MathNode("mo", [textNode]);
    middleNode.setAttribute("fence", "true"); // MathML gives 5/18em spacing to each <mo> element.
    // \middle should get delimiter spacing instead.

    middleNode.setAttribute("lspace", "0.05em");
    middleNode.setAttribute("rspace", "0.05em");
    return middleNode;
  }
});
;// CONCATENATED MODULE: ./src/functions/enclose.js












var enclose_htmlBuilder = function htmlBuilder(group, options) {
  // \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox, \phase
  // Some groups can return document fragments.  Handle those by wrapping
  // them in a span.
  var inner = buildCommon.wrapFragment(buildGroup(group.body, options), options);
  var label = group.label.substr(1);
  var scale = options.sizeMultiplier;
  var img;
  var imgShift = 0; // In the LaTeX cancel package, line geometry is slightly different
  // depending on whether the subject is wider than it is tall, or vice versa.
  // We don't know the width of a group, so as a proxy, we test if
  // the subject is a single character. This captures most of the
  // subjects that should get the "tall" treatment.

  var isSingleChar = utils.isCharacterBox(group.body);

  if (label === "sout") {
    img = buildCommon.makeSpan(["stretchy", "sout"]);
    img.height = options.fontMetrics().defaultRuleThickness / scale;
    imgShift = -0.5 * options.fontMetrics().xHeight;
  } else if (label === "phase") {
    // Set a couple of dimensions from the steinmetz package.
    var lineWeight = calculateSize({
      number: 0.6,
      unit: "pt"
    }, options);
    var clearance = calculateSize({
      number: 0.35,
      unit: "ex"
    }, options); // Prevent size changes like \Huge from affecting line thickness

    var newOptions = options.havingBaseSizing();
    scale = scale / newOptions.sizeMultiplier;
    var angleHeight = inner.height + inner.depth + lineWeight + clearance; // Reserve a left pad for the angle.

    inner.style.paddingLeft = makeEm(angleHeight / 2 + lineWeight); // Create an SVG

    var viewBoxHeight = Math.floor(1000 * angleHeight * scale);
    var path = phasePath(viewBoxHeight);
    var svgNode = new SvgNode([new PathNode("phase", path)], {
      "width": "400em",
      "height": makeEm(viewBoxHeight / 1000),
      "viewBox": "0 0 400000 " + viewBoxHeight,
      "preserveAspectRatio": "xMinYMin slice"
    }); // Wrap it in a span with overflow: hidden.

    img = buildCommon.makeSvgSpan(["hide-tail"], [svgNode], options);
    img.style.height = makeEm(angleHeight);
    imgShift = inner.depth + lineWeight + clearance;
  } else {
    // Add horizontal padding
    if (/cancel/.test(label)) {
      if (!isSingleChar) {
        inner.classes.push("cancel-pad");
      }
    } else if (label === "angl") {
      inner.classes.push("anglpad");
    } else {
      inner.classes.push("boxpad");
    } // Add vertical padding


    var topPad = 0;
    var bottomPad = 0;
    var ruleThickness = 0; // ref: cancel package: \advance\totalheight2\p@ % "+2"

    if (/box/.test(label)) {
      ruleThickness = Math.max(options.fontMetrics().fboxrule, // default
      options.minRuleThickness // User override.
      );
      topPad = options.fontMetrics().fboxsep + (label === "colorbox" ? 0 : ruleThickness);
      bottomPad = topPad;
    } else if (label === "angl") {
      ruleThickness = Math.max(options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
      topPad = 4 * ruleThickness; // gap = 3 × line, plus the line itself.

      bottomPad = Math.max(0, 0.25 - inner.depth);
    } else {
      topPad = isSingleChar ? 0.2 : 0;
      bottomPad = topPad;
    }

    img = stretchy.encloseSpan(inner, label, topPad, bottomPad, options);

    if (/fbox|boxed|fcolorbox/.test(label)) {
      img.style.borderStyle = "solid";
      img.style.borderWidth = makeEm(ruleThickness);
    } else if (label === "angl" && ruleThickness !== 0.049) {
      img.style.borderTopWidth = makeEm(ruleThickness);
      img.style.borderRightWidth = makeEm(ruleThickness);
    }

    imgShift = inner.depth + bottomPad;

    if (group.backgroundColor) {
      img.style.backgroundColor = group.backgroundColor;

      if (group.borderColor) {
        img.style.borderColor = group.borderColor;
      }
    }
  }

  var vlist;

  if (group.backgroundColor) {
    vlist = buildCommon.makeVList({
      positionType: "individualShift",
      children: [// Put the color background behind inner;
      {
        type: "elem",
        elem: img,
        shift: imgShift
      }, {
        type: "elem",
        elem: inner,
        shift: 0
      }]
    }, options);
  } else {
    var classes = /cancel|phase/.test(label) ? ["svg-align"] : [];
    vlist = buildCommon.makeVList({
      positionType: "individualShift",
      children: [// Write the \cancel stroke on top of inner.
      {
        type: "elem",
        elem: inner,
        shift: 0
      }, {
        type: "elem",
        elem: img,
        shift: imgShift,
        wrapperClasses: classes
      }]
    }, options);
  }

  if (/cancel/.test(label)) {
    // The cancel package documentation says that cancel lines add their height
    // to the expression, but tests show that isn't how it actually works.
    vlist.height = inner.height;
    vlist.depth = inner.depth;
  }

  if (/cancel/.test(label) && !isSingleChar) {
    // cancel does not create horiz space for its line extension.
    return buildCommon.makeSpan(["mord", "cancel-lap"], [vlist], options);
  } else {
    return buildCommon.makeSpan(["mord"], [vlist], options);
  }
};

var enclose_mathmlBuilder = function mathmlBuilder(group, options) {
  var fboxsep = 0;
  var node = new mathMLTree.MathNode(group.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [buildMathML_buildGroup(group.body, options)]);

  switch (group.label) {
    case "\\cancel":
      node.setAttribute("notation", "updiagonalstrike");
      break;

    case "\\bcancel":
      node.setAttribute("notation", "downdiagonalstrike");
      break;

    case "\\phase":
      node.setAttribute("notation", "phasorangle");
      break;

    case "\\sout":
      node.setAttribute("notation", "horizontalstrike");
      break;

    case "\\fbox":
      node.setAttribute("notation", "box");
      break;

    case "\\angl":
      node.setAttribute("notation", "actuarial");
      break;

    case "\\fcolorbox":
    case "\\colorbox":
      // <menclose> doesn't have a good notation option. So use <mpadded>
      // instead. Set some attributes that come included with <menclose>.
      fboxsep = options.fontMetrics().fboxsep * options.fontMetrics().ptPerEm;
      node.setAttribute("width", "+" + 2 * fboxsep + "pt");
      node.setAttribute("height", "+" + 2 * fboxsep + "pt");
      node.setAttribute("lspace", fboxsep + "pt"); //

      node.setAttribute("voffset", fboxsep + "pt");

      if (group.label === "\\fcolorbox") {
        var thk = Math.max(options.fontMetrics().fboxrule, // default
        options.minRuleThickness // user override
        );
        node.setAttribute("style", "border: " + thk + "em solid " + String(group.borderColor));
      }

      break;

    case "\\xcancel":
      node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
      break;
  }

  if (group.backgroundColor) {
    node.setAttribute("mathbackground", group.backgroundColor);
  }

  return node;
};

defineFunction({
  type: "enclose",
  names: ["\\colorbox"],
  props: {
    numArgs: 2,
    allowedInText: true,
    argTypes: ["color", "text"]
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var color = assertNodeType(args[0], "color-token").color;
    var body = args[1];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      backgroundColor: color,
      body: body
    };
  },
  htmlBuilder: enclose_htmlBuilder,
  mathmlBuilder: enclose_mathmlBuilder
});
defineFunction({
  type: "enclose",
  names: ["\\fcolorbox"],
  props: {
    numArgs: 3,
    allowedInText: true,
    argTypes: ["color", "color", "text"]
  },
  handler: function handler(_ref2, args, optArgs) {
    var parser = _ref2.parser,
        funcName = _ref2.funcName;
    var borderColor = assertNodeType(args[0], "color-token").color;
    var backgroundColor = assertNodeType(args[1], "color-token").color;
    var body = args[2];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      backgroundColor: backgroundColor,
      borderColor: borderColor,
      body: body
    };
  },
  htmlBuilder: enclose_htmlBuilder,
  mathmlBuilder: enclose_mathmlBuilder
});
defineFunction({
  type: "enclose",
  names: ["\\fbox"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: true
  },
  handler: function handler(_ref3, args) {
    var parser = _ref3.parser;
    return {
      type: "enclose",
      mode: parser.mode,
      label: "\\fbox",
      body: args[0]
    };
  }
});
defineFunction({
  type: "enclose",
  names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref4, args) {
    var parser = _ref4.parser,
        funcName = _ref4.funcName;
    var body = args[0];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      body: body
    };
  },
  htmlBuilder: enclose_htmlBuilder,
  mathmlBuilder: enclose_mathmlBuilder
});
defineFunction({
  type: "enclose",
  names: ["\\angl"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: false
  },
  handler: function handler(_ref5, args) {
    var parser = _ref5.parser;
    return {
      type: "enclose",
      mode: parser.mode,
      label: "\\angl",
      body: args[0]
    };
  }
});
;// CONCATENATED MODULE: ./src/defineEnvironment.js


/**
 * All registered environments.
 * `environments.js` exports this same dictionary again and makes it public.
 * `Parser.js` requires this dictionary via `environments.js`.
 */
var _environments = {};
function defineEnvironment(_ref) {
  var type = _ref.type,
      names = _ref.names,
      props = _ref.props,
      handler = _ref.handler,
      htmlBuilder = _ref.htmlBuilder,
      mathmlBuilder = _ref.mathmlBuilder;
  // Set default values of environments.
  var data = {
    type: type,
    numArgs: props.numArgs || 0,
    allowedInText: false,
    numOptionalArgs: 0,
    handler: handler
  };

  for (var i = 0; i < names.length; ++i) {
    // TODO: The value type of _environments should be a type union of all
    // possible `EnvSpec<>` possibilities instead of `EnvSpec<*>`, which is
    // an existential type.
    _environments[names[i]] = data;
  }

  if (htmlBuilder) {
    _htmlGroupBuilders[type] = htmlBuilder;
  }

  if (mathmlBuilder) {
    _mathmlGroupBuilders[type] = mathmlBuilder;
  }
}
;// CONCATENATED MODULE: ./src/environments/array.js














// Helper functions
function getHLines(parser) {
  // Return an array. The array length = number of hlines.
  // Each element in the array tells if the line is dashed.
  var hlineInfo = [];
  parser.consumeSpaces();
  var nxt = parser.fetch().text;

  while (nxt === "\\hline" || nxt === "\\hdashline") {
    parser.consume();
    hlineInfo.push(nxt === "\\hdashline");
    parser.consumeSpaces();
    nxt = parser.fetch().text;
  }

  return hlineInfo;
}

var validateAmsEnvironmentContext = function validateAmsEnvironmentContext(context) {
  var settings = context.parser.settings;

  if (!settings.displayMode) {
    throw new src_ParseError("{" + context.envName + "} can be used only in" + " display mode.");
  }
};
/**
 * Parse the body of the environment, with rows delimited by \\ and
 * columns delimited by &, and create a nested list in row-major order
 * with one group per cell.  If given an optional argument style
 * ("text", "display", etc.), then each cell is cast into that style.
 */


function parseArray(parser, _ref, style) {
  var hskipBeforeAndAfter = _ref.hskipBeforeAndAfter,
      addJot = _ref.addJot,
      cols = _ref.cols,
      arraystretch = _ref.arraystretch,
      colSeparationType = _ref.colSeparationType,
      addEqnNum = _ref.addEqnNum,
      singleRow = _ref.singleRow,
      emptySingleRow = _ref.emptySingleRow,
      maxNumCols = _ref.maxNumCols,
      leqno = _ref.leqno;
  parser.gullet.beginGroup();

  if (!singleRow) {
    // \cr is equivalent to \\ without the optional size argument (see below)
    // TODO: provide helpful error when \cr is used outside array environment
    parser.gullet.macros.set("\\cr", "\\\\\\relax");
  } // Get current arraystretch if it's not set by the environment


  if (!arraystretch) {
    var stretch = parser.gullet.expandMacroAsText("\\arraystretch");

    if (stretch == null) {
      // Default \arraystretch from lttab.dtx
      arraystretch = 1;
    } else {
      arraystretch = parseFloat(stretch);

      if (!arraystretch || arraystretch < 0) {
        throw new src_ParseError("Invalid \\arraystretch: " + stretch);
      }
    }
  } // Start group for first cell


  parser.gullet.beginGroup();
  var row = [];
  var body = [row];
  var rowGaps = [];
  var hLinesBeforeRow = []; // Test for \hline at the top of the array.

  hLinesBeforeRow.push(getHLines(parser));

  while (true) {
    // eslint-disable-line no-constant-condition
    // Parse each cell in its own group (namespace)
    var cell = parser.parseExpression(false, singleRow ? "\\end" : "\\\\");
    parser.gullet.endGroup();
    parser.gullet.beginGroup();
    cell = {
      type: "ordgroup",
      mode: parser.mode,
      body: cell
    };

    if (style) {
      cell = {
        type: "styling",
        mode: parser.mode,
        style: style,
        body: [cell]
      };
    }

    row.push(cell);
    var next = parser.fetch().text;

    if (next === "&") {
      if (maxNumCols && row.length === maxNumCols) {
        if (singleRow || colSeparationType) {
          // {equation} or {split}
          throw new src_ParseError("Too many tab characters: &", parser.nextToken);
        } else {
          // {array} environment
          parser.settings.reportNonstrict("textEnv", "Too few columns " + "specified in the {array} column argument.");
        }
      }

      parser.consume();
    } else if (next === "\\end") {
      // Arrays terminate newlines with `\crcr` which consumes a `\cr` if
      // the last line is empty.  However, AMS environments keep the
      // empty row if it's the only one.
      // NOTE: Currently, `cell` is the last item added into `row`.
      if (row.length === 1 && cell.type === "styling" && cell.body[0].body.length === 0 && (body.length > 1 || !emptySingleRow)) {
        body.pop();
      }

      if (hLinesBeforeRow.length < body.length + 1) {
        hLinesBeforeRow.push([]);
      }

      break;
    } else if (next === "\\\\") {
      parser.consume();
      var size = void 0; // \def\Let@{\let\\\math@cr}
      // \def\math@cr{...\math@cr@}
      // \def\math@cr@{\new@ifnextchar[\math@cr@@{\math@cr@@[\z@]}}
      // \def\math@cr@@[#1]{...\math@cr@@@...}
      // \def\math@cr@@@{\cr}

      if (parser.gullet.future().text !== " ") {
        size = parser.parseSizeGroup(true);
      }

      rowGaps.push(size ? size.value : null); // check for \hline(s) following the row separator

      hLinesBeforeRow.push(getHLines(parser));
      row = [];
      body.push(row);
    } else {
      throw new src_ParseError("Expected & or \\\\ or \\cr or \\end", parser.nextToken);
    }
  } // End cell group


  parser.gullet.endGroup(); // End array group defining \cr

  parser.gullet.endGroup();
  return {
    type: "array",
    mode: parser.mode,
    addJot: addJot,
    arraystretch: arraystretch,
    body: body,
    cols: cols,
    rowGaps: rowGaps,
    hskipBeforeAndAfter: hskipBeforeAndAfter,
    hLinesBeforeRow: hLinesBeforeRow,
    colSeparationType: colSeparationType,
    addEqnNum: addEqnNum,
    leqno: leqno
  };
} // Decides on a style for cells in an array according to whether the given
// environment name starts with the letter 'd'.


function dCellStyle(envName) {
  if (envName.substr(0, 1) === "d") {
    return "display";
  } else {
    return "text";
  }
}

var array_htmlBuilder = function htmlBuilder(group, options) {
  var r;
  var c;
  var nr = group.body.length;
  var hLinesBeforeRow = group.hLinesBeforeRow;
  var nc = 0;
  var body = new Array(nr);
  var hlines = [];
  var ruleThickness = Math.max( // From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.
  options.fontMetrics().arrayRuleWidth, options.minRuleThickness // User override.
  ); // Horizontal spacing

  var pt = 1 / options.fontMetrics().ptPerEm;
  var arraycolsep = 5 * pt; // default value, i.e. \arraycolsep in article.cls

  if (group.colSeparationType && group.colSeparationType === "small") {
    // We're in a {smallmatrix}. Default column space is \thickspace,
    // i.e. 5/18em = 0.2778em, per amsmath.dtx for {smallmatrix}.
    // But that needs adjustment because LaTeX applies \scriptstyle to the
    // entire array, including the colspace, but this function applies
    // \scriptstyle only inside each element.
    var localMultiplier = options.havingStyle(src_Style.SCRIPT).sizeMultiplier;
    arraycolsep = 0.2778 * (localMultiplier / options.sizeMultiplier);
  } // Vertical spacing


  var baselineskip = group.colSeparationType === "CD" ? calculateSize({
    number: 3,
    unit: "ex"
  }, options) : 12 * pt; // see size10.clo
  // Default \jot from ltmath.dtx
  // TODO(edemaine): allow overriding \jot via \setlength (#687)

  var jot = 3 * pt;
  var arrayskip = group.arraystretch * baselineskip;
  var arstrutHeight = 0.7 * arrayskip; // \strutbox in ltfsstrc.dtx and

  var arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx

  var totalHeight = 0; // Set a position for \hline(s) at the top of the array, if any.

  function setHLinePos(hlinesInGap) {
    for (var i = 0; i < hlinesInGap.length; ++i) {
      if (i > 0) {
        totalHeight += 0.25;
      }

      hlines.push({
        pos: totalHeight,
        isDashed: hlinesInGap[i]
      });
    }
  }

  setHLinePos(hLinesBeforeRow[0]);

  for (r = 0; r < group.body.length; ++r) {
    var inrow = group.body[r];
    var height = arstrutHeight; // \@array adds an \@arstrut

    var depth = arstrutDepth; // to each tow (via the template)

    if (nc < inrow.length) {
      nc = inrow.length;
    }

    var outrow = new Array(inrow.length);

    for (c = 0; c < inrow.length; ++c) {
      var elt = buildGroup(inrow[c], options);

      if (depth < elt.depth) {
        depth = elt.depth;
      }

      if (height < elt.height) {
        height = elt.height;
      }

      outrow[c] = elt;
    }

    var rowGap = group.rowGaps[r];
    var gap = 0;

    if (rowGap) {
      gap = calculateSize(rowGap, options);

      if (gap > 0) {
        // \@argarraycr
        gap += arstrutDepth;

        if (depth < gap) {
          depth = gap; // \@xargarraycr
        }

        gap = 0;
      }
    } // In AMS multiline environments such as aligned and gathered, rows
    // correspond to lines that have additional \jot added to the
    // \baselineskip via \openup.


    if (group.addJot) {
      depth += jot;
    }

    outrow.height = height;
    outrow.depth = depth;
    totalHeight += height;
    outrow.pos = totalHeight;
    totalHeight += depth + gap; // \@yargarraycr

    body[r] = outrow; // Set a position for \hline(s), if any.

    setHLinePos(hLinesBeforeRow[r + 1]);
  }

  var offset = totalHeight / 2 + options.fontMetrics().axisHeight;
  var colDescriptions = group.cols || [];
  var cols = [];
  var colSep;
  var colDescrNum;
  var eqnNumSpans = [];

  if (group.addEqnNum) {
    // An environment with automatic equation numbers.
    // Create node(s) that will trigger CSS counter increment.
    for (r = 0; r < nr; ++r) {
      var rw = body[r];
      var shift = rw.pos - offset;
      var eqnTag = buildCommon.makeSpan(["eqn-num"], [], options);
      eqnTag.depth = rw.depth;
      eqnTag.height = rw.height;
      eqnNumSpans.push({
        type: "elem",
        elem: eqnTag,
        shift: shift
      });
    }
  }

  for (c = 0, colDescrNum = 0; // Continue while either there are more columns or more column
  // descriptions, so trailing separators don't get lost.
  c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {
    var colDescr = colDescriptions[colDescrNum] || {};
    var firstSeparator = true;

    while (colDescr.type === "separator") {
      // If there is more than one separator in a row, add a space
      // between them.
      if (!firstSeparator) {
        colSep = buildCommon.makeSpan(["arraycolsep"], []);
        colSep.style.width = makeEm(options.fontMetrics().doubleRuleSep);
        cols.push(colSep);
      }

      if (colDescr.separator === "|" || colDescr.separator === ":") {
        var lineType = colDescr.separator === "|" ? "solid" : "dashed";
        var separator = buildCommon.makeSpan(["vertical-separator"], [], options);
        separator.style.height = makeEm(totalHeight);
        separator.style.borderRightWidth = makeEm(ruleThickness);
        separator.style.borderRightStyle = lineType;
        separator.style.margin = "0 " + makeEm(-ruleThickness / 2);

        var _shift = totalHeight - offset;

        if (_shift) {
          separator.style.verticalAlign = makeEm(-_shift);
        }

        cols.push(separator);
      } else {
        throw new src_ParseError("Invalid separator type: " + colDescr.separator);
      }

      colDescrNum++;
      colDescr = colDescriptions[colDescrNum] || {};
      firstSeparator = false;
    }

    if (c >= nc) {
      continue;
    }

    var sepwidth = void 0;

    if (c > 0 || group.hskipBeforeAndAfter) {
      sepwidth = utils.deflt(colDescr.pregap, arraycolsep);

      if (sepwidth !== 0) {
        colSep = buildCommon.makeSpan(["arraycolsep"], []);
        colSep.style.width = makeEm(sepwidth);
        cols.push(colSep);
      }
    }

    var col = [];

    for (r = 0; r < nr; ++r) {
      var row = body[r];
      var elem = row[c];

      if (!elem) {
        continue;
      }

      var _shift2 = row.pos - offset;

      elem.depth = row.depth;
      elem.height = row.height;
      col.push({
        type: "elem",
        elem: elem,
        shift: _shift2
      });
    }

    col = buildCommon.makeVList({
      positionType: "individualShift",
      children: col
    }, options);
    col = buildCommon.makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
    cols.push(col);

    if (c < nc - 1 || group.hskipBeforeAndAfter) {
      sepwidth = utils.deflt(colDescr.postgap, arraycolsep);

      if (sepwidth !== 0) {
        colSep = buildCommon.makeSpan(["arraycolsep"], []);
        colSep.style.width = makeEm(sepwidth);
        cols.push(colSep);
      }
    }
  }

  body = buildCommon.makeSpan(["mtable"], cols); // Add \hline(s), if any.

  if (hlines.length > 0) {
    var line = buildCommon.makeLineSpan("hline", options, ruleThickness);
    var dashes = buildCommon.makeLineSpan("hdashline", options, ruleThickness);
    var vListElems = [{
      type: "elem",
      elem: body,
      shift: 0
    }];

    while (hlines.length > 0) {
      var hline = hlines.pop();
      var lineShift = hline.pos - offset;

      if (hline.isDashed) {
        vListElems.push({
          type: "elem",
          elem: dashes,
          shift: lineShift
        });
      } else {
        vListElems.push({
          type: "elem",
          elem: line,
          shift: lineShift
        });
      }
    }

    body = buildCommon.makeVList({
      positionType: "individualShift",
      children: vListElems
    }, options);
  }

  if (!group.addEqnNum) {
    return buildCommon.makeSpan(["mord"], [body], options);
  } else {
    var eqnNumCol = buildCommon.makeVList({
      positionType: "individualShift",
      children: eqnNumSpans
    }, options);
    eqnNumCol = buildCommon.makeSpan(["tag"], [eqnNumCol], options);
    return buildCommon.makeFragment([body, eqnNumCol]);
  }
};

var alignMap = {
  c: "center ",
  l: "left ",
  r: "right "
};

var array_mathmlBuilder = function mathmlBuilder(group, options) {
  var tbl = [];
  var glue = new mathMLTree.MathNode("mtd", [], ["mtr-glue"]);
  var tag = new mathMLTree.MathNode("mtd", [], ["mml-eqn-num"]);

  for (var i = 0; i < group.body.length; i++) {
    var rw = group.body[i];
    var row = [];

    for (var j = 0; j < rw.length; j++) {
      row.push(new mathMLTree.MathNode("mtd", [buildMathML_buildGroup(rw[j], options)]));
    }

    if (group.addEqnNum) {
      row.unshift(glue);
      row.push(glue);

      if (group.leqno) {
        row.unshift(tag);
      } else {
        row.push(tag);
      }
    }

    tbl.push(new mathMLTree.MathNode("mtr", row));
  }

  var table = new mathMLTree.MathNode("mtable", tbl); // Set column alignment, row spacing, column spacing, and
  // array lines by setting attributes on the table element.
  // Set the row spacing. In MathML, we specify a gap distance.
  // We do not use rowGap[] because MathML automatically increases
  // cell height with the height/depth of the element content.
  // LaTeX \arraystretch multiplies the row baseline-to-baseline distance.
  // We simulate this by adding (arraystretch - 1)em to the gap. This
  // does a reasonable job of adjusting arrays containing 1 em tall content.
  // The 0.16 and 0.09 values are found emprically. They produce an array
  // similar to LaTeX and in which content does not interfere with \hines.

  var gap = group.arraystretch === 0.5 ? 0.1 // {smallmatrix}, {subarray}
  : 0.16 + group.arraystretch - 1 + (group.addJot ? 0.09 : 0);
  table.setAttribute("rowspacing", makeEm(gap)); // MathML table lines go only between cells.
  // To place a line on an edge we'll use <menclose>, if necessary.

  var menclose = "";
  var align = "";

  if (group.cols && group.cols.length > 0) {
    // Find column alignment, column spacing, and  vertical lines.
    var cols = group.cols;
    var columnLines = "";
    var prevTypeWasAlign = false;
    var iStart = 0;
    var iEnd = cols.length;

    if (cols[0].type === "separator") {
      menclose += "top ";
      iStart = 1;
    }

    if (cols[cols.length - 1].type === "separator") {
      menclose += "bottom ";
      iEnd -= 1;
    }

    for (var _i = iStart; _i < iEnd; _i++) {
      if (cols[_i].type === "align") {
        align += alignMap[cols[_i].align];

        if (prevTypeWasAlign) {
          columnLines += "none ";
        }

        prevTypeWasAlign = true;
      } else if (cols[_i].type === "separator") {
        // MathML accepts only single lines between cells.
        // So we read only the first of consecutive separators.
        if (prevTypeWasAlign) {
          columnLines += cols[_i].separator === "|" ? "solid " : "dashed ";
          prevTypeWasAlign = false;
        }
      }
    }

    table.setAttribute("columnalign", align.trim());

    if (/[sd]/.test(columnLines)) {
      table.setAttribute("columnlines", columnLines.trim());
    }
  } // Set column spacing.


  if (group.colSeparationType === "align") {
    var _cols = group.cols || [];

    var spacing = "";

    for (var _i2 = 1; _i2 < _cols.length; _i2++) {
      spacing += _i2 % 2 ? "0em " : "1em ";
    }

    table.setAttribute("columnspacing", spacing.trim());
  } else if (group.colSeparationType === "alignat" || group.colSeparationType === "gather") {
    table.setAttribute("columnspacing", "0em");
  } else if (group.colSeparationType === "small") {
    table.setAttribute("columnspacing", "0.2778em");
  } else if (group.colSeparationType === "CD") {
    table.setAttribute("columnspacing", "0.5em");
  } else {
    table.setAttribute("columnspacing", "1em");
  } // Address \hline and \hdashline


  var rowLines = "";
  var hlines = group.hLinesBeforeRow;
  menclose += hlines[0].length > 0 ? "left " : "";
  menclose += hlines[hlines.length - 1].length > 0 ? "right " : "";

  for (var _i3 = 1; _i3 < hlines.length - 1; _i3++) {
    rowLines += hlines[_i3].length === 0 ? "none " // MathML accepts only a single line between rows. Read one element.
    : hlines[_i3][0] ? "dashed " : "solid ";
  }

  if (/[sd]/.test(rowLines)) {
    table.setAttribute("rowlines", rowLines.trim());
  }

  if (menclose !== "") {
    table = new mathMLTree.MathNode("menclose", [table]);
    table.setAttribute("notation", menclose.trim());
  }

  if (group.arraystretch && group.arraystretch < 1) {
    // A small array. Wrap in scriptstyle so row gap is not too large.
    table = new mathMLTree.MathNode("mstyle", [table]);
    table.setAttribute("scriptlevel", "1");
  }

  return table;
}; // Convenience function for align, align*, aligned, alignat, alignat*, alignedat.


var alignedHandler = function alignedHandler(context, args) {
  if (context.envName.indexOf("ed") === -1) {
    validateAmsEnvironmentContext(context);
  }

  var cols = [];
  var separationType = context.envName.indexOf("at") > -1 ? "alignat" : "align";
  var res = parseArray(context.parser, {
    cols: cols,
    addJot: true,
    addEqnNum: context.envName === "align" || context.envName === "alignat",
    emptySingleRow: true,
    colSeparationType: separationType,
    maxNumCols: context.envName === "split" ? 2 : undefined,
    leqno: context.parser.settings.leqno
  }, "display"); // Determining number of columns.
  // 1. If the first argument is given, we use it as a number of columns,
  //    and makes sure that each row doesn't exceed that number.
  // 2. Otherwise, just count number of columns = maximum number
  //    of cells in each row ("aligned" mode -- isAligned will be true).
  //
  // At the same time, prepend empty group {} at beginning of every second
  // cell in each row (starting with second cell) so that operators become
  // binary.  This behavior is implemented in amsmath's \start@aligned.

  var numMaths;
  var numCols = 0;
  var emptyGroup = {
    type: "ordgroup",
    mode: context.mode,
    body: []
  };

  if (args[0] && args[0].type === "ordgroup") {
    var arg0 = "";

    for (var i = 0; i < args[0].body.length; i++) {
      var textord = assertNodeType(args[0].body[i], "textord");
      arg0 += textord.text;
    }

    numMaths = Number(arg0);
    numCols = numMaths * 2;
  }

  var isAligned = !numCols;
  res.body.forEach(function (row) {
    for (var _i4 = 1; _i4 < row.length; _i4 += 2) {
      // Modify ordgroup node within styling node
      var styling = assertNodeType(row[_i4], "styling");
      var ordgroup = assertNodeType(styling.body[0], "ordgroup");
      ordgroup.body.unshift(emptyGroup);
    }

    if (!isAligned) {
      // Case 1
      var curMaths = row.length / 2;

      if (numMaths < curMaths) {
        throw new src_ParseError("Too many math in a row: " + ("expected " + numMaths + ", but got " + curMaths), row[0]);
      }
    } else if (numCols < row.length) {
      // Case 2
      numCols = row.length;
    }
  }); // Adjusting alignment.
  // In aligned mode, we add one \qquad between columns;
  // otherwise we add nothing.

  for (var _i5 = 0; _i5 < numCols; ++_i5) {
    var align = "r";
    var pregap = 0;

    if (_i5 % 2 === 1) {
      align = "l";
    } else if (_i5 > 0 && isAligned) {
      // "aligned" mode.
      pregap = 1; // add one \quad
    }

    cols[_i5] = {
      type: "align",
      align: align,
      pregap: pregap,
      postgap: 0
    };
  }

  res.colSeparationType = isAligned ? "align" : "alignat";
  return res;
}; // Arrays are part of LaTeX, defined in lttab.dtx so its documentation
// is part of the source2e.pdf file of LaTeX2e source documentation.
// {darray} is an {array} environment where cells are set in \displaystyle,
// as defined in nccmath.sty.


defineEnvironment({
  type: "array",
  names: ["array", "darray"],
  props: {
    numArgs: 1
  },
  handler: function handler(context, args) {
    // Since no types are specified above, the two possibilities are
    // - The argument is wrapped in {} or [], in which case Parser's
    //   parseGroup() returns an "ordgroup" wrapping some symbol node.
    // - The argument is a bare symbol node.
    var symNode = checkSymbolNodeType(args[0]);
    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
    var cols = colalign.map(function (nde) {
      var node = assertSymbolNodeType(nde);
      var ca = node.text;

      if ("lcr".indexOf(ca) !== -1) {
        return {
          type: "align",
          align: ca
        };
      } else if (ca === "|") {
        return {
          type: "separator",
          separator: "|"
        };
      } else if (ca === ":") {
        return {
          type: "separator",
          separator: ":"
        };
      }

      throw new src_ParseError("Unknown column alignment: " + ca, nde);
    });
    var res = {
      cols: cols,
      hskipBeforeAndAfter: true,
      // \@preamble in lttab.dtx
      maxNumCols: cols.length
    };
    return parseArray(context.parser, res, dCellStyle(context.envName));
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
}); // The matrix environments of amsmath builds on the array environment
// of LaTeX, which is discussed above.
// The mathtools package adds starred versions of the same environments.
// These have an optional argument to choose left|center|right justification.

defineEnvironment({
  type: "array",
  names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
  props: {
    numArgs: 0
  },
  handler: function handler(context) {
    var delimiters = {
      "matrix": null,
      "pmatrix": ["(", ")"],
      "bmatrix": ["[", "]"],
      "Bmatrix": ["\\{", "\\}"],
      "vmatrix": ["|", "|"],
      "Vmatrix": ["\\Vert", "\\Vert"]
    }[context.envName.replace("*", "")]; // \hskip -\arraycolsep in amsmath

    var colAlign = "c";
    var payload = {
      hskipBeforeAndAfter: false,
      cols: [{
        type: "align",
        align: colAlign
      }]
    };

    if (context.envName.charAt(context.envName.length - 1) === "*") {
      // It's one of the mathtools starred functions.
      // Parse the optional alignment argument.
      var parser = context.parser;
      parser.consumeSpaces();

      if (parser.fetch().text === "[") {
        parser.consume();
        parser.consumeSpaces();
        colAlign = parser.fetch().text;

        if ("lcr".indexOf(colAlign) === -1) {
          throw new src_ParseError("Expected l or c or r", parser.nextToken);
        }

        parser.consume();
        parser.consumeSpaces();
        parser.expect("]");
        parser.consume();
        payload.cols = [{
          type: "align",
          align: colAlign
        }];
      }
    }

    var res = parseArray(context.parser, payload, dCellStyle(context.envName)); // Populate cols with the correct number of column alignment specs.

    var numCols = Math.max.apply(Math, [0].concat(res.body.map(function (row) {
      return row.length;
    })));
    res.cols = new Array(numCols).fill({
      type: "align",
      align: colAlign
    });
    return delimiters ? {
      type: "leftright",
      mode: context.mode,
      body: [res],
      left: delimiters[0],
      right: delimiters[1],
      rightColor: undefined // \right uninfluenced by \color in array

    } : res;
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
});
defineEnvironment({
  type: "array",
  names: ["smallmatrix"],
  props: {
    numArgs: 0
  },
  handler: function handler(context) {
    var payload = {
      arraystretch: 0.5
    };
    var res = parseArray(context.parser, payload, "script");
    res.colSeparationType = "small";
    return res;
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
});
defineEnvironment({
  type: "array",
  names: ["subarray"],
  props: {
    numArgs: 1
  },
  handler: function handler(context, args) {
    // Parsing of {subarray} is similar to {array}
    var symNode = checkSymbolNodeType(args[0]);
    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
    var cols = colalign.map(function (nde) {
      var node = assertSymbolNodeType(nde);
      var ca = node.text; // {subarray} only recognizes "l" & "c"

      if ("lc".indexOf(ca) !== -1) {
        return {
          type: "align",
          align: ca
        };
      }

      throw new src_ParseError("Unknown column alignment: " + ca, nde);
    });

    if (cols.length > 1) {
      throw new src_ParseError("{subarray} can contain only one column");
    }

    var res = {
      cols: cols,
      hskipBeforeAndAfter: false,
      arraystretch: 0.5
    };
    res = parseArray(context.parser, res, "script");

    if (res.body.length > 0 && res.body[0].length > 1) {
      throw new src_ParseError("{subarray} can contain only one column");
    }

    return res;
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
}); // A cases environment (in amsmath.sty) is almost equivalent to
// \def\arraystretch{1.2}%
// \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
// {dcases} is a {cases} environment where cells are set in \displaystyle,
// as defined in mathtools.sty.
// {rcases} is another mathtools environment. It's brace is on the right side.

defineEnvironment({
  type: "array",
  names: ["cases", "dcases", "rcases", "drcases"],
  props: {
    numArgs: 0
  },
  handler: function handler(context) {
    var payload = {
      arraystretch: 1.2,
      cols: [{
        type: "align",
        align: "l",
        pregap: 0,
        // TODO(kevinb) get the current style.
        // For now we use the metrics for TEXT style which is what we were
        // doing before.  Before attempting to get the current style we
        // should look at TeX's behavior especially for \over and matrices.
        postgap: 1.0
        /* 1em quad */

      }, {
        type: "align",
        align: "l",
        pregap: 0,
        postgap: 0
      }]
    };
    var res = parseArray(context.parser, payload, dCellStyle(context.envName));
    return {
      type: "leftright",
      mode: context.mode,
      body: [res],
      left: context.envName.indexOf("r") > -1 ? "." : "\\{",
      right: context.envName.indexOf("r") > -1 ? "\\}" : ".",
      rightColor: undefined
    };
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
}); // In the align environment, one uses ampersands, &, to specify number of
// columns in each row, and to locate spacing between each column.
// align gets automatic numbering. align* and aligned do not.
// The alignedat environment can be used in math mode.
// Note that we assume \nomallineskiplimit to be zero,
// so that \strut@ is the same as \strut.

defineEnvironment({
  type: "array",
  names: ["align", "align*", "aligned", "split"],
  props: {
    numArgs: 0
  },
  handler: alignedHandler,
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
}); // A gathered environment is like an array environment with one centered
// column, but where rows are considered lines so get \jot line spacing
// and contents are set in \displaystyle.

defineEnvironment({
  type: "array",
  names: ["gathered", "gather", "gather*"],
  props: {
    numArgs: 0
  },
  handler: function handler(context) {
    if (utils.contains(["gather", "gather*"], context.envName)) {
      validateAmsEnvironmentContext(context);
    }

    var res = {
      cols: [{
        type: "align",
        align: "c"
      }],
      addJot: true,
      colSeparationType: "gather",
      addEqnNum: context.envName === "gather",
      emptySingleRow: true,
      leqno: context.parser.settings.leqno
    };
    return parseArray(context.parser, res, "display");
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
}); // alignat environment is like an align environment, but one must explicitly
// specify maximum number of columns in each row, and can adjust spacing between
// each columns.

defineEnvironment({
  type: "array",
  names: ["alignat", "alignat*", "alignedat"],
  props: {
    numArgs: 1
  },
  handler: alignedHandler,
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
});
defineEnvironment({
  type: "array",
  names: ["equation", "equation*"],
  props: {
    numArgs: 0
  },
  handler: function handler(context) {
    validateAmsEnvironmentContext(context);
    var res = {
      addEqnNum: context.envName === "equation",
      emptySingleRow: true,
      singleRow: true,
      maxNumCols: 1,
      leqno: context.parser.settings.leqno
    };
    return parseArray(context.parser, res, "display");
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
});
defineEnvironment({
  type: "array",
  names: ["CD"],
  props: {
    numArgs: 0
  },
  handler: function handler(context) {
    validateAmsEnvironmentContext(context);
    return parseCD(context.parser);
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
}); // Catch \hline outside array environment

defineFunction({
  type: "text",
  // Doesn't matter what this is.
  names: ["\\hline", "\\hdashline"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: true
  },
  handler: function handler(context, args) {
    throw new src_ParseError(context.funcName + " valid only within array environment");
  }
});
;// CONCATENATED MODULE: ./src/environments.js

var environments = _environments;
/* harmony default export */ var src_environments = (environments); // All environment definitions should be imported below


;// CONCATENATED MODULE: ./src/functions/environment.js



 // Environment delimiters. HTML/MathML rendering is defined in the corresponding
// defineEnvironment definitions.

defineFunction({
  type: "environment",
  names: ["\\begin", "\\end"],
  props: {
    numArgs: 1,
    argTypes: ["text"]
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var nameGroup = args[0];

    if (nameGroup.type !== "ordgroup") {
      throw new src_ParseError("Invalid environment name", nameGroup);
    }

    var envName = "";

    for (var i = 0; i < nameGroup.body.length; ++i) {
      envName += assertNodeType(nameGroup.body[i], "textord").text;
    }

    if (funcName === "\\begin") {
      // begin...end is similar to left...right
      if (!src_environments.hasOwnProperty(envName)) {
        throw new src_ParseError("No such environment: " + envName, nameGroup);
      } // Build the environment object. Arguments and other information will
      // be made available to the begin and end methods using properties.


      var env = src_environments[envName];

      var _parser$parseArgument = parser.parseArguments("\\begin{" + envName + "}", env),
          _args = _parser$parseArgument.args,
          optArgs = _parser$parseArgument.optArgs;

      var context = {
        mode: parser.mode,
        envName: envName,
        parser: parser
      };
      var result = env.handler(context, _args, optArgs);
      parser.expect("\\end", false);
      var endNameToken = parser.nextToken;
      var end = assertNodeType(parser.parseFunction(), "environment");

      if (end.name !== envName) {
        throw new src_ParseError("Mismatch: \\begin{" + envName + "} matched by \\end{" + end.name + "}", endNameToken);
      } // $FlowFixMe, "environment" handler returns an environment ParseNode


      return result;
    }

    return {
      type: "environment",
      mode: parser.mode,
      name: envName,
      nameGroup: nameGroup
    };
  }
});
;// CONCATENATED MODULE: ./src/functions/mclass.js






var mclass_makeSpan = buildCommon.makeSpan;

function mclass_htmlBuilder(group, options) {
  var elements = buildExpression(group.body, options, true);
  return mclass_makeSpan([group.mclass], elements, options);
}

function mclass_mathmlBuilder(group, options) {
  var node;
  var inner = buildMathML_buildExpression(group.body, options);

  if (group.mclass === "minner") {
    return mathMLTree.newDocumentFragment(inner);
  } else if (group.mclass === "mord") {
    if (group.isCharacterBox) {
      node = inner[0];
      node.type = "mi";
    } else {
      node = new mathMLTree.MathNode("mi", inner);
    }
  } else {
    if (group.isCharacterBox) {
      node = inner[0];
      node.type = "mo";
    } else {
      node = new mathMLTree.MathNode("mo", inner);
    } // Set spacing based on what is the most likely adjacent atom type.
    // See TeXbook p170.


    if (group.mclass === "mbin") {
      node.attributes.lspace = "0.22em"; // medium space

      node.attributes.rspace = "0.22em";
    } else if (group.mclass === "mpunct") {
      node.attributes.lspace = "0em";
      node.attributes.rspace = "0.17em"; // thinspace
    } else if (group.mclass === "mopen" || group.mclass === "mclose") {
      node.attributes.lspace = "0em";
      node.attributes.rspace = "0em";
    } // MathML <mo> default space is 5/18 em, so <mrel> needs no action.
    // Ref: https://developer.mozilla.org/en-US/docs/Web/MathML/Element/mo

  }

  return node;
} // Math class commands except \mathop


defineFunction({
  type: "mclass",
  names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var body = args[0];
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: "m" + funcName.substr(5),
      // TODO(kevinb): don't prefix with 'm'
      body: ordargument(body),
      isCharacterBox: utils.isCharacterBox(body)
    };
  },
  htmlBuilder: mclass_htmlBuilder,
  mathmlBuilder: mclass_mathmlBuilder
});
var binrelClass = function binrelClass(arg) {
  // \binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.
  // (by rendering separately and with {}s before and after, and measuring
  // the change in spacing).  We'll do roughly the same by detecting the
  // atom type directly.
  var atom = arg.type === "ordgroup" && arg.body.length ? arg.body[0] : arg;

  if (atom.type === "atom" && (atom.family === "bin" || atom.family === "rel")) {
    return "m" + atom.family;
  } else {
    return "mord";
  }
}; // \@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.
// This is equivalent to \binrel@{x}\binrel@@{y} in AMSTeX.

defineFunction({
  type: "mclass",
  names: ["\\@binrel"],
  props: {
    numArgs: 2
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser;
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: binrelClass(args[0]),
      body: ordargument(args[1]),
      isCharacterBox: utils.isCharacterBox(args[1])
    };
  }
}); // Build a relation or stacked op by placing one symbol on top of another

defineFunction({
  type: "mclass",
  names: ["\\stackrel", "\\overset", "\\underset"],
  props: {
    numArgs: 2
  },
  handler: function handler(_ref3, args) {
    var parser = _ref3.parser,
        funcName = _ref3.funcName;
    var baseArg = args[1];
    var shiftedArg = args[0];
    var mclass;

    if (funcName !== "\\stackrel") {
      // LaTeX applies \binrel spacing to \overset and \underset.
      mclass = binrelClass(baseArg);
    } else {
      mclass = "mrel"; // for \stackrel
    }

    var baseOp = {
      type: "op",
      mode: baseArg.mode,
      limits: true,
      alwaysHandleSupSub: true,
      parentIsSupSub: false,
      symbol: false,
      suppressBaseShift: funcName !== "\\stackrel",
      body: ordargument(baseArg)
    };
    var supsub = {
      type: "supsub",
      mode: shiftedArg.mode,
      base: baseOp,
      sup: funcName === "\\underset" ? null : shiftedArg,
      sub: funcName === "\\underset" ? shiftedArg : null
    };
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: mclass,
      body: [supsub],
      isCharacterBox: utils.isCharacterBox(supsub)
    };
  },
  htmlBuilder: mclass_htmlBuilder,
  mathmlBuilder: mclass_mathmlBuilder
});
;// CONCATENATED MODULE: ./src/functions/font.js
// TODO(kevinb): implement \\sl and \\sc






var font_htmlBuilder = function htmlBuilder(group, options) {
  var font = group.font;
  var newOptions = options.withFont(font);
  return buildGroup(group.body, newOptions);
};

var font_mathmlBuilder = function mathmlBuilder(group, options) {
  var font = group.font;
  var newOptions = options.withFont(font);
  return buildMathML_buildGroup(group.body, newOptions);
};

var fontAliases = {
  "\\Bbb": "\\mathbb",
  "\\bold": "\\mathbf",
  "\\frak": "\\mathfrak",
  "\\bm": "\\boldsymbol"
};
defineFunction({
  type: "font",
  names: [// styles, except \boldsymbol defined below
  "\\mathrm", "\\mathit", "\\mathbf", "\\mathnormal", // families
  "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf", "\\mathtt", // aliases, except \bm defined below
  "\\Bbb", "\\bold", "\\frak"],
  props: {
    numArgs: 1,
    allowedInArgument: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var body = normalizeArgument(args[0]);
    var func = funcName;

    if (func in fontAliases) {
      func = fontAliases[func];
    }

    return {
      type: "font",
      mode: parser.mode,
      font: func.slice(1),
      body: body
    };
  },
  htmlBuilder: font_htmlBuilder,
  mathmlBuilder: font_mathmlBuilder
});
defineFunction({
  type: "mclass",
  names: ["\\boldsymbol", "\\bm"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser;
    var body = args[0];
    var isCharacterBox = utils.isCharacterBox(body); // amsbsy.sty's \boldsymbol uses \binrel spacing to inherit the
    // argument's bin|rel|ord status

    return {
      type: "mclass",
      mode: parser.mode,
      mclass: binrelClass(body),
      body: [{
        type: "font",
        mode: parser.mode,
        font: "boldsymbol",
        body: body
      }],
      isCharacterBox: isCharacterBox
    };
  }
}); // Old font changing functions

defineFunction({
  type: "font",
  names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: function handler(_ref3, args) {
    var parser = _ref3.parser,
        funcName = _ref3.funcName,
        breakOnTokenText = _ref3.breakOnTokenText;
    var mode = parser.mode;
    var body = parser.parseExpression(true, breakOnTokenText);
    var style = "math" + funcName.slice(1);
    return {
      type: "font",
      mode: mode,
      font: style,
      body: {
        type: "ordgroup",
        mode: parser.mode,
        body: body
      }
    };
  },
  htmlBuilder: font_htmlBuilder,
  mathmlBuilder: font_mathmlBuilder
});
;// CONCATENATED MODULE: ./src/functions/genfrac.js











var adjustStyle = function adjustStyle(size, originalStyle) {
  // Figure out what style this fraction should be in based on the
  // function used
  var style = originalStyle;

  if (size === "display") {
    // Get display style as a default.
    // If incoming style is sub/sup, use style.text() to get correct size.
    style = style.id >= src_Style.SCRIPT.id ? style.text() : src_Style.DISPLAY;
  } else if (size === "text" && style.size === src_Style.DISPLAY.size) {
    // We're in a \tfrac but incoming style is displaystyle, so:
    style = src_Style.TEXT;
  } else if (size === "script") {
    style = src_Style.SCRIPT;
  } else if (size === "scriptscript") {
    style = src_Style.SCRIPTSCRIPT;
  }

  return style;
};

var genfrac_htmlBuilder = function htmlBuilder(group, options) {
  // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
  var style = adjustStyle(group.size, options.style);
  var nstyle = style.fracNum();
  var dstyle = style.fracDen();
  var newOptions;
  newOptions = options.havingStyle(nstyle);
  var numerm = buildGroup(group.numer, newOptions, options);

  if (group.continued) {
    // \cfrac inserts a \strut into the numerator.
    // Get \strut dimensions from TeXbook page 353.
    var hStrut = 8.5 / options.fontMetrics().ptPerEm;
    var dStrut = 3.5 / options.fontMetrics().ptPerEm;
    numerm.height = numerm.height < hStrut ? hStrut : numerm.height;
    numerm.depth = numerm.depth < dStrut ? dStrut : numerm.depth;
  }

  newOptions = options.havingStyle(dstyle);
  var denomm = buildGroup(group.denom, newOptions, options);
  var rule;
  var ruleWidth;
  var ruleSpacing;

  if (group.hasBarLine) {
    if (group.barSize) {
      ruleWidth = calculateSize(group.barSize, options);
      rule = buildCommon.makeLineSpan("frac-line", options, ruleWidth);
    } else {
      rule = buildCommon.makeLineSpan("frac-line", options);
    }

    ruleWidth = rule.height;
    ruleSpacing = rule.height;
  } else {
    rule = null;
    ruleWidth = 0;
    ruleSpacing = options.fontMetrics().defaultRuleThickness;
  } // Rule 15b


  var numShift;
  var clearance;
  var denomShift;

  if (style.size === src_Style.DISPLAY.size || group.size === "display") {
    numShift = options.fontMetrics().num1;

    if (ruleWidth > 0) {
      clearance = 3 * ruleSpacing;
    } else {
      clearance = 7 * ruleSpacing;
    }

    denomShift = options.fontMetrics().denom1;
  } else {
    if (ruleWidth > 0) {
      numShift = options.fontMetrics().num2;
      clearance = ruleSpacing;
    } else {
      numShift = options.fontMetrics().num3;
      clearance = 3 * ruleSpacing;
    }

    denomShift = options.fontMetrics().denom2;
  }

  var frac;

  if (!rule) {
    // Rule 15c
    var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);

    if (candidateClearance < clearance) {
      numShift += 0.5 * (clearance - candidateClearance);
      denomShift += 0.5 * (clearance - candidateClearance);
    }

    frac = buildCommon.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: denomm,
        shift: denomShift
      }, {
        type: "elem",
        elem: numerm,
        shift: -numShift
      }]
    }, options);
  } else {
    // Rule 15d
    var axisHeight = options.fontMetrics().axisHeight;

    if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
      numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
    }

    if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
      denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
    }

    var midShift = -(axisHeight - 0.5 * ruleWidth);
    frac = buildCommon.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: denomm,
        shift: denomShift
      }, {
        type: "elem",
        elem: rule,
        shift: midShift
      }, {
        type: "elem",
        elem: numerm,
        shift: -numShift
      }]
    }, options);
  } // Since we manually change the style sometimes (with \dfrac or \tfrac),
  // account for the possible size change here.


  newOptions = options.havingStyle(style);
  frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
  frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier; // Rule 15e

  var delimSize;

  if (style.size === src_Style.DISPLAY.size) {
    delimSize = options.fontMetrics().delim1;
  } else if (style.size === src_Style.SCRIPTSCRIPT.size) {
    delimSize = options.havingStyle(src_Style.SCRIPT).fontMetrics().delim2;
  } else {
    delimSize = options.fontMetrics().delim2;
  }

  var leftDelim;
  var rightDelim;

  if (group.leftDelim == null) {
    leftDelim = makeNullDelimiter(options, ["mopen"]);
  } else {
    leftDelim = delimiter.customSizedDelim(group.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
  }

  if (group.continued) {
    rightDelim = buildCommon.makeSpan([]); // zero width for \cfrac
  } else if (group.rightDelim == null) {
    rightDelim = makeNullDelimiter(options, ["mclose"]);
  } else {
    rightDelim = delimiter.customSizedDelim(group.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
  }

  return buildCommon.makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, buildCommon.makeSpan(["mfrac"], [frac]), rightDelim], options);
};

var genfrac_mathmlBuilder = function mathmlBuilder(group, options) {
  var node = new mathMLTree.MathNode("mfrac", [buildMathML_buildGroup(group.numer, options), buildMathML_buildGroup(group.denom, options)]);

  if (!group.hasBarLine) {
    node.setAttribute("linethickness", "0px");
  } else if (group.barSize) {
    var ruleWidth = calculateSize(group.barSize, options);
    node.setAttribute("linethickness", makeEm(ruleWidth));
  }

  var style = adjustStyle(group.size, options.style);

  if (style.size !== options.style.size) {
    node = new mathMLTree.MathNode("mstyle", [node]);
    var isDisplay = style.size === src_Style.DISPLAY.size ? "true" : "false";
    node.setAttribute("displaystyle", isDisplay);
    node.setAttribute("scriptlevel", "0");
  }

  if (group.leftDelim != null || group.rightDelim != null) {
    var withDelims = [];

    if (group.leftDelim != null) {
      var leftOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.leftDelim.replace("\\", ""))]);
      leftOp.setAttribute("fence", "true");
      withDelims.push(leftOp);
    }

    withDelims.push(node);

    if (group.rightDelim != null) {
      var rightOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.rightDelim.replace("\\", ""))]);
      rightOp.setAttribute("fence", "true");
      withDelims.push(rightOp);
    }

    return makeRow(withDelims);
  }

  return node;
};

defineFunction({
  type: "genfrac",
  names: ["\\dfrac", "\\frac", "\\tfrac", "\\dbinom", "\\binom", "\\tbinom", "\\\\atopfrac", // can’t be entered directly
  "\\\\bracefrac", "\\\\brackfrac" // ditto
  ],
  props: {
    numArgs: 2,
    allowedInArgument: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var numer = args[0];
    var denom = args[1];
    var hasBarLine;
    var leftDelim = null;
    var rightDelim = null;
    var size = "auto";

    switch (funcName) {
      case "\\dfrac":
      case "\\frac":
      case "\\tfrac":
        hasBarLine = true;
        break;

      case "\\\\atopfrac":
        hasBarLine = false;
        break;

      case "\\dbinom":
      case "\\binom":
      case "\\tbinom":
        hasBarLine = false;
        leftDelim = "(";
        rightDelim = ")";
        break;

      case "\\\\bracefrac":
        hasBarLine = false;
        leftDelim = "\\{";
        rightDelim = "\\}";
        break;

      case "\\\\brackfrac":
        hasBarLine = false;
        leftDelim = "[";
        rightDelim = "]";
        break;

      default:
        throw new Error("Unrecognized genfrac command");
    }

    switch (funcName) {
      case "\\dfrac":
      case "\\dbinom":
        size = "display";
        break;

      case "\\tfrac":
      case "\\tbinom":
        size = "text";
        break;
    }

    return {
      type: "genfrac",
      mode: parser.mode,
      continued: false,
      numer: numer,
      denom: denom,
      hasBarLine: hasBarLine,
      leftDelim: leftDelim,
      rightDelim: rightDelim,
      size: size,
      barSize: null
    };
  },
  htmlBuilder: genfrac_htmlBuilder,
  mathmlBuilder: genfrac_mathmlBuilder
});
defineFunction({
  type: "genfrac",
  names: ["\\cfrac"],
  props: {
    numArgs: 2
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser,
        funcName = _ref2.funcName;
    var numer = args[0];
    var denom = args[1];
    return {
      type: "genfrac",
      mode: parser.mode,
      continued: true,
      numer: numer,
      denom: denom,
      hasBarLine: true,
      leftDelim: null,
      rightDelim: null,
      size: "display",
      barSize: null
    };
  }
}); // Infix generalized fractions -- these are not rendered directly, but replaced
// immediately by one of the variants above.

defineFunction({
  type: "infix",
  names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
  props: {
    numArgs: 0,
    infix: true
  },
  handler: function handler(_ref3) {
    var parser = _ref3.parser,
        funcName = _ref3.funcName,
        token = _ref3.token;
    var replaceWith;

    switch (funcName) {
      case "\\over":
        replaceWith = "\\frac";
        break;

      case "\\choose":
        replaceWith = "\\binom";
        break;

      case "\\atop":
        replaceWith = "\\\\atopfrac";
        break;

      case "\\brace":
        replaceWith = "\\\\bracefrac";
        break;

      case "\\brack":
        replaceWith = "\\\\brackfrac";
        break;

      default:
        throw new Error("Unrecognized infix genfrac command");
    }

    return {
      type: "infix",
      mode: parser.mode,
      replaceWith: replaceWith,
      token: token
    };
  }
});
var stylArray = ["display", "text", "script", "scriptscript"];

var delimFromValue = function delimFromValue(delimString) {
  var delim = null;

  if (delimString.length > 0) {
    delim = delimString;
    delim = delim === "." ? null : delim;
  }

  return delim;
};

defineFunction({
  type: "genfrac",
  names: ["\\genfrac"],
  props: {
    numArgs: 6,
    allowedInArgument: true,
    argTypes: ["math", "math", "size", "text", "math", "math"]
  },
  handler: function handler(_ref4, args) {
    var parser = _ref4.parser;
    var numer = args[4];
    var denom = args[5]; // Look into the parse nodes to get the desired delimiters.

    var leftNode = normalizeArgument(args[0]);
    var leftDelim = leftNode.type === "atom" && leftNode.family === "open" ? delimFromValue(leftNode.text) : null;
    var rightNode = normalizeArgument(args[1]);
    var rightDelim = rightNode.type === "atom" && rightNode.family === "close" ? delimFromValue(rightNode.text) : null;
    var barNode = assertNodeType(args[2], "size");
    var hasBarLine;
    var barSize = null;

    if (barNode.isBlank) {
      // \genfrac acts differently than \above.
      // \genfrac treats an empty size group as a signal to use a
      // standard bar size. \above would see size = 0 and omit the bar.
      hasBarLine = true;
    } else {
      barSize = barNode.value;
      hasBarLine = barSize.number > 0;
    } // Find out if we want displaystyle, textstyle, etc.


    var size = "auto";
    var styl = args[3];

    if (styl.type === "ordgroup") {
      if (styl.body.length > 0) {
        var textOrd = assertNodeType(styl.body[0], "textord");
        size = stylArray[Number(textOrd.text)];
      }
    } else {
      styl = assertNodeType(styl, "textord");
      size = stylArray[Number(styl.text)];
    }

    return {
      type: "genfrac",
      mode: parser.mode,
      numer: numer,
      denom: denom,
      continued: false,
      hasBarLine: hasBarLine,
      barSize: barSize,
      leftDelim: leftDelim,
      rightDelim: rightDelim,
      size: size
    };
  },
  htmlBuilder: genfrac_htmlBuilder,
  mathmlBuilder: genfrac_mathmlBuilder
}); // \above is an infix fraction that also defines a fraction bar size.

defineFunction({
  type: "infix",
  names: ["\\above"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    infix: true
  },
  handler: function handler(_ref5, args) {
    var parser = _ref5.parser,
        funcName = _ref5.funcName,
        token = _ref5.token;
    return {
      type: "infix",
      mode: parser.mode,
      replaceWith: "\\\\abovefrac",
      size: assertNodeType(args[0], "size").value,
      token: token
    };
  }
});
defineFunction({
  type: "genfrac",
  names: ["\\\\abovefrac"],
  props: {
    numArgs: 3,
    argTypes: ["math", "size", "math"]
  },
  handler: function handler(_ref6, args) {
    var parser = _ref6.parser,
        funcName = _ref6.funcName;
    var numer = args[0];
    var barSize = assert(assertNodeType(args[1], "infix").size);
    var denom = args[2];
    var hasBarLine = barSize.number > 0;
    return {
      type: "genfrac",
      mode: parser.mode,
      numer: numer,
      denom: denom,
      continued: false,
      hasBarLine: hasBarLine,
      barSize: barSize,
      leftDelim: null,
      rightDelim: null,
      size: "auto"
    };
  },
  htmlBuilder: genfrac_htmlBuilder,
  mathmlBuilder: genfrac_mathmlBuilder
});
;// CONCATENATED MODULE: ./src/functions/horizBrace.js








// NOTE: Unlike most `htmlBuilder`s, this one handles not only "horizBrace", but
// also "supsub" since an over/underbrace can affect super/subscripting.
var horizBrace_htmlBuilder = function htmlBuilder(grp, options) {
  var style = options.style; // Pull out the `ParseNode<"horizBrace">` if `grp` is a "supsub" node.

  var supSubGroup;
  var group;

  if (grp.type === "supsub") {
    // Ref: LaTeX source2e: }}}}\limits}
    // i.e. LaTeX treats the brace similar to an op and passes it
    // with \limits, so we need to assign supsub style.
    supSubGroup = grp.sup ? buildGroup(grp.sup, options.havingStyle(style.sup()), options) : buildGroup(grp.sub, options.havingStyle(style.sub()), options);
    group = assertNodeType(grp.base, "horizBrace");
  } else {
    group = assertNodeType(grp, "horizBrace");
  } // Build the base group


  var body = buildGroup(group.base, options.havingBaseStyle(src_Style.DISPLAY)); // Create the stretchy element

  var braceBody = stretchy.svgSpan(group, options); // Generate the vlist, with the appropriate kerns        ┏━━━━━━━━┓
  // This first vlist contains the content and the brace:   equation

  var vlist;

  if (group.isOver) {
    vlist = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: body
      }, {
        type: "kern",
        size: 0.1
      }, {
        type: "elem",
        elem: braceBody
      }]
    }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

    vlist.children[0].children[0].children[1].classes.push("svg-align");
  } else {
    vlist = buildCommon.makeVList({
      positionType: "bottom",
      positionData: body.depth + 0.1 + braceBody.height,
      children: [{
        type: "elem",
        elem: braceBody
      }, {
        type: "kern",
        size: 0.1
      }, {
        type: "elem",
        elem: body
      }]
    }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

    vlist.children[0].children[0].children[0].classes.push("svg-align");
  }

  if (supSubGroup) {
    // To write the supsub, wrap the first vlist in another vlist:
    // They can't all go in the same vlist, because the note might be
    // wider than the equation. We want the equation to control the
    // brace width.
    //      note          long note           long note
    //   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓
    //    equation           eqn                 eqn
    var vSpan = buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);

    if (group.isOver) {
      vlist = buildCommon.makeVList({
        positionType: "firstBaseline",
        children: [{
          type: "elem",
          elem: vSpan
        }, {
          type: "kern",
          size: 0.2
        }, {
          type: "elem",
          elem: supSubGroup
        }]
      }, options);
    } else {
      vlist = buildCommon.makeVList({
        positionType: "bottom",
        positionData: vSpan.depth + 0.2 + supSubGroup.height + supSubGroup.depth,
        children: [{
          type: "elem",
          elem: supSubGroup
        }, {
          type: "kern",
          size: 0.2
        }, {
          type: "elem",
          elem: vSpan
        }]
      }, options);
    }
  }

  return buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
};

var horizBrace_mathmlBuilder = function mathmlBuilder(group, options) {
  var accentNode = stretchy.mathMLnode(group.label);
  return new mathMLTree.MathNode(group.isOver ? "mover" : "munder", [buildMathML_buildGroup(group.base, options), accentNode]);
}; // Horizontal stretchy braces


defineFunction({
  type: "horizBrace",
  names: ["\\overbrace", "\\underbrace"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    return {
      type: "horizBrace",
      mode: parser.mode,
      label: funcName,
      isOver: /^\\over/.test(funcName),
      base: args[0]
    };
  },
  htmlBuilder: horizBrace_htmlBuilder,
  mathmlBuilder: horizBrace_mathmlBuilder
});
;// CONCATENATED MODULE: ./src/functions/href.js






defineFunction({
  type: "href",
  names: ["\\href"],
  props: {
    numArgs: 2,
    argTypes: ["url", "original"],
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    var body = args[1];
    var href = assertNodeType(args[0], "url").url;

    if (!parser.settings.isTrusted({
      command: "\\href",
      url: href
    })) {
      return parser.formatUnsupportedCmd("\\href");
    }

    return {
      type: "href",
      mode: parser.mode,
      href: href,
      body: ordargument(body)
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var elements = buildExpression(group.body, options, false);
    return buildCommon.makeAnchor(group.href, [], elements, options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var math = buildExpressionRow(group.body, options);

    if (!(math instanceof MathNode)) {
      math = new MathNode("mrow", [math]);
    }

    math.setAttribute("href", group.href);
    return math;
  }
});
defineFunction({
  type: "href",
  names: ["\\url"],
  props: {
    numArgs: 1,
    argTypes: ["url"],
    allowedInText: true
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser;
    var href = assertNodeType(args[0], "url").url;

    if (!parser.settings.isTrusted({
      command: "\\url",
      url: href
    })) {
      return parser.formatUnsupportedCmd("\\url");
    }

    var chars = [];

    for (var i = 0; i < href.length; i++) {
      var c = href[i];

      if (c === "~") {
        c = "\\textasciitilde";
      }

      chars.push({
        type: "textord",
        mode: "text",
        text: c
      });
    }

    var body = {
      type: "text",
      mode: parser.mode,
      font: "\\texttt",
      body: chars
    };
    return {
      type: "href",
      mode: parser.mode,
      href: href,
      body: ordargument(body)
    };
  }
});
;// CONCATENATED MODULE: ./src/functions/hbox.js




 // \hbox is provided for compatibility with LaTeX \vcenter.
// In LaTeX, \vcenter can act only on a box, as in
// \vcenter{\hbox{$\frac{a+b}{\dfrac{c}{d}}$}}
// This function by itself doesn't do anything but prevent a soft line break.

defineFunction({
  type: "hbox",
  names: ["\\hbox"],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInText: true,
    primitive: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    return {
      type: "hbox",
      mode: parser.mode,
      body: ordargument(args[0])
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var elements = buildExpression(group.body, options, false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    return new mathMLTree.MathNode("mrow", buildMathML_buildExpression(group.body, options));
  }
});
;// CONCATENATED MODULE: ./src/functions/html.js






defineFunction({
  type: "html",
  names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
  props: {
    numArgs: 2,
    argTypes: ["raw", "original"],
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName,
        token = _ref.token;
    var value = assertNodeType(args[0], "raw").string;
    var body = args[1];

    if (parser.settings.strict) {
      parser.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
    }

    var trustContext;
    var attributes = {};

    switch (funcName) {
      case "\\htmlClass":
        attributes.class = value;
        trustContext = {
          command: "\\htmlClass",
          class: value
        };
        break;

      case "\\htmlId":
        attributes.id = value;
        trustContext = {
          command: "\\htmlId",
          id: value
        };
        break;

      case "\\htmlStyle":
        attributes.style = value;
        trustContext = {
          command: "\\htmlStyle",
          style: value
        };
        break;

      case "\\htmlData":
        {
          var data = value.split(",");

          for (var i = 0; i < data.length; i++) {
            var keyVal = data[i].split("=");

            if (keyVal.length !== 2) {
              throw new src_ParseError("Error parsing key-value for \\htmlData");
            }

            attributes["data-" + keyVal[0].trim()] = keyVal[1].trim();
          }

          trustContext = {
            command: "\\htmlData",
            attributes: attributes
          };
          break;
        }

      default:
        throw new Error("Unrecognized html command");
    }

    if (!parser.settings.isTrusted(trustContext)) {
      return parser.formatUnsupportedCmd(funcName);
    }

    return {
      type: "html",
      mode: parser.mode,
      attributes: attributes,
      body: ordargument(body)
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var elements = buildExpression(group.body, options, false);
    var classes = ["enclosing"];

    if (group.attributes.class) {
      classes.push.apply(classes, group.attributes.class.trim().split(/\s+/));
    }

    var span = buildCommon.makeSpan(classes, elements, options);

    for (var attr in group.attributes) {
      if (attr !== "class" && group.attributes.hasOwnProperty(attr)) {
        span.setAttribute(attr, group.attributes[attr]);
      }
    }

    return span;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    return buildExpressionRow(group.body, options);
  }
});
;// CONCATENATED MODULE: ./src/functions/htmlmathml.js




defineFunction({
  type: "htmlmathml",
  names: ["\\html@mathml"],
  props: {
    numArgs: 2,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    return {
      type: "htmlmathml",
      mode: parser.mode,
      html: ordargument(args[0]),
      mathml: ordargument(args[1])
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var elements = buildExpression(group.html, options, false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    return buildExpressionRow(group.mathml, options);
  }
});
;// CONCATENATED MODULE: ./src/functions/includegraphics.js







var sizeData = function sizeData(str) {
  if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(str)) {
    // str is a number with no unit specified.
    // default unit is bp, per graphix package.
    return {
      number: +str,
      unit: "bp"
    };
  } else {
    var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(str);

    if (!match) {
      throw new src_ParseError("Invalid size: '" + str + "' in \\includegraphics");
    }

    var data = {
      number: +(match[1] + match[2]),
      // sign + magnitude, cast to number
      unit: match[3]
    };

    if (!validUnit(data)) {
      throw new src_ParseError("Invalid unit: '" + data.unit + "' in \\includegraphics.");
    }

    return data;
  }
};

defineFunction({
  type: "includegraphics",
  names: ["\\includegraphics"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    argTypes: ["raw", "url"],
    allowedInText: false
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser;
    var width = {
      number: 0,
      unit: "em"
    };
    var height = {
      number: 0.9,
      unit: "em"
    }; // sorta character sized.

    var totalheight = {
      number: 0,
      unit: "em"
    };
    var alt = "";

    if (optArgs[0]) {
      var attributeStr = assertNodeType(optArgs[0], "raw").string; // Parser.js does not parse key/value pairs. We get a string.

      var attributes = attributeStr.split(",");

      for (var i = 0; i < attributes.length; i++) {
        var keyVal = attributes[i].split("=");

        if (keyVal.length === 2) {
          var str = keyVal[1].trim();

          switch (keyVal[0].trim()) {
            case "alt":
              alt = str;
              break;

            case "width":
              width = sizeData(str);
              break;

            case "height":
              height = sizeData(str);
              break;

            case "totalheight":
              totalheight = sizeData(str);
              break;

            default:
              throw new src_ParseError("Invalid key: '" + keyVal[0] + "' in \\includegraphics.");
          }
        }
      }
    }

    var src = assertNodeType(args[0], "url").url;

    if (alt === "") {
      // No alt given. Use the file name. Strip away the path.
      alt = src;
      alt = alt.replace(/^.*[\\/]/, '');
      alt = alt.substring(0, alt.lastIndexOf('.'));
    }

    if (!parser.settings.isTrusted({
      command: "\\includegraphics",
      url: src
    })) {
      return parser.formatUnsupportedCmd("\\includegraphics");
    }

    return {
      type: "includegraphics",
      mode: parser.mode,
      alt: alt,
      width: width,
      height: height,
      totalheight: totalheight,
      src: src
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var height = calculateSize(group.height, options);
    var depth = 0;

    if (group.totalheight.number > 0) {
      depth = calculateSize(group.totalheight, options) - height;
    }

    var width = 0;

    if (group.width.number > 0) {
      width = calculateSize(group.width, options);
    }

    var style = {
      height: makeEm(height + depth)
    };

    if (width > 0) {
      style.width = makeEm(width);
    }

    if (depth > 0) {
      style.verticalAlign = makeEm(-depth);
    }

    var node = new Img(group.src, group.alt, style);
    node.height = height;
    node.depth = depth;
    return node;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mglyph", []);
    node.setAttribute("alt", group.alt);
    var height = calculateSize(group.height, options);
    var depth = 0;

    if (group.totalheight.number > 0) {
      depth = calculateSize(group.totalheight, options) - height;
      node.setAttribute("valign", makeEm(-depth));
    }

    node.setAttribute("height", makeEm(height + depth));

    if (group.width.number > 0) {
      var width = calculateSize(group.width, options);
      node.setAttribute("width", makeEm(width));
    }

    node.setAttribute("src", group.src);
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/kern.js
// Horizontal spacing commands




 // TODO: \hskip and \mskip should support plus and minus in lengths

defineFunction({
  type: "kern",
  names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    primitive: true,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var size = assertNodeType(args[0], "size");

    if (parser.settings.strict) {
      var mathFunction = funcName[1] === 'm'; // \mkern, \mskip

      var muUnit = size.value.unit === 'mu';

      if (mathFunction) {
        if (!muUnit) {
          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " supports only mu units, " + ("not " + size.value.unit + " units"));
        }

        if (parser.mode !== "math") {
          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " works only in math mode");
        }
      } else {
        // !mathFunction
        if (muUnit) {
          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " doesn't support mu units");
        }
      }
    }

    return {
      type: "kern",
      mode: parser.mode,
      dimension: size.value
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    return buildCommon.makeGlue(group.dimension, options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var dimension = calculateSize(group.dimension, options);
    return new mathMLTree.SpaceNode(dimension);
  }
});
;// CONCATENATED MODULE: ./src/functions/lap.js
// Horizontal overlap functions






defineFunction({
  type: "lap",
  names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var body = args[0];
    return {
      type: "lap",
      mode: parser.mode,
      alignment: funcName.slice(5),
      body: body
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // mathllap, mathrlap, mathclap
    var inner;

    if (group.alignment === "clap") {
      // ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/
      inner = buildCommon.makeSpan([], [buildGroup(group.body, options)]); // wrap, since CSS will center a .clap > .inner > span

      inner = buildCommon.makeSpan(["inner"], [inner], options);
    } else {
      inner = buildCommon.makeSpan(["inner"], [buildGroup(group.body, options)]);
    }

    var fix = buildCommon.makeSpan(["fix"], []);
    var node = buildCommon.makeSpan([group.alignment], [inner, fix], options); // At this point, we have correctly set horizontal alignment of the
    // two items involved in the lap.
    // Next, use a strut to set the height of the HTML bounding box.
    // Otherwise, a tall argument may be misplaced.
    // This code resolved issue #1153

    var strut = buildCommon.makeSpan(["strut"]);
    strut.style.height = makeEm(node.height + node.depth);

    if (node.depth) {
      strut.style.verticalAlign = makeEm(-node.depth);
    }

    node.children.unshift(strut); // Next, prevent vertical misplacement when next to something tall.
    // This code resolves issue #1234

    node = buildCommon.makeSpan(["thinbox"], [node], options);
    return buildCommon.makeSpan(["mord", "vbox"], [node], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    // mathllap, mathrlap, mathclap
    var node = new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)]);

    if (group.alignment !== "rlap") {
      var offset = group.alignment === "llap" ? "-1" : "-0.5";
      node.setAttribute("lspace", offset + "width");
    }

    node.setAttribute("width", "0px");
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/math.js

 // Switching from text mode back to math mode

defineFunction({
  type: "styling",
  names: ["\\(", "$"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: false
  },
  handler: function handler(_ref, args) {
    var funcName = _ref.funcName,
        parser = _ref.parser;
    var outerMode = parser.mode;
    parser.switchMode("math");
    var close = funcName === "\\(" ? "\\)" : "$";
    var body = parser.parseExpression(false, close);
    parser.expect(close);
    parser.switchMode(outerMode);
    return {
      type: "styling",
      mode: parser.mode,
      style: "text",
      body: body
    };
  }
}); // Check for extra closing math delimiters

defineFunction({
  type: "text",
  // Doesn't matter what this is.
  names: ["\\)", "\\]"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: false
  },
  handler: function handler(context, args) {
    throw new src_ParseError("Mismatched " + context.funcName);
  }
});
;// CONCATENATED MODULE: ./src/functions/mathchoice.js






var chooseMathStyle = function chooseMathStyle(group, options) {
  switch (options.style.size) {
    case src_Style.DISPLAY.size:
      return group.display;

    case src_Style.TEXT.size:
      return group.text;

    case src_Style.SCRIPT.size:
      return group.script;

    case src_Style.SCRIPTSCRIPT.size:
      return group.scriptscript;

    default:
      return group.text;
  }
};

defineFunction({
  type: "mathchoice",
  names: ["\\mathchoice"],
  props: {
    numArgs: 4,
    primitive: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    return {
      type: "mathchoice",
      mode: parser.mode,
      display: ordargument(args[0]),
      text: ordargument(args[1]),
      script: ordargument(args[2]),
      scriptscript: ordargument(args[3])
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var body = chooseMathStyle(group, options);
    var elements = buildExpression(body, options, false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var body = chooseMathStyle(group, options);
    return buildExpressionRow(body, options);
  }
});
;// CONCATENATED MODULE: ./src/functions/utils/assembleSupSub.js



 // For an operator with limits, assemble the base, sup, and sub into a span.

var assembleSupSub = function assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift) {
  base = buildCommon.makeSpan([], [base]);
  var subIsSingleCharacter = subGroup && utils.isCharacterBox(subGroup);
  var sub;
  var sup; // We manually have to handle the superscripts and subscripts. This,
  // aside from the kern calculations, is copied from supsub.

  if (supGroup) {
    var elem = buildGroup(supGroup, options.havingStyle(style.sup()), options);
    sup = {
      elem: elem,
      kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)
    };
  }

  if (subGroup) {
    var _elem = buildGroup(subGroup, options.havingStyle(style.sub()), options);

    sub = {
      elem: _elem,
      kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - _elem.height)
    };
  } // Build the final group as a vlist of the possible subscript, base,
  // and possible superscript.


  var finalGroup;

  if (sup && sub) {
    var bottom = options.fontMetrics().bigOpSpacing5 + sub.elem.height + sub.elem.depth + sub.kern + base.depth + baseShift;
    finalGroup = buildCommon.makeVList({
      positionType: "bottom",
      positionData: bottom,
      children: [{
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: sub.elem,
        marginLeft: makeEm(-slant)
      }, {
        type: "kern",
        size: sub.kern
      }, {
        type: "elem",
        elem: base
      }, {
        type: "kern",
        size: sup.kern
      }, {
        type: "elem",
        elem: sup.elem,
        marginLeft: makeEm(slant)
      }, {
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }]
    }, options);
  } else if (sub) {
    var top = base.height - baseShift; // Shift the limits by the slant of the symbol. Note
    // that we are supposed to shift the limits by 1/2 of the slant,
    // but since we are centering the limits adding a full slant of
    // margin will shift by 1/2 that.

    finalGroup = buildCommon.makeVList({
      positionType: "top",
      positionData: top,
      children: [{
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: sub.elem,
        marginLeft: makeEm(-slant)
      }, {
        type: "kern",
        size: sub.kern
      }, {
        type: "elem",
        elem: base
      }]
    }, options);
  } else if (sup) {
    var _bottom = base.depth + baseShift;

    finalGroup = buildCommon.makeVList({
      positionType: "bottom",
      positionData: _bottom,
      children: [{
        type: "elem",
        elem: base
      }, {
        type: "kern",
        size: sup.kern
      }, {
        type: "elem",
        elem: sup.elem,
        marginLeft: makeEm(slant)
      }, {
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }]
    }, options);
  } else {
    // This case probably shouldn't occur (this would mean the
    // supsub was sending us a group with no superscript or
    // subscript) but be safe.
    return base;
  }

  var parts = [finalGroup];

  if (sub && slant !== 0 && !subIsSingleCharacter) {
    // A negative margin-left was applied to the lower limit.
    // Avoid an overlap by placing a spacer on the left on the group.
    var spacer = buildCommon.makeSpan(["mspace"], [], options);
    spacer.style.marginRight = makeEm(slant);
    parts.unshift(spacer);
  }

  return buildCommon.makeSpan(["mop", "op-limits"], parts, options);
};
;// CONCATENATED MODULE: ./src/functions/op.js
// Limits, symbols











// Most operators have a large successor symbol, but these don't.
var noSuccessor = ["\\smallint"]; // NOTE: Unlike most `htmlBuilder`s, this one handles not only "op", but also
// "supsub" since some of them (like \int) can affect super/subscripting.

var op_htmlBuilder = function htmlBuilder(grp, options) {
  // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
  var supGroup;
  var subGroup;
  var hasLimits = false;
  var group;

  if (grp.type === "supsub") {
    // If we have limits, supsub will pass us its group to handle. Pull
    // out the superscript and subscript and set the group to the op in
    // its base.
    supGroup = grp.sup;
    subGroup = grp.sub;
    group = assertNodeType(grp.base, "op");
    hasLimits = true;
  } else {
    group = assertNodeType(grp, "op");
  }

  var style = options.style;
  var large = false;

  if (style.size === src_Style.DISPLAY.size && group.symbol && !utils.contains(noSuccessor, group.name)) {
    // Most symbol operators get larger in displaystyle (rule 13)
    large = true;
  }

  var base;

  if (group.symbol) {
    // If this is a symbol, create the symbol.
    var fontName = large ? "Size2-Regular" : "Size1-Regular";
    var stash = "";

    if (group.name === "\\oiint" || group.name === "\\oiiint") {
      // No font glyphs yet, so use a glyph w/o the oval.
      // TODO: When font glyphs are available, delete this code.
      stash = group.name.substr(1);
      group.name = stash === "oiint" ? "\\iint" : "\\iiint";
    }

    base = buildCommon.makeSymbol(group.name, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);

    if (stash.length > 0) {
      // We're in \oiint or \oiiint. Overlay the oval.
      // TODO: When font glyphs are available, delete this code.
      var italic = base.italic;
      var oval = buildCommon.staticSvg(stash + "Size" + (large ? "2" : "1"), options);
      base = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: base,
          shift: 0
        }, {
          type: "elem",
          elem: oval,
          shift: large ? 0.08 : 0
        }]
      }, options);
      group.name = "\\" + stash;
      base.classes.unshift("mop"); // $FlowFixMe

      base.italic = italic;
    }
  } else if (group.body) {
    // If this is a list, compose that list.
    var inner = buildExpression(group.body, options, true);

    if (inner.length === 1 && inner[0] instanceof SymbolNode) {
      base = inner[0];
      base.classes[0] = "mop"; // replace old mclass
    } else {
      base = buildCommon.makeSpan(["mop"], inner, options);
    }
  } else {
    // Otherwise, this is a text operator. Build the text from the
    // operator's name.
    var output = [];

    for (var i = 1; i < group.name.length; i++) {
      output.push(buildCommon.mathsym(group.name[i], group.mode, options));
    }

    base = buildCommon.makeSpan(["mop"], output, options);
  } // If content of op is a single symbol, shift it vertically.


  var baseShift = 0;
  var slant = 0;

  if ((base instanceof SymbolNode || group.name === "\\oiint" || group.name === "\\oiiint") && !group.suppressBaseShift) {
    // We suppress the shift of the base of \overset and \underset. Otherwise,
    // shift the symbol so its center lies on the axis (rule 13). It
    // appears that our fonts have the centers of the symbols already
    // almost on the axis, so these numbers are very small. Note we
    // don't actually apply this here, but instead it is used either in
    // the vlist creation or separately when there are no limits.
    baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight; // The slant of the symbol is just its italic correction.
    // $FlowFixMe

    slant = base.italic;
  }

  if (hasLimits) {
    return assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift);
  } else {
    if (baseShift) {
      base.style.position = "relative";
      base.style.top = makeEm(baseShift);
    }

    return base;
  }
};

var op_mathmlBuilder = function mathmlBuilder(group, options) {
  var node;

  if (group.symbol) {
    // This is a symbol. Just add the symbol.
    node = new MathNode("mo", [makeText(group.name, group.mode)]);

    if (utils.contains(noSuccessor, group.name)) {
      node.setAttribute("largeop", "false");
    }
  } else if (group.body) {
    // This is an operator with children. Add them.
    node = new MathNode("mo", buildMathML_buildExpression(group.body, options));
  } else {
    // This is a text operator. Add all of the characters from the
    // operator's name.
    node = new MathNode("mi", [new TextNode(group.name.slice(1))]); // Append an <mo>&ApplyFunction;</mo>.
    // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4

    var operator = new MathNode("mo", [makeText("\u2061", "text")]);

    if (group.parentIsSupSub) {
      node = new MathNode("mrow", [node, operator]);
    } else {
      node = newDocumentFragment([node, operator]);
    }
  }

  return node;
};

var singleCharBigOps = {
  "\u220F": "\\prod",
  "\u2210": "\\coprod",
  "\u2211": "\\sum",
  "\u22C0": "\\bigwedge",
  "\u22C1": "\\bigvee",
  "\u22C2": "\\bigcap",
  "\u22C3": "\\bigcup",
  "\u2A00": "\\bigodot",
  "\u2A01": "\\bigoplus",
  "\u2A02": "\\bigotimes",
  "\u2A04": "\\biguplus",
  "\u2A06": "\\bigsqcup"
};
defineFunction({
  type: "op",
  names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "\u220F", "\u2210", "\u2211", "\u22C0", "\u22C1", "\u22C2", "\u22C3", "\u2A00", "\u2A01", "\u2A02", "\u2A04", "\u2A06"],
  props: {
    numArgs: 0
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var fName = funcName;

    if (fName.length === 1) {
      fName = singleCharBigOps[fName];
    }

    return {
      type: "op",
      mode: parser.mode,
      limits: true,
      parentIsSupSub: false,
      symbol: true,
      name: fName
    };
  },
  htmlBuilder: op_htmlBuilder,
  mathmlBuilder: op_mathmlBuilder
}); // Note: calling defineFunction with a type that's already been defined only
// works because the same htmlBuilder and mathmlBuilder are being used.

defineFunction({
  type: "op",
  names: ["\\mathop"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser;
    var body = args[0];
    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: false,
      body: ordargument(body)
    };
  },
  htmlBuilder: op_htmlBuilder,
  mathmlBuilder: op_mathmlBuilder
}); // There are 2 flags for operators; whether they produce limits in
// displaystyle, and whether they are symbols and should grow in
// displaystyle. These four groups cover the four possible choices.

var singleCharIntegrals = {
  "\u222B": "\\int",
  "\u222C": "\\iint",
  "\u222D": "\\iiint",
  "\u222E": "\\oint",
  "\u222F": "\\oiint",
  "\u2230": "\\oiiint"
}; // No limits, not symbols

defineFunction({
  type: "op",
  names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
  props: {
    numArgs: 0
  },
  handler: function handler(_ref3) {
    var parser = _ref3.parser,
        funcName = _ref3.funcName;
    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: false,
      name: funcName
    };
  },
  htmlBuilder: op_htmlBuilder,
  mathmlBuilder: op_mathmlBuilder
}); // Limits, not symbols

defineFunction({
  type: "op",
  names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
  props: {
    numArgs: 0
  },
  handler: function handler(_ref4) {
    var parser = _ref4.parser,
        funcName = _ref4.funcName;
    return {
      type: "op",
      mode: parser.mode,
      limits: true,
      parentIsSupSub: false,
      symbol: false,
      name: funcName
    };
  },
  htmlBuilder: op_htmlBuilder,
  mathmlBuilder: op_mathmlBuilder
}); // No limits, symbols

defineFunction({
  type: "op",
  names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "\u222B", "\u222C", "\u222D", "\u222E", "\u222F", "\u2230"],
  props: {
    numArgs: 0
  },
  handler: function handler(_ref5) {
    var parser = _ref5.parser,
        funcName = _ref5.funcName;
    var fName = funcName;

    if (fName.length === 1) {
      fName = singleCharIntegrals[fName];
    }

    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: true,
      name: fName
    };
  },
  htmlBuilder: op_htmlBuilder,
  mathmlBuilder: op_mathmlBuilder
});
;// CONCATENATED MODULE: ./src/defineMacro.js


/**
 * All registered global/built-in macros.
 * `macros.js` exports this same dictionary again and makes it public.
 * `Parser.js` requires this dictionary via `macros.js`.
 */
var _macros = {}; // This function might one day accept an additional argument and do more things.

function defineMacro(name, body) {
  _macros[name] = body;
}
;// CONCATENATED MODULE: ./src/functions/operatorname.js









// NOTE: Unlike most `htmlBuilder`s, this one handles not only
// "operatorname", but also  "supsub" since \operatorname* can
// affect super/subscripting.
var operatorname_htmlBuilder = function htmlBuilder(grp, options) {
  // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
  var supGroup;
  var subGroup;
  var hasLimits = false;
  var group;

  if (grp.type === "supsub") {
    // If we have limits, supsub will pass us its group to handle. Pull
    // out the superscript and subscript and set the group to the op in
    // its base.
    supGroup = grp.sup;
    subGroup = grp.sub;
    group = assertNodeType(grp.base, "operatorname");
    hasLimits = true;
  } else {
    group = assertNodeType(grp, "operatorname");
  }

  var base;

  if (group.body.length > 0) {
    var body = group.body.map(function (child) {
      // $FlowFixMe: Check if the node has a string `text` property.
      var childText = child.text;

      if (typeof childText === "string") {
        return {
          type: "textord",
          mode: child.mode,
          text: childText
        };
      } else {
        return child;
      }
    }); // Consolidate function names into symbol characters.

    var expression = buildExpression(body, options.withFont("mathrm"), true);

    for (var i = 0; i < expression.length; i++) {
      var child = expression[i];

      if (child instanceof SymbolNode) {
        // Per amsopn package,
        // change minus to hyphen and \ast to asterisk
        child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
      }
    }

    base = buildCommon.makeSpan(["mop"], expression, options);
  } else {
    base = buildCommon.makeSpan(["mop"], [], options);
  }

  if (hasLimits) {
    return assembleSupSub(base, supGroup, subGroup, options, options.style, 0, 0);
  } else {
    return base;
  }
};

var operatorname_mathmlBuilder = function mathmlBuilder(group, options) {
  // The steps taken here are similar to the html version.
  var expression = buildMathML_buildExpression(group.body, options.withFont("mathrm")); // Is expression a string or has it something like a fraction?

  var isAllString = true; // default

  for (var i = 0; i < expression.length; i++) {
    var node = expression[i];

    if (node instanceof mathMLTree.SpaceNode) {// Do nothing
    } else if (node instanceof mathMLTree.MathNode) {
      switch (node.type) {
        case "mi":
        case "mn":
        case "ms":
        case "mspace":
        case "mtext":
          break;
        // Do nothing yet.

        case "mo":
          {
            var child = node.children[0];

            if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {
              child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
            } else {
              isAllString = false;
            }

            break;
          }

        default:
          isAllString = false;
      }
    } else {
      isAllString = false;
    }
  }

  if (isAllString) {
    // Write a single TextNode instead of multiple nested tags.
    var word = expression.map(function (node) {
      return node.toText();
    }).join("");
    expression = [new mathMLTree.TextNode(word)];
  }

  var identifier = new mathMLTree.MathNode("mi", expression);
  identifier.setAttribute("mathvariant", "normal"); // \u2061 is the same as &ApplyFunction;
  // ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp

  var operator = new mathMLTree.MathNode("mo", [makeText("\u2061", "text")]);

  if (group.parentIsSupSub) {
    return new mathMLTree.MathNode("mrow", [identifier, operator]);
  } else {
    return mathMLTree.newDocumentFragment([identifier, operator]);
  }
}; // \operatorname
// amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@


defineFunction({
  type: "operatorname",
  names: ["\\operatorname@", "\\operatornamewithlimits"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var body = args[0];
    return {
      type: "operatorname",
      mode: parser.mode,
      body: ordargument(body),
      alwaysHandleSupSub: funcName === "\\operatornamewithlimits",
      limits: false,
      parentIsSupSub: false
    };
  },
  htmlBuilder: operatorname_htmlBuilder,
  mathmlBuilder: operatorname_mathmlBuilder
});
defineMacro("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");
;// CONCATENATED MODULE: ./src/functions/ordgroup.js




defineFunctionBuilders({
  type: "ordgroup",
  htmlBuilder: function htmlBuilder(group, options) {
    if (group.semisimple) {
      return buildCommon.makeFragment(buildExpression(group.body, options, false));
    }

    return buildCommon.makeSpan(["mord"], buildExpression(group.body, options, true), options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    return buildExpressionRow(group.body, options, true);
  }
});
;// CONCATENATED MODULE: ./src/functions/overline.js





defineFunction({
  type: "overline",
  names: ["\\overline"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    var body = args[0];
    return {
      type: "overline",
      mode: parser.mode,
      body: body
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Overlines are handled in the TeXbook pg 443, Rule 9.
    // Build the inner group in the cramped style.
    var innerGroup = buildGroup(group.body, options.havingCrampedStyle()); // Create the line above the body

    var line = buildCommon.makeLineSpan("overline-line", options); // Generate the vlist, with the appropriate kerns

    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
    var vlist = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: innerGroup
      }, {
        type: "kern",
        size: 3 * defaultRuleThickness
      }, {
        type: "elem",
        elem: line
      }, {
        type: "kern",
        size: defaultRuleThickness
      }]
    }, options);
    return buildCommon.makeSpan(["mord", "overline"], [vlist], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203E")]);
    operator.setAttribute("stretchy", "true");
    var node = new mathMLTree.MathNode("mover", [buildMathML_buildGroup(group.body, options), operator]);
    node.setAttribute("accent", "true");
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/phantom.js





defineFunction({
  type: "phantom",
  names: ["\\phantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    var body = args[0];
    return {
      type: "phantom",
      mode: parser.mode,
      body: ordargument(body)
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var elements = buildExpression(group.body, options.withPhantom(), false); // \phantom isn't supposed to affect the elements it contains.
    // See "color" for more details.

    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var inner = buildMathML_buildExpression(group.body, options);
    return new mathMLTree.MathNode("mphantom", inner);
  }
});
defineFunction({
  type: "hphantom",
  names: ["\\hphantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser;
    var body = args[0];
    return {
      type: "hphantom",
      mode: parser.mode,
      body: body
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var node = buildCommon.makeSpan([], [buildGroup(group.body, options.withPhantom())]);
    node.height = 0;
    node.depth = 0;

    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        node.children[i].height = 0;
        node.children[i].depth = 0;
      }
    } // See smash for comment re: use of makeVList


    node = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: node
      }]
    }, options); // For spacing, TeX treats \smash as a math group (same spacing as ord).

    return buildCommon.makeSpan(["mord"], [node], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var inner = buildMathML_buildExpression(ordargument(group.body), options);
    var phantom = new mathMLTree.MathNode("mphantom", inner);
    var node = new mathMLTree.MathNode("mpadded", [phantom]);
    node.setAttribute("height", "0px");
    node.setAttribute("depth", "0px");
    return node;
  }
});
defineFunction({
  type: "vphantom",
  names: ["\\vphantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref3, args) {
    var parser = _ref3.parser;
    var body = args[0];
    return {
      type: "vphantom",
      mode: parser.mode,
      body: body
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var inner = buildCommon.makeSpan(["inner"], [buildGroup(group.body, options.withPhantom())]);
    var fix = buildCommon.makeSpan(["fix"], []);
    return buildCommon.makeSpan(["mord", "rlap"], [inner, fix], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var inner = buildMathML_buildExpression(ordargument(group.body), options);
    var phantom = new mathMLTree.MathNode("mphantom", inner);
    var node = new mathMLTree.MathNode("mpadded", [phantom]);
    node.setAttribute("width", "0px");
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/raisebox.js






 // Box manipulation

defineFunction({
  type: "raisebox",
  names: ["\\raisebox"],
  props: {
    numArgs: 2,
    argTypes: ["size", "hbox"],
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    var amount = assertNodeType(args[0], "size").value;
    var body = args[1];
    return {
      type: "raisebox",
      mode: parser.mode,
      dy: amount,
      body: body
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var body = buildGroup(group.body, options);
    var dy = calculateSize(group.dy, options);
    return buildCommon.makeVList({
      positionType: "shift",
      positionData: -dy,
      children: [{
        type: "elem",
        elem: body
      }]
    }, options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)]);
    var dy = group.dy.number + group.dy.unit;
    node.setAttribute("voffset", dy);
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/rule.js





defineFunction({
  type: "rule",
  names: ["\\rule"],
  props: {
    numArgs: 2,
    numOptionalArgs: 1,
    argTypes: ["size", "size", "size"]
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser;
    var shift = optArgs[0];
    var width = assertNodeType(args[0], "size");
    var height = assertNodeType(args[1], "size");
    return {
      type: "rule",
      mode: parser.mode,
      shift: shift && assertNodeType(shift, "size").value,
      width: width.value,
      height: height.value
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Make an empty span for the rule
    var rule = buildCommon.makeSpan(["mord", "rule"], [], options); // Calculate the shift, width, and height of the rule, and account for units

    var width = calculateSize(group.width, options);
    var height = calculateSize(group.height, options);
    var shift = group.shift ? calculateSize(group.shift, options) : 0; // Style the rule to the right size

    rule.style.borderRightWidth = makeEm(width);
    rule.style.borderTopWidth = makeEm(height);
    rule.style.bottom = makeEm(shift); // Record the height and width

    rule.width = width;
    rule.height = height + shift;
    rule.depth = -shift; // Font size is the number large enough that the browser will
    // reserve at least `absHeight` space above the baseline.
    // The 1.125 factor was empirically determined

    rule.maxFontSize = height * 1.125 * options.sizeMultiplier;
    return rule;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var width = calculateSize(group.width, options);
    var height = calculateSize(group.height, options);
    var shift = group.shift ? calculateSize(group.shift, options) : 0;
    var color = options.color && options.getColor() || "black";
    var rule = new mathMLTree.MathNode("mspace");
    rule.setAttribute("mathbackground", color);
    rule.setAttribute("width", makeEm(width));
    rule.setAttribute("height", makeEm(height));
    var wrapper = new mathMLTree.MathNode("mpadded", [rule]);

    if (shift >= 0) {
      wrapper.setAttribute("height", makeEm(shift));
    } else {
      wrapper.setAttribute("height", makeEm(shift));
      wrapper.setAttribute("depth", makeEm(-shift));
    }

    wrapper.setAttribute("voffset", makeEm(shift));
    return wrapper;
  }
});
;// CONCATENATED MODULE: ./src/functions/sizing.js






function sizingGroup(value, options, baseOptions) {
  var inner = buildExpression(value, options, false);
  var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier; // Add size-resetting classes to the inner list and set maxFontSize
  // manually. Handle nested size changes.

  for (var i = 0; i < inner.length; i++) {
    var pos = inner[i].classes.indexOf("sizing");

    if (pos < 0) {
      Array.prototype.push.apply(inner[i].classes, options.sizingClasses(baseOptions));
    } else if (inner[i].classes[pos + 1] === "reset-size" + options.size) {
      // This is a nested size change: e.g., inner[i] is the "b" in
      // `\Huge a \small b`. Override the old size (the `reset-` class)
      // but not the new size.
      inner[i].classes[pos + 1] = "reset-size" + baseOptions.size;
    }

    inner[i].height *= multiplier;
    inner[i].depth *= multiplier;
  }

  return buildCommon.makeFragment(inner);
}
var sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];
var sizing_htmlBuilder = function htmlBuilder(group, options) {
  // Handle sizing operators like \Huge. Real TeX doesn't actually allow
  // these functions inside of math expressions, so we do some special
  // handling.
  var newOptions = options.havingSize(group.size);
  return sizingGroup(group.body, newOptions, options);
};
defineFunction({
  type: "sizing",
  names: sizeFuncs,
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var breakOnTokenText = _ref.breakOnTokenText,
        funcName = _ref.funcName,
        parser = _ref.parser;
    var body = parser.parseExpression(false, breakOnTokenText);
    return {
      type: "sizing",
      mode: parser.mode,
      // Figure out what size to use based on the list of functions above
      size: sizeFuncs.indexOf(funcName) + 1,
      body: body
    };
  },
  htmlBuilder: sizing_htmlBuilder,
  mathmlBuilder: function mathmlBuilder(group, options) {
    var newOptions = options.havingSize(group.size);
    var inner = buildMathML_buildExpression(group.body, newOptions);
    var node = new mathMLTree.MathNode("mstyle", inner); // TODO(emily): This doesn't produce the correct size for nested size
    // changes, because we don't keep state of what style we're currently
    // in, so we can't reset the size to normal before changing it.  Now
    // that we're passing an options parameter we should be able to fix
    // this.

    node.setAttribute("mathsize", makeEm(newOptions.sizeMultiplier));
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/smash.js
// smash, with optional [tb], as in AMS






defineFunction({
  type: "smash",
  names: ["\\smash"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser;
    var smashHeight = false;
    var smashDepth = false;
    var tbArg = optArgs[0] && assertNodeType(optArgs[0], "ordgroup");

    if (tbArg) {
      // Optional [tb] argument is engaged.
      // ref: amsmath: \renewcommand{\smash}[1][tb]{%
      //               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
      var letter = "";

      for (var i = 0; i < tbArg.body.length; ++i) {
        var node = tbArg.body[i]; // $FlowFixMe: Not every node type has a `text` property.

        letter = node.text;

        if (letter === "t") {
          smashHeight = true;
        } else if (letter === "b") {
          smashDepth = true;
        } else {
          smashHeight = false;
          smashDepth = false;
          break;
        }
      }
    } else {
      smashHeight = true;
      smashDepth = true;
    }

    var body = args[0];
    return {
      type: "smash",
      mode: parser.mode,
      body: body,
      smashHeight: smashHeight,
      smashDepth: smashDepth
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var node = buildCommon.makeSpan([], [buildGroup(group.body, options)]);

    if (!group.smashHeight && !group.smashDepth) {
      return node;
    }

    if (group.smashHeight) {
      node.height = 0; // In order to influence makeVList, we have to reset the children.

      if (node.children) {
        for (var i = 0; i < node.children.length; i++) {
          node.children[i].height = 0;
        }
      }
    }

    if (group.smashDepth) {
      node.depth = 0;

      if (node.children) {
        for (var _i = 0; _i < node.children.length; _i++) {
          node.children[_i].depth = 0;
        }
      }
    } // At this point, we've reset the TeX-like height and depth values.
    // But the span still has an HTML line height.
    // makeVList applies "display: table-cell", which prevents the browser
    // from acting on that line height. So we'll call makeVList now.


    var smashedNode = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: node
      }]
    }, options); // For spacing, TeX treats \hphantom as a math group (same spacing as ord).

    return buildCommon.makeSpan(["mord"], [smashedNode], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)]);

    if (group.smashHeight) {
      node.setAttribute("height", "0px");
    }

    if (group.smashDepth) {
      node.setAttribute("depth", "0px");
    }

    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/sqrt.js








defineFunction({
  type: "sqrt",
  names: ["\\sqrt"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser;
    var index = optArgs[0];
    var body = args[0];
    return {
      type: "sqrt",
      mode: parser.mode,
      body: body,
      index: index
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Square roots are handled in the TeXbook pg. 443, Rule 11.
    // First, we do the same steps as in overline to build the inner group
    // and line
    var inner = buildGroup(group.body, options.havingCrampedStyle());

    if (inner.height === 0) {
      // Render a small surd.
      inner.height = options.fontMetrics().xHeight;
    } // Some groups can return document fragments.  Handle those by wrapping
    // them in a span.


    inner = buildCommon.wrapFragment(inner, options); // Calculate the minimum size for the \surd delimiter

    var metrics = options.fontMetrics();
    var theta = metrics.defaultRuleThickness;
    var phi = theta;

    if (options.style.id < src_Style.TEXT.id) {
      phi = options.fontMetrics().xHeight;
    } // Calculate the clearance between the body and line


    var lineClearance = theta + phi / 4;
    var minDelimiterHeight = inner.height + inner.depth + lineClearance + theta; // Create a sqrt SVG of the required minimum size

    var _delimiter$sqrtImage = delimiter.sqrtImage(minDelimiterHeight, options),
        img = _delimiter$sqrtImage.span,
        ruleWidth = _delimiter$sqrtImage.ruleWidth,
        advanceWidth = _delimiter$sqrtImage.advanceWidth;

    var delimDepth = img.height - ruleWidth; // Adjust the clearance based on the delimiter size

    if (delimDepth > inner.height + inner.depth + lineClearance) {
      lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;
    } // Shift the sqrt image


    var imgShift = img.height - inner.height - lineClearance - ruleWidth;
    inner.style.paddingLeft = makeEm(advanceWidth); // Overlay the image and the argument.

    var body = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: inner,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: -(inner.height + imgShift)
      }, {
        type: "elem",
        elem: img
      }, {
        type: "kern",
        size: ruleWidth
      }]
    }, options);

    if (!group.index) {
      return buildCommon.makeSpan(["mord", "sqrt"], [body], options);
    } else {
      // Handle the optional root index
      // The index is always in scriptscript style
      var newOptions = options.havingStyle(src_Style.SCRIPTSCRIPT);
      var rootm = buildGroup(group.index, newOptions, options); // The amount the index is shifted by. This is taken from the TeX
      // source, in the definition of `\r@@t`.

      var toShift = 0.6 * (body.height - body.depth); // Build a VList with the superscript shifted up correctly

      var rootVList = buildCommon.makeVList({
        positionType: "shift",
        positionData: -toShift,
        children: [{
          type: "elem",
          elem: rootm
        }]
      }, options); // Add a class surrounding it so we can add on the appropriate
      // kerning

      var rootVListWrap = buildCommon.makeSpan(["root"], [rootVList]);
      return buildCommon.makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
    }
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var body = group.body,
        index = group.index;
    return index ? new mathMLTree.MathNode("mroot", [buildMathML_buildGroup(body, options), buildMathML_buildGroup(index, options)]) : new mathMLTree.MathNode("msqrt", [buildMathML_buildGroup(body, options)]);
  }
});
;// CONCATENATED MODULE: ./src/functions/styling.js





var styling_styleMap = {
  "display": src_Style.DISPLAY,
  "text": src_Style.TEXT,
  "script": src_Style.SCRIPT,
  "scriptscript": src_Style.SCRIPTSCRIPT
};
defineFunction({
  type: "styling",
  names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler: function handler(_ref, args) {
    var breakOnTokenText = _ref.breakOnTokenText,
        funcName = _ref.funcName,
        parser = _ref.parser;
    // parse out the implicit body
    var body = parser.parseExpression(true, breakOnTokenText); // TODO: Refactor to avoid duplicating styleMap in multiple places (e.g.
    // here and in buildHTML and de-dupe the enumeration of all the styles).
    // $FlowFixMe: The names above exactly match the styles.

    var style = funcName.slice(1, funcName.length - 5);
    return {
      type: "styling",
      mode: parser.mode,
      // Figure out what style to use by pulling out the style from
      // the function name
      style: style,
      body: body
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Style changes are handled in the TeXbook on pg. 442, Rule 3.
    var newStyle = styling_styleMap[group.style];
    var newOptions = options.havingStyle(newStyle).withFont('');
    return sizingGroup(group.body, newOptions, options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    // Figure out what style we're changing to.
    var newStyle = styling_styleMap[group.style];
    var newOptions = options.havingStyle(newStyle);
    var inner = buildMathML_buildExpression(group.body, newOptions);
    var node = new mathMLTree.MathNode("mstyle", inner);
    var styleAttributes = {
      "display": ["0", "true"],
      "text": ["0", "false"],
      "script": ["1", "false"],
      "scriptscript": ["2", "false"]
    };
    var attr = styleAttributes[group.style];
    node.setAttribute("scriptlevel", attr[0]);
    node.setAttribute("displaystyle", attr[1]);
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/supsub.js














/**
 * Sometimes, groups perform special rules when they have superscripts or
 * subscripts attached to them. This function lets the `supsub` group know that
 * Sometimes, groups perform special rules when they have superscripts or
 * its inner element should handle the superscripts and subscripts instead of
 * handling them itself.
 */
var htmlBuilderDelegate = function htmlBuilderDelegate(group, options) {
  var base = group.base;

  if (!base) {
    return null;
  } else if (base.type === "op") {
    // Operators handle supsubs differently when they have limits
    // (e.g. `\displaystyle\sum_2^3`)
    var delegate = base.limits && (options.style.size === src_Style.DISPLAY.size || base.alwaysHandleSupSub);
    return delegate ? op_htmlBuilder : null;
  } else if (base.type === "operatorname") {
    var _delegate = base.alwaysHandleSupSub && (options.style.size === src_Style.DISPLAY.size || base.limits);

    return _delegate ? operatorname_htmlBuilder : null;
  } else if (base.type === "accent") {
    return utils.isCharacterBox(base.base) ? htmlBuilder : null;
  } else if (base.type === "horizBrace") {
    var isSup = !group.sub;
    return isSup === base.isOver ? horizBrace_htmlBuilder : null;
  } else {
    return null;
  }
}; // Super scripts and subscripts, whose precise placement can depend on other
// functions that precede them.


defineFunctionBuilders({
  type: "supsub",
  htmlBuilder: function htmlBuilder(group, options) {
    // Superscript and subscripts are handled in the TeXbook on page
    // 445-446, rules 18(a-f).
    // Here is where we defer to the inner group if it should handle
    // superscripts and subscripts itself.
    var builderDelegate = htmlBuilderDelegate(group, options);

    if (builderDelegate) {
      return builderDelegate(group, options);
    }

    var valueBase = group.base,
        valueSup = group.sup,
        valueSub = group.sub;
    var base = buildGroup(valueBase, options);
    var supm;
    var subm;
    var metrics = options.fontMetrics(); // Rule 18a

    var supShift = 0;
    var subShift = 0;
    var isCharacterBox = valueBase && utils.isCharacterBox(valueBase);

    if (valueSup) {
      var newOptions = options.havingStyle(options.style.sup());
      supm = buildGroup(valueSup, newOptions, options);

      if (!isCharacterBox) {
        supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
      }
    }

    if (valueSub) {
      var _newOptions = options.havingStyle(options.style.sub());

      subm = buildGroup(valueSub, _newOptions, options);

      if (!isCharacterBox) {
        subShift = base.depth + _newOptions.fontMetrics().subDrop * _newOptions.sizeMultiplier / options.sizeMultiplier;
      }
    } // Rule 18c


    var minSupShift;

    if (options.style === src_Style.DISPLAY) {
      minSupShift = metrics.sup1;
    } else if (options.style.cramped) {
      minSupShift = metrics.sup3;
    } else {
      minSupShift = metrics.sup2;
    } // scriptspace is a font-size-independent size, so scale it
    // appropriately for use as the marginRight.


    var multiplier = options.sizeMultiplier;
    var marginRight = makeEm(0.5 / metrics.ptPerEm / multiplier);
    var marginLeft = null;

    if (subm) {
      // Subscripts shouldn't be shifted by the base's italic correction.
      // Account for that by shifting the subscript back the appropriate
      // amount. Note we only do this when the base is a single symbol.
      var isOiint = group.base && group.base.type === "op" && group.base.name && (group.base.name === "\\oiint" || group.base.name === "\\oiiint");

      if (base instanceof SymbolNode || isOiint) {
        // $FlowFixMe
        marginLeft = makeEm(-base.italic);
      }
    }

    var supsub;

    if (supm && subm) {
      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
      subShift = Math.max(subShift, metrics.sub2);
      var ruleWidth = metrics.defaultRuleThickness; // Rule 18e

      var maxWidth = 4 * ruleWidth;

      if (supShift - supm.depth - (subm.height - subShift) < maxWidth) {
        subShift = maxWidth - (supShift - supm.depth) + subm.height;
        var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);

        if (psi > 0) {
          supShift += psi;
          subShift -= psi;
        }
      }

      var vlistElem = [{
        type: "elem",
        elem: subm,
        shift: subShift,
        marginRight: marginRight,
        marginLeft: marginLeft
      }, {
        type: "elem",
        elem: supm,
        shift: -supShift,
        marginRight: marginRight
      }];
      supsub = buildCommon.makeVList({
        positionType: "individualShift",
        children: vlistElem
      }, options);
    } else if (subm) {
      // Rule 18b
      subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);
      var _vlistElem = [{
        type: "elem",
        elem: subm,
        marginLeft: marginLeft,
        marginRight: marginRight
      }];
      supsub = buildCommon.makeVList({
        positionType: "shift",
        positionData: subShift,
        children: _vlistElem
      }, options);
    } else if (supm) {
      // Rule 18c, d
      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
      supsub = buildCommon.makeVList({
        positionType: "shift",
        positionData: -supShift,
        children: [{
          type: "elem",
          elem: supm,
          marginRight: marginRight
        }]
      }, options);
    } else {
      throw new Error("supsub must have either sup or sub.");
    } // Wrap the supsub vlist in a span.msupsub to reset text-align.


    var mclass = getTypeOfDomTree(base, "right") || "mord";
    return buildCommon.makeSpan([mclass], [base, buildCommon.makeSpan(["msupsub"], [supsub])], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    // Is the inner group a relevant horizonal brace?
    var isBrace = false;
    var isOver;
    var isSup;

    if (group.base && group.base.type === "horizBrace") {
      isSup = !!group.sup;

      if (isSup === group.base.isOver) {
        isBrace = true;
        isOver = group.base.isOver;
      }
    }

    if (group.base && (group.base.type === "op" || group.base.type === "operatorname")) {
      group.base.parentIsSupSub = true;
    }

    var children = [buildMathML_buildGroup(group.base, options)];

    if (group.sub) {
      children.push(buildMathML_buildGroup(group.sub, options));
    }

    if (group.sup) {
      children.push(buildMathML_buildGroup(group.sup, options));
    }

    var nodeType;

    if (isBrace) {
      nodeType = isOver ? "mover" : "munder";
    } else if (!group.sub) {
      var base = group.base;

      if (base && base.type === "op" && base.limits && (options.style === src_Style.DISPLAY || base.alwaysHandleSupSub)) {
        nodeType = "mover";
      } else if (base && base.type === "operatorname" && base.alwaysHandleSupSub && (base.limits || options.style === src_Style.DISPLAY)) {
        nodeType = "mover";
      } else {
        nodeType = "msup";
      }
    } else if (!group.sup) {
      var _base = group.base;

      if (_base && _base.type === "op" && _base.limits && (options.style === src_Style.DISPLAY || _base.alwaysHandleSupSub)) {
        nodeType = "munder";
      } else if (_base && _base.type === "operatorname" && _base.alwaysHandleSupSub && (_base.limits || options.style === src_Style.DISPLAY)) {
        nodeType = "munder";
      } else {
        nodeType = "msub";
      }
    } else {
      var _base2 = group.base;

      if (_base2 && _base2.type === "op" && _base2.limits && options.style === src_Style.DISPLAY) {
        nodeType = "munderover";
      } else if (_base2 && _base2.type === "operatorname" && _base2.alwaysHandleSupSub && (options.style === src_Style.DISPLAY || _base2.limits)) {
        nodeType = "munderover";
      } else {
        nodeType = "msubsup";
      }
    }

    return new mathMLTree.MathNode(nodeType, children);
  }
});
;// CONCATENATED MODULE: ./src/functions/symbolsOp.js



 // Operator ParseNodes created in Parser.js from symbol Groups in src/symbols.js.

defineFunctionBuilders({
  type: "atom",
  htmlBuilder: function htmlBuilder(group, options) {
    return buildCommon.mathsym(group.text, group.mode, options, ["m" + group.family]);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mo", [makeText(group.text, group.mode)]);

    if (group.family === "bin") {
      var variant = getVariant(group, options);

      if (variant === "bold-italic") {
        node.setAttribute("mathvariant", variant);
      }
    } else if (group.family === "punct") {
      node.setAttribute("separator", "true");
    } else if (group.family === "open" || group.family === "close") {
      // Delims built here should not stretch vertically.
      // See delimsizing.js for stretchy delims.
      node.setAttribute("stretchy", "false");
    }

    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/symbolsOrd.js




// "mathord" and "textord" ParseNodes created in Parser.js from symbol Groups in
// src/symbols.js.
var defaultVariant = {
  "mi": "italic",
  "mn": "normal",
  "mtext": "normal"
};
defineFunctionBuilders({
  type: "mathord",
  htmlBuilder: function htmlBuilder(group, options) {
    return buildCommon.makeOrd(group, options, "mathord");
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mi", [makeText(group.text, group.mode, options)]);
    var variant = getVariant(group, options) || "italic";

    if (variant !== defaultVariant[node.type]) {
      node.setAttribute("mathvariant", variant);
    }

    return node;
  }
});
defineFunctionBuilders({
  type: "textord",
  htmlBuilder: function htmlBuilder(group, options) {
    return buildCommon.makeOrd(group, options, "textord");
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var text = makeText(group.text, group.mode, options);
    var variant = getVariant(group, options) || "normal";
    var node;

    if (group.mode === 'text') {
      node = new mathMLTree.MathNode("mtext", [text]);
    } else if (/[0-9]/.test(group.text)) {
      node = new mathMLTree.MathNode("mn", [text]);
    } else if (group.text === "\\prime") {
      node = new mathMLTree.MathNode("mo", [text]);
    } else {
      node = new mathMLTree.MathNode("mi", [text]);
    }

    if (variant !== defaultVariant[node.type]) {
      node.setAttribute("mathvariant", variant);
    }

    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/symbolsSpacing.js



 // A map of CSS-based spacing functions to their CSS class.

var cssSpace = {
  "\\nobreak": "nobreak",
  "\\allowbreak": "allowbreak"
}; // A lookup table to determine whether a spacing function/symbol should be
// treated like a regular space character.  If a symbol or command is a key
// in this table, then it should be a regular space character.  Furthermore,
// the associated value may have a `className` specifying an extra CSS class
// to add to the created `span`.

var regularSpace = {
  " ": {},
  "\\ ": {},
  "~": {
    className: "nobreak"
  },
  "\\space": {},
  "\\nobreakspace": {
    className: "nobreak"
  }
}; // ParseNode<"spacing"> created in Parser.js from the "spacing" symbol Groups in
// src/symbols.js.

defineFunctionBuilders({
  type: "spacing",
  htmlBuilder: function htmlBuilder(group, options) {
    if (regularSpace.hasOwnProperty(group.text)) {
      var className = regularSpace[group.text].className || ""; // Spaces are generated by adding an actual space. Each of these
      // things has an entry in the symbols table, so these will be turned
      // into appropriate outputs.

      if (group.mode === "text") {
        var ord = buildCommon.makeOrd(group, options, "textord");
        ord.classes.push(className);
        return ord;
      } else {
        return buildCommon.makeSpan(["mspace", className], [buildCommon.mathsym(group.text, group.mode, options)], options);
      }
    } else if (cssSpace.hasOwnProperty(group.text)) {
      // Spaces based on just a CSS class.
      return buildCommon.makeSpan(["mspace", cssSpace[group.text]], [], options);
    } else {
      throw new src_ParseError("Unknown type of space \"" + group.text + "\"");
    }
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node;

    if (regularSpace.hasOwnProperty(group.text)) {
      node = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode("\xA0")]);
    } else if (cssSpace.hasOwnProperty(group.text)) {
      // CSS-based MathML spaces (\nobreak, \allowbreak) are ignored
      return new mathMLTree.MathNode("mspace");
    } else {
      throw new src_ParseError("Unknown type of space \"" + group.text + "\"");
    }

    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/tag.js




var pad = function pad() {
  var padNode = new mathMLTree.MathNode("mtd", []);
  padNode.setAttribute("width", "50%");
  return padNode;
};

defineFunctionBuilders({
  type: "tag",
  mathmlBuilder: function mathmlBuilder(group, options) {
    var table = new mathMLTree.MathNode("mtable", [new mathMLTree.MathNode("mtr", [pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.body, options)]), pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.tag, options)])])]);
    table.setAttribute("width", "100%");
    return table; // TODO: Left-aligned tags.
    // Currently, the group and options passed here do not contain
    // enough info to set tag alignment. `leqno` is in Settings but it is
    // not passed to Options. On the HTML side, leqno is
    // set by a CSS class applied in buildTree.js. That would have worked
    // in MathML if browsers supported <mlabeledtr>. Since they don't, we
    // need to rewrite the way this function is called.
  }
});
;// CONCATENATED MODULE: ./src/functions/text.js



 // Non-mathy text, possibly in a font

var textFontFamilies = {
  "\\text": undefined,
  "\\textrm": "textrm",
  "\\textsf": "textsf",
  "\\texttt": "texttt",
  "\\textnormal": "textrm"
};
var textFontWeights = {
  "\\textbf": "textbf",
  "\\textmd": "textmd"
};
var textFontShapes = {
  "\\textit": "textit",
  "\\textup": "textup"
};

var optionsWithFont = function optionsWithFont(group, options) {
  var font = group.font; // Checks if the argument is a font family or a font style.

  if (!font) {
    return options;
  } else if (textFontFamilies[font]) {
    return options.withTextFontFamily(textFontFamilies[font]);
  } else if (textFontWeights[font]) {
    return options.withTextFontWeight(textFontWeights[font]);
  } else {
    return options.withTextFontShape(textFontShapes[font]);
  }
};

defineFunction({
  type: "text",
  names: [// Font families
  "\\text", "\\textrm", "\\textsf", "\\texttt", "\\textnormal", // Font weights
  "\\textbf", "\\textmd", // Font Shapes
  "\\textit", "\\textup"],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInArgument: true,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var body = args[0];
    return {
      type: "text",
      mode: parser.mode,
      body: ordargument(body),
      font: funcName
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var newOptions = optionsWithFont(group, options);
    var inner = buildExpression(group.body, newOptions, true);
    return buildCommon.makeSpan(["mord", "text"], inner, newOptions);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var newOptions = optionsWithFont(group, options);
    return buildExpressionRow(group.body, newOptions);
  }
});
;// CONCATENATED MODULE: ./src/functions/underline.js





defineFunction({
  type: "underline",
  names: ["\\underline"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    return {
      type: "underline",
      mode: parser.mode,
      body: args[0]
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Underlines are handled in the TeXbook pg 443, Rule 10.
    // Build the inner group.
    var innerGroup = buildGroup(group.body, options); // Create the line to go below the body

    var line = buildCommon.makeLineSpan("underline-line", options); // Generate the vlist, with the appropriate kerns

    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
    var vlist = buildCommon.makeVList({
      positionType: "top",
      positionData: innerGroup.height,
      children: [{
        type: "kern",
        size: defaultRuleThickness
      }, {
        type: "elem",
        elem: line
      }, {
        type: "kern",
        size: 3 * defaultRuleThickness
      }, {
        type: "elem",
        elem: innerGroup
      }]
    }, options);
    return buildCommon.makeSpan(["mord", "underline"], [vlist], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203E")]);
    operator.setAttribute("stretchy", "true");
    var node = new mathMLTree.MathNode("munder", [buildMathML_buildGroup(group.body, options), operator]);
    node.setAttribute("accentunder", "true");
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/vcenter.js




 // \vcenter:  Vertically center the argument group on the math axis.

defineFunction({
  type: "vcenter",
  names: ["\\vcenter"],
  props: {
    numArgs: 1,
    argTypes: ["original"],
    // In LaTeX, \vcenter can act only on a box.
    allowedInText: false
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    return {
      type: "vcenter",
      mode: parser.mode,
      body: args[0]
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var body = buildGroup(group.body, options);
    var axisHeight = options.fontMetrics().axisHeight;
    var dy = 0.5 * (body.height - axisHeight - (body.depth + axisHeight));
    return buildCommon.makeVList({
      positionType: "shift",
      positionData: dy,
      children: [{
        type: "elem",
        elem: body
      }]
    }, options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    // There is no way to do this in MathML.
    // Write a class as a breadcrumb in case some post-processor wants
    // to perform a vcenter adjustment.
    return new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)], ["vcenter"]);
  }
});
;// CONCATENATED MODULE: ./src/functions/verb.js




defineFunction({
  type: "verb",
  names: ["\\verb"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: function handler(context, args, optArgs) {
    // \verb and \verb* are dealt with directly in Parser.js.
    // If we end up here, it's because of a failure to match the two delimiters
    // in the regex in Lexer.js.  LaTeX raises the following error when \verb is
    // terminated by end of line (or file).
    throw new src_ParseError("\\verb ended by end of line instead of matching delimiter");
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var text = makeVerb(group);
    var body = []; // \verb enters text mode and therefore is sized like \textstyle

    var newOptions = options.havingStyle(options.style.text());

    for (var i = 0; i < text.length; i++) {
      var c = text[i];

      if (c === '~') {
        c = '\\textasciitilde';
      }

      body.push(buildCommon.makeSymbol(c, "Typewriter-Regular", group.mode, newOptions, ["mord", "texttt"]));
    }

    return buildCommon.makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), buildCommon.tryCombineChars(body), newOptions);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var text = new mathMLTree.TextNode(makeVerb(group));
    var node = new mathMLTree.MathNode("mtext", [text]);
    node.setAttribute("mathvariant", "monospace");
    return node;
  }
});
/**
 * Converts verb group into body string.
 *
 * \verb* replaces each space with an open box \u2423
 * \verb replaces each space with a no-break space \xA0
 */

var makeVerb = function makeVerb(group) {
  return group.body.replace(/ /g, group.star ? "\u2423" : '\xA0');
};
;// CONCATENATED MODULE: ./src/functions.js
/** Include this to ensure that all functions are defined. */

var functions = _functions;
/* harmony default export */ var src_functions = (functions); // TODO(kevinb): have functions return an object and call defineFunction with
// that object in this file instead of relying on side-effects.













































;// CONCATENATED MODULE: ./src/SourceLocation.js
/**
 * Lexing or parsing positional information for error reporting.
 * This object is immutable.
 */
var SourceLocation = /*#__PURE__*/function () {
  // The + prefix indicates that these fields aren't writeable
  // Lexer holding the input string.
  // Start offset, zero-based inclusive.
  // End offset, zero-based exclusive.
  function SourceLocation(lexer, start, end) {
    this.lexer = void 0;
    this.start = void 0;
    this.end = void 0;
    this.lexer = lexer;
    this.start = start;
    this.end = end;
  }
  /**
   * Merges two `SourceLocation`s from location providers, given they are
   * provided in order of appearance.
   * - Returns the first one's location if only the first is provided.
   * - Returns a merged range of the first and the last if both are provided
   *   and their lexers match.
   * - Otherwise, returns null.
   */


  SourceLocation.range = function range(first, second) {
    if (!second) {
      return first && first.loc;
    } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
      return null;
    } else {
      return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
    }
  };

  return SourceLocation;
}();


;// CONCATENATED MODULE: ./src/Token.js

/**
 * Interface required to break circular dependency between Token, Lexer, and
 * ParseError.
 */

/**
 * The resulting token returned from `lex`.
 *
 * It consists of the token text plus some position information.
 * The position information is essentially a range in an input string,
 * but instead of referencing the bare input string, we refer to the lexer.
 * That way it is possible to attach extra metadata to the input string,
 * like for example a file name or similar.
 *
 * The position information is optional, so it is OK to construct synthetic
 * tokens if appropriate. Not providing available position information may
 * lead to degraded error reporting, though.
 */
var Token = /*#__PURE__*/function () {
  // don't expand the token
  // used in \noexpand
  function Token(text, // the text of this token
  loc) {
    this.text = void 0;
    this.loc = void 0;
    this.noexpand = void 0;
    this.treatAsRelax = void 0;
    this.text = text;
    this.loc = loc;
  }
  /**
   * Given a pair of tokens (this and endToken), compute a `Token` encompassing
   * the whole input range enclosed by these two.
   */


  var _proto = Token.prototype;

  _proto.range = function range(endToken, // last token of the range, inclusive
  text // the text of the newly constructed token
  ) {
    return new Token(text, SourceLocation.range(this, endToken));
  };

  return Token;
}();
;// CONCATENATED MODULE: ./src/Lexer.js
/**
 * The Lexer class handles tokenizing the input in various ways. Since our
 * parser expects us to be able to backtrack, the lexer allows lexing from any
 * given starting point.
 *
 * Its main exposed function is the `lex` function, which takes a position to
 * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
 * function.
 *
 * The various `_innerLex` functions perform the actual lexing of different
 * kinds.
 */




/* The following tokenRegex
 * - matches typical whitespace (but not NBSP etc.) using its first group
 * - does not match any control character \x00-\x1f except whitespace
 * - does not match a bare backslash
 * - matches any ASCII character except those just mentioned
 * - does not match the BMP private use area \uE000-\uF8FF
 * - does not match bare surrogate code units
 * - matches any BMP character except for those just described
 * - matches any valid Unicode surrogate pair
 * - matches a backslash followed by one or more whitespace characters
 * - matches a backslash followed by one or more letters then whitespace
 * - matches a backslash followed by any BMP character
 * Capturing groups:
 *   [1] regular whitespace
 *   [2] backslash followed by whitespace
 *   [3] anything else, which may include:
 *     [4] left character of \verb*
 *     [5] left character of \verb
 *     [6] backslash followed by word, excluding any trailing whitespace
 * Just because the Lexer matches something doesn't mean it's valid input:
 * If there is no matching function or symbol definition, the Parser will
 * still reject the input.
 */
var spaceRegexString = "[ \r\n\t]";
var controlWordRegexString = "\\\\[a-zA-Z@]+";
var controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
var controlWordWhitespaceRegexString = "(" + controlWordRegexString + ")" + spaceRegexString + "*";
var controlSpaceRegexString = "\\\\(\n|[ \r\t]+\n?)[ \r\t]*";
var combiningDiacriticalMarkString = "[\u0300-\u036F]";
var combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + "+$");
var tokenRegexString = "(" + spaceRegexString + "+)|" + ( // whitespace
controlSpaceRegexString + "|") + // \whitespace
"([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + ( // single codepoint
combiningDiacriticalMarkString + "*") + // ...plus accents
"|[\uD800-\uDBFF][\uDC00-\uDFFF]" + ( // surrogate pair
combiningDiacriticalMarkString + "*") + // ...plus accents
"|\\\\verb\\*([^]).*?\\4" + // \verb*
"|\\\\verb([^*a-zA-Z]).*?\\5" + ( // \verb unstarred
"|" + controlWordWhitespaceRegexString) + ( // \macroName + spaces
"|" + controlSymbolRegexString + ")"); // \\, \', etc.

/** Main Lexer class */

var Lexer = /*#__PURE__*/function () {
  // Category codes. The lexer only supports comment characters (14) for now.
  // MacroExpander additionally distinguishes active (13).
  function Lexer(input, settings) {
    this.input = void 0;
    this.settings = void 0;
    this.tokenRegex = void 0;
    this.catcodes = void 0;
    // Separate accents from characters
    this.input = input;
    this.settings = settings;
    this.tokenRegex = new RegExp(tokenRegexString, 'g');
    this.catcodes = {
      "%": 14,
      // comment character
      "~": 13 // active character

    };
  }

  var _proto = Lexer.prototype;

  _proto.setCatcode = function setCatcode(char, code) {
    this.catcodes[char] = code;
  }
  /**
   * This function lexes a single token.
   */
  ;

  _proto.lex = function lex() {
    var input = this.input;
    var pos = this.tokenRegex.lastIndex;

    if (pos === input.length) {
      return new Token("EOF", new SourceLocation(this, pos, pos));
    }

    var match = this.tokenRegex.exec(input);

    if (match === null || match.index !== pos) {
      throw new src_ParseError("Unexpected character: '" + input[pos] + "'", new Token(input[pos], new SourceLocation(this, pos, pos + 1)));
    }

    var text = match[6] || match[3] || (match[2] ? "\\ " : " ");

    if (this.catcodes[text] === 14) {
      // comment character
      var nlIndex = input.indexOf('\n', this.tokenRegex.lastIndex);

      if (nlIndex === -1) {
        this.tokenRegex.lastIndex = input.length; // EOF

        this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would " + "fail because of commenting the end of math mode (e.g. $)");
      } else {
        this.tokenRegex.lastIndex = nlIndex + 1;
      }

      return this.lex();
    }

    return new Token(text, new SourceLocation(this, pos, this.tokenRegex.lastIndex));
  };

  return Lexer;
}();


;// CONCATENATED MODULE: ./src/Namespace.js
/**
 * A `Namespace` refers to a space of nameable things like macros or lengths,
 * which can be `set` either globally or local to a nested group, using an
 * undo stack similar to how TeX implements this functionality.
 * Performance-wise, `get` and local `set` take constant time, while global
 * `set` takes time proportional to the depth of group nesting.
 */


var Namespace = /*#__PURE__*/function () {
  /**
   * Both arguments are optional.  The first argument is an object of
   * built-in mappings which never change.  The second argument is an object
   * of initial (global-level) mappings, which will constantly change
   * according to any global/top-level `set`s done.
   */
  function Namespace(builtins, globalMacros) {
    if (builtins === void 0) {
      builtins = {};
    }

    if (globalMacros === void 0) {
      globalMacros = {};
    }

    this.current = void 0;
    this.builtins = void 0;
    this.undefStack = void 0;
    this.current = globalMacros;
    this.builtins = builtins;
    this.undefStack = [];
  }
  /**
   * Start a new nested group, affecting future local `set`s.
   */


  var _proto = Namespace.prototype;

  _proto.beginGroup = function beginGroup() {
    this.undefStack.push({});
  }
  /**
   * End current nested group, restoring values before the group began.
   */
  ;

  _proto.endGroup = function endGroup() {
    if (this.undefStack.length === 0) {
      throw new src_ParseError("Unbalanced namespace destruction: attempt " + "to pop global namespace; please report this as a bug");
    }

    var undefs = this.undefStack.pop();

    for (var undef in undefs) {
      if (undefs.hasOwnProperty(undef)) {
        if (undefs[undef] === undefined) {
          delete this.current[undef];
        } else {
          this.current[undef] = undefs[undef];
        }
      }
    }
  }
  /**
   * Ends all currently nested groups (if any), restoring values before the
   * groups began.  Useful in case of an error in the middle of parsing.
   */
  ;

  _proto.endGroups = function endGroups() {
    while (this.undefStack.length > 0) {
      this.endGroup();
    }
  }
  /**
   * Detect whether `name` has a definition.  Equivalent to
   * `get(name) != null`.
   */
  ;

  _proto.has = function has(name) {
    return this.current.hasOwnProperty(name) || this.builtins.hasOwnProperty(name);
  }
  /**
   * Get the current value of a name, or `undefined` if there is no value.
   *
   * Note: Do not use `if (namespace.get(...))` to detect whether a macro
   * is defined, as the definition may be the empty string which evaluates
   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
   * `if (namespace.has(...))`.
   */
  ;

  _proto.get = function get(name) {
    if (this.current.hasOwnProperty(name)) {
      return this.current[name];
    } else {
      return this.builtins[name];
    }
  }
  /**
   * Set the current value of a name, and optionally set it globally too.
   * Local set() sets the current value and (when appropriate) adds an undo
   * operation to the undo stack.  Global set() may change the undo
   * operation at every level, so takes time linear in their number.
   */
  ;

  _proto.set = function set(name, value, global) {
    if (global === void 0) {
      global = false;
    }

    if (global) {
      // Global set is equivalent to setting in all groups.  Simulate this
      // by destroying any undos currently scheduled for this name,
      // and adding an undo with the *new* value (in case it later gets
      // locally reset within this environment).
      for (var i = 0; i < this.undefStack.length; i++) {
        delete this.undefStack[i][name];
      }

      if (this.undefStack.length > 0) {
        this.undefStack[this.undefStack.length - 1][name] = value;
      }
    } else {
      // Undo this set at end of this group (possibly to `undefined`),
      // unless an undo is already in place, in which case that older
      // value is the correct one.
      var top = this.undefStack[this.undefStack.length - 1];

      if (top && !top.hasOwnProperty(name)) {
        top[name] = this.current[name];
      }
    }

    this.current[name] = value;
  };

  return Namespace;
}();


;// CONCATENATED MODULE: ./src/macros.js
/**
 * Predefined macros for KaTeX.
 * This can be used to define some commands in terms of others.
 */
// Export global macros object from defineMacro

var macros = _macros;
/* harmony default export */ var src_macros = (macros);





 //////////////////////////////////////////////////////////////////////
// macro tools

defineMacro("\\noexpand", function (context) {
  // The expansion is the token itself; but that token is interpreted
  // as if its meaning were ‘\relax’ if it is a control sequence that
  // would ordinarily be expanded by TeX’s expansion rules.
  var t = context.popToken();

  if (context.isExpandable(t.text)) {
    t.noexpand = true;
    t.treatAsRelax = true;
  }

  return {
    tokens: [t],
    numArgs: 0
  };
});
defineMacro("\\expandafter", function (context) {
  // TeX first reads the token that comes immediately after \expandafter,
  // without expanding it; let’s call this token t. Then TeX reads the
  // token that comes after t (and possibly more tokens, if that token
  // has an argument), replacing it by its expansion. Finally TeX puts
  // t back in front of that expansion.
  var t = context.popToken();
  context.expandOnce(true); // expand only an expandable token

  return {
    tokens: [t],
    numArgs: 0
  };
}); // LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2
// TeX source: \long\def\@firstoftwo#1#2{#1}

defineMacro("\\@firstoftwo", function (context) {
  var args = context.consumeArgs(2);
  return {
    tokens: args[0],
    numArgs: 0
  };
}); // LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1
// TeX source: \long\def\@secondoftwo#1#2{#2}

defineMacro("\\@secondoftwo", function (context) {
  var args = context.consumeArgs(2);
  return {
    tokens: args[1],
    numArgs: 0
  };
}); // LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)
// symbol that isn't a space, consuming any spaces but not consuming the
// first nonspace character.  If that nonspace character matches #1, then
// the macro expands to #2; otherwise, it expands to #3.

defineMacro("\\@ifnextchar", function (context) {
  var args = context.consumeArgs(3); // symbol, if, else

  context.consumeSpaces();
  var nextToken = context.future();

  if (args[0].length === 1 && args[0][0].text === nextToken.text) {
    return {
      tokens: args[1],
      numArgs: 0
    };
  } else {
    return {
      tokens: args[2],
      numArgs: 0
    };
  }
}); // LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.
// If it is `*`, then it consumes the symbol, and the macro expands to #1;
// otherwise, the macro expands to #2 (without consuming the symbol).
// TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}

defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}"); // LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode

defineMacro("\\TextOrMath", function (context) {
  var args = context.consumeArgs(2);

  if (context.mode === 'text') {
    return {
      tokens: args[0],
      numArgs: 0
    };
  } else {
    return {
      tokens: args[1],
      numArgs: 0
    };
  }
}); // Lookup table for parsing numbers in base 8 through 16

var digitToNumber = {
  "0": 0,
  "1": 1,
  "2": 2,
  "3": 3,
  "4": 4,
  "5": 5,
  "6": 6,
  "7": 7,
  "8": 8,
  "9": 9,
  "a": 10,
  "A": 10,
  "b": 11,
  "B": 11,
  "c": 12,
  "C": 12,
  "d": 13,
  "D": 13,
  "e": 14,
  "E": 14,
  "f": 15,
  "F": 15
}; // TeX \char makes a literal character (catcode 12) using the following forms:
// (see The TeXBook, p. 43)
//   \char123  -- decimal
//   \char'123 -- octal
//   \char"123 -- hex
//   \char`x   -- character that can be written (i.e. isn't active)
//   \char`\x  -- character that cannot be written (e.g. %)
// These all refer to characters from the font, so we turn them into special
// calls to a function \@char dealt with in the Parser.

defineMacro("\\char", function (context) {
  var token = context.popToken();
  var base;
  var number = '';

  if (token.text === "'") {
    base = 8;
    token = context.popToken();
  } else if (token.text === '"') {
    base = 16;
    token = context.popToken();
  } else if (token.text === "`") {
    token = context.popToken();

    if (token.text[0] === "\\") {
      number = token.text.charCodeAt(1);
    } else if (token.text === "EOF") {
      throw new src_ParseError("\\char` missing argument");
    } else {
      number = token.text.charCodeAt(0);
    }
  } else {
    base = 10;
  }

  if (base) {
    // Parse a number in the given base, starting with first `token`.
    number = digitToNumber[token.text];

    if (number == null || number >= base) {
      throw new src_ParseError("Invalid base-" + base + " digit " + token.text);
    }

    var digit;

    while ((digit = digitToNumber[context.future().text]) != null && digit < base) {
      number *= base;
      number += digit;
      context.popToken();
    }
  }

  return "\\@char{" + number + "}";
}); // \newcommand{\macro}[args]{definition}
// \renewcommand{\macro}[args]{definition}
// TODO: Optional arguments: \newcommand{\macro}[args][default]{definition}

var newcommand = function newcommand(context, existsOK, nonexistsOK) {
  var arg = context.consumeArg().tokens;

  if (arg.length !== 1) {
    throw new src_ParseError("\\newcommand's first argument must be a macro name");
  }

  var name = arg[0].text;
  var exists = context.isDefined(name);

  if (exists && !existsOK) {
    throw new src_ParseError("\\newcommand{" + name + "} attempting to redefine " + (name + "; use \\renewcommand"));
  }

  if (!exists && !nonexistsOK) {
    throw new src_ParseError("\\renewcommand{" + name + "} when command " + name + " " + "does not yet exist; use \\newcommand");
  }

  var numArgs = 0;
  arg = context.consumeArg().tokens;

  if (arg.length === 1 && arg[0].text === "[") {
    var argText = '';
    var token = context.expandNextToken();

    while (token.text !== "]" && token.text !== "EOF") {
      // TODO: Should properly expand arg, e.g., ignore {}s
      argText += token.text;
      token = context.expandNextToken();
    }

    if (!argText.match(/^\s*[0-9]+\s*$/)) {
      throw new src_ParseError("Invalid number of arguments: " + argText);
    }

    numArgs = parseInt(argText);
    arg = context.consumeArg().tokens;
  } // Final arg is the expansion of the macro


  context.macros.set(name, {
    tokens: arg,
    numArgs: numArgs
  });
  return '';
};

defineMacro("\\newcommand", function (context) {
  return newcommand(context, false, true);
});
defineMacro("\\renewcommand", function (context) {
  return newcommand(context, true, false);
});
defineMacro("\\providecommand", function (context) {
  return newcommand(context, true, true);
}); // terminal (console) tools

defineMacro("\\message", function (context) {
  var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

  console.log(arg.reverse().map(function (token) {
    return token.text;
  }).join(""));
  return '';
});
defineMacro("\\errmessage", function (context) {
  var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

  console.error(arg.reverse().map(function (token) {
    return token.text;
  }).join(""));
  return '';
});
defineMacro("\\show", function (context) {
  var tok = context.popToken();
  var name = tok.text; // eslint-disable-next-line no-console

  console.log(tok, context.macros.get(name), src_functions[name], src_symbols.math[name], src_symbols.text[name]);
  return '';
}); //////////////////////////////////////////////////////////////////////
// Grouping
// \let\bgroup={ \let\egroup=}

defineMacro("\\bgroup", "{");
defineMacro("\\egroup", "}"); // Symbols from latex.ltx:
// \def~{\nobreakspace{}}
// \def\lq{`}
// \def\rq{'}
// \def \aa {\r a}
// \def \AA {\r A}

defineMacro("~", "\\nobreakspace");
defineMacro("\\lq", "`");
defineMacro("\\rq", "'");
defineMacro("\\aa", "\\r a");
defineMacro("\\AA", "\\r A"); // Copyright (C) and registered (R) symbols. Use raw symbol in MathML.
// \DeclareTextCommandDefault{\textcopyright}{\textcircled{c}}
// \DeclareTextCommandDefault{\textregistered}{\textcircled{%
//      \check@mathfonts\fontsize\sf@size\z@\math@fontsfalse\selectfont R}}
// \DeclareRobustCommand{\copyright}{%
//    \ifmmode{\nfss@text{\textcopyright}}\else\textcopyright\fi}

defineMacro("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`©}");
defineMacro("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
defineMacro("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}"); // Characters omitted from Unicode range 1D400–1D7FF

defineMacro("\u212C", "\\mathscr{B}"); // script

defineMacro("\u2130", "\\mathscr{E}");
defineMacro("\u2131", "\\mathscr{F}");
defineMacro("\u210B", "\\mathscr{H}");
defineMacro("\u2110", "\\mathscr{I}");
defineMacro("\u2112", "\\mathscr{L}");
defineMacro("\u2133", "\\mathscr{M}");
defineMacro("\u211B", "\\mathscr{R}");
defineMacro("\u212D", "\\mathfrak{C}"); // Fraktur

defineMacro("\u210C", "\\mathfrak{H}");
defineMacro("\u2128", "\\mathfrak{Z}"); // Define \Bbbk with a macro that works in both HTML and MathML.

defineMacro("\\Bbbk", "\\Bbb{k}"); // Unicode middle dot
// The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays
// the dot at U+22C5 and gives it punct spacing.

defineMacro("\xB7", "\\cdotp"); // \llap and \rlap render their contents in text mode

defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
defineMacro("\\clap", "\\mathclap{\\textrm{#1}}"); // \mathstrut from the TeXbook, p 360

defineMacro("\\mathstrut", "\\vphantom{(}"); // \underbar from TeXbook p 353

defineMacro("\\underbar", "\\underline{\\text{#1}}"); // \not is defined by base/fontmath.ltx via
// \DeclareMathSymbol{\not}{\mathrel}{symbols}{"36}
// It's thus treated like a \mathrel, but defined by a symbol that has zero
// width but extends to the right.  We use \rlap to get that spacing.
// For MathML we write U+0338 here. buildMathML.js will then do the overlay.

defineMacro("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}'); // Negated symbols from base/fontmath.ltx:
// \def\neq{\not=} \let\ne=\neq
// \DeclareRobustCommand
//   \notin{\mathrel{\m@th\mathpalette\c@ncel\in}}
// \def\c@ncel#1#2{\m@th\ooalign{$\hfil#1\mkern1mu/\hfil$\crcr$#1#2$}}

defineMacro("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");
defineMacro("\\ne", "\\neq");
defineMacro("\u2260", "\\neq");
defineMacro("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}" + "{\\mathrel{\\char`∉}}");
defineMacro("\u2209", "\\notin"); // Unicode stacked relations

defineMacro("\u2258", "\\html@mathml{" + "\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}" + "}{\\mathrel{\\char`\u2258}}");
defineMacro("\u2259", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`\u2258}}");
defineMacro("\u225A", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`\u225A}}");
defineMacro("\u225B", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}" + "{\\mathrel{\\char`\u225B}}");
defineMacro("\u225D", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}" + "{\\mathrel{\\char`\u225D}}");
defineMacro("\u225E", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}" + "{\\mathrel{\\char`\u225E}}");
defineMacro("\u225F", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`\u225F}}"); // Misc Unicode

defineMacro("\u27C2", "\\perp");
defineMacro("\u203C", "\\mathclose{!\\mkern-0.8mu!}");
defineMacro("\u220C", "\\notni");
defineMacro("\u231C", "\\ulcorner");
defineMacro("\u231D", "\\urcorner");
defineMacro("\u231E", "\\llcorner");
defineMacro("\u231F", "\\lrcorner");
defineMacro("\xA9", "\\copyright");
defineMacro("\xAE", "\\textregistered");
defineMacro("\uFE0F", "\\textregistered"); // The KaTeX fonts have corners at codepoints that don't match Unicode.
// For MathML purposes, use the Unicode code point.

defineMacro("\\ulcorner", "\\html@mathml{\\@ulcorner}{\\mathop{\\char\"231c}}");
defineMacro("\\urcorner", "\\html@mathml{\\@urcorner}{\\mathop{\\char\"231d}}");
defineMacro("\\llcorner", "\\html@mathml{\\@llcorner}{\\mathop{\\char\"231e}}");
defineMacro("\\lrcorner", "\\html@mathml{\\@lrcorner}{\\mathop{\\char\"231f}}"); //////////////////////////////////////////////////////////////////////
// LaTeX_2ε
// \vdots{\vbox{\baselineskip4\p@  \lineskiplimit\z@
// \kern6\p@\hbox{.}\hbox{.}\hbox{.}}}
// We'll call \varvdots, which gets a glyph from symbols.js.
// The zero-width rule gets us an equivalent to the vertical 6pt kern.

defineMacro("\\vdots", "\\mathord{\\varvdots\\rule{0pt}{15pt}}");
defineMacro("\u22EE", "\\vdots"); //////////////////////////////////////////////////////////////////////
// amsmath.sty
// http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf
// Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,
// but they are equivalent to \mathit{\Letter}.

defineMacro("\\varGamma", "\\mathit{\\Gamma}");
defineMacro("\\varDelta", "\\mathit{\\Delta}");
defineMacro("\\varTheta", "\\mathit{\\Theta}");
defineMacro("\\varLambda", "\\mathit{\\Lambda}");
defineMacro("\\varXi", "\\mathit{\\Xi}");
defineMacro("\\varPi", "\\mathit{\\Pi}");
defineMacro("\\varSigma", "\\mathit{\\Sigma}");
defineMacro("\\varUpsilon", "\\mathit{\\Upsilon}");
defineMacro("\\varPhi", "\\mathit{\\Phi}");
defineMacro("\\varPsi", "\\mathit{\\Psi}");
defineMacro("\\varOmega", "\\mathit{\\Omega}"); //\newcommand{\substack}[1]{\subarray{c}#1\endsubarray}

defineMacro("\\substack", "\\begin{subarray}{c}#1\\end{subarray}"); // \renewcommand{\colon}{\nobreak\mskip2mu\mathpunct{}\nonscript
// \mkern-\thinmuskip{:}\mskip6muplus1mu\relax}

defineMacro("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}" + "\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu"); // \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}

defineMacro("\\boxed", "\\fbox{$\\displaystyle{#1}$}"); // \def\iff{\DOTSB\;\Longleftrightarrow\;}
// \def\implies{\DOTSB\;\Longrightarrow\;}
// \def\impliedby{\DOTSB\;\Longleftarrow\;}

defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;"); // AMSMath's automatic \dots, based on \mdots@@ macro.

var dotsByToken = {
  ',': '\\dotsc',
  '\\not': '\\dotsb',
  // \keybin@ checks for the following:
  '+': '\\dotsb',
  '=': '\\dotsb',
  '<': '\\dotsb',
  '>': '\\dotsb',
  '-': '\\dotsb',
  '*': '\\dotsb',
  ':': '\\dotsb',
  // Symbols whose definition starts with \DOTSB:
  '\\DOTSB': '\\dotsb',
  '\\coprod': '\\dotsb',
  '\\bigvee': '\\dotsb',
  '\\bigwedge': '\\dotsb',
  '\\biguplus': '\\dotsb',
  '\\bigcap': '\\dotsb',
  '\\bigcup': '\\dotsb',
  '\\prod': '\\dotsb',
  '\\sum': '\\dotsb',
  '\\bigotimes': '\\dotsb',
  '\\bigoplus': '\\dotsb',
  '\\bigodot': '\\dotsb',
  '\\bigsqcup': '\\dotsb',
  '\\And': '\\dotsb',
  '\\longrightarrow': '\\dotsb',
  '\\Longrightarrow': '\\dotsb',
  '\\longleftarrow': '\\dotsb',
  '\\Longleftarrow': '\\dotsb',
  '\\longleftrightarrow': '\\dotsb',
  '\\Longleftrightarrow': '\\dotsb',
  '\\mapsto': '\\dotsb',
  '\\longmapsto': '\\dotsb',
  '\\hookrightarrow': '\\dotsb',
  '\\doteq': '\\dotsb',
  // Symbols whose definition starts with \mathbin:
  '\\mathbin': '\\dotsb',
  // Symbols whose definition starts with \mathrel:
  '\\mathrel': '\\dotsb',
  '\\relbar': '\\dotsb',
  '\\Relbar': '\\dotsb',
  '\\xrightarrow': '\\dotsb',
  '\\xleftarrow': '\\dotsb',
  // Symbols whose definition starts with \DOTSI:
  '\\DOTSI': '\\dotsi',
  '\\int': '\\dotsi',
  '\\oint': '\\dotsi',
  '\\iint': '\\dotsi',
  '\\iiint': '\\dotsi',
  '\\iiiint': '\\dotsi',
  '\\idotsint': '\\dotsi',
  // Symbols whose definition starts with \DOTSX:
  '\\DOTSX': '\\dotsx'
};
defineMacro("\\dots", function (context) {
  // TODO: If used in text mode, should expand to \textellipsis.
  // However, in KaTeX, \textellipsis and \ldots behave the same
  // (in text mode), and it's unlikely we'd see any of the math commands
  // that affect the behavior of \dots when in text mode.  So fine for now
  // (until we support \ifmmode ... \else ... \fi).
  var thedots = '\\dotso';
  var next = context.expandAfterFuture().text;

  if (next in dotsByToken) {
    thedots = dotsByToken[next];
  } else if (next.substr(0, 4) === '\\not') {
    thedots = '\\dotsb';
  } else if (next in src_symbols.math) {
    if (utils.contains(['bin', 'rel'], src_symbols.math[next].group)) {
      thedots = '\\dotsb';
    }
  }

  return thedots;
});
var spaceAfterDots = {
  // \rightdelim@ checks for the following:
  ')': true,
  ']': true,
  '\\rbrack': true,
  '\\}': true,
  '\\rbrace': true,
  '\\rangle': true,
  '\\rceil': true,
  '\\rfloor': true,
  '\\rgroup': true,
  '\\rmoustache': true,
  '\\right': true,
  '\\bigr': true,
  '\\biggr': true,
  '\\Bigr': true,
  '\\Biggr': true,
  // \extra@ also tests for the following:
  '$': true,
  // \extrap@ checks for the following:
  ';': true,
  '.': true,
  ',': true
};
defineMacro("\\dotso", function (context) {
  var next = context.future().text;

  if (next in spaceAfterDots) {
    return "\\ldots\\,";
  } else {
    return "\\ldots";
  }
});
defineMacro("\\dotsc", function (context) {
  var next = context.future().text; // \dotsc uses \extra@ but not \extrap@, instead specially checking for
  // ';' and '.', but doesn't check for ','.

  if (next in spaceAfterDots && next !== ',') {
    return "\\ldots\\,";
  } else {
    return "\\ldots";
  }
});
defineMacro("\\cdots", function (context) {
  var next = context.future().text;

  if (next in spaceAfterDots) {
    return "\\@cdots\\,";
  } else {
    return "\\@cdots";
  }
});
defineMacro("\\dotsb", "\\cdots");
defineMacro("\\dotsm", "\\cdots");
defineMacro("\\dotsi", "\\!\\cdots"); // amsmath doesn't actually define \dotsx, but \dots followed by a macro
// starting with \DOTSX implies \dotso, and then \extra@ detects this case
// and forces the added `\,`.

defineMacro("\\dotsx", "\\ldots\\,"); // \let\DOTSI\relax
// \let\DOTSB\relax
// \let\DOTSX\relax

defineMacro("\\DOTSI", "\\relax");
defineMacro("\\DOTSB", "\\relax");
defineMacro("\\DOTSX", "\\relax"); // Spacing, based on amsmath.sty's override of LaTeX defaults
// \DeclareRobustCommand{\tmspace}[3]{%
//   \ifmmode\mskip#1#2\else\kern#1#3\fi\relax}

defineMacro("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax"); // \renewcommand{\,}{\tmspace+\thinmuskip{.1667em}}
// TODO: math mode should use \thinmuskip

defineMacro("\\,", "\\tmspace+{3mu}{.1667em}"); // \let\thinspace\,

defineMacro("\\thinspace", "\\,"); // \def\>{\mskip\medmuskip}
// \renewcommand{\:}{\tmspace+\medmuskip{.2222em}}
// TODO: \> and math mode of \: should use \medmuskip = 4mu plus 2mu minus 4mu

defineMacro("\\>", "\\mskip{4mu}");
defineMacro("\\:", "\\tmspace+{4mu}{.2222em}"); // \let\medspace\:

defineMacro("\\medspace", "\\:"); // \renewcommand{\;}{\tmspace+\thickmuskip{.2777em}}
// TODO: math mode should use \thickmuskip = 5mu plus 5mu

defineMacro("\\;", "\\tmspace+{5mu}{.2777em}"); // \let\thickspace\;

defineMacro("\\thickspace", "\\;"); // \renewcommand{\!}{\tmspace-\thinmuskip{.1667em}}
// TODO: math mode should use \thinmuskip

defineMacro("\\!", "\\tmspace-{3mu}{.1667em}"); // \let\negthinspace\!

defineMacro("\\negthinspace", "\\!"); // \newcommand{\negmedspace}{\tmspace-\medmuskip{.2222em}}
// TODO: math mode should use \medmuskip

defineMacro("\\negmedspace", "\\tmspace-{4mu}{.2222em}"); // \newcommand{\negthickspace}{\tmspace-\thickmuskip{.2777em}}
// TODO: math mode should use \thickmuskip

defineMacro("\\negthickspace", "\\tmspace-{5mu}{.277em}"); // \def\enspace{\kern.5em }

defineMacro("\\enspace", "\\kern.5em "); // \def\enskip{\hskip.5em\relax}

defineMacro("\\enskip", "\\hskip.5em\\relax"); // \def\quad{\hskip1em\relax}

defineMacro("\\quad", "\\hskip1em\\relax"); // \def\qquad{\hskip2em\relax}

defineMacro("\\qquad", "\\hskip2em\\relax"); // \tag@in@display form of \tag

defineMacro("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
defineMacro("\\tag@paren", "\\tag@literal{({#1})}");
defineMacro("\\tag@literal", function (context) {
  if (context.macros.get("\\df@tag")) {
    throw new src_ParseError("Multiple \\tag");
  }

  return "\\gdef\\df@tag{\\text{#1}}";
}); // \renewcommand{\bmod}{\nonscript\mskip-\medmuskip\mkern5mu\mathbin
//   {\operator@font mod}\penalty900
//   \mkern5mu\nonscript\mskip-\medmuskip}
// \newcommand{\pod}[1]{\allowbreak
//   \if@display\mkern18mu\else\mkern8mu\fi(#1)}
// \renewcommand{\pmod}[1]{\pod{{\operator@font mod}\mkern6mu#1}}
// \newcommand{\mod}[1]{\allowbreak\if@display\mkern18mu
//   \else\mkern12mu\fi{\operator@font mod}\,\,#1}
// TODO: math mode should use \medmuskip = 4mu plus 2mu minus 4mu

defineMacro("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}" + "\\mathbin{\\rm mod}" + "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
defineMacro("\\pod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
defineMacro("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
defineMacro("\\mod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}" + "{\\rm mod}\\,\\,#1"); // \pmb    --   A simulation of bold.
// The version in ambsy.sty works by typesetting three copies of the argument
// with small offsets. We use two copies. We omit the vertical offset because
// of rendering problems that makeVList encounters in Safari.

defineMacro("\\pmb", "\\html@mathml{" + "\\@binrel{#1}{\\mathrlap{#1}\\kern0.5px#1}}" + "{\\mathbf{#1}}"); //////////////////////////////////////////////////////////////////////
// LaTeX source2e
// \expandafter\let\expandafter\@normalcr
//     \csname\expandafter\@gobble\string\\ \endcsname
// \DeclareRobustCommand\newline{\@normalcr\relax}

defineMacro("\\newline", "\\\\\\relax"); // \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}
// TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't
// support \@ yet, so that's omitted, and we add \text so that the result
// doesn't look funny in math mode.

defineMacro("\\TeX", "\\textrm{\\html@mathml{" + "T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX" + "}{TeX}}"); // \DeclareRobustCommand{\LaTeX}{L\kern-.36em%
//         {\sbox\z@ T%
//          \vbox to\ht\z@{\hbox{\check@mathfonts
//                               \fontsize\sf@size\z@
//                               \math@fontsfalse\selectfont
//                               A}%
//                         \vss}%
//         }%
//         \kern-.15em%
//         \TeX}
// This code aligns the top of the A with the T (from the perspective of TeX's
// boxes, though visually the A appears to extend above slightly).
// We compute the corresponding \raisebox when A is rendered in \normalsize
// \scriptstyle, which has a scale factor of 0.7 (see Options.js).

var latexRaiseA = makeEm(fontMetricsData["Main-Regular"]["T".charCodeAt(0)][1] - 0.7 * fontMetricsData["Main-Regular"]["A".charCodeAt(0)][1]);
defineMacro("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}"); // New KaTeX logo based on tweaking LaTeX logo

defineMacro("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}"); // \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
// \def\@hspace#1{\hskip  #1\relax}
// \def\@hspacer#1{\vrule \@width\z@\nobreak
//                 \hskip #1\hskip \z@skip}

defineMacro("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
defineMacro("\\@hspace", "\\hskip #1\\relax");
defineMacro("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax"); //////////////////////////////////////////////////////////////////////
// mathtools.sty
//\providecommand\ordinarycolon{:}

defineMacro("\\ordinarycolon", ":"); //\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}
//TODO(edemaine): Not yet centered. Fix via \raisebox or #726

defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}"); // \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}

defineMacro("\\dblcolon", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}" + "{\\mathop{\\char\"2237}}"); // \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}

defineMacro("\\coloneqq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2254}}"); // ≔
// \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}

defineMacro("\\Coloneqq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2237\\char\"3d}}"); // \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

defineMacro("\\coloneq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"3a\\char\"2212}}"); // \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

defineMacro("\\Coloneq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"2237\\char\"2212}}"); // \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}

defineMacro("\\eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2255}}"); // ≕
// \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}

defineMacro("\\Eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"3d\\char\"2237}}"); // \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}

defineMacro("\\eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2239}}"); // \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}

defineMacro("\\Eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"2212\\char\"2237}}"); // \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}

defineMacro("\\colonapprox", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"3a\\char\"2248}}"); // \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}

defineMacro("\\Colonapprox", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"2237\\char\"2248}}"); // \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}

defineMacro("\\colonsim", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"3a\\char\"223c}}"); // \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}

defineMacro("\\Colonsim", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"2237\\char\"223c}}"); // Some Unicode characters are implemented with macros to mathtools functions.

defineMacro("\u2237", "\\dblcolon"); // ::

defineMacro("\u2239", "\\eqcolon"); // -:

defineMacro("\u2254", "\\coloneqq"); // :=

defineMacro("\u2255", "\\eqqcolon"); // =:

defineMacro("\u2A74", "\\Coloneqq"); // ::=
//////////////////////////////////////////////////////////////////////
// colonequals.sty
// Alternate names for mathtools's macros:

defineMacro("\\ratio", "\\vcentcolon");
defineMacro("\\coloncolon", "\\dblcolon");
defineMacro("\\colonequals", "\\coloneqq");
defineMacro("\\coloncolonequals", "\\Coloneqq");
defineMacro("\\equalscolon", "\\eqqcolon");
defineMacro("\\equalscoloncolon", "\\Eqqcolon");
defineMacro("\\colonminus", "\\coloneq");
defineMacro("\\coloncolonminus", "\\Coloneq");
defineMacro("\\minuscolon", "\\eqcolon");
defineMacro("\\minuscoloncolon", "\\Eqcolon"); // \colonapprox name is same in mathtools and colonequals.

defineMacro("\\coloncolonapprox", "\\Colonapprox"); // \colonsim name is same in mathtools and colonequals.

defineMacro("\\coloncolonsim", "\\Colonsim"); // Additional macros, implemented by analogy with mathtools definitions:

defineMacro("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
defineMacro("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
defineMacro("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
defineMacro("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}"); // Present in newtxmath, pxfonts and txfonts

defineMacro("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`\u220C}}");
defineMacro("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
defineMacro("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}"); //////////////////////////////////////////////////////////////////////
// From amsopn.sty

defineMacro("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
defineMacro("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
defineMacro("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
defineMacro("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
defineMacro("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
defineMacro("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}"); //////////////////////////////////////////////////////////////////////
// MathML alternates for KaTeX glyphs in the Unicode private area

defineMacro("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{\u2269}");
defineMacro("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{\u2268}");
defineMacro("\\ngeqq", "\\html@mathml{\\@ngeqq}{\u2271}");
defineMacro("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{\u2271}");
defineMacro("\\nleqq", "\\html@mathml{\\@nleqq}{\u2270}");
defineMacro("\\nleqslant", "\\html@mathml{\\@nleqslant}{\u2270}");
defineMacro("\\nshortmid", "\\html@mathml{\\@nshortmid}{∤}");
defineMacro("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{∦}");
defineMacro("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{\u2288}");
defineMacro("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{\u2289}");
defineMacro("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{⊊}");
defineMacro("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{⫋}");
defineMacro("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{⊋}");
defineMacro("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{⫌}");
defineMacro("\\imath", "\\html@mathml{\\@imath}{\u0131}");
defineMacro("\\jmath", "\\html@mathml{\\@jmath}{\u0237}"); //////////////////////////////////////////////////////////////////////
// stmaryrd and semantic
// The stmaryrd and semantic packages render the next four items by calling a
// glyph. Those glyphs do not exist in the KaTeX fonts. Hence the macros.

defineMacro("\\llbracket", "\\html@mathml{" + "\\mathopen{[\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u27E6}}");
defineMacro("\\rrbracket", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu]}}" + "{\\mathclose{\\char`\u27E7}}");
defineMacro("\u27E6", "\\llbracket"); // blackboard bold [

defineMacro("\u27E7", "\\rrbracket"); // blackboard bold ]

defineMacro("\\lBrace", "\\html@mathml{" + "\\mathopen{\\{\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u2983}}");
defineMacro("\\rBrace", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu\\}}}" + "{\\mathclose{\\char`\u2984}}");
defineMacro("\u2983", "\\lBrace"); // blackboard bold {

defineMacro("\u2984", "\\rBrace"); // blackboard bold }
// TODO: Create variable sized versions of the last two items. I believe that
// will require new font glyphs.
// The stmaryrd function `\minuso` provides a "Plimsoll" symbol that
// superimposes the characters \circ and \mathminus. Used in chemistry.

defineMacro("\\minuso", "\\mathbin{\\html@mathml{" + "{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}" + "{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}" + "{\\char`⦵}}");
defineMacro("⦵", "\\minuso"); //////////////////////////////////////////////////////////////////////
// texvc.sty
// The texvc package contains macros available in mediawiki pages.
// We omit the functions deprecated at
// https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax
// We also omit texvc's \O, which conflicts with \text{\O}

defineMacro("\\darr", "\\downarrow");
defineMacro("\\dArr", "\\Downarrow");
defineMacro("\\Darr", "\\Downarrow");
defineMacro("\\lang", "\\langle");
defineMacro("\\rang", "\\rangle");
defineMacro("\\uarr", "\\uparrow");
defineMacro("\\uArr", "\\Uparrow");
defineMacro("\\Uarr", "\\Uparrow");
defineMacro("\\N", "\\mathbb{N}");
defineMacro("\\R", "\\mathbb{R}");
defineMacro("\\Z", "\\mathbb{Z}");
defineMacro("\\alef", "\\aleph");
defineMacro("\\alefsym", "\\aleph");
defineMacro("\\Alpha", "\\mathrm{A}");
defineMacro("\\Beta", "\\mathrm{B}");
defineMacro("\\bull", "\\bullet");
defineMacro("\\Chi", "\\mathrm{X}");
defineMacro("\\clubs", "\\clubsuit");
defineMacro("\\cnums", "\\mathbb{C}");
defineMacro("\\Complex", "\\mathbb{C}");
defineMacro("\\Dagger", "\\ddagger");
defineMacro("\\diamonds", "\\diamondsuit");
defineMacro("\\empty", "\\emptyset");
defineMacro("\\Epsilon", "\\mathrm{E}");
defineMacro("\\Eta", "\\mathrm{H}");
defineMacro("\\exist", "\\exists");
defineMacro("\\harr", "\\leftrightarrow");
defineMacro("\\hArr", "\\Leftrightarrow");
defineMacro("\\Harr", "\\Leftrightarrow");
defineMacro("\\hearts", "\\heartsuit");
defineMacro("\\image", "\\Im");
defineMacro("\\infin", "\\infty");
defineMacro("\\Iota", "\\mathrm{I}");
defineMacro("\\isin", "\\in");
defineMacro("\\Kappa", "\\mathrm{K}");
defineMacro("\\larr", "\\leftarrow");
defineMacro("\\lArr", "\\Leftarrow");
defineMacro("\\Larr", "\\Leftarrow");
defineMacro("\\lrarr", "\\leftrightarrow");
defineMacro("\\lrArr", "\\Leftrightarrow");
defineMacro("\\Lrarr", "\\Leftrightarrow");
defineMacro("\\Mu", "\\mathrm{M}");
defineMacro("\\natnums", "\\mathbb{N}");
defineMacro("\\Nu", "\\mathrm{N}");
defineMacro("\\Omicron", "\\mathrm{O}");
defineMacro("\\plusmn", "\\pm");
defineMacro("\\rarr", "\\rightarrow");
defineMacro("\\rArr", "\\Rightarrow");
defineMacro("\\Rarr", "\\Rightarrow");
defineMacro("\\real", "\\Re");
defineMacro("\\reals", "\\mathbb{R}");
defineMacro("\\Reals", "\\mathbb{R}");
defineMacro("\\Rho", "\\mathrm{P}");
defineMacro("\\sdot", "\\cdot");
defineMacro("\\sect", "\\S");
defineMacro("\\spades", "\\spadesuit");
defineMacro("\\sub", "\\subset");
defineMacro("\\sube", "\\subseteq");
defineMacro("\\supe", "\\supseteq");
defineMacro("\\Tau", "\\mathrm{T}");
defineMacro("\\thetasym", "\\vartheta"); // TODO: defineMacro("\\varcoppa", "\\\mbox{\\coppa}");

defineMacro("\\weierp", "\\wp");
defineMacro("\\Zeta", "\\mathrm{Z}"); //////////////////////////////////////////////////////////////////////
// statmath.sty
// https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf

defineMacro("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
defineMacro("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
defineMacro("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits"); //////////////////////////////////////////////////////////////////////
// braket.sty
// http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/braket/braket.pdf

defineMacro("\\bra", "\\mathinner{\\langle{#1}|}");
defineMacro("\\ket", "\\mathinner{|{#1}\\rangle}");
defineMacro("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
defineMacro("\\Bra", "\\left\\langle#1\\right|");
defineMacro("\\Ket", "\\left|#1\\right\\rangle"); //////////////////////////////////////////////////////////////////////
// actuarialangle.dtx

defineMacro("\\angln", "{\\angl n}"); // Custom Khan Academy colors, should be moved to an optional package

defineMacro("\\blue", "\\textcolor{##6495ed}{#1}");
defineMacro("\\orange", "\\textcolor{##ffa500}{#1}");
defineMacro("\\pink", "\\textcolor{##ff00af}{#1}");
defineMacro("\\red", "\\textcolor{##df0030}{#1}");
defineMacro("\\green", "\\textcolor{##28ae7b}{#1}");
defineMacro("\\gray", "\\textcolor{gray}{#1}");
defineMacro("\\purple", "\\textcolor{##9d38bd}{#1}");
defineMacro("\\blueA", "\\textcolor{##ccfaff}{#1}");
defineMacro("\\blueB", "\\textcolor{##80f6ff}{#1}");
defineMacro("\\blueC", "\\textcolor{##63d9ea}{#1}");
defineMacro("\\blueD", "\\textcolor{##11accd}{#1}");
defineMacro("\\blueE", "\\textcolor{##0c7f99}{#1}");
defineMacro("\\tealA", "\\textcolor{##94fff5}{#1}");
defineMacro("\\tealB", "\\textcolor{##26edd5}{#1}");
defineMacro("\\tealC", "\\textcolor{##01d1c1}{#1}");
defineMacro("\\tealD", "\\textcolor{##01a995}{#1}");
defineMacro("\\tealE", "\\textcolor{##208170}{#1}");
defineMacro("\\greenA", "\\textcolor{##b6ffb0}{#1}");
defineMacro("\\greenB", "\\textcolor{##8af281}{#1}");
defineMacro("\\greenC", "\\textcolor{##74cf70}{#1}");
defineMacro("\\greenD", "\\textcolor{##1fab54}{#1}");
defineMacro("\\greenE", "\\textcolor{##0d923f}{#1}");
defineMacro("\\goldA", "\\textcolor{##ffd0a9}{#1}");
defineMacro("\\goldB", "\\textcolor{##ffbb71}{#1}");
defineMacro("\\goldC", "\\textcolor{##ff9c39}{#1}");
defineMacro("\\goldD", "\\textcolor{##e07d10}{#1}");
defineMacro("\\goldE", "\\textcolor{##a75a05}{#1}");
defineMacro("\\redA", "\\textcolor{##fca9a9}{#1}");
defineMacro("\\redB", "\\textcolor{##ff8482}{#1}");
defineMacro("\\redC", "\\textcolor{##f9685d}{#1}");
defineMacro("\\redD", "\\textcolor{##e84d39}{#1}");
defineMacro("\\redE", "\\textcolor{##bc2612}{#1}");
defineMacro("\\maroonA", "\\textcolor{##ffbde0}{#1}");
defineMacro("\\maroonB", "\\textcolor{##ff92c6}{#1}");
defineMacro("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
defineMacro("\\maroonD", "\\textcolor{##ca337c}{#1}");
defineMacro("\\maroonE", "\\textcolor{##9e034e}{#1}");
defineMacro("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
defineMacro("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
defineMacro("\\purpleC", "\\textcolor{##aa87ff}{#1}");
defineMacro("\\purpleD", "\\textcolor{##7854ab}{#1}");
defineMacro("\\purpleE", "\\textcolor{##543b78}{#1}");
defineMacro("\\mintA", "\\textcolor{##f5f9e8}{#1}");
defineMacro("\\mintB", "\\textcolor{##edf2df}{#1}");
defineMacro("\\mintC", "\\textcolor{##e0e5cc}{#1}");
defineMacro("\\grayA", "\\textcolor{##f6f7f7}{#1}");
defineMacro("\\grayB", "\\textcolor{##f0f1f2}{#1}");
defineMacro("\\grayC", "\\textcolor{##e3e5e6}{#1}");
defineMacro("\\grayD", "\\textcolor{##d6d8da}{#1}");
defineMacro("\\grayE", "\\textcolor{##babec2}{#1}");
defineMacro("\\grayF", "\\textcolor{##888d93}{#1}");
defineMacro("\\grayG", "\\textcolor{##626569}{#1}");
defineMacro("\\grayH", "\\textcolor{##3b3e40}{#1}");
defineMacro("\\grayI", "\\textcolor{##21242c}{#1}");
defineMacro("\\kaBlue", "\\textcolor{##314453}{#1}");
defineMacro("\\kaGreen", "\\textcolor{##71B307}{#1}");
;// CONCATENATED MODULE: ./src/MacroExpander.js
/**
 * This file contains the “gullet” where macros are expanded
 * until only non-macro tokens remain.
 */







// List of commands that act like macros but aren't defined as a macro,
// function, or symbol.  Used in `isDefined`.
var implicitCommands = {
  "\\relax": true,
  // MacroExpander.js
  "^": true,
  // Parser.js
  "_": true,
  // Parser.js
  "\\limits": true,
  // Parser.js
  "\\nolimits": true // Parser.js

};

var MacroExpander = /*#__PURE__*/function () {
  function MacroExpander(input, settings, mode) {
    this.settings = void 0;
    this.expansionCount = void 0;
    this.lexer = void 0;
    this.macros = void 0;
    this.stack = void 0;
    this.mode = void 0;
    this.settings = settings;
    this.expansionCount = 0;
    this.feed(input); // Make new global namespace

    this.macros = new Namespace(src_macros, settings.macros);
    this.mode = mode;
    this.stack = []; // contains tokens in REVERSE order
  }
  /**
   * Feed a new input string to the same MacroExpander
   * (with existing macros etc.).
   */


  var _proto = MacroExpander.prototype;

  _proto.feed = function feed(input) {
    this.lexer = new Lexer(input, this.settings);
  }
  /**
   * Switches between "text" and "math" modes.
   */
  ;

  _proto.switchMode = function switchMode(newMode) {
    this.mode = newMode;
  }
  /**
   * Start a new group nesting within all namespaces.
   */
  ;

  _proto.beginGroup = function beginGroup() {
    this.macros.beginGroup();
  }
  /**
   * End current group nesting within all namespaces.
   */
  ;

  _proto.endGroup = function endGroup() {
    this.macros.endGroup();
  }
  /**
   * Ends all currently nested groups (if any), restoring values before the
   * groups began.  Useful in case of an error in the middle of parsing.
   */
  ;

  _proto.endGroups = function endGroups() {
    this.macros.endGroups();
  }
  /**
   * Returns the topmost token on the stack, without expanding it.
   * Similar in behavior to TeX's `\futurelet`.
   */
  ;

  _proto.future = function future() {
    if (this.stack.length === 0) {
      this.pushToken(this.lexer.lex());
    }

    return this.stack[this.stack.length - 1];
  }
  /**
   * Remove and return the next unexpanded token.
   */
  ;

  _proto.popToken = function popToken() {
    this.future(); // ensure non-empty stack

    return this.stack.pop();
  }
  /**
   * Add a given token to the token stack.  In particular, this get be used
   * to put back a token returned from one of the other methods.
   */
  ;

  _proto.pushToken = function pushToken(token) {
    this.stack.push(token);
  }
  /**
   * Append an array of tokens to the token stack.
   */
  ;

  _proto.pushTokens = function pushTokens(tokens) {
    var _this$stack;

    (_this$stack = this.stack).push.apply(_this$stack, tokens);
  }
  /**
   * Find an macro argument without expanding tokens and append the array of
   * tokens to the token stack. Uses Token as a container for the result.
   */
  ;

  _proto.scanArgument = function scanArgument(isOptional) {
    var start;
    var end;
    var tokens;

    if (isOptional) {
      this.consumeSpaces(); // \@ifnextchar gobbles any space following it

      if (this.future().text !== "[") {
        return null;
      }

      start = this.popToken(); // don't include [ in tokens

      var _this$consumeArg = this.consumeArg(["]"]);

      tokens = _this$consumeArg.tokens;
      end = _this$consumeArg.end;
    } else {
      var _this$consumeArg2 = this.consumeArg();

      tokens = _this$consumeArg2.tokens;
      start = _this$consumeArg2.start;
      end = _this$consumeArg2.end;
    } // indicate the end of an argument


    this.pushToken(new Token("EOF", end.loc));
    this.pushTokens(tokens);
    return start.range(end, "");
  }
  /**
   * Consume all following space tokens, without expansion.
   */
  ;

  _proto.consumeSpaces = function consumeSpaces() {
    for (;;) {
      var token = this.future();

      if (token.text === " ") {
        this.stack.pop();
      } else {
        break;
      }
    }
  }
  /**
   * Consume an argument from the token stream, and return the resulting array
   * of tokens and start/end token.
   */
  ;

  _proto.consumeArg = function consumeArg(delims) {
    // The argument for a delimited parameter is the shortest (possibly
    // empty) sequence of tokens with properly nested {...} groups that is
    // followed ... by this particular list of non-parameter tokens.
    // The argument for an undelimited parameter is the next nonblank
    // token, unless that token is ‘{’, when the argument will be the
    // entire {...} group that follows.
    var tokens = [];
    var isDelimited = delims && delims.length > 0;

    if (!isDelimited) {
      // Ignore spaces between arguments.  As the TeXbook says:
      // "After you have said ‘\def\row#1#2{...}’, you are allowed to
      //  put spaces between the arguments (e.g., ‘\row x n’), because
      //  TeX doesn’t use single spaces as undelimited arguments."
      this.consumeSpaces();
    }

    var start = this.future();
    var tok;
    var depth = 0;
    var match = 0;

    do {
      tok = this.popToken();
      tokens.push(tok);

      if (tok.text === "{") {
        ++depth;
      } else if (tok.text === "}") {
        --depth;

        if (depth === -1) {
          throw new src_ParseError("Extra }", tok);
        }
      } else if (tok.text === "EOF") {
        throw new src_ParseError("Unexpected end of input in a macro argument" + ", expected '" + (delims && isDelimited ? delims[match] : "}") + "'", tok);
      }

      if (delims && isDelimited) {
        if ((depth === 0 || depth === 1 && delims[match] === "{") && tok.text === delims[match]) {
          ++match;

          if (match === delims.length) {
            // don't include delims in tokens
            tokens.splice(-match, match);
            break;
          }
        } else {
          match = 0;
        }
      }
    } while (depth !== 0 || isDelimited); // If the argument found ... has the form ‘{<nested tokens>}’,
    // ... the outermost braces enclosing the argument are removed


    if (start.text === "{" && tokens[tokens.length - 1].text === "}") {
      tokens.pop();
      tokens.shift();
    }

    tokens.reverse(); // to fit in with stack order

    return {
      tokens: tokens,
      start: start,
      end: tok
    };
  }
  /**
   * Consume the specified number of (delimited) arguments from the token
   * stream and return the resulting array of arguments.
   */
  ;

  _proto.consumeArgs = function consumeArgs(numArgs, delimiters) {
    if (delimiters) {
      if (delimiters.length !== numArgs + 1) {
        throw new src_ParseError("The length of delimiters doesn't match the number of args!");
      }

      var delims = delimiters[0];

      for (var i = 0; i < delims.length; i++) {
        var tok = this.popToken();

        if (delims[i] !== tok.text) {
          throw new src_ParseError("Use of the macro doesn't match its definition", tok);
        }
      }
    }

    var args = [];

    for (var _i = 0; _i < numArgs; _i++) {
      args.push(this.consumeArg(delimiters && delimiters[_i + 1]).tokens);
    }

    return args;
  }
  /**
   * Expand the next token only once if possible.
   *
   * If the token is expanded, the resulting tokens will be pushed onto
   * the stack in reverse order and will be returned as an array,
   * also in reverse order.
   *
   * If not, the next token will be returned without removing it
   * from the stack.  This case can be detected by a `Token` return value
   * instead of an `Array` return value.
   *
   * In either case, the next token will be on the top of the stack,
   * or the stack will be empty.
   *
   * Used to implement `expandAfterFuture` and `expandNextToken`.
   *
   * If expandableOnly, only expandable tokens are expanded and
   * an undefined control sequence results in an error.
   */
  ;

  _proto.expandOnce = function expandOnce(expandableOnly) {
    var topToken = this.popToken();
    var name = topToken.text;
    var expansion = !topToken.noexpand ? this._getExpansion(name) : null;

    if (expansion == null || expandableOnly && expansion.unexpandable) {
      if (expandableOnly && expansion == null && name[0] === "\\" && !this.isDefined(name)) {
        throw new src_ParseError("Undefined control sequence: " + name);
      }

      this.pushToken(topToken);
      return topToken;
    }

    this.expansionCount++;

    if (this.expansionCount > this.settings.maxExpand) {
      throw new src_ParseError("Too many expansions: infinite loop or " + "need to increase maxExpand setting");
    }

    var tokens = expansion.tokens;
    var args = this.consumeArgs(expansion.numArgs, expansion.delimiters);

    if (expansion.numArgs) {
      // paste arguments in place of the placeholders
      tokens = tokens.slice(); // make a shallow copy

      for (var i = tokens.length - 1; i >= 0; --i) {
        var tok = tokens[i];

        if (tok.text === "#") {
          if (i === 0) {
            throw new src_ParseError("Incomplete placeholder at end of macro body", tok);
          }

          tok = tokens[--i]; // next token on stack

          if (tok.text === "#") {
            // ## → #
            tokens.splice(i + 1, 1); // drop first #
          } else if (/^[1-9]$/.test(tok.text)) {
            var _tokens;

            // replace the placeholder with the indicated argument
            (_tokens = tokens).splice.apply(_tokens, [i, 2].concat(args[+tok.text - 1]));
          } else {
            throw new src_ParseError("Not a valid argument number", tok);
          }
        }
      }
    } // Concatenate expansion onto top of stack.


    this.pushTokens(tokens);
    return tokens;
  }
  /**
   * Expand the next token only once (if possible), and return the resulting
   * top token on the stack (without removing anything from the stack).
   * Similar in behavior to TeX's `\expandafter\futurelet`.
   * Equivalent to expandOnce() followed by future().
   */
  ;

  _proto.expandAfterFuture = function expandAfterFuture() {
    this.expandOnce();
    return this.future();
  }
  /**
   * Recursively expand first token, then return first non-expandable token.
   */
  ;

  _proto.expandNextToken = function expandNextToken() {
    for (;;) {
      var expanded = this.expandOnce(); // expandOnce returns Token if and only if it's fully expanded.

      if (expanded instanceof Token) {
        // \relax stops the expansion, but shouldn't get returned (a
        // null return value couldn't get implemented as a function).
        // the token after \noexpand is interpreted as if its meaning
        // were ‘\relax’
        if (expanded.text === "\\relax" || expanded.treatAsRelax) {
          this.stack.pop();
        } else {
          return this.stack.pop(); // === expanded
        }
      }
    } // Flow unable to figure out that this pathway is impossible.
    // https://github.com/facebook/flow/issues/4808


    throw new Error(); // eslint-disable-line no-unreachable
  }
  /**
   * Fully expand the given macro name and return the resulting list of
   * tokens, or return `undefined` if no such macro is defined.
   */
  ;

  _proto.expandMacro = function expandMacro(name) {
    return this.macros.has(name) ? this.expandTokens([new Token(name)]) : undefined;
  }
  /**
   * Fully expand the given token stream and return the resulting list of tokens
   */
  ;

  _proto.expandTokens = function expandTokens(tokens) {
    var output = [];
    var oldStackLength = this.stack.length;
    this.pushTokens(tokens);

    while (this.stack.length > oldStackLength) {
      var expanded = this.expandOnce(true); // expand only expandable tokens
      // expandOnce returns Token if and only if it's fully expanded.

      if (expanded instanceof Token) {
        if (expanded.treatAsRelax) {
          // the expansion of \noexpand is the token itself
          expanded.noexpand = false;
          expanded.treatAsRelax = false;
        }

        output.push(this.stack.pop());
      }
    }

    return output;
  }
  /**
   * Fully expand the given macro name and return the result as a string,
   * or return `undefined` if no such macro is defined.
   */
  ;

  _proto.expandMacroAsText = function expandMacroAsText(name) {
    var tokens = this.expandMacro(name);

    if (tokens) {
      return tokens.map(function (token) {
        return token.text;
      }).join("");
    } else {
      return tokens;
    }
  }
  /**
   * Returns the expanded macro as a reversed array of tokens and a macro
   * argument count.  Or returns `null` if no such macro.
   */
  ;

  _proto._getExpansion = function _getExpansion(name) {
    var definition = this.macros.get(name);

    if (definition == null) {
      // mainly checking for undefined here
      return definition;
    } // If a single character has an associated catcode other than 13
    // (active character), then don't expand it.


    if (name.length === 1) {
      var catcode = this.lexer.catcodes[name];

      if (catcode != null && catcode !== 13) {
        return;
      }
    }

    var expansion = typeof definition === "function" ? definition(this) : definition;

    if (typeof expansion === "string") {
      var numArgs = 0;

      if (expansion.indexOf("#") !== -1) {
        var stripped = expansion.replace(/##/g, "");

        while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
          ++numArgs;
        }
      }

      var bodyLexer = new Lexer(expansion, this.settings);
      var tokens = [];
      var tok = bodyLexer.lex();

      while (tok.text !== "EOF") {
        tokens.push(tok);
        tok = bodyLexer.lex();
      }

      tokens.reverse(); // to fit in with stack using push and pop

      var expanded = {
        tokens: tokens,
        numArgs: numArgs
      };
      return expanded;
    }

    return expansion;
  }
  /**
   * Determine whether a command is currently "defined" (has some
   * functionality), meaning that it's a macro (in the current group),
   * a function, a symbol, or one of the special commands listed in
   * `implicitCommands`.
   */
  ;

  _proto.isDefined = function isDefined(name) {
    return this.macros.has(name) || src_functions.hasOwnProperty(name) || src_symbols.math.hasOwnProperty(name) || src_symbols.text.hasOwnProperty(name) || implicitCommands.hasOwnProperty(name);
  }
  /**
   * Determine whether a command is expandable.
   */
  ;

  _proto.isExpandable = function isExpandable(name) {
    var macro = this.macros.get(name);
    return macro != null ? typeof macro === "string" || typeof macro === "function" || !macro.unexpandable : src_functions.hasOwnProperty(name) && !src_functions[name].primitive;
  };

  return MacroExpander;
}();


;// CONCATENATED MODULE: ./src/Parser.js
/* eslint no-constant-condition:0 */









 // Pre-evaluate both modules as unicodeSymbols require String.normalize()

var unicodeAccents = {
  "́": {
    "text": "\\'",
    "math": "\\acute"
  },
  "̀": {
    "text": "\\`",
    "math": "\\grave"
  },
  "̈": {
    "text": "\\\"",
    "math": "\\ddot"
  },
  "̃": {
    "text": "\\~",
    "math": "\\tilde"
  },
  "̄": {
    "text": "\\=",
    "math": "\\bar"
  },
  "̆": {
    "text": "\\u",
    "math": "\\breve"
  },
  "̌": {
    "text": "\\v",
    "math": "\\check"
  },
  "̂": {
    "text": "\\^",
    "math": "\\hat"
  },
  "̇": {
    "text": "\\.",
    "math": "\\dot"
  },
  "̊": {
    "text": "\\r",
    "math": "\\mathring"
  },
  "̋": {
    "text": "\\H"
  },
  "̧": {
    "text": "\\c"
  }
};
var unicodeSymbols = {
  "á": "á",
  "à": "à",
  "ä": "ä",
  "ǟ": "ǟ",
  "ã": "ã",
  "ā": "ā",
  "ă": "ă",
  "ắ": "ắ",
  "ằ": "ằ",
  "ẵ": "ẵ",
  "ǎ": "ǎ",
  "â": "â",
  "ấ": "ấ",
  "ầ": "ầ",
  "ẫ": "ẫ",
  "ȧ": "ȧ",
  "ǡ": "ǡ",
  "å": "å",
  "ǻ": "ǻ",
  "ḃ": "ḃ",
  "ć": "ć",
  "ḉ": "ḉ",
  "č": "č",
  "ĉ": "ĉ",
  "ċ": "ċ",
  "ç": "ç",
  "ď": "ď",
  "ḋ": "ḋ",
  "ḑ": "ḑ",
  "é": "é",
  "è": "è",
  "ë": "ë",
  "ẽ": "ẽ",
  "ē": "ē",
  "ḗ": "ḗ",
  "ḕ": "ḕ",
  "ĕ": "ĕ",
  "ḝ": "ḝ",
  "ě": "ě",
  "ê": "ê",
  "ế": "ế",
  "ề": "ề",
  "ễ": "ễ",
  "ė": "ė",
  "ȩ": "ȩ",
  "ḟ": "ḟ",
  "ǵ": "ǵ",
  "ḡ": "ḡ",
  "ğ": "ğ",
  "ǧ": "ǧ",
  "ĝ": "ĝ",
  "ġ": "ġ",
  "ģ": "ģ",
  "ḧ": "ḧ",
  "ȟ": "ȟ",
  "ĥ": "ĥ",
  "ḣ": "ḣ",
  "ḩ": "ḩ",
  "í": "í",
  "ì": "ì",
  "ï": "ï",
  "ḯ": "ḯ",
  "ĩ": "ĩ",
  "ī": "ī",
  "ĭ": "ĭ",
  "ǐ": "ǐ",
  "î": "î",
  "ǰ": "ǰ",
  "ĵ": "ĵ",
  "ḱ": "ḱ",
  "ǩ": "ǩ",
  "ķ": "ķ",
  "ĺ": "ĺ",
  "ľ": "ľ",
  "ļ": "ļ",
  "ḿ": "ḿ",
  "ṁ": "ṁ",
  "ń": "ń",
  "ǹ": "ǹ",
  "ñ": "ñ",
  "ň": "ň",
  "ṅ": "ṅ",
  "ņ": "ņ",
  "ó": "ó",
  "ò": "ò",
  "ö": "ö",
  "ȫ": "ȫ",
  "õ": "õ",
  "ṍ": "ṍ",
  "ṏ": "ṏ",
  "ȭ": "ȭ",
  "ō": "ō",
  "ṓ": "ṓ",
  "ṑ": "ṑ",
  "ŏ": "ŏ",
  "ǒ": "ǒ",
  "ô": "ô",
  "ố": "ố",
  "ồ": "ồ",
  "ỗ": "ỗ",
  "ȯ": "ȯ",
  "ȱ": "ȱ",
  "ő": "ő",
  "ṕ": "ṕ",
  "ṗ": "ṗ",
  "ŕ": "ŕ",
  "ř": "ř",
  "ṙ": "ṙ",
  "ŗ": "ŗ",
  "ś": "ś",
  "ṥ": "ṥ",
  "š": "š",
  "ṧ": "ṧ",
  "ŝ": "ŝ",
  "ṡ": "ṡ",
  "ş": "ş",
  "ẗ": "ẗ",
  "ť": "ť",
  "ṫ": "ṫ",
  "ţ": "ţ",
  "ú": "ú",
  "ù": "ù",
  "ü": "ü",
  "ǘ": "ǘ",
  "ǜ": "ǜ",
  "ǖ": "ǖ",
  "ǚ": "ǚ",
  "ũ": "ũ",
  "ṹ": "ṹ",
  "ū": "ū",
  "ṻ": "ṻ",
  "ŭ": "ŭ",
  "ǔ": "ǔ",
  "û": "û",
  "ů": "ů",
  "ű": "ű",
  "ṽ": "ṽ",
  "ẃ": "ẃ",
  "ẁ": "ẁ",
  "ẅ": "ẅ",
  "ŵ": "ŵ",
  "ẇ": "ẇ",
  "ẘ": "ẘ",
  "ẍ": "ẍ",
  "ẋ": "ẋ",
  "ý": "ý",
  "ỳ": "ỳ",
  "ÿ": "ÿ",
  "ỹ": "ỹ",
  "ȳ": "ȳ",
  "ŷ": "ŷ",
  "ẏ": "ẏ",
  "ẙ": "ẙ",
  "ź": "ź",
  "ž": "ž",
  "ẑ": "ẑ",
  "ż": "ż",
  "Á": "Á",
  "À": "À",
  "Ä": "Ä",
  "Ǟ": "Ǟ",
  "Ã": "Ã",
  "Ā": "Ā",
  "Ă": "Ă",
  "Ắ": "Ắ",
  "Ằ": "Ằ",
  "Ẵ": "Ẵ",
  "Ǎ": "Ǎ",
  "Â": "Â",
  "Ấ": "Ấ",
  "Ầ": "Ầ",
  "Ẫ": "Ẫ",
  "Ȧ": "Ȧ",
  "Ǡ": "Ǡ",
  "Å": "Å",
  "Ǻ": "Ǻ",
  "Ḃ": "Ḃ",
  "Ć": "Ć",
  "Ḉ": "Ḉ",
  "Č": "Č",
  "Ĉ": "Ĉ",
  "Ċ": "Ċ",
  "Ç": "Ç",
  "Ď": "Ď",
  "Ḋ": "Ḋ",
  "Ḑ": "Ḑ",
  "É": "É",
  "È": "È",
  "Ë": "Ë",
  "Ẽ": "Ẽ",
  "Ē": "Ē",
  "Ḗ": "Ḗ",
  "Ḕ": "Ḕ",
  "Ĕ": "Ĕ",
  "Ḝ": "Ḝ",
  "Ě": "Ě",
  "Ê": "Ê",
  "Ế": "Ế",
  "Ề": "Ề",
  "Ễ": "Ễ",
  "Ė": "Ė",
  "Ȩ": "Ȩ",
  "Ḟ": "Ḟ",
  "Ǵ": "Ǵ",
  "Ḡ": "Ḡ",
  "Ğ": "Ğ",
  "Ǧ": "Ǧ",
  "Ĝ": "Ĝ",
  "Ġ": "Ġ",
  "Ģ": "Ģ",
  "Ḧ": "Ḧ",
  "Ȟ": "Ȟ",
  "Ĥ": "Ĥ",
  "Ḣ": "Ḣ",
  "Ḩ": "Ḩ",
  "Í": "Í",
  "Ì": "Ì",
  "Ï": "Ï",
  "Ḯ": "Ḯ",
  "Ĩ": "Ĩ",
  "Ī": "Ī",
  "Ĭ": "Ĭ",
  "Ǐ": "Ǐ",
  "Î": "Î",
  "İ": "İ",
  "Ĵ": "Ĵ",
  "Ḱ": "Ḱ",
  "Ǩ": "Ǩ",
  "Ķ": "Ķ",
  "Ĺ": "Ĺ",
  "Ľ": "Ľ",
  "Ļ": "Ļ",
  "Ḿ": "Ḿ",
  "Ṁ": "Ṁ",
  "Ń": "Ń",
  "Ǹ": "Ǹ",
  "Ñ": "Ñ",
  "Ň": "Ň",
  "Ṅ": "Ṅ",
  "Ņ": "Ņ",
  "Ó": "Ó",
  "Ò": "Ò",
  "Ö": "Ö",
  "Ȫ": "Ȫ",
  "Õ": "Õ",
  "Ṍ": "Ṍ",
  "Ṏ": "Ṏ",
  "Ȭ": "Ȭ",
  "Ō": "Ō",
  "Ṓ": "Ṓ",
  "Ṑ": "Ṑ",
  "Ŏ": "Ŏ",
  "Ǒ": "Ǒ",
  "Ô": "Ô",
  "Ố": "Ố",
  "Ồ": "Ồ",
  "Ỗ": "Ỗ",
  "Ȯ": "Ȯ",
  "Ȱ": "Ȱ",
  "Ő": "Ő",
  "Ṕ": "Ṕ",
  "Ṗ": "Ṗ",
  "Ŕ": "Ŕ",
  "Ř": "Ř",
  "Ṙ": "Ṙ",
  "Ŗ": "Ŗ",
  "Ś": "Ś",
  "Ṥ": "Ṥ",
  "Š": "Š",
  "Ṧ": "Ṧ",
  "Ŝ": "Ŝ",
  "Ṡ": "Ṡ",
  "Ş": "Ş",
  "Ť": "Ť",
  "Ṫ": "Ṫ",
  "Ţ": "Ţ",
  "Ú": "Ú",
  "Ù": "Ù",
  "Ü": "Ü",
  "Ǘ": "Ǘ",
  "Ǜ": "Ǜ",
  "Ǖ": "Ǖ",
  "Ǚ": "Ǚ",
  "Ũ": "Ũ",
  "Ṹ": "Ṹ",
  "Ū": "Ū",
  "Ṻ": "Ṻ",
  "Ŭ": "Ŭ",
  "Ǔ": "Ǔ",
  "Û": "Û",
  "Ů": "Ů",
  "Ű": "Ű",
  "Ṽ": "Ṽ",
  "Ẃ": "Ẃ",
  "Ẁ": "Ẁ",
  "Ẅ": "Ẅ",
  "Ŵ": "Ŵ",
  "Ẇ": "Ẇ",
  "Ẍ": "Ẍ",
  "Ẋ": "Ẋ",
  "Ý": "Ý",
  "Ỳ": "Ỳ",
  "Ÿ": "Ÿ",
  "Ỹ": "Ỹ",
  "Ȳ": "Ȳ",
  "Ŷ": "Ŷ",
  "Ẏ": "Ẏ",
  "Ź": "Ź",
  "Ž": "Ž",
  "Ẑ": "Ẑ",
  "Ż": "Ż",
  "ά": "ά",
  "ὰ": "ὰ",
  "ᾱ": "ᾱ",
  "ᾰ": "ᾰ",
  "έ": "έ",
  "ὲ": "ὲ",
  "ή": "ή",
  "ὴ": "ὴ",
  "ί": "ί",
  "ὶ": "ὶ",
  "ϊ": "ϊ",
  "ΐ": "ΐ",
  "ῒ": "ῒ",
  "ῑ": "ῑ",
  "ῐ": "ῐ",
  "ό": "ό",
  "ὸ": "ὸ",
  "ύ": "ύ",
  "ὺ": "ὺ",
  "ϋ": "ϋ",
  "ΰ": "ΰ",
  "ῢ": "ῢ",
  "ῡ": "ῡ",
  "ῠ": "ῠ",
  "ώ": "ώ",
  "ὼ": "ὼ",
  "Ύ": "Ύ",
  "Ὺ": "Ὺ",
  "Ϋ": "Ϋ",
  "Ῡ": "Ῡ",
  "Ῠ": "Ῠ",
  "Ώ": "Ώ",
  "Ὼ": "Ὼ"
};

/**
 * This file contains the parser used to parse out a TeX expression from the
 * input. Since TeX isn't context-free, standard parsers don't work particularly
 * well.
 *
 * The strategy of this parser is as such:
 *
 * The main functions (the `.parse...` ones) take a position in the current
 * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
 * this.gullet.lexer) also supports pulling out tokens at arbitrary places. When
 * individual tokens are needed at a position, the lexer is called to pull out a
 * token, which is then used.
 *
 * The parser has a property called "mode" indicating the mode that
 * the parser is currently in. Currently it has to be one of "math" or
 * "text", which denotes whether the current environment is a math-y
 * one or a text-y one (e.g. inside \text). Currently, this serves to
 * limit the functions which can be used in text mode.
 *
 * The main functions then return an object which contains the useful data that
 * was parsed at its given point, and a new position at the end of the parsed
 * data. The main functions can call each other and continue the parsing by
 * using the returned position as a new starting point.
 *
 * There are also extra `.handle...` functions, which pull out some reused
 * functionality into self-contained functions.
 *
 * The functions return ParseNodes.
 */
var Parser = /*#__PURE__*/function () {
  function Parser(input, settings) {
    this.mode = void 0;
    this.gullet = void 0;
    this.settings = void 0;
    this.leftrightDepth = void 0;
    this.nextToken = void 0;
    // Start in math mode
    this.mode = "math"; // Create a new macro expander (gullet) and (indirectly via that) also a
    // new lexer (mouth) for this parser (stomach, in the language of TeX)

    this.gullet = new MacroExpander(input, settings, this.mode); // Store the settings for use in parsing

    this.settings = settings; // Count leftright depth (for \middle errors)

    this.leftrightDepth = 0;
  }
  /**
   * Checks a result to make sure it has the right type, and throws an
   * appropriate error otherwise.
   */


  var _proto = Parser.prototype;

  _proto.expect = function expect(text, consume) {
    if (consume === void 0) {
      consume = true;
    }

    if (this.fetch().text !== text) {
      throw new src_ParseError("Expected '" + text + "', got '" + this.fetch().text + "'", this.fetch());
    }

    if (consume) {
      this.consume();
    }
  }
  /**
   * Discards the current lookahead token, considering it consumed.
   */
  ;

  _proto.consume = function consume() {
    this.nextToken = null;
  }
  /**
   * Return the current lookahead token, or if there isn't one (at the
   * beginning, or if the previous lookahead token was consume()d),
   * fetch the next token as the new lookahead token and return it.
   */
  ;

  _proto.fetch = function fetch() {
    if (this.nextToken == null) {
      this.nextToken = this.gullet.expandNextToken();
    }

    return this.nextToken;
  }
  /**
   * Switches between "text" and "math" modes.
   */
  ;

  _proto.switchMode = function switchMode(newMode) {
    this.mode = newMode;
    this.gullet.switchMode(newMode);
  }
  /**
   * Main parsing function, which parses an entire input.
   */
  ;

  _proto.parse = function parse() {
    if (!this.settings.globalGroup) {
      // Create a group namespace for the math expression.
      // (LaTeX creates a new group for every $...$, $$...$$, \[...\].)
      this.gullet.beginGroup();
    } // Use old \color behavior (same as LaTeX's \textcolor) if requested.
    // We do this within the group for the math expression, so it doesn't
    // pollute settings.macros.


    if (this.settings.colorIsTextColor) {
      this.gullet.macros.set("\\color", "\\textcolor");
    }

    try {
      // Try to parse the input
      var parse = this.parseExpression(false); // If we succeeded, make sure there's an EOF at the end

      this.expect("EOF"); // End the group namespace for the expression

      if (!this.settings.globalGroup) {
        this.gullet.endGroup();
      }

      return parse; // Close any leftover groups in case of a parse error.
    } finally {
      this.gullet.endGroups();
    }
  };

  /**
   * Parses an "expression", which is a list of atoms.
   *
   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
   *                 happens when functions have higher precendence han infix
   *                 nodes in implicit parses.
   *
   * `breakOnTokenText`: The text of the token that the expression should end
   *                     with, or `null` if something else should end the
   *                     expression.
   */
  _proto.parseExpression = function parseExpression(breakOnInfix, breakOnTokenText) {
    var body = []; // Keep adding atoms to the body until we can't parse any more atoms (either
    // we reached the end, a }, or a \right)

    while (true) {
      // Ignore spaces in math mode
      if (this.mode === "math") {
        this.consumeSpaces();
      }

      var lex = this.fetch();

      if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
        break;
      }

      if (breakOnTokenText && lex.text === breakOnTokenText) {
        break;
      }

      if (breakOnInfix && src_functions[lex.text] && src_functions[lex.text].infix) {
        break;
      }

      var atom = this.parseAtom(breakOnTokenText);

      if (!atom) {
        break;
      } else if (atom.type === "internal") {
        continue;
      }

      body.push(atom);
    }

    if (this.mode === "text") {
      this.formLigatures(body);
    }

    return this.handleInfixNodes(body);
  }
  /**
   * Rewrites infix operators such as \over with corresponding commands such
   * as \frac.
   *
   * There can only be one infix operator per group.  If there's more than one
   * then the expression is ambiguous.  This can be resolved by adding {}.
   */
  ;

  _proto.handleInfixNodes = function handleInfixNodes(body) {
    var overIndex = -1;
    var funcName;

    for (var i = 0; i < body.length; i++) {
      if (body[i].type === "infix") {
        if (overIndex !== -1) {
          throw new src_ParseError("only one infix operator per group", body[i].token);
        }

        overIndex = i;
        funcName = body[i].replaceWith;
      }
    }

    if (overIndex !== -1 && funcName) {
      var numerNode;
      var denomNode;
      var numerBody = body.slice(0, overIndex);
      var denomBody = body.slice(overIndex + 1);

      if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
        numerNode = numerBody[0];
      } else {
        numerNode = {
          type: "ordgroup",
          mode: this.mode,
          body: numerBody
        };
      }

      if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
        denomNode = denomBody[0];
      } else {
        denomNode = {
          type: "ordgroup",
          mode: this.mode,
          body: denomBody
        };
      }

      var node;

      if (funcName === "\\\\abovefrac") {
        node = this.callFunction(funcName, [numerNode, body[overIndex], denomNode], []);
      } else {
        node = this.callFunction(funcName, [numerNode, denomNode], []);
      }

      return [node];
    } else {
      return body;
    }
  }
  /**
   * Handle a subscript or superscript with nice errors.
   */
  ;

  _proto.handleSupSubscript = function handleSupSubscript(name // For error reporting.
  ) {
    var symbolToken = this.fetch();
    var symbol = symbolToken.text;
    this.consume();
    this.consumeSpaces(); // ignore spaces before sup/subscript argument

    var group = this.parseGroup(name);

    if (!group) {
      throw new src_ParseError("Expected group after '" + symbol + "'", symbolToken);
    }

    return group;
  }
  /**
   * Converts the textual input of an unsupported command into a text node
   * contained within a color node whose color is determined by errorColor
   */
  ;

  _proto.formatUnsupportedCmd = function formatUnsupportedCmd(text) {
    var textordArray = [];

    for (var i = 0; i < text.length; i++) {
      textordArray.push({
        type: "textord",
        mode: "text",
        text: text[i]
      });
    }

    var textNode = {
      type: "text",
      mode: this.mode,
      body: textordArray
    };
    var colorNode = {
      type: "color",
      mode: this.mode,
      color: this.settings.errorColor,
      body: [textNode]
    };
    return colorNode;
  }
  /**
   * Parses a group with optional super/subscripts.
   */
  ;

  _proto.parseAtom = function parseAtom(breakOnTokenText) {
    // The body of an atom is an implicit group, so that things like
    // \left(x\right)^2 work correctly.
    var base = this.parseGroup("atom", breakOnTokenText); // In text mode, we don't have superscripts or subscripts

    if (this.mode === "text") {
      return base;
    } // Note that base may be empty (i.e. null) at this point.


    var superscript;
    var subscript;

    while (true) {
      // Guaranteed in math mode, so eat any spaces first.
      this.consumeSpaces(); // Lex the first token

      var lex = this.fetch();

      if (lex.text === "\\limits" || lex.text === "\\nolimits") {
        // We got a limit control
        if (base && base.type === "op") {
          var limits = lex.text === "\\limits";
          base.limits = limits;
          base.alwaysHandleSupSub = true;
        } else if (base && base.type === "operatorname") {
          if (base.alwaysHandleSupSub) {
            base.limits = lex.text === "\\limits";
          }
        } else {
          throw new src_ParseError("Limit controls must follow a math operator", lex);
        }

        this.consume();
      } else if (lex.text === "^") {
        // We got a superscript start
        if (superscript) {
          throw new src_ParseError("Double superscript", lex);
        }

        superscript = this.handleSupSubscript("superscript");
      } else if (lex.text === "_") {
        // We got a subscript start
        if (subscript) {
          throw new src_ParseError("Double subscript", lex);
        }

        subscript = this.handleSupSubscript("subscript");
      } else if (lex.text === "'") {
        // We got a prime
        if (superscript) {
          throw new src_ParseError("Double superscript", lex);
        }

        var prime = {
          type: "textord",
          mode: this.mode,
          text: "\\prime"
        }; // Many primes can be grouped together, so we handle this here

        var primes = [prime];
        this.consume(); // Keep lexing tokens until we get something that's not a prime

        while (this.fetch().text === "'") {
          // For each one, add another prime to the list
          primes.push(prime);
          this.consume();
        } // If there's a superscript following the primes, combine that
        // superscript in with the primes.


        if (this.fetch().text === "^") {
          primes.push(this.handleSupSubscript("superscript"));
        } // Put everything into an ordgroup as the superscript


        superscript = {
          type: "ordgroup",
          mode: this.mode,
          body: primes
        };
      } else {
        // If it wasn't ^, _, or ', stop parsing super/subscripts
        break;
      }
    } // Base must be set if superscript or subscript are set per logic above,
    // but need to check here for type check to pass.


    if (superscript || subscript) {
      // If we got either a superscript or subscript, create a supsub
      return {
        type: "supsub",
        mode: this.mode,
        base: base,
        sup: superscript,
        sub: subscript
      };
    } else {
      // Otherwise return the original body
      return base;
    }
  }
  /**
   * Parses an entire function, including its base and all of its arguments.
   */
  ;

  _proto.parseFunction = function parseFunction(breakOnTokenText, name // For determining its context
  ) {
    var token = this.fetch();
    var func = token.text;
    var funcData = src_functions[func];

    if (!funcData) {
      return null;
    }

    this.consume(); // consume command token

    if (name && name !== "atom" && !funcData.allowedInArgument) {
      throw new src_ParseError("Got function '" + func + "' with no arguments" + (name ? " as " + name : ""), token);
    } else if (this.mode === "text" && !funcData.allowedInText) {
      throw new src_ParseError("Can't use function '" + func + "' in text mode", token);
    } else if (this.mode === "math" && funcData.allowedInMath === false) {
      throw new src_ParseError("Can't use function '" + func + "' in math mode", token);
    }

    var _this$parseArguments = this.parseArguments(func, funcData),
        args = _this$parseArguments.args,
        optArgs = _this$parseArguments.optArgs;

    return this.callFunction(func, args, optArgs, token, breakOnTokenText);
  }
  /**
   * Call a function handler with a suitable context and arguments.
   */
  ;

  _proto.callFunction = function callFunction(name, args, optArgs, token, breakOnTokenText) {
    var context = {
      funcName: name,
      parser: this,
      token: token,
      breakOnTokenText: breakOnTokenText
    };
    var func = src_functions[name];

    if (func && func.handler) {
      return func.handler(context, args, optArgs);
    } else {
      throw new src_ParseError("No function handler for " + name);
    }
  }
  /**
   * Parses the arguments of a function or environment
   */
  ;

  _proto.parseArguments = function parseArguments(func, // Should look like "\name" or "\begin{name}".
  funcData) {
    var totalArgs = funcData.numArgs + funcData.numOptionalArgs;

    if (totalArgs === 0) {
      return {
        args: [],
        optArgs: []
      };
    }

    var args = [];
    var optArgs = [];

    for (var i = 0; i < totalArgs; i++) {
      var argType = funcData.argTypes && funcData.argTypes[i];
      var isOptional = i < funcData.numOptionalArgs;

      if (funcData.primitive && argType == null || // \sqrt expands into primitive if optional argument doesn't exist
      funcData.type === "sqrt" && i === 1 && optArgs[0] == null) {
        argType = "primitive";
      }

      var arg = this.parseGroupOfType("argument to '" + func + "'", argType, isOptional);

      if (isOptional) {
        optArgs.push(arg);
      } else if (arg != null) {
        args.push(arg);
      } else {
        // should be unreachable
        throw new src_ParseError("Null argument, please report this as a bug");
      }
    }

    return {
      args: args,
      optArgs: optArgs
    };
  }
  /**
   * Parses a group when the mode is changing.
   */
  ;

  _proto.parseGroupOfType = function parseGroupOfType(name, type, optional) {
    switch (type) {
      case "color":
        return this.parseColorGroup(optional);

      case "size":
        return this.parseSizeGroup(optional);

      case "url":
        return this.parseUrlGroup(optional);

      case "math":
      case "text":
        return this.parseArgumentGroup(optional, type);

      case "hbox":
        {
          // hbox argument type wraps the argument in the equivalent of
          // \hbox, which is like \text but switching to \textstyle size.
          var group = this.parseArgumentGroup(optional, "text");
          return group != null ? {
            type: "styling",
            mode: group.mode,
            body: [group],
            style: "text" // simulate \textstyle

          } : null;
        }

      case "raw":
        {
          var token = this.parseStringGroup("raw", optional);
          return token != null ? {
            type: "raw",
            mode: "text",
            string: token.text
          } : null;
        }

      case "primitive":
        {
          if (optional) {
            throw new src_ParseError("A primitive argument cannot be optional");
          }

          var _group = this.parseGroup(name);

          if (_group == null) {
            throw new src_ParseError("Expected group as " + name, this.fetch());
          }

          return _group;
        }

      case "original":
      case null:
      case undefined:
        return this.parseArgumentGroup(optional);

      default:
        throw new src_ParseError("Unknown group type as " + name, this.fetch());
    }
  }
  /**
   * Discard any space tokens, fetching the next non-space token.
   */
  ;

  _proto.consumeSpaces = function consumeSpaces() {
    while (this.fetch().text === " ") {
      this.consume();
    }
  }
  /**
   * Parses a group, essentially returning the string formed by the
   * brace-enclosed tokens plus some position information.
   */
  ;

  _proto.parseStringGroup = function parseStringGroup(modeName, // Used to describe the mode in error messages.
  optional) {
    var argToken = this.gullet.scanArgument(optional);

    if (argToken == null) {
      return null;
    }

    var str = "";
    var nextToken;

    while ((nextToken = this.fetch()).text !== "EOF") {
      str += nextToken.text;
      this.consume();
    }

    this.consume(); // consume the end of the argument

    argToken.text = str;
    return argToken;
  }
  /**
   * Parses a regex-delimited group: the largest sequence of tokens
   * whose concatenated strings match `regex`. Returns the string
   * formed by the tokens plus some position information.
   */
  ;

  _proto.parseRegexGroup = function parseRegexGroup(regex, modeName // Used to describe the mode in error messages.
  ) {
    var firstToken = this.fetch();
    var lastToken = firstToken;
    var str = "";
    var nextToken;

    while ((nextToken = this.fetch()).text !== "EOF" && regex.test(str + nextToken.text)) {
      lastToken = nextToken;
      str += lastToken.text;
      this.consume();
    }

    if (str === "") {
      throw new src_ParseError("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
    }

    return firstToken.range(lastToken, str);
  }
  /**
   * Parses a color description.
   */
  ;

  _proto.parseColorGroup = function parseColorGroup(optional) {
    var res = this.parseStringGroup("color", optional);

    if (res == null) {
      return null;
    }

    var match = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);

    if (!match) {
      throw new src_ParseError("Invalid color: '" + res.text + "'", res);
    }

    var color = match[0];

    if (/^[0-9a-f]{6}$/i.test(color)) {
      // We allow a 6-digit HTML color spec without a leading "#".
      // This follows the xcolor package's HTML color model.
      // Predefined color names are all missed by this RegEx pattern.
      color = "#" + color;
    }

    return {
      type: "color-token",
      mode: this.mode,
      color: color
    };
  }
  /**
   * Parses a size specification, consisting of magnitude and unit.
   */
  ;

  _proto.parseSizeGroup = function parseSizeGroup(optional) {
    var res;
    var isBlank = false; // don't expand before parseStringGroup

    this.gullet.consumeSpaces();

    if (!optional && this.gullet.future().text !== "{") {
      res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
    } else {
      res = this.parseStringGroup("size", optional);
    }

    if (!res) {
      return null;
    }

    if (!optional && res.text.length === 0) {
      // Because we've tested for what is !optional, this block won't
      // affect \kern, \hspace, etc. It will capture the mandatory arguments
      // to \genfrac and \above.
      res.text = "0pt"; // Enable \above{}

      isBlank = true; // This is here specifically for \genfrac
    }

    var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);

    if (!match) {
      throw new src_ParseError("Invalid size: '" + res.text + "'", res);
    }

    var data = {
      number: +(match[1] + match[2]),
      // sign + magnitude, cast to number
      unit: match[3]
    };

    if (!validUnit(data)) {
      throw new src_ParseError("Invalid unit: '" + data.unit + "'", res);
    }

    return {
      type: "size",
      mode: this.mode,
      value: data,
      isBlank: isBlank
    };
  }
  /**
   * Parses an URL, checking escaped letters and allowed protocols,
   * and setting the catcode of % as an active character (as in \hyperref).
   */
  ;

  _proto.parseUrlGroup = function parseUrlGroup(optional) {
    this.gullet.lexer.setCatcode("%", 13); // active character

    this.gullet.lexer.setCatcode("~", 12); // other character

    var res = this.parseStringGroup("url", optional);
    this.gullet.lexer.setCatcode("%", 14); // comment character

    this.gullet.lexer.setCatcode("~", 13); // active character

    if (res == null) {
      return null;
    } // hyperref package allows backslashes alone in href, but doesn't
    // generate valid links in such cases; we interpret this as
    // "undefined" behaviour, and keep them as-is. Some browser will
    // replace backslashes with forward slashes.


    var url = res.text.replace(/\\([#$%&~_^{}])/g, '$1');
    return {
      type: "url",
      mode: this.mode,
      url: url
    };
  }
  /**
   * Parses an argument with the mode specified.
   */
  ;

  _proto.parseArgumentGroup = function parseArgumentGroup(optional, mode) {
    var argToken = this.gullet.scanArgument(optional);

    if (argToken == null) {
      return null;
    }

    var outerMode = this.mode;

    if (mode) {
      // Switch to specified mode
      this.switchMode(mode);
    }

    this.gullet.beginGroup();
    var expression = this.parseExpression(false, "EOF"); // TODO: find an alternative way to denote the end

    this.expect("EOF"); // expect the end of the argument

    this.gullet.endGroup();
    var result = {
      type: "ordgroup",
      mode: this.mode,
      loc: argToken.loc,
      body: expression
    };

    if (mode) {
      // Switch mode back
      this.switchMode(outerMode);
    }

    return result;
  }
  /**
   * Parses an ordinary group, which is either a single nucleus (like "x")
   * or an expression in braces (like "{x+y}") or an implicit group, a group
   * that starts at the current position, and ends right before a higher explicit
   * group ends, or at EOF.
   */
  ;

  _proto.parseGroup = function parseGroup(name, // For error reporting.
  breakOnTokenText) {
    var firstToken = this.fetch();
    var text = firstToken.text;
    var result; // Try to parse an open brace or \begingroup

    if (text === "{" || text === "\\begingroup") {
      this.consume();
      var groupEnd = text === "{" ? "}" : "\\endgroup";
      this.gullet.beginGroup(); // If we get a brace, parse an expression

      var expression = this.parseExpression(false, groupEnd);
      var lastToken = this.fetch();
      this.expect(groupEnd); // Check that we got a matching closing brace

      this.gullet.endGroup();
      result = {
        type: "ordgroup",
        mode: this.mode,
        loc: SourceLocation.range(firstToken, lastToken),
        body: expression,
        // A group formed by \begingroup...\endgroup is a semi-simple group
        // which doesn't affect spacing in math mode, i.e., is transparent.
        // https://tex.stackexchange.com/questions/1930/when-should-one-
        // use-begingroup-instead-of-bgroup
        semisimple: text === "\\begingroup" || undefined
      };
    } else {
      // If there exists a function with this name, parse the function.
      // Otherwise, just return a nucleus
      result = this.parseFunction(breakOnTokenText, name) || this.parseSymbol();

      if (result == null && text[0] === "\\" && !implicitCommands.hasOwnProperty(text)) {
        if (this.settings.throwOnError) {
          throw new src_ParseError("Undefined control sequence: " + text, firstToken);
        }

        result = this.formatUnsupportedCmd(text);
        this.consume();
      }
    }

    return result;
  }
  /**
   * Form ligature-like combinations of characters for text mode.
   * This includes inputs like "--", "---", "``" and "''".
   * The result will simply replace multiple textord nodes with a single
   * character in each value by a single textord node having multiple
   * characters in its value.  The representation is still ASCII source.
   * The group will be modified in place.
   */
  ;

  _proto.formLigatures = function formLigatures(group) {
    var n = group.length - 1;

    for (var i = 0; i < n; ++i) {
      var a = group[i]; // $FlowFixMe: Not every node type has a `text` property.

      var v = a.text;

      if (v === "-" && group[i + 1].text === "-") {
        if (i + 1 < n && group[i + 2].text === "-") {
          group.splice(i, 3, {
            type: "textord",
            mode: "text",
            loc: SourceLocation.range(a, group[i + 2]),
            text: "---"
          });
          n -= 2;
        } else {
          group.splice(i, 2, {
            type: "textord",
            mode: "text",
            loc: SourceLocation.range(a, group[i + 1]),
            text: "--"
          });
          n -= 1;
        }
      }

      if ((v === "'" || v === "`") && group[i + 1].text === v) {
        group.splice(i, 2, {
          type: "textord",
          mode: "text",
          loc: SourceLocation.range(a, group[i + 1]),
          text: v + v
        });
        n -= 1;
      }
    }
  }
  /**
   * Parse a single symbol out of the string. Here, we handle single character
   * symbols and special functions like \verb.
   */
  ;

  _proto.parseSymbol = function parseSymbol() {
    var nucleus = this.fetch();
    var text = nucleus.text;

    if (/^\\verb[^a-zA-Z]/.test(text)) {
      this.consume();
      var arg = text.slice(5);
      var star = arg.charAt(0) === "*";

      if (star) {
        arg = arg.slice(1);
      } // Lexer's tokenRegex is constructed to always have matching
      // first/last characters.


      if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
        throw new src_ParseError("\\verb assertion failed --\n                    please report what input caused this bug");
      }

      arg = arg.slice(1, -1); // remove first and last char

      return {
        type: "verb",
        mode: "text",
        body: arg,
        star: star
      };
    } // At this point, we should have a symbol, possibly with accents.
    // First expand any accented base symbol according to unicodeSymbols.


    if (unicodeSymbols.hasOwnProperty(text[0]) && !src_symbols[this.mode][text[0]]) {
      // This behavior is not strict (XeTeX-compatible) in math mode.
      if (this.settings.strict && this.mode === "math") {
        this.settings.reportNonstrict("unicodeTextInMathMode", "Accented Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
      }

      text = unicodeSymbols[text[0]] + text.substr(1);
    } // Strip off any combining characters


    var match = combiningDiacriticalMarksEndRegex.exec(text);

    if (match) {
      text = text.substring(0, match.index);

      if (text === 'i') {
        text = "\u0131"; // dotless i, in math and text mode
      } else if (text === 'j') {
        text = "\u0237"; // dotless j, in math and text mode
      }
    } // Recognize base symbol


    var symbol;

    if (src_symbols[this.mode][text]) {
      if (this.settings.strict && this.mode === 'math' && extraLatin.indexOf(text) >= 0) {
        this.settings.reportNonstrict("unicodeTextInMathMode", "Latin-1/Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
      }

      var group = src_symbols[this.mode][text].group;
      var loc = SourceLocation.range(nucleus);
      var s;

      if (ATOMS.hasOwnProperty(group)) {
        // $FlowFixMe
        var family = group;
        s = {
          type: "atom",
          mode: this.mode,
          family: family,
          loc: loc,
          text: text
        };
      } else {
        // $FlowFixMe
        s = {
          type: group,
          mode: this.mode,
          loc: loc,
          text: text
        };
      } // $FlowFixMe


      symbol = s;
    } else if (text.charCodeAt(0) >= 0x80) {
      // no symbol for e.g. ^
      if (this.settings.strict) {
        if (!supportedCodepoint(text.charCodeAt(0))) {
          this.settings.reportNonstrict("unknownSymbol", "Unrecognized Unicode character \"" + text[0] + "\"" + (" (" + text.charCodeAt(0) + ")"), nucleus);
        } else if (this.mode === "math") {
          this.settings.reportNonstrict("unicodeTextInMathMode", "Unicode text character \"" + text[0] + "\" used in math mode", nucleus);
        }
      } // All nonmathematical Unicode characters are rendered as if they
      // are in text mode (wrapped in \text) because that's what it
      // takes to render them in LaTeX.  Setting `mode: this.mode` is
      // another natural choice (the user requested math mode), but
      // this makes it more difficult for getCharacterMetrics() to
      // distinguish Unicode characters without metrics and those for
      // which we want to simulate the letter M.


      symbol = {
        type: "textord",
        mode: "text",
        loc: SourceLocation.range(nucleus),
        text: text
      };
    } else {
      return null; // EOF, ^, _, {, }, etc.
    }

    this.consume(); // Transform combining characters into accents

    if (match) {
      for (var i = 0; i < match[0].length; i++) {
        var accent = match[0][i];

        if (!unicodeAccents[accent]) {
          throw new src_ParseError("Unknown accent ' " + accent + "'", nucleus);
        }

        var command = unicodeAccents[accent][this.mode] || unicodeAccents[accent].text;

        if (!command) {
          throw new src_ParseError("Accent " + accent + " unsupported in " + this.mode + " mode", nucleus);
        }

        symbol = {
          type: "accent",
          mode: this.mode,
          loc: SourceLocation.range(nucleus),
          label: command,
          isStretchy: false,
          isShifty: true,
          // $FlowFixMe
          base: symbol
        };
      }
    } // $FlowFixMe


    return symbol;
  };

  return Parser;
}();

Parser.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];

;// CONCATENATED MODULE: ./src/parseTree.js
/**
 * Provides a single function for parsing an expression using a Parser
 * TODO(emily): Remove this
 */



/**
 * Parses an expression using a Parser, then returns the parsed result.
 */
var parseTree = function parseTree(toParse, settings) {
  if (!(typeof toParse === 'string' || toParse instanceof String)) {
    throw new TypeError('KaTeX can only parse string typed expression');
  }

  var parser = new Parser(toParse, settings); // Blank out any \df@tag to avoid spurious "Duplicate \tag" errors

  delete parser.gullet.macros.current["\\df@tag"];
  var tree = parser.parse(); // Prevent a color definition from persisting between calls to katex.render().

  delete parser.gullet.macros.current["\\current@color"];
  delete parser.gullet.macros.current["\\color"]; // If the input used \tag, it will set the \df@tag macro to the tag.
  // In this case, we separately parse the tag and wrap the tree.

  if (parser.gullet.macros.get("\\df@tag")) {
    if (!settings.displayMode) {
      throw new src_ParseError("\\tag works only in display equations");
    }

    parser.gullet.feed("\\df@tag");
    tree = [{
      type: "tag",
      mode: "text",
      body: tree,
      tag: parser.parse()
    }];
  }

  return tree;
};

/* harmony default export */ var src_parseTree = (parseTree);
;// CONCATENATED MODULE: ./katex.js
/* eslint no-console:0 */

/**
 * This is the main entry point for KaTeX. Here, we expose functions for
 * rendering expressions either to DOM nodes or to markup strings.
 *
 * We also expose the ParseError class to check if errors thrown from KaTeX are
 * errors in the expression, or errors in javascript handling.
 */










/**
 * Parse and build an expression, and place that expression in the DOM node
 * given.
 */
var render = function render(expression, baseNode, options) {
  baseNode.textContent = "";
  var node = renderToDomTree(expression, options).toNode();
  baseNode.appendChild(node);
}; // KaTeX's styles don't work properly in quirks mode. Print out an error, and
// disable rendering.


if (typeof document !== "undefined") {
  if (document.compatMode !== "CSS1Compat") {
    typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your " + "website has a suitable doctype.");

    render = function render() {
      throw new src_ParseError("KaTeX doesn't work in quirks mode.");
    };
  }
}
/**
 * Parse and build an expression, and return the markup for that.
 */


var renderToString = function renderToString(expression, options) {
  var markup = renderToDomTree(expression, options).toMarkup();
  return markup;
};
/**
 * Parse an expression and return the parse tree.
 */


var generateParseTree = function generateParseTree(expression, options) {
  var settings = new Settings(options);
  return src_parseTree(expression, settings);
};
/**
 * If the given error is a KaTeX ParseError and options.throwOnError is false,
 * renders the invalid LaTeX as a span with hover title giving the KaTeX
 * error message.  Otherwise, simply throws the error.
 */


var renderError = function renderError(error, expression, options) {
  if (options.throwOnError || !(error instanceof src_ParseError)) {
    throw error;
  }

  var node = buildCommon.makeSpan(["katex-error"], [new SymbolNode(expression)]);
  node.setAttribute("title", error.toString());
  node.setAttribute("style", "color:" + options.errorColor);
  return node;
};
/**
 * Generates and returns the katex build tree. This is used for advanced
 * use cases (like rendering to custom output).
 */


var renderToDomTree = function renderToDomTree(expression, options) {
  var settings = new Settings(options);

  try {
    var tree = src_parseTree(expression, settings);
    return buildTree(tree, expression, settings);
  } catch (error) {
    return renderError(error, expression, settings);
  }
};
/**
 * Generates and returns the katex build tree, with just HTML (no MathML).
 * This is used for advanced use cases (like rendering to custom output).
 */


var renderToHTMLTree = function renderToHTMLTree(expression, options) {
  var settings = new Settings(options);

  try {
    var tree = src_parseTree(expression, settings);
    return buildHTMLTree(tree, expression, settings);
  } catch (error) {
    return renderError(error, expression, settings);
  }
};

/* harmony default export */ var katex = ({
  /**
   * Current KaTeX version
   */
  version: "0.13.24",

  /**
   * Renders the given LaTeX into an HTML+MathML combination, and adds
   * it as a child to the specified DOM node.
   */
  render: render,

  /**
   * Renders the given LaTeX into an HTML+MathML combination string,
   * for sending to the client.
   */
  renderToString: renderToString,

  /**
   * KaTeX error, usually during parsing.
   */
  ParseError: src_ParseError,

  /**
   * Parses the given LaTeX into KaTeX's internal parse tree structure,
   * without rendering to HTML or MathML.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __parse: generateParseTree,

  /**
   * Renders the given LaTeX into an HTML+MathML internal DOM tree
   * representation, without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __renderToDomTree: renderToDomTree,

  /**
   * Renders the given LaTeX into an HTML internal DOM tree representation,
   * without MathML and without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __renderToHTMLTree: renderToHTMLTree,

  /**
   * extends internal font metrics object with a new object
   * each key in the new object represents a font name
  */
  __setFontMetrics: setFontMetrics,

  /**
   * adds a new symbol to builtin symbols table
   */
  __defineSymbol: defineSymbol,

  /**
   * adds a new macro to builtin macro list
   */
  __defineMacro: defineMacro,

  /**
   * Expose the dom tree node types, which can be useful for type checking nodes.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __domTree: {
    Span: Span,
    Anchor: Anchor,
    SymbolNode: SymbolNode,
    SvgNode: SvgNode,
    PathNode: PathNode,
    LineNode: LineNode
  }
});
;// CONCATENATED MODULE: ./katex.webpack.js
/**
 * This is the webpack entry point for KaTeX. As ECMAScript, flow[1] and jest[2]
 * doesn't support CSS modules natively, a separate entry point is used and
 * it is not flowtyped.
 *
 * [1] https://gist.github.com/lambdahands/d19e0da96285b749f0ef
 * [2] https://facebook.github.io/jest/docs/en/webpack.html
 */


/* harmony default export */ var katex_webpack = (katex);
__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ 210:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toData = exports.data = exports.Data = void 0;
const numbers_1 = __webpack_require__(9109);
/**
 * A subclass of array. Designed for number data for stat use.
 */
class Data extends numbers_1.Numbers {
    /**
     * Return the median.
     * @returns the median
     * @example
     * ```
     * [1,2,4].median() // 2
     * [1,2,4,10].median() // 3
     * [].median() // NaN
     * ```
     */
    median() {
        if (this.length === 0)
            return NaN;
        const sorted = this.ascending();
        if (sorted.length % 2 === 0) {
            let i = sorted.length / 2;
            let j = i + 1;
            return (sorted[i - 1] + sorted[j - 1]) / 2;
        }
        else {
            let i = sorted.length / 2;
            i = Math.ceil(i);
            return sorted[i - 1];
        }
    }
    /**
     * Return an array of `Nth` modes.
     * @param Nth - the rank of modes requested
     * @returns array of modes
     * @example
     * ```
     * [1,1,2,3,3].modes() // [1,3]
     * [3,3,2,1,1].modes() // [3,1]
     * [1,1,2,3].modes() // [1]
     * [1,2,3].modes() // [1,2,3]
     * [].modes() // []
     *
     * [1,1,1,2,2,2,3,3,4,4,5].modes(1) // [1,2]
     * [1,1,1,2,2,2,3,3,4,4,5].modes(2) // [3,4]
     * ```
     */
    modes(Nth = 1) {
        if (this.length === 0)
            return this.create([]);
        return this.maxsBy($ => this.freq($), Nth).unique();
    }
    /**
     * Return the only `Nth` mode.
     * If there is more than one modes, return `NaN`.
     * @param Nth - the rank of mode requested
     * @returns the only mode
     * @example
     * ```
     * [1,1,2,3].mode() // 1
     * [1,1,2,3,3].mode() // NaN
     * [].mode() // NaN
     *
     * [1,1,1,2,2,2,3,3,4,4,5].mode(2) // NaN
     * [1,1,1,2,2,2,2,3,3,4,4,5].mode(2) // 1
     * ```
     */
    mode(Nth = 1) {
        if (this.length === 0)
            return NaN;
        const modes = this.modes(Nth);
        if (modes.length > 1)
            return NaN;
        return modes.first();
    }
    /**
     * Check if the numbers has a single `Nth` mode.
     * @param Nth - the rank of mode requested
     * @returns a boolean
     * @example
     * ```
     * [1,1,2,3,3].isSingleMode() // false
     * [1,1,2,3].isSingleMode() // true
     * ```
     */
    isSingleMode(Nth = 1) {
        const modes = this.modes(Nth);
        return modes.length === 1;
    }
    /**
     * Return the lower quartile.
     * @returns the lower quartile
     * @example
     * ```
     * [1,2,3,4].lowerQuartile() // 1.5
     * ```
     */
    lowerQuartile() {
        if (this.length === 0)
            return NaN;
        const sorted = this.ascending();
        let n = sorted.length;
        let m = n / 2;
        if (n % 2 !== 0)
            m = Math.floor(m);
        return sorted.head(m).median();
    }
    /**
     * Return the upper quartile.
     * @returns the upper quartile
     * @example
     * ```
     * [1,2,3,4].upperQuartile() // 3.5
     * ```
     */
    upperQuartile() {
        if (this.length === 0)
            return NaN;
        const sorted = this.ascending();
        let n = sorted.length;
        let m = n / 2;
        if (n % 2 !== 0)
            m = Math.floor(m);
        return sorted.tail(m).median();
    }
    /**
     * Return the standard deviation of the numbers.
     * @returns the standard deviation
     * @example
     * ```
     * [1,2,3,4].stdDev() // 1.1180339887499
     * ```
     */
    stdDev() {
        if (this.length === 0)
            return NaN;
        let mean = this.mean();
        let deviations = this.minus(mean);
        let squaredDev = deviations.square();
        let meanSq = squaredDev.mean();
        return Math.sqrt(meanSq);
    }
    /**
     * Return the range of the numbers.
     * @returns the range
     * @example
     * ```
     * [4,5,6].range // 2
     * ```
     */
    range() {
        if (this.length === 0)
            return NaN;
        return this.max() - this.min();
    }
    /**
     * Return the inter-quartile range of the numbers.
     * @returns the inter-quartile range
     * @example
     * ```
     * [4,5,6,7,8].IQR() // 2
     * ```
     */
    IQR() {
        if (this.length === 0)
            return NaN;
        return this.upperQuartile() - this.lowerQuartile();
    }
}
exports.Data = Data;
/**
 * Return a `Data` prefilled with `elements`.
 * @param elements - the elements to put in the `Data`
 * @returns a `Data` array
 * @example
 * ```
 * data(1,2,3) // Data of [1,2,3]
 * ```
 */
function data(...elements) {
    let dt = new Data();
    dt.push(...elements);
    return dt;
}
exports.data = data;
/**
 * Return a `Data` prefilled with `elements`.
 * @param elements - the elements to put in the `Data`
 * @returns a `Data` array
 * @example
 * ```
 * toData([1,2,3]) // Data of [1,2,3]
 * ```
 */
function toData(elements) {
    return data(...elements);
}
exports.toData = toData;
//# sourceMappingURL=data.js.map

/***/ }),

/***/ 4140:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toList = exports.list = exports.List = void 0;
/**
 * A super-charged array.
 * All object equality is reference only.
 */
class List extends Array {
    //#region Meta
    /**
     * Return a new array, using the constructor of this object.
     * Preserve type in subclass.
     * @param elements - array of elements to put in the new array
     * @returns a new array with `elements` in it
     * @example
     * ```
     * this.create([1,2,3]) // [1,2,3]
     * ```
     */
    create(elements) {
        let ls = new this.constructor();
        ls.push(...elements);
        return ls;
    }
    /**
     * Clear all items in this array in-place.
     * This array will become empty.
     * @example
     * ```
     * [1,2,3].clear() //-> []
     * ```
     */
    clear() {
        this.splice(0, this.length);
    }
    /**
     * Set the elements of this array in-place.
     * Overwrite all original elements.
     * @param elements - array of the new elements
     * @example
     * ```
     * [1,2,3].set([4,5,6]) //-> [4,5,6]
     * ```
     */
    set(elements) {
        this.clear();
        this.push(...elements);
    }
    /**
     * Return a shallow clone of this array.
     * @returns a shallow clone
     * @example
     * ```
     * [1,2,3].clone() // [1,2,3]
     * ```
     */
    clone() {
        return this.create([...this]);
    }
    /**
     * Check if the `index` is a valid index.
     * @param index - the index number to check
     * @returns a boolean
     * @example
     * ```
     * [1,2,3].indexValid(2) // true
     * [1,2,3].indexValid(3) // false
     * ```
     */
    indexValid(index) {
        if (this.length === 0)
            return false;
        return index >= 0 && index <= this.length - 1;
    }
    /**
     * Check if this array is empty.
     * @returns a boolean
     * @example
     * ```
     * [].isEmpty() // true
     * [1,2,3].isEmpty() // false
     * ```
     */
    isEmpty() {
        return this.length === 0;
    }
    //#endregion
    //#region Selection function
    /**
     * Return the first element of this array.
     * If this array is empty, return `undefined`.
     * @returns the first element
     * @example
     * ```
     * [1,2,3].first() // 1
     * ```
     */
    first() {
        return this[0];
    }
    /**
     * Return the last element of this array.
     * If this array is empty, return `undefined`.
     * @returns the last element
     * @example
     * ```
     * [1,2,3].last() // 3
     * ```
     */
    last() {
        return this[this.length - 1];
    }
    /**
     * Return an element at a cyclic `index`.
     * If this array is empty, return `undefined`.
     * @param index - the cyclic index
     * @returns the element at the cyclic `index`
     * @example
     * ```
     * [1,2,3].cyclic(-1) // 3 , the last element
     * [1,2,3].cyclic(this.length) // 1 , the first element
     * ```
     */
    cyclicAt(index) {
        let n = this.length;
        if (n === 0)
            return undefined;
        while (index < 0) {
            index += n;
        }
        while (index > n - 1) {
            index -= n;
        }
        return this[index];
    }
    //#endregion
    //#region Selection in-place
    /**
     * Pull out and return the element at `index`.
     * This mutates this array, similar to {@link Array.pop}.
     * @param index - the index at which to pull
     * @returns the pulled out element
     * @example
     * ```
     * [1,2,3,4,5].pull(3) // 4
     * // -> [1,2,3,5]
     * ```
     */
    pull(index) {
        let n = this.length;
        if (n === 0)
            return undefined;
        while (index < 0)
            return undefined;
        while (index > n - 1)
            return undefined;
        let element = this[index];
        this.splice(index, 1);
        return element;
    }
    //#endregion
    //#region Segment
    /**
     * Return an array of the first `n` elements of this array.
     * @param n - the number of elements to returns
     * @returns array of the first `n` elements
     * @see {@link List.tail} for the opposite
     * @example
     * ```
     * [1,2,3,4,5].head(3) // [1,2,3]
     * ```
     */
    head(n) {
        if (n <= 0)
            return this.create([]);
        return this.slice(0, n);
    }
    /**
     * Return an array of the last `n` elements of this array.
     * @param n - the number of elements to returns
     * @returns array of the last `n` elements
     * @see {@link List.head} for the opposite
     * @example
     * ```
     * [1,2,3,4,5].tail(3) // [3,4,5]
     * ```
     */
    tail(n) {
        if (n <= 0)
            return this.create([]);
        return this.slice(-n);
    }
    /**
     * Return an array of elements before `index`.
     * @param index - before this index
     * @return array of elements before `index`
     * @example
     * ```
     * [1,2,3,4,5].before(2) // [1,2]
     * ```
     */
    before(index) {
        if (index <= 0)
            return this.create([]);
        if (index >= this.length)
            return this.clone();
        return this.slice(0, index);
    }
    /**
     * Return an array of elements till `index`.
     * @param index - till this index
     * @return array of elements till `index`
     * @example
     * ```
     * [1,2,3,4,5].till(2) // [1,2,3]
     * ```
     */
    till(index) {
        return this.before(index + 1);
    }
    /**
     * Return an array of elements after `index`.
     * @param index - after this index
     * @return array of elements after `index`
     * @example
     * ```
     * [1,2,3,4,5].after(2) // [4,5]
     * ```
     */
    after(index) {
        if (index < 0)
            return this.clone();
        if (index >= this.length - 1)
            return this.create([]);
        return this.slice(index + 1);
    }
    /**
     * Return an array of elements since `index`.
     * @param index - since this index
     * @return array of elements since `index`
     * @example
     * ```
     * [1,2,3,4,5].since(2) // [3,4,5]
     * ```
     */
    since(index) {
        return this.after(index - 1);
    }
    /**
     * Return an array of array segments, each is a chunk of this array of fixed `size`.
     * @param size - the number of elements in each chunk
     * @returns array of chunks
     * @example
     * ```
     * [1,2,3,4,5,6,7,8].chunk(3) // [[1,2,3],[4,5,6],[7,8]]
     * ```
     */
    chunk(size) {
        if (size <= 0)
            return List.of();
        let ls = List.of();
        for (let i = 0; i < this.length; i += size) {
            ls.push(this.slice(i, i + size));
        }
        return ls;
    }
    /**
     * Return an array of array segments, splitting this array by `delimitElement`.
     * @param delimitElement - the element acting as delimiter
     * @returns array of chunks
     * @example
     * ```
     * [1,2,3,0,4,5,0,0,6].split() // [[1,2,3],[4,5],[],[6]]
     * [1,2,3,0,4,5,0,0,6,0].split() // [[1,2,3],[4,5],[],[6],[]]
     * ```
     */
    split(delimitElement) {
        let ls = List.of();
        let clone = this.clone();
        while (true) {
            let firstDelimIndex = clone.findIndex($ => $ === delimitElement);
            if (firstDelimIndex === -1) {
                let head = clone.splice(0);
                ls.push(this.create(head));
                break;
            }
            else {
                let head = clone.splice(0, firstDelimIndex);
                ls.push(this.create(head));
                clone.shift();
                if (clone.length === 0) {
                    ls.push(this.create([]));
                    break;
                }
            }
        }
        return ls;
    }
    //#endregion
    //#region Containment
    /**
     * Check if this array includes all element in `elements`.
     * @param elements - array of elements to include
     * @returns a boolean
     * @example
     * ```
     * [1,2,3].includesAll([1,2]) // true
     * [1,2,3].includesAll([1,4]) // false
     * ```
     */
    includesAll(elements) {
        return elements.every($ => this.includes($));
    }
    /**
     * Check if this array includes at least one element in `elements`.
     * @param elements - array of elements to include
     * @returns a boolean
     * @example
     * ```
     * [1,2,3].includesAny([1,2]) // true
     * [1,2,3].includesAny([1,4]) // true
     * [1,2,3].includesAny([4,5]) // false
     * ```
     */
    includesAny(elements) {
        return elements.some($ => this.includes($));
    }
    /**
     * Check if this array includes exactly the `elements` in any order, no more and no less.
     * @param elements - array of elements to compare
     * @returns a boolean
     * @example
     * ```
     * [1,2,3].includesExact([2,1,3]) // true
     * [1,2,3].includesExact([1,2]) // false
     * ```
     */
    includesExact(elements) {
        let other = List.of(...elements);
        return this.includesAll(other) && this.belongs(other);
    }
    /**
     * Check if every element in this array is found in `elements`.
     * @param elements - the master array that should contain this array
     * @returns a boolean
     * @example
     * ```
     * [1,2,3].belongs([1,2,3,4]) // true
     * [1,2,3].belongs([3,2,1]) // true
     * [1,2,3].belongs([1,2]) // false
     * ```
     */
    belongs(elements) {
        return this.every($ => elements.includes($));
    }
    //#endregion
    //#region Distinct function
    /**
     * Return an array of unique elements. Shallow equility compare.
     * @returns an array of unique elements
     * @see {@link List.dedup} for in-place version
     * @example
     * ```
     * [1,2,2,2,3,3].unique() // [1,2,3]
     * ```
     */
    unique() {
        return this.create([...new Set(this)]);
    }
    /**
     * Return an array of unique elements. Elements are consider equal if their `mapper` values are equal.
     * The first element with the same `mapper` value is returned.
     * @param mapper - the mapper function for equality check
     * @returns an array of unique elements
     * @example
     * ```
     * [1.1, 1.2, 3.5, 3.4, 6.7].uniqueBy(Math.floor) // [1.1, 3.5, 6.7]
     * ```
     */
    uniqueBy(mapper) {
        let ls = this.create([]);
        let mapped = [];
        for (let ele of this) {
            let map = mapper(ele);
            let found = mapped.findIndex($ => $ === map) !== -1;
            if (found)
                continue;
            ls.push(ele);
            mapped.push(map);
        }
        return ls;
    }
    /**
     * Return an array of unique elements. Deep equility compare is done by `JSON.stringify`.
     * @returns an array of unique elements
     * @example
     * ```
     * [[1],[1],[2]].uniqueDeep() // [[1],[2]]
     * ```
     */
    uniqueDeep() {
        return this.uniqueBy($ => JSON.stringify($));
    }
    /**
     * Return the frequency of `element` in this array. Shallow equility compare.
     * @param element - the element to count
     * @returns the number of occurance
     * @example
     * ```
     * [1,2,2,2,3,3].freq(2) // 3
     * ```
     */
    freq(element) {
        return this.filter($ => $ === element).length;
    }
    /**
     * Return an array of elements from this array which occur once only. Shallow equility compare.
     * @returns array of distinct elements
     * @see {@link List.duplicated} for the opposite
     * @example
     * ```
     * [1,2,2,3,4,4,4].distincts() // [1,3]
     * ```
     */
    distincts() {
        return this.filter($ => this.freq($) === 1);
    }
    /**
     * Return an array of duplicated elements in this array. Shallow equility compare.
     * @returns an array of duplicated elements
     * @see {@link List.distincts} for the opposite
     * @see {@link List.duplicated} for similar
     * @example
     * ```
     * [1,2,2,3,4,4,4].duplicates() // [2,2,4,4,4]
     * ```
     */
    duplicates() {
        let distincts = this.distincts();
        return this.except(distincts);
    }
    /**
     * Return an array of duplicated elements in this array. Shallow equility compare.
     * Each duplicated element will appear once only.
     * @returns an array of duplicated elements
     * @see {@link List.distincts} for the opposite
     * @see {@link List.duplicates} for similar
     * @example
     * ```
     * [1,2,2,3,4,4,4].duplicated() // [2,4]
     * ```
     */
    duplicated() {
        return this.duplicates().unique();
    }
    /**
     * Check if this array has no duplicated element. Shallow equility compare.
     * @returns a boolean
     * @see {@link List.duppy} for the opposite
     * @example
     * ```
     * [1,2,3].dupless() // true
     * [1,2,3,3].dupless() // false
     * ```
     */
    dupless() {
        return [...new Set(this)].length === this.length;
    }
    /**
     * Check if this array has no duplicated element. `JSON.stringify` equality compare.
     * @returns a boolean
     * @example
     * ```
     * [[1],[2],[3]].duplessDeep() // true
     * [[1],[1],[3]].duplessDeep() // false
     * ```
     */
    duplessDeep() {
        return this.uniqueDeep().length === this.length;
    }
    /**
     * Check if this array has duplicated element. Shallow equility compare.
     * @returns a boolean
     * @see {@link List.dupless} for the opposite
     * @example
     * ```
     * [1,2,3].duppy() // false
     * [1,2,3,3].duppy() // true
     * ```
     */
    duppy() {
        return !this.dupless();
    }
    //#endregion
    //#region Distinct in-place
    /**
     * De-duplicate this array, removing all extra duplicated elements. Shallow equility compare.
     * @see {@link List.unique} for functional version
     * @example
     * ```
     * [1,2,3,3].dedup() //-> [1,2,3]
     * ```
     */
    dedup() {
        this.set(this.unique());
    }
    //#endregion
    //#region Filter function
    /**
     * Return an array of elements violating the predicate.
     * @param predicate - the predicate function to check
     * @returns array of violating elements
     * @see {@link Array.filter} for the opposite
     * @see {@link List.reject} for in-place version
     * @example
     * ```
     * [1,2,3,4,5].violate(isEven) // [1,3,5]
     * ```
     */
    violate(predicate) {
        return this.filter($ => !predicate($));
    }
    /**
     * Return an array of the original elements, keeping only those found in the`elements` array.
     * @param elements - array of the elements to keep
     * @returns the new array of kept elements
     * @see {@link List.except} for the opposite
     * @see {@link List.keep} for in-place version
     * @example
     * ```
     * [1,2,3,4,5,5].inside([5,2,1]) // [1,2,5,5]
     * ```
     */
    inside(elements) {
        return this.filter($ => elements.includes($));
    }
    /**
     * Return an array of the original elements, keeping only those NOT found in the`elements` array.
     * @param elements - array of the elements to remove
     * @returns the array with `elements` removed
     * @see {@link List.inside} for the opposite
     * @see {@link List.drop} for in-place version
     * @example
     * ```
     * [1,2,3,4,5,5].except([2,1]) // [3,4,5,5]
     * ```
     */
    except(elements) {
        return this.filter($ => !elements.includes($));
    }
    /**
     * Return an array of elements filtered by index.
     * Similar to {@link Array.filter}, but act on index instead of element.
     * @param predicate - a predicate function on the index numbers
     * @return array of filtered elements
     * @example
     * ```
     * [5,6,7,8,9].filterIndex(isEven) // [5,7,9]
     * ```
     */
    filterIndex(predicate) {
        let ls = this.create([]);
        for (let i = 0; i < this.length; i++) {
            if (predicate(i))
                ls.push(this[i]);
        }
        return ls;
    }
    /**
     * Return the number of elements which satisfy `predicate`.
     * @param predicate - a predicate function
     * @return the number of elements satisfying `predicate`
     * @example
     * ```
     * [1,2,3,4,5].countIf($ => $ > 3) // 2
     * ```
     */
    countIf(predicate) {
        return this.filter(predicate).length;
    }
    //#endregion
    //#region Filter in-place
    /**
     * Only keep the elements that pass the `predicate` in-place.
     * @param predicate - a predicate function that the elements must pass to be kept
     * @see {@link List.reject} for the opposite
     * @see {@link Array.filter} for functional version
     * @example
     * ```
     * [1,2,3,4,5].sieve(isEven) //-> [2,4]
     * ```
     */
    sieve(predicate) {
        this.set((this.filter(predicate)));
    }
    /**
     * Only keep the elements that violates the `predicate` in-place.
     * @param predicate - a predicate function that the elements must violate to be kept
     * @see {@link List.sieve} for the opposite
     * @see {@link List.violate} for functional version
     * @example
     * ```
     * [1,2,3,4,5].reject(isEven) //-> [1,3,5]
     * ```
     */
    reject(predicate) {
        this.set((this.violate(predicate)));
    }
    /**
     * Keep only the elements found in the`elements` array, removing all other elements of this array.
     * @param elements - array of the elements to keep
     * @see {@link List.drop} for the opposite
     * @see {@link List.inside} for functional version
     * @example
     * ```
     * [1,2,3,4,5,5].keep([5,2,1]) //-> [1,2,5,5]
     * ```
     */
    keep(elements) {
        this.set((this.inside(elements)));
    }
    /**
     * Drop all elements found in the`elements` array, keeping only the remaining elements in this array.
     * @param elements - array of the elements to remove
     * @see {@link List.keep} for the opposite
     * @see {@link List.except} for functional version
     * @example
     * ```
     * [1,2,3,4,5,5].drop([2,1]) //-> [3,4,5,5]
     * ```
     */
    drop(elements) {
        this.set((this.except(elements)));
    }
    //#endregion
    //#region Ordering function
    /**
     * Return a reversed version of this array.
     * @returns the reversed array
     * @see {@link Array.reverse} for in-place version
     * @example
     * ```
     * [1,2,3].reversed() // [3,2,1]
     * ```
     */
    reversed() {
        let ls = this.clone();
        ls.reverse();
        return ls;
    }
    /**
     * Return a sorted version of this array, sorted by the elements themselves ascendingly.
     * If elements are all number, sort by value.
     * Else, cast element to string and sort by string.
     * @returns the ascending version of this array
     * @see {@link List.ascend} for in-place version
     * @example
     * ```
     * [2,1,3].ascending() // [1,2,3]
     * ```
     */
    ascending() {
        let ls = this.clone();
        ls.ascend();
        return ls;
    }
    /**
     * Return a sorted version of this array, sorted by the elements themselves descendingly.
     * If elements are all number, sort by value.
     * Else, cast element to string and sort by string.
     * @returns the descendingly version of this array
     * @see {@link List.descend} for in-place version
     * @example
     * ```
     * [2,1,3].descending() // [3,2,1]
     * ```
     */
    descending() {
        let ls = this.clone();
        ls.descend();
        return ls;
    }
    /**
     * Return a sorted version of this array, using the compare functions `compareFns`.
     * @param compareFns - compare functions in descending order of priority
     * @returns the sorted version of this array
     * @example
     * ```
     * [2.5,2.6,1.5,1.6].sorted(
     *      (a,b) => Math.floor(a) - Math.floor(b), // compare integer part only
     *      (a,b) => b-a // descending
     * )
     * // [1.6,1.5,2.6,2.5]
     * ```
     */
    sorted(...compareFns) {
        let ls = this.clone();
        ls.sorts(...compareFns);
        return ls;
    }
    /**
     * Return a sorted version of this array, using the result of the mapper functions.
     * @param mappers - mapper functions in descending order of priority
     * @returns the sorted version of this array
     * @example
     * ```
     * [4,3,2,1].sortedBy(
     *      x => x % 2 , // even first
     *      x => x // identity
     * )
     * // [2,4,1,3]
     * ```
     */
    sortedBy(...mappers) {
        let ls = this.clone();
        ls.sortBy(...mappers);
        return ls;
    }
    /**
     * Return a sorted version of this array, where the most frequent elements come first.
     * @returns the sorted version of this array
     * @example
     * ```
     * [5,6,7,6,6,7,8].sortedByFreq()
     * // [6,6,6,7,7,5,8]
     * ```
     */
    sortedByFreq() {
        return this.sortedBy($ => -this.freq($));
    }
    //#endregion
    //#region Ordering in-place
    /**
     * Sort this array in-place by the elements themselves ascendingly.
     * If elements are all number, sort by value.
     * Else, cast element to string and sort by string.
     * @see {@link List.ascending} for functional version
     * @example
     * ```
     * [2,1,3].ascend() //-> [1,2,3]
     * ```
     */
    ascend() {
        if (this.every($ => typeof $ === 'number')) {
            this.sortBy($ => Number($));
        }
        else {
            this.sortBy($ => String($));
        }
    }
    /**
     * Sort this array in-place by the elements themselves descendingly.
     * If elements are all number, sort by value.
     * Else, cast element to string and sort by string.
     * @see {@link List.descending} for functional version
     * @example
     * ```
     * [2,1,3].descend() //-> [3,2,1]
     * ```
     */
    descend() {
        this.ascend();
        this.reverse();
    }
    /**
     * Arrange the elements in this array in-place.
     * @param newIndices - the new indices of each corresponding element
     * @example
     * ```
     * ['a','b','c','d'].arrage([2,1,3,0]) // ['d','b','a','c']
     * ```
     */
    arrange(newIndices) {
        let newArr = Array(this.length);
        for (let i = 0; i < this.length; i++) {
            const newIndex = newIndices[i];
            newArr[newIndex] = this[i];
        }
        this.set(newArr);
    }
    /**
     * Permute the elements in this array in-place.
     * @param newOrder - the new order of each index
     * @example
     * ```
     * ['a','b','c','d'].permute([2,1,3,0]) // ['c','b','d','a']
     * ```
     */
    permute(newOrder) {
        let newArr = Array(this.length);
        for (let i = 0; i < this.length; i++) {
            const newIndex = newOrder[i];
            newArr[i] = this[newIndex];
        }
        this.set(newArr);
    }
    /**
     * Sort this array in-place, using the compare functions `compareFns`.
     * This is similar to the native `Array.sort()`, but accept multiple compare functions.
     * @param compareFns - compare functions in descending order of priority
     * @example
     * ```
     * [2.5,2.6,1.5,1.6].sorts(
     *      (a,b) => Math.floor(a) - Math.floor(b),
     *          // compare integer part only
     *      (a,b) => b-a
     *          // descending
     * )
     * // -> [1.6,1.5,2.6,2.5]
     * ```
     */
    sorts(...compareFns) {
        function compare(a, b) {
            for (let fn of compareFns) {
                let v = fn(a, b);
                if (v > 0)
                    return 1;
                if (v < 0)
                    return -1;
            }
            return 0;
        }
        this.sort(compare);
    }
    /**
     * Sort this array in-place, using the result of the mapper functions.
     * Note that the mapper functions may be called numerous times, causing performance issue.
     * @param mappers - mapper functions in descending order of priority
     * @example
     * ```
     * [4,3,2,1].sortBy(
     *      x => x % 2 , // even first
     *      x => x // identity
     * )
     * //-> [2,4,1,3]
     * ```
     */
    sortBy(...mappers) {
        const compareFns = mappers.map(m => function (a, b) {
            const va = m(a);
            const vb = m(b);
            return va === vb ? 0 : va > vb ? 1 : -1;
        });
        this.sorts(...compareFns);
    }
    /**
     * Cycle the order of elements in-place by `n` steps.
     * @param n - number to step to cycle
     * @example
     * ```
     * [1,2,3,4,5].cycle(2) // [3,4,5,1,2]
     * [1,2,3,4,5].cycle(-2) // [4,5,1,2,3]
     * ```
     */
    cycle(n) {
        if (this.length === 0)
            return;
        if (n === 0)
            return;
        if (n > 0) {
            for (let i = 1; i <= n; i++) {
                this.push(this.shift());
            }
        }
        if (n < 0) {
            n = Math.abs(n);
            for (let i = 1; i <= n; i++) {
                this.unshift(this.pop());
            }
        }
    }
    //#endregion
    //#region Random function
    /**
     * Return a random valid index of this array.
     * If this array is empty, return `undefined`.
     * @returns a random index
     * @example
     * ```
     * [5,6,7].randomIndex() // 0 or 1 or 2
     * ```
     */
    randomIndex() {
        if (this.length === 0)
            return undefined;
        function rndInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        return rndInt(0, this.length - 1);
    }
    /**
     * Return a random element in this array.
     * If this array is empty, return `undefined`.
     * This array is not mutated.
     * @returns a random element
     * @see {@link List.deal} for in-place version
     * @example
     * ```
     * [5,6,7].draw() // 5 or 6 or 7
     * ```
     */
    draw() {
        if (this.length === 0)
            return undefined;
        return this[this.randomIndex()];
    }
    /**
     * Return a random sample of n elements in this array WITH REPLACEMENT.
     * The returned items are NOT neccessarily unique.
     * @param n - the number of elements requested
     * @returns array of sample elements
     * @example
     * ```
     * [5,6,7].sample(2)
     * // [5,5] or [6,5] or [5,7] or ...
     * ```
     */
    draws(n) {
        if (this.length === 0)
            return undefined;
        let arr = this.create([]);
        for (let i = 0; i < n; i++) {
            arr.push(this.draw());
        }
        return arr;
    }
    /**
     * Return a random sample of n unique elements in this array.
     * If n > this.length, return `undefined`.
     * @param n - the number of elements requested
     * @returns array of sample elements
     * @example
     * ```
     * [5,6,7].sample(2)
     * // [5,6] or [6,5] or [5,7] or ...
     * ```
     */
    sample(n) {
        if (n > this.length)
            return undefined;
        let ls = this.shuffled();
        ls.length = n;
        return ls;
    }
    /**
     * Return a shuffled version of this array.
     * @returns a shuffled array
     * @see {@link List.shuffle} for in-place version
     * @example
     * ```
     * [1,2,3].shuffled() // [2,1,3] or [3,1,2] or ...
     * ```
     */
    shuffled() {
        let ls = this.clone();
        ls.shuffle();
        return ls;
    }
    //#endregion
    //#region Random in-place
    /**
     * Pull a random element from this array.
     * If this array is empty, return `undefined`.
     * This array is mutated.
     * @returns a random element pulled
     * @see {@link List.draw} for functional version
     * @example
     * ```
     * [5,6,7].deal() // 5 or ... //-> [6,7] or ...
     * ```
     */
    deal() {
        if (this.length === 0)
            return undefined;
        return this.pull(this.randomIndex());
    }
    /**
     * Shuffle this array in-place.
     * @see {@link List.shuffled} for functional version
     * @example
     * ```
     * [1,2,3].shuffle() //-> [2,1,3] or [3,1,2] or ...
     * ```
     */
    shuffle() {
        for (let i = this.length - 1; i > 0; i--) {
            let j = Math.floor(Math.random() * (i + 1)); // random from 0 to i
            [this[i], this[j]] = [this[j], this[i]];
        }
    }
    //#endregion
    //#region Combinatorics
    /**
     * Return an array of all combinations of size `k`.
     * @param k - the size of a combination
     * @returns array of all combination of size `k`
     * @example
     * ```
     * [1,2,3].combinations(2) // [[1,2],[1,3],[2,3]]
     * ```
     */
    combinations(k) {
        if (k > this.length || k <= 0)
            return List.of();
        if (k === this.length)
            return List.of(this);
        if (k === 1)
            return List.of(...this.map($ => this.create([$])));
        const combs = List.of();
        let tail_combs = List.of();
        for (let i = 0; i <= this.length - k + 1; i++) {
            let tail = this.after(i);
            tail_combs = tail.combinations(k - 1);
            for (let j = 0; j < tail_combs.length; j++) {
                combs.push(this.create([this[i], ...tail_combs[j]]));
            }
        }
        return combs;
    }
    /**
     * Return an array of all pairs. Equivalent to `this.combinations(2)`.
     * @returns array of all pairs
     * @example
     * ```
     * [1,2,3].pairs() // [[1,2],[1,3],[2,3]]
     * ```
     */
    pairs() {
        return this.combinations(2);
    }
    /**
     * Return an array of all different orderings of the elements.
     * @returns an array of all permutations
     * @example
     * ```
     * [1,2,3].permutations()
     * // [ [1,2,3] , [1,3,2] , [2,1,3]
     * //   [2,3,1] , [3,1,2] , [3,2,1] ]
     * ```
     */
    permutations() {
        if (this.length === 0)
            return List.of();
        if (this.length === 1)
            return List.of(this);
        if (this.length === 2) {
            let [a, b] = this;
            return List.of(this.create([a, b]), this.create([b, a]));
        }
        const perm = List.of();
        for (let i = 0; i < this.length; i++) {
            let clone = this.clone();
            let pulled = clone.pull(i);
            for (let p of clone.permutations()) {
                perm.push(this.create([pulled, ...p]));
            }
        }
        return perm;
    }
    // public cartCross<S>(arr: S[]): List<[T, S]> {
    // }
    //#endregion
    //#region Transform function
    /**
     * Return a zipped array of element-by-element `mapper` results, combining this array and `array`.
     * @param array - the other array to combine
     * @param mapper - the mapper function
     * @returns array of mapper result
     * @example
     * ```
     * [1,2,3].zip([5,7,9],(a,b)=>a+b)
     * // [6,9,12]
     * ```
     */
    zip(array, mapper) {
        let ls = new List();
        for (let i = 0; i < this.length; i++) {
            ls.push(mapper(this[i], array[i]));
        }
        return ls;
    }
    //#endregion
    //#region Metric function
    /**
     * Return the mean of `metric` among all elements.
     * @param metric - the metric to calculate
     * @returns the mean of `metric`
     * @example
     * ```
     * ['a','b','cc','dddd'].meanOf($=>$.length) // 2
     * ```
     */
    meanOf(metric) {
        let metrics = this.map(metric);
        let sum = metrics.reduce((a, b) => a + b, 0);
        return sum / metrics.length;
    }
    /**
     * Return the max value of `metric` among all elements.
     * If `rank` specified, return the Nth max unique value.
     * If this array is empty, returns `NaN`.
     * @param metric - the metric to calculate
     * @param rank - the rank requested
     * @returns the max of `metric`
     * @example
     * ```
     * ['a','bb','ccc'].maxOf($=>$.length) // 3
     * ['a','bb','ccc','ddd'].maxOf($=>$.length, 2) // 2
     * ```
     */
    maxOf(metric, rank = 1) {
        if (this.length === 0)
            return NaN;
        if (rank === 1) {
            return this.map(metric).descending().first();
        }
        else {
            let sortedMetrics = this.map(metric).unique().descending();
            return sortedMetrics[rank - 1] ?? NaN;
        }
    }
    /**
     * Return the min value of `metric` among all elements.
     * If `rank` specified, return the Nth min unique value.
     * If this array is empty, returns `NaN`.
     * @param metric - the metric to calculate
     * @param rank - the rank requested
     * @returns the min of `metric`
     * @example
     * ```
     * ['a','bb','ccc'].minOf($=>$.length) // 1
     * ['a','bb','ccc','d'].minOf($=>$.length, 2) // 2
     * ```
     */
    minOf(metric, rank = 1) {
        if (this.length === 0)
            return NaN;
        if (rank === 1) {
            return this.map(metric).ascending().first();
        }
        else {
            let sortedMetrics = this.map(metric).unique().ascending();
            return sortedMetrics[rank - 1] ?? NaN;
        }
    }
    /**
     * Return an array of elements with the max `metric`.
     * If `rank` specified, use the Nth max.
     * @param metric - the metric to calculate
     * @param rank - the rank requested
     * @returns array of elements with the max `metric`
     * @example
     * ```
     * ['a','bbb','ccc'].maxsBy($=>$.length) // ['bbb','ccc']
     * ['a','bbb','ccc','d'].maxsBy($=>$.length, 2) // ['a','d']
     * ```
     */
    maxsBy(metric, rank = 1) {
        let max = this.maxOf(metric, rank);
        return this.filter($ => metric($) === max);
    }
    /**
     * Return an array of elements with the min `metric`.
     * If `rank` specified, use the Nth min.
     * @param metric - the metric to calculate
     * @param rank - the rank requested
     * @returns array of elements with the min `metric`
     * @example
     * ```
     * ['a','b','ccc'].minsBy($=>$.length) // ['a','b']
     * ['a','b','ccc','ddd'].minsBy($=>$.length, 2) // ['ccc','ddd']
     * ```
     */
    minsBy(metric, rank = 1) {
        let min = this.minOf(metric, rank);
        return this.filter($ => metric($) === min);
    }
    /**
     * Return the first element with the max `metric`.
     * If `rank` specified, use the Nth max.
     * If this array is empty, return `undefined`.
     * @param metric - the metric to calculate
     * @param rank - the rank requested
     * @returns the first element with the max `metric`
     * @example
     * ```
     * ['a','bbb','ccc'].maxBy($=>$.length) // 'bbb'
     * ['a','bbb','ccc','d'].maxBy($=>$.length, 2) // 'a'
     * ```
     */
    maxBy(metric, rank = 1) {
        if (this.length === 0)
            return undefined;
        return this.maxsBy(metric, rank).first();
    }
    /**
     * Return the first element with the min `metric`.
     * If `rank` specified, use the Nth min.
     * If this array is empty, return `undefined`.
     * @param metric - the metric to calculate
     * @param rank - the rank requested
     * @returns the first element with the min `metric`
     * @example
     * ```
     * ['a','b','ccc'].minBy($=>$.length) // 'a'
     * ['a','b','ccc','ddd'].minBy($=>$.length, 2) // 'ccc'
     * ```
     */
    minBy(metric, rank = 1) {
        if (this.length === 0)
            return undefined;
        return this.minsBy(metric, rank).first();
    }
    //#endregion
    //#region Padding function
    /**
     * Return the padded version of this array, padded with the last element.
     * If `length` <= this.length, return a clone of this.
     * @param length - the new length required
     * @returns the padded array
     * @example
     * ```
     * [1,2,3].padTail(5) // [1,2,3,3,3]
     * [1,2,3].padTail(2) // [1,2,3]
     * ```
     */
    padTail(length) {
        if (length <= this.length)
            return this.clone();
        if (this.length === 0)
            return this.clone();
        let last = this.last();
        let clone = this.clone();
        for (let i = clone.length; i < length; i++) {
            clone.push(last);
        }
        return clone;
    }
    /**
     * Return the padded version of this array, padded with the first element.
     * If `length` <= this.length, return a clone of this.
     * @param length - the new length required
     * @returns the padded array
     * @example
     * ```
     * [1,2,3].padHead(5) // [1,1,1,2,3]
     * [1,2,3].padHead(2) // [1,2,3]
     * ```
     */
    padHead(length) {
        if (length <= this.length)
            return this.clone();
        if (this.length === 0)
            return this.clone();
        let first = this.first();
        let clone = this.create([]);
        for (let i = 0; i < length - this.length; i++) {
            clone.push(first);
        }
        clone.push(...this);
        return clone;
    }
    /**
     * Return the padded version of this array, padded in a cyclic way.
     * If `length` <= this.length, return a clone of this.
     * @param length - the new length required
     * @returns the padded array
     * @example
     * ```
     * [1,2,3].padCyclic(5) // [1,2,3,1,2]
     * [1,2,3].padCyclic(2) // [1,2,3]
     * ```
     */
    padCyclic(length) {
        if (length <= this.length)
            return this.clone();
        if (this.length === 0)
            return this.clone();
        let clone = this.create([]);
        for (let i = 0; i < length; i++) {
            clone.push(this.cyclicAt(i));
        }
        return clone;
    }
}
exports.List = List;
/**
 * Return a `List` prefilled with `elements`.
 * @param elements - the elements to put in the `List`
 * @returns a `List` array
 * @example
 * ```
 * list(1,2,3) // List of [1,2,3]
 * list<number>(1,2,3) // specify type
 * ```
 */
function list(...elements) {
    let ls = new List();
    ls.push(...elements);
    return ls;
}
exports.list = list;
/**
 * Return a `List` prefilled with `elements`.
 * @param elements - the elements to put in the `List`
 * @returns a `List` array
 * @example
 * ```
 * toList([1,2,3]) // List of [1,2,3]
 * toList<number>([1,2,3]) // specify type
 * ```
 */
function toList(elements) {
    return list(...elements);
}
exports.toList = toList;
//# sourceMappingURL=list.js.map

/***/ }),

/***/ 9109:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toNumbers = exports.numbers = exports.Numbers = void 0;
const list_1 = __webpack_require__(4140);
const cal_1 = __webpack_require__(2318);
/**
 * A subclass of array. Designed for number array.
 */
class Numbers extends list_1.List {
    /**
     * Return the sum of all numbers.
     * @returns the sum of all numbers
     * @example
     * ```
     * [1,2,3].sum() // 6
     * [].sum() // 0
     * ```
     */
    sum() {
        return this.reduce((a, b) => a + b, 0);
    }
    /**
     * Return the product of all numbers.
     * @returns the product of all numbers
     * @example
     * ```
     * [1,2,3,4].product() // 24
     * [].product() // NaN
     * ```
     */
    product() {
        if (this.length === 0)
            return NaN;
        return this.reduce((a, b) => a * b, 1);
    }
    /**
     * Return the mean of all numbers.
     * @returns the mean of all numbers.
     * @example
     * ```
     * [1,2,3,4].mean() // 2.5
     * [].mean() // NaN
     * ```
     */
    mean() {
        if (this.length === 0)
            return NaN;
        return this.sum() / this.length;
    }
    /**
     * Return the max number.
     * If `rank` is specified, return the Nth unique max number.
     * @param rank - the rank requested
     * @returns the max number
     * @example
     * ```
     * [4,6,5].max() // 6
     * [4,6,5].max(2) // 5
     * ```
     */
    max(rank = 1) {
        if (this.length === 0)
            return NaN;
        if (rank === 1) {
            return Math.max(...this);
        }
        else {
            let desc = this.unique().descending();
            return desc[rank - 1] ?? NaN;
        }
    }
    /**
     * Return the min number.
     * If `rank` is specified, return the Nth unique min number.
     * @param rank - the rank requested
     * @returns the min number
     * @example
     * ```
     * [4,6,5].min() // 4
     * [4,6,5].min(2) // 5
     * ```
     */
    min(rank = 1) {
        if (this.length === 0)
            return NaN;
        if (rank === 1) {
            return Math.min(...this);
        }
        else {
            let asc = this.unique().ascending();
            return asc[rank - 1] ?? NaN;
        }
    }
    /**
     * Return an array of the sum of this array and `nums` element-wise.
     * @param nums - the array or a number to add
     * @returns array of the sums
     * @example
     * ```
     * [1,2,3].add([4,5,6]) // [5,7,9]
     * [1,2,3].add(1) // [2,3,4]
     * ```
     */
    add(nums) {
        if (!Array.isArray(nums))
            nums = Array(this.length).fill(nums);
        let zipped = this.zip(nums, (a, b) => a + b);
        return this.create(zipped);
    }
    /**
     * Return an array of the difference of this array and `nums` element-wise.
     * @param nums - the array or a number to subtract
     * @returns array of the differences
     * @example
     * ```
     * [4,5,6].minus([1,2,3]) // [3,3,3]
     * [4,5,6].minus(1) // [3,4,5]
     * ```
     */
    minus(nums) {
        if (!Array.isArray(nums))
            nums = Array(this.length).fill(nums);
        let zipped = this.zip(nums, (a, b) => a - b);
        return this.create(zipped);
    }
    /**
     * Return an array of the product of this array and `nums` element-wise.
     * @param nums - the array or a number to multiply
     * @returns array of the products
     * @example
     * ```
     * [1,2,3].times([4,5,6]) // [4,10,18]
     * [1,2,3].times(2) // [2,4,6]
     * ```
     */
    times(nums) {
        if (!Array.isArray(nums))
            nums = Array(this.length).fill(nums);
        let zipped = this.zip(nums, (a, b) => a * b);
        return this.create(zipped);
    }
    /**
     * Return an array of the quotient of this array and `nums` element-wise.
     * @param nums - the array or a number to divide
     * @returns array of the quotients
     * @example
     * ```
     * [1,2,3].divide([4,5,6]) // [0.25,0.4,0.5]
     * [1,2,3].divide(2) // [0.5,1,1.5]
     * ```
     */
    divide(nums) {
        if (!Array.isArray(nums))
            nums = Array(this.length).fill(nums);
        let zipped = this.zip(nums, (a, b) => a / b);
        return this.create(zipped);
    }
    /**
     * Return an array of the power of this array raised to `nums` element-wise.
     * @param indices - the array or a number as index
     * @returns array of the powers
     * @example
     * ```
     * [1,2,3].toPower([4,3,2]) // [1,8,9]
     * [1,2,3].toPower(2) // [1,4,9]
     * ```
     */
    toPower(indices) {
        if (!Array.isArray(indices))
            indices = Array(this.length).fill(indices);
        let zipped = this.zip(indices, (a, b) => a ** b);
        return this.create(zipped);
    }
    /**
     * Return an array of the Nth root of this array, with `nths` element-wise.
     * @param nths - the array or a number
     * @returns array of the nth roots
     * @example
     * ```
     * [1,8,9].rootNth([4,3,2]) // [1,2,3]
     * [1,4,9].rootNth(2) // [1,2,3]
     * ```
     */
    rootNth(nths) {
        if (!Array.isArray(nths))
            nths = Array(this.length).fill(nths);
        let zipped = this.zip(nths, (a, b) => a ** (1 / b));
        return this.create(zipped);
    }
    /**
     * Return an array of the squares of this array.
     * @returns array of the squares
     * @example
     * ```
     * [1,2,3].square(2) // [1,4,9]
     * ```
     */
    square() {
        return this.toPower(2);
    }
    /**
     * Return an array of the square roots of this array.
     * @returns array of the square roots
     * @example
     * ```
     * [1,4,9].squareRoot() // [1,2,3]
     * ```
     */
    squareRoot() {
        return this.rootNth(2);
    }
    /**
     * Return an array of the negatives of this array.
     * @returns array of negatives
     * @example
     * ```
     * [1,2,3].negate() // [-1,-2,-3]
     * ```
     */
    negate() {
        return this.times(-1);
    }
    /**
     * Return an array of the absolute values of this array.
     * @returns array of absolute values
     * @example
     * ```
     * [1,-2,-3].abs() // [1,2,3]
     * ```
     */
    abs() {
        const mapped = this.map($ => Math.abs($));
        return this.create(mapped);
    }
    /**
     * Return an array of blurred values.
     * @returns array of blurred values.
     * @example
     * ```
     * [1.99999999999,3.00000000004].blur() // [2,3]
     * ```
     */
    blur() {
        let blurred = this.map($ => (0, cal_1.blur)($));
        return this.create(blurred);
    }
    /**
     * Return an array of fractional form.
     * @returns array of fraction
     * @example
     * ```
     * [0.5,0.75].toFraction() // [[1,2],[3,4]]
     * ```
     */
    toFraction() {
        let fracs = this.map($ => (0, cal_1.toFraction)($));
        return (0, list_1.list)(...fracs);
    }
    /**
     * Return an array of the gaps between every two consecutive numbers in the sorted version of this array.
     * @returns array of gaps
     * @example
     * ```
     * [1,7,3,20].gaps()
     * // sorted as [1,3,7,20] first
     * // so returns [2,4,13]
     * ```
     */
    gaps() {
        const sorted = this.ascending();
        const gaps = this.create([]);
        for (let i = 0; i < this.length - 1; i++) {
            let gap = sorted[i + 1] - sorted[i];
            gaps.push(gap);
        }
        return gaps;
    }
    /**
     * Return an array of the gaps between every two consecutive numbers in the sorted version of this array, in a cyclic sense with `mod`.
     * @param mod - find gap in cyclic sense, joining 0 and `mod`.
     * @returns array of gaps
     * @example
     * ```
     * [1,7,3,20].gapsMod(9)
     * // reduced to [1,7,3,2] first, mod 9
     * // then sorted to [1,2,3,7]
     * // so returns [1,1,4,3]
     * // the last gap 3 is wrapped around
     * ```
     */
    gapsMod(mod) {
        function reduce(x) {
            while (x >= mod) {
                x = x - mod;
            }
            while (x < 0) {
                x = x + mod;
            }
            return x;
        }
        const reduced = this.map(reduce);
        const sorted = reduced.ascending();
        const patched = this.create([...sorted, sorted[0] + mod]);
        return patched.gaps();
    }
    /**
     * Return the HCF of the numbers. Negatives are treated as positives. All zeros are ignored.
     * If contains non-integer, return `NaN`.
     * @returns the HCF
     * @example
     * ```
     * [9,12].hcf() // 3
     * [12,18,24].hcf() // 6
     * [1,5].hcf() // 1
     * [3].hcf() // 3
     * [0,3].hcf() // 3
     * [].hcf() // NaN
     * [4,1.5].hcf() // NaN
     * [0].hcf() // NaN
     * ```
     */
    hcf() {
        if (this.some($ => !Number.isInteger($)))
            return NaN;
        let arr = this.except([0]).abs().unique();
        if (arr.length === 0)
            return NaN;
        if (arr.length === 1)
            return arr[0];
        if (arr.length === 2) {
            let [a, b] = arr;
            while (true) {
                if (a === 0)
                    return b;
                if (b === 0)
                    return a;
                if (a >= b) {
                    a = a % b;
                }
                else {
                    b = b % a;
                }
            }
            return a;
        }
        return arr.reduce((last, now) => this.create([last, now]).hcf());
    }
    /**
     * Return the LCM of the numbers. Negatives are treated as positives. All zeros are ignored.
     * If contains non-integer, return `NaN`.
     * @returns the LCM
     * @example
     * ```
     * [4,6].lcm() // 12
     * [12,18,24].lcm() // 72
     * [1,5].lcm() // 5
     * [3].lcm() // 3
     * [0,3].lcm() // 3
     * [].lcm() // NaN
     * [4,1.5].lcm() // NaN
     * [0].lcm() // NaN
     * ```
     */
    lcm() {
        if (this.some($ => !Number.isInteger($)))
            return NaN;
        let arr = this.except([0]).abs().unique();
        if (arr.length === 0)
            return NaN;
        if (arr.length === 1)
            return arr[0];
        if (arr.length === 2) {
            let [a, b] = arr;
            let hcf = arr.hcf();
            return a * b / hcf;
        }
        return arr.reduce((last, now) => this.create([last, now]).lcm());
    }
    /**
     * Return an array of reduced integral ratio.
     * If some numbers are non-integers, return a clone of this array.
     * @returns array of integral ratio
     * @example
     * ```
     * [2,4,6].reduceRatio() // [1,2,3]
     * [0,4,6].reduceRatio() // [0,2,3]
     * [1.5,2.5,3.5].reduceRatio() // [1.5,2.5,3.5]
     * [sqrt(2),3].reduceRatio()  // [sqrt(2),3]
     * ```
     */
    reduceRatio() {
        if (this.except([0]).length === 0)
            return this.clone();
        if (this.some($ => !Number.isInteger($)))
            return this.clone();
        let HCF = this.hcf();
        return this.divide(HCF).blur();
    }
    /**
     * Return an array of integral ratio.
     * If some numbers can't be converted to fraction, return a clone of this array.
     * @returns array of integral ratio
     * @example
     * ```
     * [2,4,6].ratio() // [1,2,3]
     * [0,4,6].ratio() // [0,2,3]
     * [1.5,2.5,3.5].ratio() // [3,5,7]
     * [sqrt(2),3].ratio()  // [sqrt(2),3]
     * ```
     */
    ratio() {
        if (this.except([0]).length === 0)
            return this.clone();
        if (this.some($ => !(0, cal_1.isRational)($)))
            return this.clone();
        let fracs = this.toFraction();
        let denos = this.create(fracs.map($ => $[1]));
        return this.times(denos.lcm()).blur().reduceRatio();
    }
    /**
     * Return the multiplied factor when applying {@link this.ratio()} on this array.
     * @returns the factor
     * @example
     * ```
     * [2,4,6].ratio() // 0.5
     * [0,4,6].ratio() // 0.5
     * [1.5,2.5,3.5].ratio() // 2
     * [sqrt(2),3].ratio()  // NaN
     * ```
     */
    ratioFactor() {
        if (this.except([0]).length === 0)
            return NaN;
        if (this.some($ => !(0, cal_1.isRational)($)))
            return NaN;
        let clone = this.except([0]);
        let ratioed = clone.ratio();
        return (0, cal_1.blur)(ratioed[0] / clone[0]);
    }
}
exports.Numbers = Numbers;
/**
 * Return a `Numbers` prefilled with `elements`.
 * @param elements - the elements to put in the `Numbers`
 * @returns a `Numbers` array
 * @example
 * ```
 * numbers(1,2,3) // Numbers of [1,2,3]
 * ```
 */
function numbers(...elements) {
    let nums = new Numbers();
    nums.push(...elements);
    return nums;
}
exports.numbers = numbers;
/**
 * Return a `Numbers` prefilled with `elements`.
 * @param elements - the elements to put in the `Numbers`
 * @returns a `Numbers` array
 * @example
 * ```
 * toNumbers([1,2,3]) // Numbers of [1,2,3]
 * ```
 */
function toNumbers(elements) {
    return numbers(...elements);
}
exports.toNumbers = toNumbers;
//# sourceMappingURL=numbers.js.map

/***/ }),

/***/ 2432:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toShape = exports.shape = exports.Shape = void 0;
const list_1 = __webpack_require__(4140);
const numbers_1 = __webpack_require__(9109);
const vector_1 = __webpack_require__(1967);
/**
 * An abstract subclass of array, representing an ordered list of points in 2D or 3D.
 */
class Shape extends list_1.List {
    /**
     * Return an array of mutual distances of all pairs of points.
     * @returns array of mutual distances
     * @example
     * ```
     * let A = [0,0]
     * let B = [3,0]
     * let C = [0,4]
     * [A,B,C].distances() // [3,4,5]
     * ```
     */
    distances() {
        let ds = this.pairs().map(([A, B]) => A.distanceWith(B));
        return (0, numbers_1.numbers)(...ds);
    }
    /**
     * Return an array of distances from `point`.
     * @param point - the point from which to measure distance
     * @returns array of distances
     * @example
     * ```
     * let A = [3,0]
     * let B = [0,4]
     * [A,B].distancesFrom([0,0]) // [3,4]
     * ```
     */
    distancesFrom(point) {
        let ds = this.map($ => $.distanceWith(point));
        return (0, numbers_1.numbers)(...ds);
    }
    /**
     * Return the mean of the points.
     * @returns the mean position
     * @example
     * ```
     * let A = [0,0]
     * let B = [3,0]
     * let C = [0,6]
     * [A,B,C].mean() // [1,2]
     * ```
     */
    mean() {
        let sum = this.reduce((A, B) => A.add(B));
        return sum.divide(this.length);
    }
    /**
     * Return the points translated by `vec`.
     * @param vec - translate by this vector
     * @returns the translated shape
     * @example
     * ```
     * let A = [0,0]
     * let B = [3,0]
     * let C = [0,6]
     * [A,B,C].translate([1,2])
     * // [1,2]
     * // [4,2]
     * // [1,8]
     * ```
     */
    translate(vec) {
        let translated = this.map($ => $.add(vec));
        return this.create(translated);
    }
    /**
     * Return the points scaled by `scale`.
     * @param scale - scale factor
     * @returns the scaled shape
     * @example
     * ```
     * let A = [1,2]
     * let B = [3,0]
     * let C = [0,6]
     * [A,B,C].scale(2)
     * // [2,4]
     * // [6,0]
     * // [0,12]
     * ```
     */
    scale(scale) {
        let scaled = this.map($ => $.times(scale));
        return this.create(scaled);
    }
    /**
     * Return the points extruded towards `vertex` by `scale`.
     * @param vertex - the point to extrude towards
     * @param scale - 1 = do nothing, 0 = all points meet at `vertex`
     * @returns the extruded shape
     * @example
     * ```
     * let A = [10,0]
     * let B = [5,0]
     * let C = [0,20]
     * [A,B,C].extrudeTo([0,0], 0.4)
     * // [4,0]
     * // [2,0]
     * // [0,8]
     * ```
     */
    extrudeTo(vertex, scale) {
        let extruded = this.map($ => $.extrudeTo(vertex, scale));
        return this.create(extruded);
    }
    /**
     * Return the points extruded towards `shape` point-by-point.
     * @param shape - the shape to extrude towards, should have same length as this shape
     * @param scale - 1 = do nothing, 0 = all points meet at `vertex`
     * @returns the extruded shape
     * @exampled
     * ```
     * let A = [10,0]
     * let B = [5,0]
     * let C = [0,20]
     * let X = [0,0]
     * let Y = [-5,0]
     * let Z = [0,10]
     * [A,B,C].extrudeTo([X,Y,Z], 0.4)
     * // [4,0]  extrude A to X
     * // [-1,0]  extrude B to Y
     * // [0,14]  extrude C to Z
     * ```
     */
    extrudeToShape(shape, scale) {
        let extruded = this.map((v, i) => v.extrudeTo(shape[i], scale));
        return this.create(extruded);
    }
}
exports.Shape = Shape;
/**
 * Return a `Shape` prefilled with `elements`.
 * @param elements - the elements to put in the `Shape`
 * @returns a `Shape` array
 * @example
 * ```
 * shape([1,2],[3,4],[5,6]) // Shape of [[1,2],[3,4],[5,6]]
 * ```
 */
function shape(...elements) {
    let shp = new Shape();
    shp.push(...elements.map($ => (0, vector_1.vector)(...$)));
    return shp;
}
exports.shape = shape;
/**
 * Return a `Shape` prefilled with `elements`.
 * @param elements - the elements to put in the `Shape`
 * @returns a `Shape` array
 * @example
 * ```
 * toShape([[1,2],[3,4],[5,6]]) // Shape of [[1,2],[3,4],[5,6]]
 * ```
 */
function toShape(elements) {
    return shape(...elements);
}
exports.toShape = toShape;
//# sourceMappingURL=shape.js.map

/***/ }),

/***/ 8951:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toShape2D = exports.shape2D = exports.Shape2D = void 0;
const shape_1 = __webpack_require__(2432);
const shape3D_1 = __webpack_require__(1443);
const vector3D_1 = __webpack_require__(5830);
const vector2D_1 = __webpack_require__(1534);
/**
 * An subclass of array, representing an ordered list of points in 2D.
 */
class Shape2D extends shape_1.Shape {
    /**
     * Return an array [number,number][] of this shape.
     * @returns an array [x,y][]
     * @example
     * ```
     * [[1,2],[3,4]].toArray() // [[1,2],[3,4]]
     * ```
     */
    toArray() {
        return [...this.map($ => $.toArray())];
    }
    /**
     * Sort the points by measuring their polar angle from the mean.
     * @example
     * ```
     * let A = [0,0]
     * let B = [2,0]
     * let C = [1,1]
     * [A,B,C].sortAroundMean() //-> [C,A,B]
     * ```
     */
    sortAroundMean() {
        let mean = this.mean();
        this.sortBy($ => $.minus(mean).argument());
    }
    /**
     * Return whether this shape is a convex polygon, but not neccessarily ordered.
     * @returns a boolean
     * @example
     * ```
     * [[0,0],[1,0],[0,1]].isConvex() // true
     * [[0,0],[3,0],[1,1],[0,3]].isConvex() // false
     * [[0,0],[1,0]].isConvex() // true if length <= 3
     * ```
     */
    isConvex() {
        if (this.length <= 3)
            return true;
        let clone = this.clone();
        clone.sortAroundMean();
        let cross = [];
        for (let i = 0; i < clone.length; i++) {
            let p1 = clone.cyclicAt(i - 1);
            let p2 = clone.cyclicAt(i);
            let p3 = clone.cyclicAt(i + 1);
            let u = (0, vector2D_1.vec2D)(p1, p2);
            let v = (0, vector2D_1.vec2D)(p2, p3);
            cross.push(u.cross2D(v));
        }
        cross.filter($ => $ !== 0);
        return cross.every($ => $ > 0) || cross.every($ => $ < 0);
    }
    /**
     * Return a Shape3D by erecting this shape into 3D.
     * @param vecX - the new unit vector in x-direction
     * @param vecY - the new unit vector in y-direction
     * @returns erected Shape3D
     * @example
     * ```
     * let [A,B,C] = [[0,0],[1,0],[0,1]]
     * [A,B,C].erect([1,0,0],[0,1,0]) // [[0,0,0],[1,0,0],[0,1,0]]
     * ```
     */
    erect(vecX, vecY) {
        let vx = (0, vector3D_1.vec3D)(vecX);
        let vy = (0, vector3D_1.vec3D)(vecY);
        let erected = this.map($ => {
            let [x, y] = $;
            let vx3D = vx.times(x);
            let vy3D = vy.times(y);
            return vx3D.add(vy3D);
        });
        return (0, shape3D_1.shape3D)(...erected);
    }
}
exports.Shape2D = Shape2D;
/**
 * Return a `Shape2D` prefilled with `elements`.
 * @param elements - the elements to put in the `Shape2D`
 * @returns a `Shape2D` array
 * @example
 * ```
 * shape2D([1,2],[3,4],[5,6]) // Shape2D of [[1,2],[3,4],[5,6]]
 * ```
 */
function shape2D(...elements) {
    let shp = new Shape2D();
    shp.push(...elements.map($ => (0, vector2D_1.vec2D)($)));
    return shp;
}
exports.shape2D = shape2D;
/**
 * Return a `Shape2D` prefilled with `elements`.
 * @param elements - the elements to put in the `Shape2D`
 * @returns a `Shape2D` array
 * @example
 * ```
 * toShape2D([[1,2],[3,4],[5,6]]) // Shape2D of [[1,2],[3,4],[5,6]]
 * ```
 */
function toShape2D(elements) {
    return shape2D(...elements);
}
exports.toShape2D = toShape2D;
//# sourceMappingURL=shape2D.js.map

/***/ }),

/***/ 1443:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toShape3D = exports.shape3D = exports.Shape3D = void 0;
const shape_1 = __webpack_require__(2432);
const shape2D_1 = __webpack_require__(8951);
const vector3D_1 = __webpack_require__(5830);
/**
 * An subclass of array, representing an ordered list of points in 3D.
 */
class Shape3D extends shape_1.Shape {
    /**
     * Return an array [number,number,number][] of this shape.
     * @returns an array [x,y,z][]
     * @example
     * ```
     * [[1,2,3],[3,4,5]].toArray() // [[1,2,3],[3,4,5]]
     * ```
     */
    toArray() {
        return [...this.map($ => $.toArray())];
    }
    /**
     * Return the projection of this 3D shape on the 2D plane, by cabinet projection.
     * @param angle - the viewing angle
     * @param depth - the y-direction depth
     * @returns the projected 2D shape
     * @example
     * ```
     * let A = [0,0,0]
     * let B = [3,4,5]
     * [A,B].projectTo2D(60, 0.5)
     * // [0,0]
     * // [4, 6.732050807568877]
     * ```
     */
    projectTo2D(angle = 60, depth = 0.5) {
        let projected = this.map($ => $.projectTo2D(angle, depth));
        return (0, shape2D_1.shape2D)(...projected);
    }
}
exports.Shape3D = Shape3D;
/**
 * Return a `Shape3D` prefilled with `elements`.
 * @param elements - the elements to put in the `Shape3D`
 * @returns a `Shape3D` array
 * @example
 * ```
 * shape3D([1,2,3],[3,4,5],[5,6,7]) // Shape3D of [[1,2,3],[3,4,5],[5,6,7]]
 * ```
 */
function shape3D(...elements) {
    let shp = new Shape3D();
    shp.push(...elements.map($ => (0, vector3D_1.vec3D)($)));
    return shp;
}
exports.shape3D = shape3D;
/**
 * Return a `Shape3D` prefilled with `elements`.
 * @param elements - the elements to put in the `Shape3D`
 * @returns a `Shape3D` array
 * @example
 * ```
 * toShape3D([[1,2,3],[3,4,5],[5,6,7]]) // Shape3D of [[1,2,3],[3,4,5],[5,6,7]]
 * ```
 */
function toShape3D(elements) {
    return shape3D(...elements);
}
exports.toShape3D = toShape3D;
//# sourceMappingURL=shape3D.js.map

/***/ }),

/***/ 5861:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toSheet = exports.sheet = exports.Sheet = void 0;
const list_1 = __webpack_require__(4140);
/**
 * Check if the item satisfies the criteria.
 * @param item - the item to check
 * @param criteria - the criteria object
 * @returns whether the item satisfies the criteria
 */
function isLike(item, criteria) {
    for (const key in criteria) {
        if (!(key in item))
            return false;
        const actualValue = item[key];
        const requiredValue = criteria[key];
        if (Array.isArray(requiredValue)) {
            // treat as in
            if (!requiredValue.includes(actualValue))
                return false;
        }
        else {
            // treat as equality
            if (actualValue !== requiredValue)
                return false;
        }
    }
    return true;
}
/**
 * Assign properties from source to target.
 * Unlike {...target,...source}, this is safe for objects with methods.
 * @param target - the modified object
 * @param source - the source object
 */
function assignProperty(target, source) {
    for (const k in source) {
        target[k] = source[k];
    }
}
/**
 * A List of object elements.
 * This is designed for ORM use, so methods acts on the properties of object elements.
 */
class Sheet extends list_1.List {
    /**
     * Return an array of elements satisfying `criteria`.
     * @param criteria - the criteria object
     * @returns array of elements satisfying `criteria`
     * @see {@link Sheet.distill} for in-place version
     * @see {@link Sheet.unmatch} for the opposite
     * @example
     * ```
     * let A = {name:'A',age:1}
     * let B = {name:'B',age:2}
     * let C = {name:'C',age:1}
     * let D = {name:'D',age:2}
     * [A,B,C,D].match({age:1}) // [A,C]
     * ```
     */
    match(criteria) {
        return this.filter($ => isLike($, criteria));
    }
    /**
     * Return an array of elements NOT satisfying `criteria`.
     * @param criteria - the criteria object
     * @returns array of elements NOT satisfying `criteria`
     * @see {@link Sheet.discard} for in-place version
     * @see {@link Sheet.match} for the opposite
     * @example
     * ```
     * let A = {name:'A',age:1}
     * let B = {name:'B',age:2}
     * let C = {name:'C',age:1}
     * let D = {name:'D',age:2}
     * [A,B,C,D].unmatch({age:1})
     * // [B,D]
     * ```
     */
    unmatch(criteria) {
        return this.filter($ => !isLike($, criteria));
    }
    /**
     * Return the first item satisfying `criteria`.
     * If not found, return `undefined`.
     * @param criteria - the criteria object
     * @returns the first item satisfying criteria
     * @see {@link Array.find} for similar, but takes a predicate
     * @example
     * ```
     * let A = {name:'A',age:1}
     * let B = {name:'B',age:2}
     * let C = {name:'C',age:1}
     * let D = {name:'D',age:2}
     * [A,B,C,D].get({age:2})
     * // [B]
     * ```
     */
    get(criteria) {
        return this.find($ => isLike($, criteria));
    }
    /**
     * Check if any element satisfies `criteria`.
     * @param criteria - the criteria object
     * @returns a boolean
     * @example
     * ```
     * let A = {name:'A',age:1}
     * let B = {name:'B',age:2}
     * [A,B].exist({age:2}) // true
     * [A,B].exist({age:3}) // false
     * ```
     */
    exist(criteria) {
        return this.get(criteria) !== undefined;
    }
    /**
     * Return the number of elements satisfing `criteria`.
     * @param criteria - the criteria object
     * @returns the number of elements satisfing `criteria`
     * @example
     * ```
     * let A = {name:'A',age:1}
     * let B = {name:'B',age:2}
     * [A,B].count({age:2}) // 1
     * ```
     */
    count(criteria) {
        return this.match(criteria).length;
    }
    /**
     * Return an array of all the values of the `field`.
     * @param field - a key of the element's type
     * @returns an array of all the field's values.
     * @see {@link scan} for unique version
     * @example
     * ```
     * let A = {name:'A',age:1}
     * let B = {name:'B',age:2}
     * let C = {name:'C',age:1}
     * let D = {name:'D',age:2}
     * [A,B,C,D].pluck('name') // ['A','B','C','D']
     * [A,B,C,D].pluck('age') // [1,2,1,2]
     * ```
     */
    pluck(field) {
        const values = this.map($ => $[field]);
        const ls = new list_1.List();
        ls.set(values);
        return ls;
    }
    /**
     * Return an array of all the unique values of the `field`.
     * @param field - a key of the element's type
     * @returns an array of all the unique field's values
     * @see {@link Sheet.pluck} for non-unique version
     * @example
     * ```
     * let A = {name:'A',age:1}
     * let B = {name:'B',age:2}
     * let C = {name:'C',age:1}
     * let D = {name:'D',age:2}
     * [A,B,C,D].scan('name') // ['A','B','C','D']
     * [A,B,C,D].scan('age') // [1,2]
     * ```
     */
    scan(field) {
        return this.pluck(field).unique();
    }
    /**
     * Keep only the elements satisfying `criteria`. This mutates this array.
     * @param criteria - the criteria object
     * @see {@link Sheet.match} for functional version
     * @see {@link Sheet.discard} for the opposite
     * @example
     * ```
     * let A = {name:'A',age:1}
     * let B = {name:'B',age:2}
     * let C = {name:'C',age:1}
     * let D = {name:'D',age:2}
     * [A,B,C,D].distill({age:1})
     * //-> [A,C]
     * ```
     */
    distill(criteria) {
        this.set(this.match(criteria));
    }
    /**
     * Remove the elements satisfying `criteria`. This mutates this array.
     * @param criteria - the criteria object
     * @see {@link Sheet.unmatch} for functional version
     * @see {@link Sheet.distill} for the opposite
     * @example
     * ```
     * let A = {name:'A',age:1}
     * let B = {name:'B',age:2}
     * let C = {name:'C',age:1}
     * let D = {name:'D',age:2}
     * [A,B,C,D].discard({age:1})
     * //-> [B,D]
     * ```
     */
    discard(criteria) {
        this.set(this.unmatch(criteria));
    }
    /**
     * Order the elements by fields.
     * @param ordering - the ordering object
     * @example
     * ```
     * let A = {name:'A',age:1}
     * let B = {name:'B',age:2}
     * let C = {name:'C',age:1}
     * let D = {name:'D',age:2}
     * [A,B,C,D].order({age:true},{name:['D','C','B','A']})
     * //-> [C,A,D,B]
     * ```
     */
    order(...ordering) {
        this.sort((a, b) => {
            for (let ord of ordering) {
                if (typeof ord === 'string') {
                    if (a[ord] > b[ord])
                        return 1;
                    if (a[ord] < b[ord])
                        return -1;
                }
                else {
                    for (let k in ord) {
                        let v = ord[k];
                        if (v === true) {
                            if (a[k] > b[k])
                                return 1;
                            if (a[k] < b[k])
                                return -1;
                        }
                        if (v === false) {
                            if (a[k] < b[k])
                                return 1;
                            if (a[k] > b[k])
                                return -1;
                        }
                        if (Array.isArray(v)) {
                            let i = v.indexOf(a[k]);
                            let j = v.indexOf(b[k]);
                            if (i === -1)
                                i = Infinity;
                            if (j === -1)
                                j = Infinity;
                            if (i > j)
                                return 1;
                            if (i < j)
                                return -1;
                        }
                        break; // only handle the first key
                    }
                }
            }
            return 0;
        });
    }
    /**
     * Merge the `elements` into this array, conflict on `idField`.
     * If id found, update the fields. Else, do nothing.
     * @param elements - the new elements, can be partial only
     * @param idField - the id field to determine which element is which
     * @example
     * ```
     * let A = {name:'A',age:1}
     * let B = {name:'B',age:2}
     * let C = {name:'C',age:1}
     * let D = {name:'D',age:2}
     * let newC = {name:'C',age:3}
     * let newD = {name:'D',age:4}
     * [A,B,C,D].merge([newC,newD],'name')
     * //-> [A,B,{name:'C',age:3},{name:'D',age:4}]
     * ```
     */
    merge(elements, idField) {
        for (const newbie of elements) {
            for (const oldie of this) {
                if (!(idField in oldie))
                    continue;
                if (!(idField in newbie))
                    continue;
                if (newbie[idField] === oldie[idField])
                    assignProperty(oldie, newbie);
            }
        }
    }
    /**
     * Absorb the `elements` into this array, conflict on `idField`.
     * If same id found, update that element.
     * If not found, insert that element.
     * @param elements - the new element
     * @param idField - the id field to determine which element is which
     * @example
     * ```
     * let A = {name:'A',age:1}
     * let B = {name:'B',age:2}
     * let C = {name:'C',age:1}
     * let D = {name:'D',age:2}
     * let newC = {name:'C',age:3}
     * let E = {name:'E',age:4}
     * [A,B,C,D].absorb([newC,E],'name')
     * //-> [A,B,{name:'C',age:3},D,E]
     * ```
     */
    absorb(elements, idField) {
        for (const newbie of elements) {
            let found = false;
            for (const oldie of this) {
                if (!(idField in oldie))
                    continue;
                if (!(idField in newbie))
                    continue;
                if (newbie[idField] === oldie[idField]) {
                    assignProperty(oldie, newbie);
                    found = true;
                }
            }
            if (!found)
                this.push(newbie);
        }
    }
}
exports.Sheet = Sheet;
/**
 * Return a `Sheet` prefilled with `elements`.
 * @param elements - the elements to put in the `Sheet`
 * @returns a `Sheet` array
 * @example
 * ```
 * sheet(A,B) // Sheet of [A,B]
 * ```
 */
function sheet(...elements) {
    let sh = new Sheet();
    sh.push(...elements);
    return sh;
}
exports.sheet = sheet;
/**
 * Return a `Sheet` prefilled with `elements`.
 * @param elements - the elements to put in the `Sheet`
 * @returns a `Sheet` array
 * @example
 * ```
 * toSheet([A,B]) // Sheet of [A,B]
 * ```
 */
function toSheet(elements) {
    return sheet(...elements);
}
exports.toSheet = toSheet;
//# sourceMappingURL=sheet.js.map

/***/ }),

/***/ 1967:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toVector = exports.vector = exports.Vector = void 0;
const numbers_1 = __webpack_require__(9109);
/**
 * An abstract subclass of array, designed for physical vectors of any dimensions.
 */
class Vector extends numbers_1.Numbers {
    /**
     * Return the magnitude of this vector.
     * @returns the magnitude of this vector
     * @example
     * ```
     * [6,8].magnitude() // 10
     * ```
     */
    magnitude() {
        let squares = this.square();
        let sum = squares.sum();
        return Math.sqrt(sum);
    }
    /**
     * Return the unit vector of this vector.
     * @returns the unit vector
     * @example
     * ```
     * [6,8].unit() // [0.6,0.8]
     * ```
     */
    unit() {
        let mag = this.magnitude();
        return this.divide(mag);
    }
    /**
     * Return this vector scaled to the given magnitude.
     * @param magnitude - the required magnitude
     * @returns the scaled vector
     * @example
     * ```
     * [6,8].scaledTo(20) // [12,16]
     * ```
     */
    scaledTo(magnitude) {
        return this.unit().times(magnitude);
    }
    /**
     * Return the dot product of this vector and `vec`.
     * @param vec - the other vector
     * @returns the dot product
     * @example
     * ```
     * [1,2].dot([3,4]) // 1*3+2*4 = 11
     * ```
     */
    dot(vec) {
        let terms = this.zip(vec, (a, b) => a * b);
        return this.create(terms).sum();
    }
    /**
     * Return the angle between this vector and `vec`.
     * @param vec - the other vector
     * @returns the angle between this and `vec`
     * @example
     * ```
     * [1,0].angleWith([0,1]) // 90
     * ```
     */
    angleWith(vec) {
        let m1 = this.magnitude();
        let m2 = this.create(vec).magnitude();
        let dot = this.dot(vec);
        let cos = dot / m1 / m2;
        let angle = Math.acos(cos) * 180 / Math.PI;
        return angle;
    }
    /**
     * Return the vector projection of this vector onto `vec`.
     * @param vec - the vector to project onto
     * @returns the vector projection
     * @example
     * ```
     * [3,4].projectOn([1,0]) // [3,0]
     * ```
     */
    projectOn(vec) {
        let unit = this.create(vec).unit();
        let dot = this.dot(unit);
        return unit.times(dot);
    }
    /**
     * Return the component of this vector normal to `vec`.
     * @param vec - the vector to project onto
     * @returns the normal vector
     * @example
     * ```
     * [3,4].normalTo([1,0]) // [0,4]
     * ```
     */
    normalTo(vec) {
        let parallel = this.projectOn(vec);
        return this.minus(parallel);
    }
    /**
     * Return the distance between the tip of this vector and `vec`.
     * @param vec - the other vector
     * @returns the distance between the tips
     * @example
     * ```
     * [0,3].distanceWith([0,4]) // 5
     * ```
     */
    distanceWith(vec) {
        let d = this.minus(vec);
        return d.magnitude();
    }
    /**
     * Return the vector extruded towards `vertex` by `scale`.
     * @param vertex - the point to extrude towards
     * @param scale - 1 = do nothing, 0 = go to `vertex`
     * @returns the extruded vector
     * @example
     * ```
     * [4,1].extrudeTo([0,1], 0.75) // [3,1]
     * ```
     */
    extrudeTo(vertex, scale) {
        let v = this.create(vertex);
        let d = this.minus(v);
        d = d.times(scale);
        return v.add(d);
    }
}
exports.Vector = Vector;
/**
 * Return a `Vector` prefilled with `elements`.
 * @param elements - the elements to put in the `Vector`
 * @returns a `Vector` array
 * @example
 * ```
 * vector(1,2,3) // Vector of [1,2,3]
 * ```
 */
function vector(...elements) {
    let vec = new Vector();
    vec.push(...elements);
    return vec;
}
exports.vector = vector;
/**
 * Return a `Vector` prefilled with `elements`.
 * @param elements - the elements to put in the `Vector`
 * @returns a `Vector` array
 * @example
 * ```
 * toVector([1,2,3]) // Vector of [1,2,3]
 * ```
 */
function toVector(elements) {
    return vector(...elements);
}
exports.toVector = toVector;
//# sourceMappingURL=vector.js.map

/***/ }),

/***/ 1534:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.vec2D = exports.vector2D = exports.Vector2D = void 0;
const vector_1 = __webpack_require__(1967);
/**
 * A class of 2D vector, implemented as a subclass of array.
 */
class Vector2D extends vector_1.Vector {
    /**
     * Return an array [number,number] of this vector.
     * @returns an array [x,y]
     * @example
     * ```
     * [1,2].toArray() // [1,2]
     * ```
     */
    toArray() {
        let [x, y] = this;
        return [x, y];
    }
    /**
     * Return the argument of this vector.
     * i.e. the polar angle in [0,360).
     * @returns the argument
     * @example
     * ```
     * [1,1].argument() // 45
     * ```
     */
    argument() {
        let [x, y] = this;
        if (x === 0 && y === 0)
            return 0;
        let angle = Math.atan2(y, x) * 180 / Math.PI;
        if (angle < 0)
            angle += 360;
        return angle;
    }
    /**
     * Return the rotated version of this vector about the origin anti-clockwise by `angle`.
     * @param angle - the anti-clockwise angle to rotate
     * @returns the rotated vector
     * @example
     * ```
     * [1,2].rotate(90) // [-2,1]
     * ```
     */
    rotate(angle) {
        let a = angle * Math.PI / 180;
        let s = Math.sin(a);
        let c = Math.cos(a);
        let [x, y] = this;
        let x1 = x * c - y * s;
        let y1 = x * s + y * c;
        return this.create([x1, y1]);
    }
    /**
     * Return the z-component of the cross product between this vector and `vec`.
     * @param vec - the other vector
     * @returns the z-component of the cross product
     * @example
     * ```
     * [1,2].cross2D([3,4]) // 1*4-2*3 = -2
     * ```
     */
    cross2D(vec) {
        let [x1, y1] = this;
        let [x2, y2] = vec;
        return x1 * y2 - y1 * x2;
    }
}
exports.Vector2D = Vector2D;
/**
 * Return a `Vector2D` prefilled with `elements`.
 * @param x - x-component
 * @param y - y-component
 * @returns a `Vector2D` array
 * @example
 * ```
 * vector2D(1,2) // Vector2D of [1,2]
 * ```
 */
function vector2D(x, y) {
    let vec = new Vector2D();
    vec.push(x, y);
    return vec;
}
exports.vector2D = vector2D;
function vec2D(p1, p2) {
    if (p2 === undefined) {
        let [x, y] = p1;
        return vector2D(x, y);
    }
    else {
        let [x1, y1] = p1;
        let [x2, y2] = p2;
        return vector2D(x2 - x1, y2 - y1);
    }
}
exports.vec2D = vec2D;
//# sourceMappingURL=vector2D.js.map

/***/ }),

/***/ 5830:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.vec3D = exports.vector3D = exports.Vector3D = void 0;
const vector_1 = __webpack_require__(1967);
const vector2D_1 = __webpack_require__(1534);
/**
 * A class of 3D vector, implemented as a subclass of array.
 */
class Vector3D extends vector_1.Vector {
    /**
     * Return an array [number,number,number] of this vector.
     * @returns an array [x,y,z]
     * @example
     * ```
     * [1,2,3].toArray() // [1,2,3]
     * ```
     */
    toArray() {
        let [x, y, z] = this;
        return [x, y, z];
    }
    /**
     * Return the cross product of this vector and `vec`.
     * @param vec - the other vector
     * @returns the cross product
     * @example
     * ```
     * [1,0,0].cross([0,1,0]) // [0,0,1]
     * ```
     */
    cross(vec) {
        let [x1, y1, z1] = this;
        let [x2, y2, z2] = vec;
        let x = y1 * z2 - z1 * y2;
        let y = z1 * x2 - x1 * z2;
        let z = x1 * y2 - y1 * x2;
        return this.create([x, y, z]);
    }
    /**
     * Return the rotated version of this vector, about the `axis` vector, by `angle` according to the right-hand grip rule.
     * @param axis - the vector specifying the axis direction
     * @param angle - the angle to rotate
     * @returns the rotated vector
     * @example
     * ```
     * [1,2,3].rotate([0,0,1],90) // [-2,1,3]
     * ```
     */
    rotate(axis, angle) {
        let a = angle * Math.PI / 180;
        let s = Math.sin(a);
        let c = Math.cos(a);
        let k = this.create(axis).unit();
        let term1 = this.times(c);
        let term2 = k.cross(this).times(s);
        let term3 = k.times(k.dot(this)).times(1 - c);
        return term1.add(term2).add(term3);
    }
    /**
     * Return the vector projection of this vector onto the plane formed by `vec1` and `vec2`.
     * @param vec1 - the 1st vector on the plane
     * @param vec2 - the 2nd vector on the plane
     * @returns the vector projection
     * @example
     * ```
     * [3,4,5].projectOnPlane([1,0,0],[0,1,0]) // [3,4,0]
     * ```
     */
    projectOnPlane(vec1, vec2) {
        let normal = this.normalToPlane(vec1, vec2);
        return this.minus(normal);
    }
    /**
     * Return the normal component of this vector to the plane formed by `vec1` and `vec2`.
     * @param vec1 - the 1st vector on the plane
     * @param vec2 - the 2nd vector on the plane
     * @returns the normal vector
     * @example
     * ```
     * [3,4,5].normalToPlane([1,0,0],[0,1,0]) // [0,0,5]
     * ```
     */
    normalToPlane(vec1, vec2) {
        let v1 = this.create(vec1);
        let v2 = this.create(vec2);
        let normal = v1.cross(v2);
        return this.projectOn(normal);
    }
    /**
     * Return the projection of this 3D vector on the 2D plane, by cabinet projection.
     * @param angle - the viewing angle
     * @param depth - the y-direction depth
     * @returns the projected 2D vector
     * @example
     * ```
     * [3, 4, 5].projectTo2D(60, 0.5) // [4, 6.732050807568877]
     * ```
     */
    projectTo2D(angle = 60, depth = 0.5) {
        let a = angle * Math.PI / 180;
        let s = Math.sin(a);
        let c = Math.cos(a);
        let [x, y, z] = this;
        let x_new = x + depth * y * c;
        let y_new = z + depth * y * s;
        return (0, vector2D_1.vector2D)(x_new, y_new);
    }
}
exports.Vector3D = Vector3D;
/**
 * Return a `Vector3D` prefilled with `elements`.
 * @param x - x-component
 * @param y - y-component
 * @param z - z-component
 * @returns a `Vector3D` array
 * @example
 * ```
 * vector3D(1,2,3) // Vector3D of [1,2,3]
 * ```
 */
function vector3D(x, y, z) {
    let vec = new Vector3D();
    vec.push(x, y, z);
    return vec;
}
exports.vector3D = vector3D;
function vec3D(p1, p2) {
    if (p2 === undefined) {
        let [x, y, z] = p1;
        return vector3D(x, y, z);
    }
    else {
        let [x1, y1, z1] = p1;
        let [x2, y2, z2] = p2;
        return vector3D(x2 - x1, y2 - y1, z2 - z1);
    }
}
exports.vec3D = vec3D;
//# sourceMappingURL=vector3D.js.map

/***/ }),

/***/ 5117:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Frame = exports.PEN_QUALITY = void 0;
/**
 * create a canvas of higher resolution
 */
exports.PEN_QUALITY = 3;
class Frame {
    constructor() {
        /**
         * Total width in pixel
         */
        this.wPixel = 0;
        /**
         * Total height in pixel
         */
        this.hPixel = 0;
        /**
         * Min x-coord
         */
        this.xmin = 0;
        /**
         * Max x-coord
         */
        this.xmax = 0;
        /**
         * Min y-coord
         */
        this.ymin = 0;
        /**
         * Max y-coord
         */
        this.ymax = 0;
        /**
         * Distance from axis to number label in pixel.
         */
        this.axisOffset = 5 * exports.PEN_QUALITY;
    }
    /**
     * Set the size of `wPixel` and `hPixel`.
     * @param wPixel - total width in pixel
     * @param hPixel - total height in pixel
     */
    setSize(wPixel, hPixel) {
        this.wPixel = wPixel;
        this.hPixel = hPixel;
    }
    /**
     * Set the `xmin` and `xmax`.
     * @param xRange - `[xmin,xmax]`
     */
    setXRange(xRange) {
        [this.xmin, this.xmax] = xRange;
    }
    /**
     * Set the `ymin` and `ymax`.
     * @param yRange - `[ymin,ymax]`
     */
    setYRange(yRange) {
        [this.ymin, this.ymax] = yRange;
    }
    /**
     * Return the width in x-coord
     * @returns width in x-coord
     */
    xWidth() {
        return this.xmax - this.xmin;
    }
    /**
     * Return the height in y-coord
     * @returns height in y-coord
     */
    yHeight() {
        return this.ymax - this.ymin;
    }
    /**
     * How many pixel is one x-unit
     * @returns number of pixel
     */
    xUnit() {
        return this.wPixel / this.xWidth();
    }
    /**
     * How many pixel is one y-unit
     * @returns number of pixel
     */
    yUnit() {
        return this.hPixel / this.yHeight();
    }
    /**
     * Convert point from coord to pixel.
     * [xCoord, yCoord] -> [xPixel, yPixel]
     * @param point2D - the point in coord
     * @returns the point in pixel
     */
    toPix(point2D) {
        const x = point2D[0];
        const y = point2D[1];
        const xPixel = (x - this.xmin) * this.xUnit();
        const yPixel = (this.ymax - y) * this.yUnit();
        return [xPixel, yPixel];
    }
    /**
     * Convert points from coord to pixel.
     * [xCoord, yCoord][] -> [xPixel, yPixel][]
     * @param point2Ds - the points in coord
     * @returns the points in pixel
     */
    toPixs(point2Ds) {
        return point2Ds.map($ => this.toPix($));
    }
    /**
     * Convert point from pixel to coord.
     * [xPixel, yPixel] -> [xCoord, yCoord]
     * @param pixel2D - the point in pixel
     * @returns the point in coord
     */
    toCoord(pixel2D) {
        const xPixel = pixel2D[0];
        const yPixel = pixel2D[1];
        const x = this.xmin + xPixel / this.xUnit();
        const y = this.ymax - yPixel / this.yUnit();
        return [x, y];
    }
    /**
     * Convert points from pixel to coord.
     * [xPixel, yPixel][] -> [xCoord, yCoord][]
     * @param pixel2Ds - the points in pixel
     * @returns the points in coord
     */
    toCoords(pixel2Ds) {
        return pixel2Ds.map($ => this.toCoord($));
    }
    /**
     * Return the tick positions for x-axis, unit: coord.
     * @param interval - distance between ticks
     * @returns array of tick positions
     */
    xTicks(interval) {
        return getTicks(this.xmin, this.xmax, interval);
    }
    /**
     * Return the tick positions for y-axis, unit: coord.
     * @param interval - distance between ticks
     * @returns array of tick positions
     */
    yTicks(interval) {
        return getTicks(this.ymin, this.ymax, interval);
    }
    /**
     * Return the range object `[xmin, xmax]` in coord.
     * @returns the range of x-coord
     */
    xRange() {
        return [this.xmin, this.xmax];
    }
    /**
     * Return the range object `[ymin, ymax]` in coord.
     * @returns the range of y-coord
     */
    yRange() {
        return [this.ymin, this.ymax];
    }
    /**
     * Return the mid of `xmin` and `xmax`.
     * @returns the mid x-coord
     */
    xCenter() {
        return (this.xmin + this.xmax) / 2;
    }
    /**
     * Return the mid of `ymin` and `ymax`.
     * @returns the mid y-coord
     */
    yCenter() {
        return (this.ymin + this.ymax) / 2;
    }
    /**
     * Return the central point of xy-coord.
     * @returns the central point, unit: coord
     */
    xyCenter() {
        return [this.xCenter(), this.yCenter()];
    }
    /**
     * Return the offset from x-axis to number label, unit: coord.
     * @returns offset in coord
     */
    xOffset() {
        return this.axisOffset / this.yUnit();
    }
    /**
     * Return the offset from y-axis to number label, unit: coord.
     * @returns offset in coord
     */
    yOffset() {
        return this.axisOffset / this.xUnit();
    }
}
exports.Frame = Frame;
/**
 * Return an array of ticks position at `interval` within `[min,max]`.
 * Zero is always a potential tick position.
 * @param min - min value
 * @param max - max value
 * @param interval - distance between ticks
 * @returns array of tick positions
 * @example
 * ```
 * getTicks(2,10,3) // [3,6,9]
 * ```
 */
function getTicks(min, max, interval, includeZero = false) {
    const start = Math.floor(min / interval) * interval;
    const arr = [];
    for (let i = start; i <= max; i += interval) {
        i = parseFloat(i.toPrecision(3));
        if (i === min || i === max)
            continue;
        if (!includeZero && i === 0)
            continue;
        arr.push(i);
    }
    return arr;
}
//# sourceMappingURL=frame.js.map

/***/ }),

/***/ 3933:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Pencil = void 0;
const frame_1 = __webpack_require__(5117);
const support_1 = __webpack_require__(4014);
const cal = __importStar(__webpack_require__(2318));
const list_1 = __webpack_require__(4140);
const shape2D_1 = __webpack_require__(8951);
const vector2D_1 = __webpack_require__(1534);
/**
 * REM_PIXEL is the default font size of the browser, usually 16px
 */
const REM_PIXEL = parseFloat(getComputedStyle(document.documentElement).fontSize);
const SIZE_SCALE = 10;
const DEFAULT_SHADE_ALPHA = 0.1;
const DEFAULT_AXIS_LABEL_OFFSET_PIXEL = 15;
const DEFAULT_XAXIS_MARK_OFFSET_PIXEL = 15;
const DEFAULT_YAXIS_MARK_OFFSET_PIXEL = 10;
const DEFAULT_AXIS_TICK_LENGTH_PIXEL = 5;
class Pencil {
    constructor() {
        /**
         * @deprecated
         */
        this.canvas = document.createElement('canvas');
        /**
         * @deprecated
         */
        this.ctx = this.canvas.getContext("2d");
        this.frame = new frame_1.Frame();
        this.imgStore = null;
        this.INIT_RANGE_ALREADY = false;
        this.INIT_SIZE_ALREADY = false;
        this.backgroundImgUrl = "";
        this.$TEXT_SIZE = 1;
        this.$TEXT_DIR = 0;
        this.$TEXT_LATEX = false;
        this.$LABEL_CENTER = 0;
        this.$ANGLE_MODE = 'normal';
        this.$LENGTH_UNIT = undefined;
        this.$3D_ANGLE = 60;
        this.$3D_DEPTH = 0.5;
        this.$BORDER = 0.2;
        this.$LINE_LABEL = 'auto';
    }
    /**
     * Set the coordinate range of the canvas.
     * @param xRange - [xmin,xmax] in coordinates
     * @param yRange - [ymin,ymax] in coordinates
     */
    initRange(xRange, yRange) {
        this.frame.setXRange(xRange);
        this.frame.setYRange(yRange);
        this.INIT_RANGE_ALREADY = true;
    }
    /**
     * Set the physical size of the canvas.
     * @param width - width of canvas in scaled unit, 1 unit = SIZE_SCALE (=10) * REM_PIXEL * PEN_QUALITY pixel
     * @param height - height of canvas in scaled unit.
     */
    initSize(width, height) {
        if (!this.INIT_RANGE_ALREADY)
            throw '[Pencil Error] Range must be set before Size';
        const wPixel = width * SIZE_SCALE * REM_PIXEL * frame_1.PEN_QUALITY;
        const hPixel = height * SIZE_SCALE * REM_PIXEL * frame_1.PEN_QUALITY;
        let $3D_ANGLE = this.$3D_ANGLE;
        let $3D_DEPTH = this.$3D_DEPTH;
        let $BORDER = this.$BORDER;
        this.canvas.width = wPixel;
        this.canvas.height = hPixel;
        this.frame.setSize(wPixel, hPixel);
        this.setAllDefault();
        this.setProjector3D($3D_ANGLE, $3D_DEPTH);
        this.setBorder($BORDER);
        this.INIT_SIZE_ALREADY = true;
    }
    // /**
    //  * Set a border by fixing the size but extending the range. The original range will be shrinked as a result.
    //  * The aspect-ratio of the original range will be changed.
    //  * @param border - one-sided border width in scaled unit
    //  */
    // protected initInnerBorder(border: number): void {
    //     if (!this.INIT_RANGE_ALREADY)
    //         throw '[Pencil Error] Range must be set before setting range border'
    //     if (!this.INIT_SIZE_ALREADY)
    //         throw '[Pencil Error] Size must be set before setting range border'
    //     const borderPix = border * SIZE_SCALE * REM_PIXEL * PEN_QUALITY;
    //     let [xmin, xmax] = this.frame.xRange()
    //     let [ymin, ymax] = this.frame.yRange()
    //     const wPixel = this.frame.wPixel
    //     const hPixel = this.frame.hPixel
    //     let borderXUnit = (xmax - xmin) * borderPix / (wPixel - 2 * borderPix)
    //     let borderYUnit = (ymax - ymin) * borderPix / (hPixel - 2 * borderPix)
    //     xmin -= borderXUnit
    //     xmax += borderXUnit
    //     ymin -= borderYUnit
    //     ymax += borderYUnit
    //     this.initRange([xmin, xmax], [ymin, ymax]);
    // }
    /**
     * Set a border by extending the range and size. The original image will be unchanged. The size will be bigger.
     */
    initOuterBorder() {
        if (!this.INIT_RANGE_ALREADY)
            throw '[Pencil Error] Range must be set before setting range border';
        if (!this.INIT_SIZE_ALREADY)
            throw '[Pencil Error] Size must be set before setting range border';
        const borderPix = this.$BORDER * SIZE_SCALE * REM_PIXEL * frame_1.PEN_QUALITY;
        let [xmin, xmax] = this.frame.xRange();
        let [ymin, ymax] = this.frame.yRange();
        const wPixel = this.frame.wPixel;
        const hPixel = this.frame.hPixel;
        let borderXUnit = (xmax - xmin) * borderPix / wPixel;
        let borderYUnit = (ymax - ymin) * borderPix / hPixel;
        xmin -= borderXUnit;
        xmax += borderXUnit;
        ymin -= borderYUnit;
        ymax += borderYUnit;
        this.initRange([xmin, xmax], [ymin, ymax]);
        const width = wPixel / SIZE_SCALE / REM_PIXEL / frame_1.PEN_QUALITY;
        const height = hPixel / SIZE_SCALE / REM_PIXEL / frame_1.PEN_QUALITY;
        this.initSize(width + 2 * this.$BORDER, height + 2 * this.$BORDER);
    }
    pj(point) {
        return (0, support_1.force2D)(point, this.$3D_ANGLE, this.$3D_DEPTH);
    }
    pjs(points) {
        return points.map($ => this.pj($));
    }
    setWeight(weight = 1) {
        this.ctx.lineWidth = weight * frame_1.PEN_QUALITY;
    }
    setStrokeColor(color = "black") {
        this.ctx.strokeStyle = color;
    }
    setFillColor(color = "black") {
        this.ctx.fillStyle = color;
    }
    setColor(color = "black") {
        this.setStrokeColor(color);
        this.setFillColor(color);
    }
    setAlpha(opaque = 1) {
        this.ctx.globalAlpha = opaque;
    }
    setDash(segments = []) {
        if (Array.isArray(segments))
            this.ctx.setLineDash(segments.map(x => x * frame_1.PEN_QUALITY));
        if (typeof segments === 'number')
            this.setDash([segments, segments]);
        if (typeof segments === 'boolean')
            this.setDash(segments ? [5, 5] : []);
    }
    setTextAlign(align = "center") {
        this.ctx.textAlign = align;
    }
    setTextBaseline(baseline = "middle") {
        this.ctx.textBaseline = baseline;
    }
    setTextSize(size = 1) {
        this.$TEXT_SIZE = size;
        size = Math.round(size * REM_PIXEL * frame_1.PEN_QUALITY);
        this.ctx.font = this.ctx.font.replace(/\d+px/g, size + 'px');
    }
    setTextItalic(italic = false) {
        if (italic) {
            if (!this.ctx.font.includes('italic'))
                this.ctx.font = 'italic ' + this.ctx.font;
        }
        else {
            this.ctx.font = this.ctx.font.replace('italic ', '');
        }
    }
    setTextDir(angle = 0) {
        this.$TEXT_DIR = angle;
    }
    setTextLatex(on = false) {
        this.$TEXT_LATEX = on;
    }
    setLabelCenter(...centers) {
        if (centers.length === 0) {
            this.$LABEL_CENTER = this.frame.xyCenter();
            return;
        }
        // TEMP, to be deleted
        if (centers[0] === true) {
            this.$LABEL_CENTER = this.frame.xyCenter();
            return;
        }
        if (typeof centers[0] === 'number') {
            this.$LABEL_CENTER = centers[0];
            return;
        }
        if (Array.isArray(centers[0])) {
            let cens = centers;
            this.$LABEL_CENTER = (0, shape2D_1.toShape2D)(this.pjs(cens)).mean().toArray();
        }
    }
    setLengthUnit(text = undefined) {
        this.$LENGTH_UNIT = text;
    }
    setAngleMode(mode = 'normal') {
        this.$ANGLE_MODE = mode;
    }
    setProjector3D(angle = 60, depth = 0.5) {
        this.$3D_ANGLE = angle;
        this.$3D_DEPTH = depth;
    }
    setBorder(border = 0.2) {
        this.$BORDER = border;
    }
    setLineLabel(setting = 'auto') {
        this.$LINE_LABEL = setting;
    }
    setAllDefault() {
        this.setWeight();
        this.setStrokeColor();
        this.setFillColor();
        this.setAlpha();
        this.setDash();
        this.setTextAlign();
        this.setTextBaseline();
        this.ctx.font = 'normal 10px Times New Roman';
        this.setTextSize();
        this.setTextItalic();
        this.setTextDir();
        this.setTextLatex();
        this.setLabelCenter();
        this.setLengthUnit();
        this.setAngleMode();
        this.setProjector3D();
        this.setBorder();
        this.setLineLabel();
    }
    moveTo(point) {
        let pt = this.pj(point);
        let pixels = this.frame.toPix(pt);
        let [x, y] = pixels;
        this.ctx.beginPath();
        this.ctx.moveTo(x, y);
    }
    lineTo(point) {
        let pt = this.pj(point);
        let pixels = this.frame.toPix(pt);
        let [x, y] = pixels;
        this.ctx.lineTo(x, y);
    }
    path(points) {
        if (points.length === 0) {
            this.ctx.beginPath();
            return;
        }
        let pts = this.pjs(points);
        this.moveTo(pts[0]);
        for (let i = 1; i < pts.length; i++) {
            this.lineTo(pts[i]);
        }
    }
    /**
     * Draw a stroke through the `points`.
     */
    drawStroke(points) {
        this.path(points);
        this.ctx.stroke();
    }
    /**
     * Draw a stroke through the `points` to form a closed shape.
     */
    drawShape(points) {
        this.path(points);
        this.ctx.closePath();
        this.ctx.stroke();
    }
    /**
     * Fill the closed shape formed by `points`.
     */
    drawFill(points) {
        this.path(points);
        this.ctx.closePath();
        this.ctx.fill();
    }
    /**
     * Shade the closed shape formed by `points`.
     */
    drawShade(points) {
        let alpha = this.ctx.globalAlpha;
        this.setAlpha(DEFAULT_SHADE_ALPHA);
        this.drawFill(points);
        this.setAlpha(alpha);
    }
    pathArc(center, radiusPixel, angleRange) {
        let cen = this.pj(center);
        let [x, y] = this.frame.toPix(cen);
        let [q1, q2] = angleRange;
        q1 = -q1 / 180 * Math.PI;
        q2 = -q2 / 180 * Math.PI;
        this.ctx.beginPath();
        this.ctx.arc(x, y, radiusPixel * frame_1.PEN_QUALITY, q1, q2, true);
    }
    /**
     * Draw an arc.
     * @param center - the center of the arc's circle
     * @param radiusPixel - the radius in pixel
     * @param angleRange - polar angle range
     */
    drawArc(center, radiusPixel, angleRange) {
        this.pathArc(center, radiusPixel, angleRange);
        this.ctx.stroke();
    }
    /**
     * Draw a filled segment.
     * @param center - the center of the segment's circle
     * @param radiusPixel - the radius in pixel
     * @param angleRange - polar angle range
     */
    drawSegment(center, radiusPixel, angleRange) {
        this.pathArc(center, radiusPixel, angleRange);
        this.ctx.fill();
    }
    /**
     * Draw a circle.
     * @param center - the center of the circle
     * @param radiusPixel - the radius in pixel
     */
    drawCircle(center, radiusPixel) {
        this.drawArc(center, radiusPixel, [0, 360]);
    }
    /**
     * Draw a dot, i.e. a filled circle.
     * @param center - the center of the circle
     * @param radiusPixel - the radius in pixel
     */
    drawDot(center, radiusPixel) {
        this.pathArc(center, radiusPixel, [0, 360]);
        this.ctx.fill();
    }
    pathSectoroid(center, pStart, pEnd, vertices) {
        let v1 = (0, vector2D_1.vec2D)(center, pStart);
        let v2 = (0, vector2D_1.vec2D)(center, pEnd);
        let r = (0, vector2D_1.vec2D)(center, pStart).magnitude();
        let q1 = v1.argument();
        let q2 = v2.argument();
        if (q2 < q1)
            q2 += 360;
        let points = cal.traceCircle(center, r, [q1, q2]);
        this.path([pStart, ...points, pEnd, ...vertices]);
    }
    /**
     * Draw a stroke of a pseudo-sector
     */
    drawStrokeSectoroid(center, pStart, pEnd, vertices) {
        this.pathSectoroid(center, pStart, pEnd, vertices);
        this.ctx.stroke();
    }
    /**
     * Fill a pseudo-sector
     */
    drawFillSectoroid(center, pStart, pEnd, vertices) {
        this.pathSectoroid(center, pStart, pEnd, vertices);
        this.ctx.closePath();
        this.ctx.fill();
    }
    /**
     * Shade a pseudo-sector
     */
    drawShadeSectoroid(center, pStart, pEnd, vertices) {
        let alpha = this.ctx.globalAlpha;
        this.setAlpha(DEFAULT_SHADE_ALPHA);
        this.drawFillSectoroid(center, pStart, pEnd, vertices);
        this.setAlpha(alpha);
    }
    /**
     * Draw an arrow head at `endPoint`.
     * @param startPoint - start point of arrow, used to determine arrow direction only
     * @param endPoint - end point of arrow, where the arrow head will be drawn
     * @param arrowLength - length pixel along the arrow head
     * @param arrowWidth - width pixel across the arrow on one side
     * @param arrowOffset - offset pixel along the arrow
     */
    drawArrowHead(startPoint, endPoint, { arrowLength, arrowWidth, arrowOffset } = {}) {
        let p1 = this.pj(startPoint);
        let p2 = this.pj(endPoint);
        const [x0, y0] = this.frame.toPix(p1);
        const [x1, y1] = this.frame.toPix(p2);
        const dx = x1 - x0;
        const dy = y1 - y0;
        const angle = Math.atan2(dy, dx);
        const length = Math.sqrt(dx * dx + dy * dy);
        // original default
        arrowLength ?? (arrowLength = 10);
        arrowWidth ?? (arrowWidth = arrowLength / 2);
        arrowOffset ?? (arrowOffset = 0);
        arrowLength *= frame_1.PEN_QUALITY;
        arrowWidth *= frame_1.PEN_QUALITY;
        arrowOffset *= frame_1.PEN_QUALITY;
        this.ctx.save();
        this.ctx.translate(x0, y0);
        this.ctx.rotate(angle);
        this.ctx.beginPath();
        this.ctx.moveTo(length + arrowOffset - arrowLength, -arrowWidth);
        this.ctx.lineTo(length + arrowOffset, 0);
        this.ctx.lineTo(length + arrowOffset - arrowLength, arrowWidth);
        this.ctx.stroke();
        this.ctx.setTransform(1, 0, 0, 1, 0, 0);
        this.ctx.restore();
    }
    /**
     * Draw an angle.
     * @param point1 - first point
     * @param vertex - where the angle is
     * @param point2 - second point
     * @param radiusPixels - radius of angle mark in pixel
     */
    drawAngle(point1, vertex, point2, radiusPixel, arcCount, spacePixel) {
        let [A, O, B] = this.pjs([point1, vertex, point2]);
        let mode = this.$ANGLE_MODE;
        if (mode === 'normal' && (0, support_1.IsReflex)(A, O, B))
            [A, B] = [B, A];
        if (mode === 'reflex' && !(0, support_1.IsReflex)(A, O, B))
            [A, B] = [B, A];
        // draw like polar
        let [pixelA, pixelO, pixelB] = this.frame.toPixs([A, O, B]);
        let a1 = (0, support_1.atan2)(-(pixelA[1] - pixelO[1]), pixelA[0] - pixelO[0]);
        let a2 = (0, support_1.atan2)(-(pixelB[1] - pixelO[1]), pixelB[0] - pixelO[0]);
        const mark = (position) => {
            this.drawArc(O, radiusPixel + position * spacePixel, [a1, a2]);
        };
        if (arcCount % 2 === 1) {
            mark(0);
            for (let i = 1; i <= (arcCount - 1) / 2; i++) {
                mark(i);
                mark(-i);
            }
        }
        else {
            for (let i = 1; i <= arcCount / 2; i++) {
                mark(i - 0.5);
                mark(-(i - 0.5));
            }
        }
    }
    /**
     * Draw a right angle.
     * @param point1 - first point
     * @param vertex - where the angle is
     * @param point2 - second point
     * @param sizePixel - size in pixel
     */
    drawRightAngle(point1, vertex, point2, sizePixel) {
        let pts = this.pjs([point1, vertex, point2]);
        let [A, O, B] = this.frame.toPixs(pts);
        let size = sizePixel * frame_1.PEN_QUALITY;
        let angleA = (0, support_1.atan2)(A[1] - O[1], A[0] - O[0]);
        let angleB = (0, support_1.atan2)(B[1] - O[1], B[0] - O[0]);
        let P = [O[0] + size * (0, support_1.cos)(angleA), O[1] + size * (0, support_1.sin)(angleA)];
        let Q = [O[0] + size * (0, support_1.cos)(angleB), O[1] + size * (0, support_1.sin)(angleB)];
        let R = [
            O[0] + size * (0, support_1.cos)(angleA) + size * (0, support_1.cos)(angleB),
            O[1] + size * (0, support_1.sin)(angleA) + size * (0, support_1.sin)(angleB)
        ];
        let draw = (A, B) => {
            this.ctx.beginPath();
            this.ctx.moveTo(A[0], A[1]);
            this.ctx.lineTo(B[0], B[1]);
            this.ctx.stroke();
        };
        draw(P, R);
        draw(Q, R);
    }
    /**
     * Draw parallel mark
     * @param startPoint - start point of the line to decorate
     * @param endPoint -end point of the line to decorate
     * @param sizePixel - size of mark in pixel
     * @param tickCount - how many marks
     * @param spacePixel - space between marks in pixel
     */
    drawParallelMark(startPoint, endPoint, sizePixel, tickCount, spacePixel) {
        let A = this.pj(startPoint);
        let B = this.pj(endPoint);
        let M = (0, support_1.midPoint)(A, B);
        // original default
        sizePixel ?? (sizePixel = 4);
        spacePixel ?? (spacePixel = 6);
        for (let i = 0; i < tickCount; i++) {
            this.drawArrowHead(A, M, {
                arrowLength: sizePixel * 2,
                arrowWidth: sizePixel,
                arrowOffset: i * spacePixel
            });
        }
    }
    /**
     * Draw a tick.
     * @param startPoint - start point of the line to tick, for direction only
     * @param tickPoint - where the tick is
     * @param lengthPixel - one-sided length of the tick in pixel
     * @param offsetPixel - offset of the tick position along the line, in pixel
     */
    drawTick(startPoint, tickPoint, lengthPixel, offsetPixel) {
        let p1 = this.pj(startPoint);
        let p2 = this.pj(tickPoint);
        const [x0, y0] = this.frame.toPix(p1);
        const [x1, y1] = this.frame.toPix(p2);
        const dx = x1 - x0;
        const dy = y1 - y0;
        const angle = Math.atan2(dy, dx);
        const length = Math.sqrt(dx * dx + dy * dy);
        // original default
        lengthPixel ?? (lengthPixel = 5);
        offsetPixel ?? (offsetPixel = 0);
        lengthPixel *= frame_1.PEN_QUALITY;
        offsetPixel *= frame_1.PEN_QUALITY;
        this.ctx.save();
        this.ctx.translate(x0, y0);
        this.ctx.rotate(angle);
        this.ctx.beginPath();
        this.ctx.moveTo(length + offsetPixel, -lengthPixel);
        this.ctx.lineTo(length + offsetPixel, lengthPixel);
        this.ctx.stroke();
        this.ctx.setTransform(1, 0, 0, 1, 0, 0);
        this.ctx.restore();
    }
    /**
     * Draw a vertical tick.
     * @param position - where the tick is, in coordinates.
     * @param lengthPixel - one-sided length of the tick
     */
    drawTickVertical(position, lengthPixel) {
        let p = this.pj(position);
        const [x, y] = this.frame.toPix(p);
        lengthPixel *= frame_1.PEN_QUALITY;
        this.ctx.beginPath();
        this.ctx.moveTo(x, y - lengthPixel);
        this.ctx.lineTo(x, y + lengthPixel);
        this.ctx.stroke();
    }
    /**
     * Draw a horizontal tick.
     * @param position - where the tick is, in coordinates.
     * @param lengthPixel - one-sided length of the tick
     */
    drawTickHorizontal(position, lengthPixel) {
        let p = this.pj(position);
        const [x, y] = this.frame.toPix(p);
        lengthPixel *= frame_1.PEN_QUALITY;
        this.ctx.beginPath();
        this.ctx.moveTo(x - lengthPixel, y);
        this.ctx.lineTo(x + lengthPixel, y);
        this.ctx.stroke();
    }
    /**
     * Draw equal mark at the mid-pt of a line.
     * @param startPoint - start point of the line to decorate
     * @param endPoint - end point of the line to decorate
     * @param lengthPixel - one-sided length of the mark in pixel
     * @param tickCount - how many marks
     * @param spacePixel -space between the marks, in pixel
     */
    drawEqualMark(startPoint, endPoint, lengthPixel, tickCount, spacePixel) {
        let A = this.pj(startPoint);
        let B = this.pj(endPoint);
        let M = (0, support_1.midPoint)(A, B);
        // original default
        lengthPixel ?? (lengthPixel = 5);
        spacePixel ?? (spacePixel = 3);
        const mark = (position) => {
            this.drawTick(A, M, lengthPixel, position * spacePixel);
        };
        if (tickCount % 2 === 1) {
            mark(0);
            for (let i = 1; i <= (tickCount - 1) / 2; i++) {
                mark(i);
                mark(-i);
            }
        }
        else {
            for (let i = 1; i <= tickCount / 2; i++) {
                mark(i - 0.5);
                mark(-(i - 0.5));
            }
        }
    }
    /**
     * Draw a compass.
     * @param center - position of compass center
     * @param xSizePixel - horizontal one-sided length of compass, in pixel
     * @param ySizePixel - vertical one-sided length of compass, in pixel
     * @param arrowLength - length of arrow head
     * @param arrowWidth - one-sided width of arrow head
     */
    drawCompass(center, xSizePixel, ySizePixel, arrowLength, arrowWidth) {
        let cen = this.pj(center);
        let [x, y] = this.frame.toPix(cen);
        xSizePixel ?? (xSizePixel = 17);
        ySizePixel ?? (ySizePixel = 20);
        arrowLength ?? (arrowLength = 7);
        arrowWidth ?? (arrowWidth = arrowLength / 2);
        xSizePixel *= frame_1.PEN_QUALITY;
        ySizePixel *= frame_1.PEN_QUALITY;
        arrowLength *= frame_1.PEN_QUALITY;
        arrowWidth *= frame_1.PEN_QUALITY;
        this.ctx.save();
        this.ctx.translate(x, y);
        this.ctx.beginPath();
        this.ctx.moveTo(0, -ySizePixel);
        this.ctx.lineTo(0, ySizePixel);
        this.ctx.moveTo(-arrowWidth, -ySizePixel + arrowLength);
        this.ctx.lineTo(0, -ySizePixel);
        this.ctx.lineTo(arrowWidth, -ySizePixel + arrowLength);
        this.ctx.stroke();
        this.ctx.moveTo(-xSizePixel, 0);
        this.ctx.lineTo(xSizePixel, 0);
        this.ctx.stroke();
        this.ctx.restore();
    }
    /**
     * Draw a plot of function.
     * @param func - the function to plot
     * @param tStart - start of parameter
     * @param tEnd - end of parameter
     * @param dots - total number of dots along the curve
     */
    drawPlot(func, tStart, tEnd, dots = 1000) {
        let points = cal.trace(func, [tStart, tEnd], dots);
        function outOfRange(num) {
            return num.some($ => Math.abs($) > 10000);
        }
        let filteredPoints = points.map(pt => {
            let [x, y] = pt;
            if (!Number.isFinite(x))
                return null;
            if (!Number.isFinite(y))
                return null;
            if (outOfRange(pt))
                return null;
            return pt;
        });
        let segments = (0, list_1.toList)(filteredPoints).split(null);
        for (let seg of segments) {
            if (seg.length === 0)
                continue;
            this.drawStroke(seg);
        }
    }
    plainTextAtPixel(text, position) {
        text = String(text);
        if (text === '')
            return;
        let [x, y] = position;
        let ANGLE = -this.$TEXT_DIR * Math.PI / 180;
        this.ctx.save();
        this.ctx.translate(x, y);
        this.ctx.rotate(ANGLE);
        this.ctx.fillText(text, 0, 0);
        this.ctx.restore();
    }
    latexAtPixel(text, position) {
        text = String(text);
        if (text === '')
            return;
        let [x, y] = position;
        let ANGLE = -this.$TEXT_DIR * Math.PI / 180;
        let size = Math.round(this.$TEXT_SIZE * REM_PIXEL * frame_1.PEN_QUALITY);
        let color = this.ctx.fillStyle;
        text = `\\color{${color}} ` + text;
        this.ctx.save();
        // CanvasLatex is a library that must be imported from script tag
        // @ts-ignore
        const widget = new CanvasLatex.default(text, { displayMode: true, debugBounds: false, baseSize: size });
        const bounds = widget.getBounds();
        if (bounds !== null) {
            this.ctx.translate(x, y);
            this.ctx.rotate(ANGLE);
            let xTune = 2 - bounds.width / 2 - bounds.x;
            if (this.ctx.textAlign === 'left')
                xTune = 2 - bounds.x;
            if (this.ctx.textAlign === 'right')
                xTune = 2 - bounds.width - bounds.x;
            if (this.ctx.textAlign === 'center')
                xTune = 2 - bounds.width / 2 - bounds.x;
            let yTune = -bounds.y / 2;
            if (this.ctx.textBaseline === 'top')
                yTune = -bounds.y;
            if (this.ctx.textBaseline === 'bottom')
                yTune = -bounds.y - bounds.height;
            if (this.ctx.textBaseline === 'middle')
                yTune = -bounds.y - bounds.height / 2;
            this.ctx.translate(xTune, yTune);
            widget.draw(this.ctx);
        }
        else {
            console.error('[CanvasLatex] bounds === null! This is an unexpected error.');
        }
        this.ctx.restore();
    }
    /**
     * Draw text.
     * @param text - string to draw
     * @param position - where to draw, in coordinates
     * @param xOffset - horizontal offset in pixel, right is positive
     * @param yOffset - vertical offset in pixel, up is positive
     * @returns
     */
    drawText(text, position, xOffset, yOffset) {
        text = String(text);
        if (text === '')
            return;
        let pos = this.pj(position);
        let [x, y] = this.frame.toPix(pos);
        x += xOffset * frame_1.PEN_QUALITY;
        y -= yOffset * frame_1.PEN_QUALITY;
        if (this.$TEXT_LATEX) {
            this.latexAtPixel(text, [x, y]);
        }
        else {
            this.plainTextAtPixel(text, [x, y]);
        }
    }
    /**
     * Find the polar direction between two points, in the pixel world.
     * @param pStart - start point in coordinates
     * @param pEnd - end point in coordinates
     */
    getDirInPixel(pStart, pEnd) {
        let [OPoint, APoint] = this.pjs([pStart, pEnd]);
        let [O, A] = this.frame.toPixs([OPoint, APoint]);
        return (0, support_1.atan2)(-(A[1] - O[1]), A[0] - O[0]);
    }
    /**
     * Find the mid-ray direction given 3 points, in the pixel world.
     * Obey ANGLE_MODE.
     * @param point1 - first point, in coordinates.
     * @param vertex - where the angle is, in coordinates.
     * @param point2 - second point, in coordinates.
     */
    getDirInPixelByAngle(point1, vertex, point2) {
        let [A, O, B] = this.pjs([point1, vertex, point2]);
        let mode = this.$ANGLE_MODE;
        if (mode === 'normal' && (0, support_1.IsReflex)(A, O, B))
            [A, B] = [B, A];
        if (mode === 'reflex' && !(0, support_1.IsReflex)(A, O, B))
            [A, B] = [B, A];
        // draw like polar
        let [pixelA, pixelO, pixelB] = this.frame.toPixs([A, O, B]);
        let a1 = (0, support_1.atan2)(-(pixelA[1] - pixelO[1]), pixelA[0] - pixelO[0]);
        let a2 = (0, support_1.atan2)(-(pixelB[1] - pixelO[1]), pixelB[0] - pixelO[0]);
        if (a2 < a1)
            a2 = a2 + 360;
        return (a1 + a2) / 2;
    }
    /**
     * Find the left or right direction of a line, in the pixel world.
     * Obey LINE_LABEL.
     * If LINE_LABEL is 'auto', then away from LABEL_CENTER.
     * If LINE_LABEL is 'left', then on the left.
     * If LINE_LABEL is 'right', then on the right.
     * @param pStart - start point in coordinates
     * @param pEnd - end point in coordinates
     */
    getDirInPixelByLine(pStart, pEnd) {
        let mode = this.$LINE_LABEL;
        let left = this.getDirInPixel(pStart, pEnd) + 90;
        let right = this.getDirInPixel(pStart, pEnd) - 90;
        if (mode === 'left')
            return left;
        if (mode === 'right')
            return right;
        if (mode === 'auto') {
            let cen = this.$LABEL_CENTER;
            if (typeof cen === 'number')
                return right;
            let p1 = this.pj(pStart);
            let p2 = this.pj(pEnd);
            let v = (0, vector2D_1.vec2D)(p1, p2);
            let leftDistance = v.rotate(90).add(p1).distanceWith(cen);
            let rightDistance = v.rotate(-90).add(p1).distanceWith(cen);
            return leftDistance > rightDistance ? left : right;
        }
        console.warn("$LINE_LABEL must be 'left' | 'right' | 'auto'");
        return right;
    }
    getLabelCenterDirInPixel(point) {
        let pt = this.pj(point);
        let center = this.$LABEL_CENTER;
        if (typeof center === 'number') {
            return center;
        }
        else {
            if (center[0] === pt[0] && center[1] === pt[1])
                return 0;
            return this.getDirInPixel(center, pt);
        }
    }
    getTextWidthInPixel(text) {
        if (this.$TEXT_LATEX) {
            let size = Math.round(this.$TEXT_SIZE * REM_PIXEL * frame_1.PEN_QUALITY);
            let color = this.ctx.fillStyle;
            text = `\\color{${color}} ` + text;
            // @ts-ignore
            const widget = new CanvasLatex.default(text, { displayMode: true, debugBounds: false, baseSize: size });
            const bounds = widget.getBounds();
            if (bounds === null)
                return 0;
            return bounds.width / 2 / frame_1.PEN_QUALITY;
        }
        else {
            return this.ctx.measureText(text).width / 2 / frame_1.PEN_QUALITY;
        }
    }
    getTextWithLengthUnit(text) {
        text = String(text);
        let unit = this.$LENGTH_UNIT;
        if (unit === undefined)
            return text;
        if (this.$TEXT_LATEX) {
            return text + `~\\text{${unit}}`;
        }
        else {
            return text + ' ' + unit;
        }
    }
    /**
     * Draw a text label around a point. The label dodges the point elliptically.
     * @param text - string to write
     * @param position - where to write, in coordinates
     * @param direction - polar angle to dodge, in the visible (pixel world) sense
     * @param radiusPixel - offset distance in pixel
     */
    drawLabel(text, position, direction, radiusPixel) {
        direction ?? (direction = this.getLabelCenterDirInPixel(position));
        let textWidth = this.getTextWidthInPixel(text);
        let xOffset = (radiusPixel + textWidth - 5) * (0, support_1.cos)(direction);
        let yOffset = radiusPixel * (0, support_1.sin)(direction);
        this.drawText(text, position, xOffset, yOffset);
    }
    makePolarAngle(point1, vertex, point2) {
        let [A, O, B] = this.pjs([point1, vertex, point2]);
        let mode = this.$ANGLE_MODE;
        if (mode === 'normal' && (0, support_1.IsReflex)(A, O, B))
            return [point2, vertex, point1];
        if (mode === 'reflex' && !(0, support_1.IsReflex)(A, O, B))
            return [point2, vertex, point1];
        return [point1, vertex, point2];
    }
    /**
     * Find the angle in pixel world. Obey ANGLE_MODE.
     * @param point1 - first point, in coordinates.
     * @param vertex - where the angle is, in coordinates.
     * @param point2 - second point, in coordinates.
     */
    getAngleInPixel(point1, vertex, point2) {
        let [A, O, B] = this.makePolarAngle(point1, vertex, point2);
        let a = this.getDirInPixel(O, A);
        let b = this.getDirInPixel(O, B);
        return a <= b ? b - a : 360 + b - a;
    }
    /**
     * Find the extra pixel allowance when drawing angle arc and angle label for small angles.
     * @param point1 - first point, in coordinates.
     * @param vertex - where the angle is, in coordinates.
     * @param point2 - second point, in coordinates.
     * @param angleThreshold - the max angle under which extra pixel is needed
     * @param pixelPerDegree - extra pixel per degree under the threshold
     */
    getSmallAngleExtraPixel(point1, vertex, point2, angleThreshold, pixelPerDegree) {
        let angle = this.getAngleInPixel(point1, vertex, point2);
        let angleUnderThreshold = Math.max(angleThreshold - angle, 0);
        return angleUnderThreshold * pixelPerDegree;
    }
    /**
     * Get the 4 corners of a circle. For .capture() to parse circle input.
     * @param center - center of circle
     * @param radius - radius of circle
     */
    getCircleCorners(center, radius) {
        let [h, k] = center;
        let r = radius;
        return [
            [h + r, k + r],
            [h + r, k - r],
            [h - r, k + r],
            [h - r, k - r]
        ];
    }
    /**
     * Get the 8 corners of a sphere. For .capture() to parse sphere input.
     * @param center - center of sphere
     * @param radius - radius of sphere
     */
    getSphereCorners(center, radius) {
        let [a, b, c] = center;
        let r = radius;
        return [
            [a + r, b + r, c + r],
            [a + r, b + r, c - r],
            [a + r, b - r, c + r],
            [a + r, b - r, c - r],
            [a - r, b + r, c + r],
            [a - r, b + r, c - r],
            [a - r, b - r, c + r],
            [a - r, b - r, c - r],
        ];
    }
    /**
     * Draw the x-axis.
     */
    drawXAxis() {
        const [xmin, xmax] = this.frame.xRange();
        this.drawStroke([[xmin, 0], [xmax, 0]]);
        this.drawArrowHead([xmin, 0], [xmax, 0]);
    }
    /**
     * Draw the label of x-axis.
     * @param text - string to write
     */
    drawXAxisLabel(text) {
        text = String(text);
        const [xmin, xmax] = this.frame.xRange();
        this.ctx.save();
        this.setTextAlign("right");
        this.setTextBaseline("middle");
        this.drawText(text, [xmax, 0], 0, DEFAULT_AXIS_LABEL_OFFSET_PIXEL);
        this.ctx.restore();
    }
    /**
     * Draw the y-axis.
     */
    drawYAxis() {
        const [ymin, ymax] = this.frame.yRange();
        this.drawStroke([[0, ymin], [0, ymax]]);
        this.drawArrowHead([0, ymin], [0, ymax]);
    }
    /**
     * Draw the label of y-axis.
     * @param text - string to write
     */
    drawYAxisLabel(text) {
        text = String(text);
        const [ymin, ymax] = this.frame.yRange();
        this.ctx.save();
        this.setTextAlign("left");
        this.setTextBaseline("top");
        this.drawText(text, [0, ymax], DEFAULT_AXIS_LABEL_OFFSET_PIXEL, 0);
        this.ctx.restore();
    }
    /**
     * Draw the ticks on x-axis.
     * @param interval - distance between tick, in coordinates.
     */
    drawXAxisTick(interval) {
        for (let x of this.frame.xTicks(interval)) {
            this.drawTickVertical([x, 0], DEFAULT_AXIS_TICK_LENGTH_PIXEL);
        }
    }
    /**
     * Draw the ticks on y-axis.
     * @param interval - distance between tick, in coordinates.
     */
    drawYAxisTick(interval) {
        for (let y of this.frame.yTicks(interval)) {
            this.drawTickHorizontal([0, y], DEFAULT_AXIS_TICK_LENGTH_PIXEL);
        }
    }
    /**
     * Draw the number mark on the ticks on x-axis.
     * @param interval - distance between tick, in coordinates.
     */
    drawXAxisTickMark(interval) {
        this.ctx.save();
        this.setTextItalic();
        this.setTextAlign("center");
        this.setTextBaseline("middle");
        for (let x of this.frame.xTicks(interval)) {
            this.drawText(String(x), [x, 0], 0, -DEFAULT_XAXIS_MARK_OFFSET_PIXEL);
        }
        this.ctx.restore();
    }
    /**
     * Draw the number mark on the ticks on y-axis.
     * @param interval - distance between tick, in coordinates.
     */
    drawYAxisTickMark(interval) {
        this.ctx.save();
        this.setTextItalic();
        this.setTextAlign("right");
        this.setTextBaseline("middle");
        for (let y of this.frame.yTicks(interval)) {
            this.drawText(String(y), [0, y], -DEFAULT_YAXIS_MARK_OFFSET_PIXEL, 0);
        }
        this.ctx.restore();
    }
    /**
     * Draw the vertical grid lines on the x-axis.
     * @param interval - distance between grids, in coordinates.
     */
    drawXAxisGrid(interval) {
        this.ctx.save();
        this.ctx.strokeStyle = "#d3d5db";
        let [ymin, ymax] = this.frame.yRange();
        const drawLine = (x) => {
            this.drawStroke([[x, ymin], [x, ymax]]);
        };
        drawLine(0);
        for (let x of this.frame.xTicks(interval)) {
            drawLine(x);
        }
        this.ctx.restore();
    }
    /**
     * Draw the horizontal grid lines on the y-axis.
     * @param interval - distance between grids, in coordinates.
     */
    drawYAxisGrid(interval) {
        this.ctx.save();
        this.ctx.strokeStyle = "#d3d5db";
        let [xmin, xmax] = this.frame.xRange();
        const drawLine = (y) => {
            this.drawStroke([[xmin, y], [xmax, y]]);
        };
        drawLine(0);
        for (let y of this.frame.yTicks(interval)) {
            drawLine(y);
        }
        this.ctx.restore();
    }
    /**
     * Set the background image url
     * @param url - the url of background image
     */
    setBackgroundImgUrl(url) {
        this.backgroundImgUrl = url;
    }
    /**
     * Return the style attr of img tag needed for adding a background image.
     */
    backgroundImageAttr() {
        if (this.backgroundImgUrl.length === 0)
            return "";
        return ` style="background-image:url('${this.backgroundImgUrl}');background-size:100% 100%;" `;
    }
    /**
     * Return the data url of this image.
     * @param canvas - the main canvas, default to this.canvas.
     */
    toDataUrl(canvas = this.canvas) {
        return canvas.toDataURL();
    }
    /**
     * Return the width in pixel for display, i.e. canvas.width / PEN_QUALITY
     * @param canvas - the main canvas, default to this.canvas.
     */
    displayWidth(canvas = this.canvas) {
        return Math.floor(canvas.width / frame_1.PEN_QUALITY);
    }
    /**
     * Return the height in pixel for display, i.e. canvas.height / PEN_QUALITY
     * @param canvas - the main canvas, default to this.canvas.
     */
    displayHeight(canvas = this.canvas) {
        return Math.floor(canvas.height / frame_1.PEN_QUALITY);
    }
    /**
     * Return a clone of the canvas.
     * @param canvas - the main canvas, default to this.canvas.
     */
    cloneCanvas(canvas = this.canvas) {
        let oldCanvas = canvas;
        //create a new canvas
        let newCanvas = document.createElement('canvas');
        let context = newCanvas.getContext('2d');
        //set dimensions
        newCanvas.width = oldCanvas.width;
        newCanvas.height = oldCanvas.height;
        //apply the old canvas to the new one
        context.drawImage(oldCanvas, 0, 0);
        //return the new canvas
        return newCanvas;
    }
    /**
     * Trim the canvas in-place.
     * @param canvas - the main canvas, default to this.canvas.
     */
    trimCanvas(canvas = this.canvas) {
        function rowBlank(imageData, width, y) {
            for (var x = 0; x < width; ++x) {
                if (imageData.data[y * width * 4 + x * 4 + 3] !== 0)
                    return false;
            }
            return true;
        }
        function columnBlank(imageData, width, x, top, bottom) {
            for (var y = top; y < bottom; ++y) {
                if (imageData.data[y * width * 4 + x * 4 + 3] !== 0)
                    return false;
            }
            return true;
        }
        var ctx = canvas.getContext("2d");
        var width = canvas.width;
        var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        var top = 0, bottom = imageData.height, left = 0, right = imageData.width;
        while (top < bottom && rowBlank(imageData, width, top))
            ++top;
        while (bottom - 1 > top && rowBlank(imageData, width, bottom - 1))
            --bottom;
        while (left < right && columnBlank(imageData, width, left, top, bottom))
            ++left;
        while (right - 1 > left && columnBlank(imageData, width, right - 1, top, bottom))
            --right;
        var trimmed = ctx.getImageData(left, top, right - left, bottom - top);
        canvas.width = trimmed.width;
        canvas.height = trimmed.height;
        ctx.putImageData(trimmed, 0, 0);
    }
    /**
     * Clear this canvas in-place.
     */
    clearCanvas() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
    /**
     * Save the current image for restoring later.
     */
    saveCanvasImg() {
        this.imgStore = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
    }
    /**
     * Restore previously saved image.
     */
    restoreCanvasImg() {
        if (this.imgStore !== null)
            this.ctx.putImageData(this.imgStore, 0, 0);
    }
    /**
     * Equivalent to ctx.save()
     */
    save() {
        this.ctx.save();
    }
    /**
     * Equivalent to ctx.restore()
     */
    restore() {
        this.ctx.restore();
    }
}
exports.Pencil = Pencil;
;
//# sourceMappingURL=pencil.js.map

/***/ }),

/***/ 4014:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.midPoint = exports.atan2 = exports.cos = exports.sin = exports.force2D = exports.IsReflex = exports.AnglePolar = void 0;
const vector2D_1 = __webpack_require__(1534);
const vector3D_1 = __webpack_require__(5830);
/**
 * @return angle AOB, measured anticlockwise
 * ```
 * AnglePolar([1,0],[0,0],[0,2]) // 90
 * AnglePolar([2,2],[1,1],[1,3]) // 45
 * AnglePolar([1,3],[1,1],[2,2]) // 315
 * ```
 */
function AnglePolar(A, O, B) {
    let a = (0, vector2D_1.vec2D)(O, A).argument();
    let b = (0, vector2D_1.vec2D)(O, B).argument();
    return a <= b ? b - a : 360 + b - a;
}
exports.AnglePolar = AnglePolar;
/**
 * @return check if the polar angle AOB is reflex
 * ```
 * IsReflex([1,0],[0,0],[0,2]) // false
 * IsReflex([2,2],[1,1],[1,3]) // false
 * IsReflex([1,3],[1,1],[2,2]) // true
 * ```
 */
function IsReflex(A, O, B) {
    return AnglePolar(A, O, B) > 180;
}
exports.IsReflex = IsReflex;
function force2D(point, angle, depth) {
    if (point.length === 3) {
        return (0, vector3D_1.vec3D)(point).projectTo2D(angle, depth).toArray();
    }
    else {
        return point;
    }
}
exports.force2D = force2D;
function sin(degree) {
    return Math.sin(degree / 180 * Math.PI);
}
exports.sin = sin;
function cos(degree) {
    return Math.cos(degree / 180 * Math.PI);
}
exports.cos = cos;
function atan2(dy, dx) {
    return Math.atan2(dy, dx) * 180 / Math.PI;
}
exports.atan2 = atan2;
function midPoint(A, B) {
    return [(A[0] + B[0]) / 2, (A[1] + B[1]) / 2];
}
exports.midPoint = midPoint;
//# sourceMappingURL=support.js.map

/***/ }),

/***/ 3227:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dice = exports.poker = exports.contract = exports.lin = exports.cal = exports.rein = exports.Rein = exports.reins = exports.toReins = exports.Reins = exports.optimizer = exports.Optimizer = exports.ineq = exports.Pencil = exports.vec3D = exports.vector3D = exports.Vector3D = exports.vec2D = exports.vector2D = exports.Vector2D = exports.toVector = exports.vector = exports.Vector = exports.toSheet = exports.sheet = exports.Sheet = exports.toShape3D = exports.shape3D = exports.Shape3D = exports.toShape2D = exports.shape2D = exports.Shape2D = exports.toShape = exports.shape = exports.Shape = exports.toNumbers = exports.numbers = exports.Numbers = exports.toList = exports.list = exports.List = exports.toData = exports.data = exports.Data = void 0;
var data_1 = __webpack_require__(210);
Object.defineProperty(exports, "Data", ({ enumerable: true, get: function () { return data_1.Data; } }));
Object.defineProperty(exports, "data", ({ enumerable: true, get: function () { return data_1.data; } }));
Object.defineProperty(exports, "toData", ({ enumerable: true, get: function () { return data_1.toData; } }));
var list_1 = __webpack_require__(4140);
Object.defineProperty(exports, "List", ({ enumerable: true, get: function () { return list_1.List; } }));
Object.defineProperty(exports, "list", ({ enumerable: true, get: function () { return list_1.list; } }));
Object.defineProperty(exports, "toList", ({ enumerable: true, get: function () { return list_1.toList; } }));
var numbers_1 = __webpack_require__(9109);
Object.defineProperty(exports, "Numbers", ({ enumerable: true, get: function () { return numbers_1.Numbers; } }));
Object.defineProperty(exports, "numbers", ({ enumerable: true, get: function () { return numbers_1.numbers; } }));
Object.defineProperty(exports, "toNumbers", ({ enumerable: true, get: function () { return numbers_1.toNumbers; } }));
var shape_1 = __webpack_require__(2432);
Object.defineProperty(exports, "Shape", ({ enumerable: true, get: function () { return shape_1.Shape; } }));
Object.defineProperty(exports, "shape", ({ enumerable: true, get: function () { return shape_1.shape; } }));
Object.defineProperty(exports, "toShape", ({ enumerable: true, get: function () { return shape_1.toShape; } }));
var shape2D_1 = __webpack_require__(8951);
Object.defineProperty(exports, "Shape2D", ({ enumerable: true, get: function () { return shape2D_1.Shape2D; } }));
Object.defineProperty(exports, "shape2D", ({ enumerable: true, get: function () { return shape2D_1.shape2D; } }));
Object.defineProperty(exports, "toShape2D", ({ enumerable: true, get: function () { return shape2D_1.toShape2D; } }));
var shape3D_1 = __webpack_require__(1443);
Object.defineProperty(exports, "Shape3D", ({ enumerable: true, get: function () { return shape3D_1.Shape3D; } }));
Object.defineProperty(exports, "shape3D", ({ enumerable: true, get: function () { return shape3D_1.shape3D; } }));
Object.defineProperty(exports, "toShape3D", ({ enumerable: true, get: function () { return shape3D_1.toShape3D; } }));
var sheet_1 = __webpack_require__(5861);
Object.defineProperty(exports, "Sheet", ({ enumerable: true, get: function () { return sheet_1.Sheet; } }));
Object.defineProperty(exports, "sheet", ({ enumerable: true, get: function () { return sheet_1.sheet; } }));
Object.defineProperty(exports, "toSheet", ({ enumerable: true, get: function () { return sheet_1.toSheet; } }));
var vector_1 = __webpack_require__(1967);
Object.defineProperty(exports, "Vector", ({ enumerable: true, get: function () { return vector_1.Vector; } }));
Object.defineProperty(exports, "vector", ({ enumerable: true, get: function () { return vector_1.vector; } }));
Object.defineProperty(exports, "toVector", ({ enumerable: true, get: function () { return vector_1.toVector; } }));
var vector2D_1 = __webpack_require__(1534);
Object.defineProperty(exports, "Vector2D", ({ enumerable: true, get: function () { return vector2D_1.Vector2D; } }));
Object.defineProperty(exports, "vector2D", ({ enumerable: true, get: function () { return vector2D_1.vector2D; } }));
Object.defineProperty(exports, "vec2D", ({ enumerable: true, get: function () { return vector2D_1.vec2D; } }));
var vector3D_1 = __webpack_require__(5830);
Object.defineProperty(exports, "Vector3D", ({ enumerable: true, get: function () { return vector3D_1.Vector3D; } }));
Object.defineProperty(exports, "vector3D", ({ enumerable: true, get: function () { return vector3D_1.vector3D; } }));
Object.defineProperty(exports, "vec3D", ({ enumerable: true, get: function () { return vector3D_1.vec3D; } }));
var pencil_1 = __webpack_require__(3933);
Object.defineProperty(exports, "Pencil", ({ enumerable: true, get: function () { return pencil_1.Pencil; } }));
var inequal_1 = __webpack_require__(3098);
Object.defineProperty(exports, "ineq", ({ enumerable: true, get: function () { return inequal_1.ineq; } }));
var optimizer_1 = __webpack_require__(4903);
Object.defineProperty(exports, "Optimizer", ({ enumerable: true, get: function () { return optimizer_1.Optimizer; } }));
Object.defineProperty(exports, "optimizer", ({ enumerable: true, get: function () { return optimizer_1.optimizer; } }));
var reins_1 = __webpack_require__(8902);
Object.defineProperty(exports, "Reins", ({ enumerable: true, get: function () { return reins_1.Reins; } }));
Object.defineProperty(exports, "toReins", ({ enumerable: true, get: function () { return reins_1.toReins; } }));
Object.defineProperty(exports, "reins", ({ enumerable: true, get: function () { return reins_1.reins; } }));
var rein_1 = __webpack_require__(8195);
Object.defineProperty(exports, "Rein", ({ enumerable: true, get: function () { return rein_1.Rein; } }));
Object.defineProperty(exports, "rein", ({ enumerable: true, get: function () { return rein_1.rein; } }));
exports.cal = __importStar(__webpack_require__(2318));
var linear_1 = __webpack_require__(7533);
Object.defineProperty(exports, "lin", ({ enumerable: true, get: function () { return linear_1.lin; } }));
var contract_1 = __webpack_require__(1566);
Object.defineProperty(exports, "contract", ({ enumerable: true, get: function () { return contract_1.contract; } }));
exports.poker = __importStar(__webpack_require__(2383));
var dice_1 = __webpack_require__(542);
Object.defineProperty(exports, "dice", ({ enumerable: true, get: function () { return dice_1.dice; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 3098:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ineq = void 0;
function toCode(ineq) {
    if (ineq === '\\ge')
        return [true, true];
    if (ineq === '\\gt')
        return [true, false];
    if (ineq === '\\le')
        return [false, true];
    if (ineq === '\\lt')
        return [false, false];
    if (ineq === '>=')
        return [true, true];
    if (ineq === '>')
        return [true, false];
    if (ineq === '<=')
        return [false, true];
    if (ineq === '<')
        return [false, false];
    throw 'cannot recognise ineq symbol!';
}
function toIneq(code) {
    let [g, e] = code;
    if (g && e)
        return '\\ge';
    if (g && !e)
        return '\\gt';
    if (!g && e)
        return '\\le';
    if (!g && !e)
        return '\\lt';
    throw 'cannot recognise code!';
}
class InequalSign {
    constructor(sign) {
        this.code = [true, true];
        this.code = toCode(sign);
    }
    /**
     * Check if me is > or >=.
     */
    greaterThan() {
        return this.code[0];
    }
    /**
     * Check if me is < or <=.
     */
    lessThan() {
        return !this.code[0];
    }
    /**
     * Check if me allow equal.
     */
    canEqual() {
        return this.code[1];
    }
    /**
     * Return me, as `Ineq`.
     */
    print() {
        return toIneq(this.code);
    }
    /**
     * Return the strict version of me, as `Ineq`.
     */
    strict() {
        let [g, e] = this.code;
        return toIneq([g, false]);
    }
    /**
     * Return the loose version of me, as `Ineq`.
     */
    loose() {
        let [g, e] = this.code;
        return toIneq([g, true]);
    }
    /**
     * Return the flip version of me, as `Ineq`.
     */
    flip() {
        let [g, e] = this.code;
        return toIneq([!g, e]);
    }
    /**
     * Check if `a` and `b` satisfy my comparison.
     */
    compare(a, b) {
        let [g, e] = this.code;
        if (g && e)
            return a >= b;
        if (g && !e)
            return a > b;
        if (!g && e)
            return a <= b;
        if (!g && !e)
            return a < b;
        throw 'never, cannot recognise code!';
    }
}
/**
 * Return an `InequalSign` instance.
 */
function ineq(sign) {
    return new InequalSign(sign);
}
exports.ineq = ineq;
//# sourceMappingURL=inequal.js.map

/***/ }),

/***/ 4903:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.optimizer = exports.Optimizer = void 0;
const reins_1 = __webpack_require__(8902);
const list_1 = __webpack_require__(4140);
class Optimizer {
    constructor({ field, feasiblePoints = [] }) {
        this.field = [0, 0, 0];
        this.feasiblePoints = (0, list_1.list)();
        this.field = field;
        this.feasiblePoints = (0, list_1.toList)(feasiblePoints);
    }
    onEdge(point) {
        return (new reins_1.Reins()).onEdge(point);
    }
    /**
     * Evaluate `this.field` at `point`.
     */
    fieldAt(point) {
        const [a, b, c] = this.field;
        const [x, y] = point;
        return a * x + b * y + c;
    }
    /**
     * Return the points (among feasible points) where the field is max.
     * Points onEdge are excluded.
     */
    maxPoints() {
        return this.feasiblePoints
            .maxsBy($ => this.fieldAt($))
            .uniqueDeep()
            .violate($ => this.onEdge($));
    }
    /**
     * Return the points (among feasible points) where the field is min.
     * Points onEdge are excluded.
     */
    minPoints() {
        return this.feasiblePoints
            .minsBy($ => this.fieldAt($))
            .uniqueDeep()
            .violate($ => this.onEdge($));
    }
    /**
     * Return the points (among feasible points) where the field is min or max.
     * Points onEdge are excluded.
     */
    optimalPoints(max) {
        return max ? this.maxPoints() : this.minPoints();
    }
    /**
     * Return the max field value among feasible points.
     * Points onEdge are excluded.
     */
    max() {
        let pts = this.maxPoints();
        if (pts.length === 0)
            return null;
        return this.fieldAt(pts[0]);
    }
    /**
     * Return the min field value among feasible points.
     * Points onEdge are excluded.
     */
    min() {
        let pts = this.minPoints();
        if (pts.length === 0)
            return null;
        return this.fieldAt(pts[0]);
    }
    /**
     * Return the min or max field value among feasible points.
     * Points onEdge are excluded.
     */
    optimal(max) {
        return max ? this.max() : this.min();
    }
}
exports.Optimizer = Optimizer;
/**
 * Return a `Optimizer` instance.
 * @example
 * ```
 * optimizer({
 *    field: [1,2,3],
 *    feasiblePoints: [[0,0],[1,0],[0,1]]
 * })
 * ```
 */
function optimizer({ field, feasiblePoints = [] }) {
    return new Optimizer({ field, feasiblePoints });
}
exports.optimizer = optimizer;
//# sourceMappingURL=optimizer.js.map

/***/ }),

/***/ 8195:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rein = exports.Rein = void 0;
const cal_1 = __webpack_require__(2318);
const inequal_1 = __webpack_require__(3098);
class Rein {
    constructor(constraint) {
        this.constraint = constraint;
    }
    clone() {
        return new Rein(this.constraint);
    }
    /**
     * Check if this constraint contains `point`.
     */
    contains(point) {
        let [a, b, i, c] = this.constraint;
        let [x, y] = point;
        return (0, inequal_1.ineq)(i).compare(a * x + b * y, c);
    }
    /**
     * Check if me can equal.
     */
    canEqual() {
        let [a, b, i, c] = this.constraint;
        return (0, inequal_1.ineq)(i).canEqual();
    }
    /**
     * Return a strict version of this constraint.
     */
    strict() {
        let [a, b, i, c] = this.constraint;
        let j = (0, inequal_1.ineq)(i).strict();
        return new Rein([a, b, j, c]);
    }
    /**
     * Return a loose version of this constraint.
     */
    loose() {
        let [a, b, i, c] = this.constraint;
        let j = (0, inequal_1.ineq)(i).loose();
        return new Rein([a, b, j, c]);
    }
    /**
     * Return a flipped version of this constraint.
     */
    flip() {
        let [a, b, i, c] = this.constraint;
        let j = (0, inequal_1.ineq)(i).flip();
        return new Rein([a, b, j, c]);
    }
    /**
     * Return the intersection point of this and `another`.
     * If parallel, return `undefined`.
     */
    intersectWith(another) {
        let [a1, b1, i1, c1] = this.constraint;
        let [a2, b2, i2, c2] = another.constraint;
        if (a1 / b1 === a2 / b2)
            return undefined;
        return (0, cal_1.crammer)(a1, b1, c1, a2, b2, c2);
    }
    /**
     * Return a clone or a flipped version.
     */
    shake() {
        return Math.random() > 0.5 ? this.clone() : this.flip();
    }
    /**
     * Return Linear form object from constraint.
     */
    toLinear() {
        let [a, b, i, c] = this.constraint;
        return [a, b, -c];
    }
    /**
     * Return Standard form object from constraint.
     */
    toStandard() {
        let [a, b, i, c] = this.constraint;
        return [a, b, c];
    }
}
exports.Rein = Rein;
/**
 * Return a `Rein` instance.
 * @param constraint - the constraint to represent
 * @returns a `Rein` instance
 * @example
 * ```
 * rein([1,2,'<',3])
 * ```
 */
function rein(constraint) {
    return new Rein(constraint);
}
exports.rein = rein;
//# sourceMappingURL=rein.js.map

/***/ }),

/***/ 8902:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toReins = exports.reins = exports.Reins = void 0;
const rein_1 = __webpack_require__(8195);
const list_1 = __webpack_require__(4140);
const shape2D_1 = __webpack_require__(8951);
const vector2D_1 = __webpack_require__(1534);
/**
 * A subclass of array. Designed as a set of constraints.
 */
class Reins extends list_1.List {
    constructor() {
        super(...arguments);
        this.EDGE = 100;
        this.EDGE_CONSTRAINTS = [
            new rein_1.Rein([1, 0, "<=", this.EDGE]),
            new rein_1.Rein([1, 0, ">=", -this.EDGE]),
            new rein_1.Rein([0, 1, "<=", this.EDGE]),
            new rein_1.Rein([0, 1, ">=", -this.EDGE])
        ];
    }
    fullConstraints() {
        let cons = this.clone();
        cons.push(...this.EDGE_CONSTRAINTS);
        return cons;
    }
    /**
     * Return me as array of `Constraint`.
     */
    constraints() {
        return this.map($ => $.constraint);
    }
    onEdge(point) {
        let [x, y] = point;
        return Math.abs(x) + 1 >= this.EDGE || Math.abs(y) + 1 >= this.EDGE;
    }
    /**
     * Check if `point` satisfy every constraint.
     */
    contains(point) {
        return this.every($ => $.contains(point));
    }
    /**
     * Check if `point` loosely satisfy every constraint.
     */
    looseContains(point) {
        return this.map($ => $.loose()).every($ => $.contains(point));
    }
    /**
     * Return the vertices of the feasible polygon, including EDGE points.
     */
    polygon() {
        let cons = this.fullConstraints();
        let vs = (0, shape2D_1.shape2D)();
        for (let i = 0; i < cons.length; i++) {
            for (let j = i + 1; j < cons.length; j++) {
                let p = cons[i].intersectWith(cons[j]);
                if (p === undefined)
                    continue;
                let others = cons.clone();
                others.pull(j);
                others.pull(i);
                if (others.looseContains(p))
                    vs.push((0, vector2D_1.vec2D)(p));
            }
        }
        vs = vs.uniqueDeep();
        vs.sortAroundMean();
        return vs.toArray();
    }
    /**
     * Return the vertices of the feasible region, excluding EDGE points.
     */
    vertices() {
        return this.polygon().filter($ => !this.onEdge($));
    }
    /**
     * Check if the feasible region is bounded.
     */
    isBounded() {
        return this.polygon().every($ => !this.onEdge($));
    }
    /**
     * Check if this set of constraints has any solution at all.
     */
    isConsistent() {
        return this.polygon().length > 2;
    }
    /**
     * Return all the integral points inside the feasible polygon.
     */
    integrals() {
        let vs = (0, list_1.toList)(this.polygon());
        let ymax = Math.ceil(vs.maxOf(([x, y]) => y));
        let xmax = Math.ceil(vs.maxOf(([x, y]) => x));
        let xmin = Math.floor(vs.minOf(([x, y]) => x));
        let ymin = Math.floor(vs.minOf(([x, y]) => y));
        let points = [];
        for (let i = xmin; i <= xmax; i++) {
            for (let j = ymin; j <= ymax; j++) {
                let p = [i, j];
                if (this.contains(p))
                    points.push(p);
            }
        }
        return points;
    }
    /**
     * Return a shaked version of me.
     */
    shake() {
        let cons = this.map($ => $.shake());
        return this.create(cons);
    }
}
exports.Reins = Reins;
/**
 * Return a `Reins` prefilled with `constraints`.
 * @param constraints - the constraints to put in the `Numbers`
 * @returns a `Reins` array
 * @example
 * ```
 * reins([1,2,'<',3],[4,5,'>',6])
 * ```
 */
function reins(...constraints) {
    let cs = new Reins();
    cs.push(...constraints.map($ => new rein_1.Rein($)));
    return cs;
}
exports.reins = reins;
/**
 * Return a `Reins` prefilled with `constraints`.
 * @param constraints - the constraints to put in the `Reins`
 * @returns a `Reins` array
 * @example
 * ```
 * toReins([[1,2,'<',3],[4,5,'>',6]])
 * ```
 */
function toReins(constraints) {
    return reins(...constraints);
}
exports.toReins = toReins;
//# sourceMappingURL=reins.js.map

/***/ }),

/***/ 2318:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.crammer = exports.traceCircle = exports.trace = exports.range = exports.nPr = exports.nCr = exports.factorial = exports.primeFactors = exports.primes = exports.isPrime = exports.toSurd = exports.isRational = exports.toFraction = exports.logFloor = exports.logCeil = exports.mantissa = exports.e = exports.fix = exports.round = exports.dp = exports.sigfig = exports.eq = exports.correct = exports.blur = void 0;
const decimal_js_1 = __webpack_require__(3776);
/**
 * The number of significant digits used in {@link blur}.
 */
const STANDARD_SIGFIG = 14;
/**
 * Return the blurred value to avoid things like 0.300000000004.
 * If blurring can reduce the number of sigfig by 5 or more, return the blurred value; else, return the original value.
 * @param num - the number to blur
 * @returns the blurred number
 * @example
 * ```
 * blur(0.1+0.2) // 0.3
 * ```
 */
function blur(num) {
    let n = parseFloat(num.toPrecision(STANDARD_SIGFIG));
    return sigfig(n) <= STANDARD_SIGFIG - 5 ? n : num;
}
exports.blur = blur;
/**
 * Return the deep-blurred value for checking things like integer and equality. This is necessary for comparing numbers that are blurred before.  Use 2-digit less accurate that {@link blur}. Unlike {@link blur}, this blurs `num` regardless of the reduction in number of sigfig.
 * @param num - the number to blur
 * @return the blurred number
 * @example
 * ```
 * correct(0.1+0.2) // 0.3
 * ```
 */
function correct(num) {
    return parseFloat(num.toPrecision(STANDARD_SIGFIG - 2));
}
exports.correct = correct;
/**
 * Check if the two numbers are equal if deep-blurred by {@link correct}.
 * @param a - the 1st number
 * @param b - the 2nd number
 * @returns - a boolean
 * @example
 * ```
 * eq(0.1+0.2, 0.3) // true
 * ```
 */
function eq(a, b) {
    return correct(a) === correct(b);
}
exports.eq = eq;
/**
 * Return the number of significant figures of `num`.
 * @param num - the number
 * @returns the number of sigfig
 * @example
 * ```
 * sigfig(1.234) // 4
 * ```
 */
function sigfig(num) {
    return (new decimal_js_1.Decimal(num)).precision(false);
}
exports.sigfig = sigfig;
;
/**
 * Return the number of decimal places of `num`.
 * @param num - the number
 * @returns the number of decimal places
 * @example
 * ```
 * dp(1.234) // 3
 * ```
 */
function dp(num) {
    return (new decimal_js_1.Decimal(num)).decimalPlaces();
}
exports.dp = dp;
;
/**
 * Return `num` rounded to `sigfig`.
 * @param num - the number to round
 * @param sigfig - the sigfig requested
 * @returns the rounded number
 * @example
 * ```
 * round(1.2345,4).off() // 1.235
 * round(1.2344,4).up() // 1.235
 * round(1.2345,4).down() // 1.234
 * ```
 */
function round(num, sigfig = 3) {
    function exec(mode) {
        return (new decimal_js_1.Decimal(num))
            .toSignificantDigits(sigfig, mode)
            .toNumber();
    }
    return {
        off: () => exec(decimal_js_1.Decimal.ROUND_HALF_UP),
        up: () => exec(decimal_js_1.Decimal.ROUND_UP),
        down: () => exec(decimal_js_1.Decimal.ROUND_DOWN),
    };
}
exports.round = round;
/**
 * Return `num` rounded to `dp`.
 * @param num - the number to round
 * @param dp - the decimal place requested
 * @returns the rounded number
 * @example
 * ```
 * fix(1.2345,3).off() // 1.235
 * fix(1.2344,3).up() // 1.235
 * fix(1.2345,3).down() // 1.234
 * ```
 */
function fix(num, dp = 0) {
    function exec(mode) {
        return (new decimal_js_1.Decimal(num))
            .toNearest(Number('1e' + String(-dp)), mode)
            .toNumber();
    }
    return {
        off: () => exec(decimal_js_1.Decimal.ROUND_HALF_UP),
        up: () => exec(decimal_js_1.Decimal.ROUND_UP),
        down: () => exec(decimal_js_1.Decimal.ROUND_DOWN),
    };
}
exports.fix = fix;
/**
 * Return the exponent part of `num`.
 * @param num - the number
 * @returns the exponent part
 * @example
 * ```
 * e(1234) // 3
 * ```
 */
function e(num) {
    return Number(num.toExponential().split('e')[1]);
}
exports.e = e;
/**
 * Return the mantissa part of `num`.
 * @param num - the number
 * @returns the mantissa part
 * @example
 * ```
 * mantissa(1234) // 1.234
 * ```
 */
function mantissa(num) {
    return Number(num.toExponential().split('e')[0]);
}
exports.mantissa = mantissa;
/**
 * Return the ceil value of `num` in its order of magnitude.
 * @param num - the number
 * @returns the ceil within order of magnitude
 * @example
 * ```
 * logCeil(1234) // 10000
 * ```
 */
function logCeil(num) {
    let exp = e(num) + 1;
    return Number('1e' + exp);
}
exports.logCeil = logCeil;
/**
 * Return the floor value of `num` in its order of magnitude.
 * @param num - the number
 * @returns the floor within order of magnitude
 * @example
 * ```
 * logCeil(1234) // 1000
 * ```
 */
function logFloor(num) {
    let exp = e(num);
    return Number('1e' + exp);
}
exports.logFloor = logFloor;
/**
 * Return the fraction form of `num`, with max denominator 100000.
 * @param num - the value to convert
 * @returns the fraction form a/b as [a,b]
 * @example
 * ```
 * toFraction(0.75) // [3,4]
 * ```
 */
function toFraction(num) {
    if (num === Infinity)
        return [1, 0];
    if (num === -Infinity)
        return [-1, 0];
    let f = (new decimal_js_1.Decimal(num)).toFraction(100000);
    return [f[0].toNumber(), f[1].toNumber()];
}
exports.toFraction = toFraction;
/**
 * Check if `num` is rational, approximately.
 * @param num - the number to check
 * @returns a Boolean
 * @example
 * ```
 * isRational(0.3) // true
 * isRational(Math.sqrt(2)) // false
 * ```
 */
function isRational(num) {
    function convert(num, deno) {
        let f = (new decimal_js_1.Decimal(num)).toFraction(deno);
        return [f[0].toNumber(), f[1].toNumber()];
    }
    if (num === Infinity)
        return false;
    if (num === -Infinity)
        return false;
    let rough = convert(num, 100000);
    let accurate = convert(num, 10000000);
    return rough[0] === accurate[0] && rough[1] === accurate[1];
}
exports.isRational = isRational;
/**
 * Return the surd in the form of [a,b] meaning a*sqrt(b).
 * @param num - the number to convert, must be a surd
 * @returns an array representing the exact surd form
 * @example
 * ```
 * toSurd(sqrt(12)) // [2,3]
 * toSurd(-sqrt(12)) // [-2,3]
 * ```
 */
function toSurd(num) {
    num = blur(num);
    let s = Math.sign(num);
    let a = Math.abs(num);
    let square = blur(a ** 2);
    if (square === 0)
        return [0, 1];
    let factors = [1];
    let i = 2;
    while (i <= a) {
        let s = i ** 2;
        if (square % s === 0) {
            square = square / s;
            factors.push(i);
        }
        else {
            i++;
        }
    }
    let product = factors.reduce((a, b) => a * b, 1);
    return [s * product, square];
}
exports.toSurd = toSurd;
/**
 * Return whether `num` is prime.
 * @param num - the integer to check
 * @returns - a boolean
 * @example
 * ```
 * isPrime(5) // true
 * isPrime(6) // false
 * ```
 */
function isPrime(num) {
    if (!Number.isInteger(num))
        return false;
    if (num <= 1)
        return false;
    if (num === 2)
        return true;
    if (num % 2 === 0)
        return false;
    for (let i = 3; i <= Math.sqrt(num) + 1; i = i + 2) {
        if (num % i === 0)
            return false;
    }
    return true;
}
exports.isPrime = isPrime;
/**
 * Return all the primes under `max`.
 * @param max - upper bound of primes requested
 * @returns array of primes
 * @example
 * ```
 * primes(12) // [2,3,5,7,11]
 * primes(13) // [2,3,5,7,11,13]
 * ```
 */
function primes(max) {
    let arr = [];
    for (let i = 2; i <= max; i++) {
        if (isPrime(i))
            arr.push(i);
    }
    return arr;
}
exports.primes = primes;
/**
 * Return an array of ordered prime factors.
 * @param num - the number to factorize
 * @returns array of prime factors.
 * @example
 * ```
 * primeFactors(12) // [2,2,3]
 * ```
 */
function primeFactors(num) {
    let arr = [];
    let i = 2;
    while (num > 1) {
        if (!isPrime(i)) {
            i++;
            continue;
        }
        if (num % i === 0) {
            arr.push(i);
            num = num / i;
        }
        else {
            i++;
        }
    }
    return arr;
}
exports.primeFactors = primeFactors;
/**
 * Return the factorial of `n`.
 * @param n - the number
 * @returns the factorial
 * @example
 * ```
 * factorial(5) // 120
 * ```
 */
function factorial(n) {
    if (n <= 1)
        return 1;
    return factorial(n - 1) * n;
}
exports.factorial = factorial;
/**
 * Return the value of nCr.
 * @param n - total number
 * @param r - selected number
 * @returns nCr
 * @example
 * ```
 * nCr(5,2) // 10
 * ```
 */
function nCr(n, r) {
    return factorial(n) / factorial(r) / factorial(n - r);
}
exports.nCr = nCr;
/**
 * Return the value of nPr.
 * @param n - total number
 * @param r - selected number
 * @returns nPr
 * @example
 * ```
 * nPr(5,2) // 20
 * ```
 */
function nPr(n, r) {
    return factorial(n) / factorial(n - r);
}
exports.nPr = nPr;
/**
 * Return an array of integers from `min` to `max`
 * @param min - the min value to start
 * @param max - the max value to end
 * @returns an array of integers
 * @example
 * ```
 * range(2,5) // [2,3,4,5]
 * ```
 */
function range(min, max) {
    let arr = [];
    min = Math.ceil(min - Number.EPSILON);
    for (let i = min; i <= max; i++) {
        arr.push(i);
    }
    return arr;
}
exports.range = range;
/**
 * Return an array of 2D points as [number,number] by tracing `func` within `range`.
 * @param func - the func to trace, can be normal or parametric.
 * @param range - the range of `func` input to trace
 * @param dots - number of points requested, more dots more detailed
 * @returns an array of 2D points
 * @example
 * ```
 * trace(x=>x**2, [0,3], 4)
 * // [[0,0], [1,1], [2,4], [3,9]]
 * ```
 */
function trace(func, range, dots = 1000) {
    function tracer(t) {
        let result;
        try {
            result = func(t);
        }
        catch {
            return [NaN, NaN];
        }
        if (!Array.isArray(result))
            result = [t, result];
        return result;
    }
    ;
    let [t1, t2] = range;
    const step = (t2 - t1) / (dots - 1);
    let points = [];
    for (let t = t1; t <= t2; t += step) {
        points.push(tracer(t));
    }
    return points;
}
exports.trace = trace;
/**
 * Return an array of 2D points as [number,number] by tracing a circle.
 * @param center - the center of the circle
 * @param radius - the radius of the circle
 * @param angleRange - the polar angle range
 * @param dots - number of points requested, more dots more detailed
 * @returns an array of 2D points
 * @example
 * ```
 * traceCircle([0,0], 1, [0,360], 4)
 * // [[1,0], [0,1], [-1,0], [0,-1]]
 * ```
 */
function traceCircle(center, radius, angleRange, dots = 100) {
    const [h, k] = center;
    function sin(degree) {
        return Math.sin(degree / 180 * Math.PI);
    }
    function cos(degree) {
        return Math.cos(degree / 180 * Math.PI);
    }
    return trace(t => [h + radius * cos(t), k + radius * sin(t)], angleRange, dots);
}
exports.traceCircle = traceCircle;
/**
 * Solve `[x,y]` from ax+by=c and px+qy=r.
 * @returns array `[x,y]`
 * @example
 * ```
 * crammer(1,1,5,1,-1,1) // [3,2] solving x+y=5 and x-y=1
 * crammer(1,1,3,2,2,6) // [NaN, NaN]
 * ```
 */
function crammer(a, b, c, p, q, r) {
    if (a / b === p / q)
        return [NaN, NaN];
    const D = a * q - b * p;
    const x = (c * q - b * r) / D;
    const y = (a * r - c * p) / D;
    return [blur(x), blur(y)];
}
exports.crammer = crammer;
//# sourceMappingURL=cal.js.map

/***/ }),

/***/ 7533:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.lin = exports.Linear = void 0;
const numbers_1 = __webpack_require__(9109);
function slope(A, B) {
    let [x1, y1] = A;
    let [x2, y2] = B;
    return (y2 - y1) / (x2 - x1);
}
function midpoint(A, B) {
    let [x1, y1] = A;
    let [x2, y2] = B;
    return [(x1 + x2) / 2, (y1 + y2) / 2];
}
class Linear {
    constructor() {
        this._linear = [NaN, NaN, NaN];
        this.defined = false;
    }
    byLinear(linear) {
        this._linear = linear;
        this.defined = true;
        return this;
    }
    byStandard(standard) {
        let [a, b, _c] = standard;
        this.byLinear([a, b, -_c]);
        return this;
    }
    byTwoPoints(p1, p2) {
        let [x1, y1] = p1;
        let [x2, y2] = p2;
        let dx = x1 - x2;
        let dy = y1 - y2;
        if (dx === 0 && dy === 0)
            return this;
        let [a, b, c] = [dy, -dx, dx * y1 - dy * x1];
        let s = Math.sign(a) || Math.sign(b) || 1;
        [a, b, c] = (0, numbers_1.numbers)(a, b, c).times(s).ratio();
        this.byLinear([a, b, c]);
        return this;
    }
    byPointSlope(p, m) {
        let p2 = [p[0] + 1, p[1] + m];
        this.byTwoPoints(p, p2);
        return this;
    }
    byIntercepts(x, y) {
        if (x === 0 || y === 0)
            return this;
        this.byTwoPoints([x, 0], [0, y]);
        return this;
    }
    byBisector(A, B) {
        let [x1, y1] = A;
        let [x2, y2] = B;
        if (x1 === x2 && y1 === y2)
            return this;
        if (x1 === x2) {
            this.byLinear([0, 1, -(y1 + y2) / 2]);
        }
        else if (y1 === y2) {
            this.byLinear([1, 0, -(x1 + x2) / 2]);
        }
        else {
            let m = -1 / slope(A, B);
            let M = midpoint(A, B);
            this.byPointSlope(M, m);
        }
        return this;
    }
    slope() {
        let [a, b, c] = this._linear;
        return b === 0 ? NaN : -a / b;
    }
    xInt() {
        let [a, b, c] = this._linear;
        return a === 0 ? NaN : -c / a;
    }
    yInt() {
        let [a, b, c] = this._linear;
        return b === 0 ? NaN : -c / b;
    }
    toLinear() {
        if (!this.defined)
            return [NaN, NaN, NaN];
        return this._linear;
    }
    toLine() {
        if (!this.defined)
            return [NaN, NaN];
        return [this.slope(), this.yInt()];
    }
    toStandard() {
        if (!this.defined)
            return [NaN, NaN, NaN];
        let [a, b, c] = this._linear;
        return [a, b, -c];
    }
    toConstraint(ineq) {
        let [a, b, c] = this.toStandard();
        return [a, b, ineq, c];
    }
}
exports.Linear = Linear;
/**
 * Return a `Linear` instance.
 */
function lin() {
    return new Linear();
}
exports.lin = lin;
//# sourceMappingURL=linear.js.map

/***/ }),

/***/ 3704:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Blood = void 0;
class Blood extends Error {
    constructor(name, message) {
        super(message);
        this.name = name + 'Error';
    }
}
exports.Blood = Blood;
//# sourceMappingURL=blood.js.map

/***/ }),

/***/ 1566:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.contract = void 0;
const blood_1 = __webpack_require__(3704);
class ContractErrorFactory {
    constructor(host) {
        this.name = host.name;
        this.signature = this.getSignature(host);
    }
    getSignature(func) {
        const fnStr = func.toString();
        return fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')'));
    }
    ArgBlood(argIndex, argValue, predicate) {
        let i = String(argIndex);
        let v = JSON.stringify(argValue);
        let p = predicate.name || predicate.toString();
        return new blood_1.Blood('Contract', '(' + this.name + ')\narg(' + this.signature + ')[' + i + '] = ' + v + '\nviolate: ' + p);
    }
    ArgGrpBlood(argValues, predicate) {
        let a = argValues.map(_ => JSON.stringify(_)).join(',');
        let p = predicate.name || predicate.toString();
        return new blood_1.Blood('Contract', '(' + this.name + ')\narg(' + this.signature + ') = (' + a + ')\nviolate: ' + p);
    }
    ReturnBlood(argValues, returnValue, predicate) {
        let v = returnValue;
        let a = argValues.map(_ => JSON.stringify(_)).join(',');
        let p = predicate.name || predicate.toString();
        return new blood_1.Blood('Contract', '(' + this.name + ')\nfrom arg(' + this.signature + ') = (' + a + ')\n=> return = ' + v + '\nviolate: ' + p);
    }
    CatchBlood(argValues, e) {
        let a = argValues.map(_ => JSON.stringify(_)).join(',');
        if (typeof e === 'string') {
            return new blood_1.Blood('Contract', '(' + this.name + ')\nfrom arg(' + this.signature + ') = (' + a + ')\nthrow:\n' + e);
        }
        if (typeof e === 'object' && e !== null && 'name' in e && 'message' in e) {
            let { name, message } = e;
            return new blood_1.Blood('Contract', '(' + this.name + ')\nfrom arg(' + this.signature + ') = (' + a + ')\nthrow:\n' + name + '\nwith message:\n' + message);
        }
        return new blood_1.Blood('Contract', '(' + this.name + ')\nfrom arg(' + this.signature + ') = (' + a + ')\nthrow:\n' + JSON.stringify(e));
    }
}
class Contract {
    constructor(host) {
        this.host = host;
        this.Err = new ContractErrorFactory(host);
    }
    validateArg(f, rules) {
        let policy = shieldArrays(rules);
        function rule(index) {
            // use the last rule for the rest
            const n = policy.length - 1;
            return policy[Math.min(index, n)];
        }
        const newFunc = (...args) => {
            for (let i = 0; i < args.length; i++) {
                const arg = args[i];
                for (let pd of rule(i)) {
                    if (!pd(arg))
                        throw this.Err.ArgBlood(i, arg, pd);
                }
            }
            return f(...args);
        };
        return newFunc;
    }
    validateArgGrp(f, argRule) {
        let r = shieldArray(argRule);
        const newFunc = (...args) => {
            for (let pd of r) {
                if (!pd(...args))
                    throw this.Err.ArgGrpBlood(args, pd);
            }
            return f(...args);
        };
        return newFunc;
    }
    validateReturn(f, rule) {
        let r = shieldArray(rule);
        const newFunc = (...args) => {
            const result = f(...args);
            for (let pd of r) {
                if (!pd(result))
                    throw this.Err.ReturnBlood(args, result, pd);
            }
            return result;
        };
        return newFunc;
    }
    validateCatch(f) {
        const newFunc = (...args) => {
            try {
                return f(...args);
            }
            catch (e) {
                throw this.Err.CatchBlood(args, e);
            }
        };
        return newFunc;
    }
    sign(arg, ret) {
        return this.seal({ arg, ret });
    }
    seal({ arg, args, ret }) {
        let f = this.host;
        f = this.validateCatch(f);
        if (ret !== undefined)
            f = this.validateReturn(f, ret);
        if (args !== undefined)
            f = this.validateArgGrp(f, args);
        if (arg !== undefined && arg.length > 0)
            f = this.validateArg(f, arg);
        return f;
    }
}
function shieldArray(item) {
    return Array.isArray(item) ? item : [item];
}
function shieldArrays(items) {
    return items.map(shieldArray);
}
function contract(f) {
    return new Contract(f);
}
exports.contract = contract;
//# sourceMappingURL=contract.js.map

/***/ }),

/***/ 542:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dice = exports.Dice = void 0;
const blood_1 = __webpack_require__(3704);
class Dice {
    constructor(func) {
        this.TRIAL = 10000;
        this.shields = [];
        this.uniques = [];
        this.distincts = [];
        this.coherents = [];
        this.func = func;
    }
    /**
     * Set a shield in this Dice. All `roll` must obey the shield.
     * @param predicate - a predicate on a single outcome item
     * @returns this Dice for chaining
     * @example
     * ```
     * this.shield($ => $ > 10)
     * ```
     */
    shield(predicate) {
        this.shields.push(predicate);
        return this;
    }
    /**
     * Set a shield to forbid these items in the outcome. Deep compare by `JSON.stringify`.
     * @param items - the items to ban
     * @returns this Dice for chaining
     * @example
     * ```
     * this.forbid(0,1) // outcome can't be 0 or 1
     * ```
     */
    forbid(...items) {
        for (let item of items)
            this.shield($ => JSON.stringify($) !== JSON.stringify(item));
        return this;
    }
    /**
     * Set a unique mapper requirement in this Dice. All outcomes from `rolls` must not have duplicated mapper value. Deep compare by `JSON.stringify`.
     * @param mapper - a mapper function, default to self
     * @returns this Dice for chaining
     * @example
     * ```
     * this.unique($ => $ % 2) // unique parity
     * this.unique() // default to be unique self value
     * ```
     */
    unique(mapper = ($ => $)) {
        let map = ($) => JSON.stringify(mapper($));
        this.uniques.push(map);
        return this;
    }
    /**
     * Set a distinct comparer in this Dice. All outcomes from `rolls` must not be equal according to `equality` comparer.
     * @param equality - a comparer function
     * @returns this Dice for chaining
     * @example
     * ```
     * this.distinct((a,b) => a-b===1) // two numbers can considered equal if they differ by 1
     * ```
     */
    distinct(equality) {
        this.distincts.push(equality);
        return this;
    }
    /**
     * Set a coherent requirement in this Dice. The outcome from `rolls` must pass this predicate as a whole.
     * @param predicate - a predicate function on the whole array
     * @returns this Dice for chaining
     */
    coherent(predicate) {
        this.coherents.push(predicate);
        return this;
    }
    /**
     * Return one random item. Respect `shield`.
     * @returns a random item
     * @example
     * ```
     * dice(randomPrime).roll() // may be 2, 3, 5, ...
     * ```
     */
    roll() {
        let counter = 0;
        while (true) {
            counter++;
            if (counter > this.TRIAL) {
                throw new blood_1.Blood('Dice', 'No items can satisfy predicate after ' + this.TRIAL + ' trials!');
            }
            let item = this.func();
            if (this.shields.every($ => $(item)))
                return item;
        }
    }
    /**
     * Return an array of N random items. Respect `shield`, `unique`, `distinct` and `coherent`.
     * @param count - the number of items requested
     * @returns an array of random items
     * @example
     * ```
     * dice(randomPrime).rolls(3) // may be [2,7,5]
     * ```
     */
    rolls(count) {
        let counter = 0;
        const genRandomCohort = () => {
            let arr = [];
            let mappeds = [];
            for (let i = 0; i < this.uniques.length; i++) {
                mappeds.push([]);
            }
            const pushMap = (itemMap) => {
                mappeds.forEach((mapped, i) => mapped.push(itemMap[i]));
            };
            const mapInclude = (itemMap) => {
                return mappeds.some((mapped, i) => mapped.includes(itemMap[i]));
            };
            const someEqual = (item) => {
                return this.distincts.some(equal => arr.some($ => equal($, item)));
            };
            while (arr.length < count) {
                counter++;
                if (counter > this.TRIAL) {
                    throw new blood_1.Blood('Dice', 'rolls count is likely too large for sample set');
                }
                let item = this.roll();
                let map = this.uniques.map($ => $(item));
                if (mapInclude(map))
                    continue;
                if (someEqual(item))
                    continue;
                arr.push(item);
                pushMap(map);
            }
            return arr;
        };
        const isCoherent = (cohort) => {
            return this.coherents.every($ => $(cohort));
        };
        while (true) {
            let cohort = genRandomCohort();
            if (isCoherent(cohort))
                return cohort;
        }
    }
}
exports.Dice = Dice;
/**
 * Return a `Dice` object, which is a random item generator.
 * @param func - a random generator function
 * @returns - `Dice` object
 * @example
 * ```
 * dice(()=>randomInt(1,9)) // a Dice object
 * ```
 */
function dice(func) {
    return new Dice(func);
}
exports.dice = dice;
//# sourceMappingURL=dice.js.map

/***/ }),

/***/ 2383:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bool = exports.she = exports.he = exports.prime = exports.real = exports.integer = void 0;
const blood_1 = __webpack_require__(3704);
const cal = __importStar(__webpack_require__(2318));
const list_1 = __webpack_require__(4140);
/**
 * Return a random integer from `min` to `max` inclusive.
 * @param min - the min value allowed
 * @param max - the max value allowed
 * @returns a random integer
 * @example
 * ```
 * integer(3,7) // maybe 3,4,5,6 or 7
 * ```
 */
function integer(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    if (min > max)
        throw new blood_1.Blood('Poker', 'min must be less than max!');
    return Math.floor(Math.random() * (max - min + 1) + min);
}
exports.integer = integer;
/**
 * Return a random real number from `min` to `max` inclusive.
 * @param min - the min value allowed
 * @param max - the max value allowed
 * @returns a random real number
 * @example
 * ```
 * real(3,7) // anything between 3 and 7
 * ```
 */
function real(min, max) {
    if (min > max)
        throw new blood_1.Blood('Poker', 'min must be less than max!');
    return Math.random() * (max - min) + min;
}
exports.real = real;
/**
 * Return a random prime number from `min` to `max` inclusive.
 * If there is no prime in the range, return `undefined`.
 * @param min - the min value allowed
 * @param max - the max value allowed
 * @returns a random prime number
 * @example
 * ```
 * prime(3,7) // 3 or 5 or 7
 * ```
 */
function prime(min, max) {
    if (min > max)
        throw new blood_1.Blood('Poker', 'min must be less than max!');
    let primes = (0, list_1.list)(...cal.primes(max));
    primes.sieve($ => $ >= min);
    return primes.draw();
}
exports.prime = prime;
/**
 * Return a random male name.
 * @returns a random male name
 * @example
 * ```
 * he() // e.g. 'Peter'
 * ```
 */
function he() {
    const boys = (0, list_1.list)("Aaron", "Adam", "Alan", "Alexander", "Andrew", "Ben", "Brian", "Cameron", "Charlie", "Colin", "Daniel", "David", "Derek", "Donald", "Edward", "Eric", "Ethan", "Frank", "Gary", "George", "Gordon", "Harris", "Harry", "Jack", "Jacob", "James", "Jamie", "Jason", "John", "Jordan", "Joseph", "Kevin", "Kyle", "Leo", "Lewis", "Lucas", "Martin", "Mason", "Matthew", "Michael", "Nathan", "Nicholas", "Noah", "Oliver", "Patrick", "Paul", "Peter", "Philip", "Riley", "Robert", "Rory", "Ryan", "Samuel", "Scott", "Stephen", "Steven", "Thomas", "Timothy", "William");
    return boys.draw();
}
exports.he = he;
/**
 * Return a random female name.
 * @returns a random female name
 * @example
 * ```
 * she() // e.g. 'Mary'
 * ```
 */
function she() {
    const girls = (0, list_1.list)("Abbie", "Alice", "Alison", "Amanda", "Amelia", "Amy", "Angela", "Ann", "Anna", "Ashley", "Cara", "Carol", "Caroline", "Charlotte", "Cheryl", "Chloe", "Christine", "Claire", "Donna", "Elaine", "Ella", "Ellie", "Emily", "Emma", "Eva", "Fiona", "Gillian", "Grace", "Hazel", "Helen", "Holly", "Ivy", "Jacqueline", "Jade", "Janet", "Jennifer", "Jessica", "Julie", "Karen", "Kate", "Katie", "Kelly", "Kirsty", "Lily", "Linda", "Lisa", "Lorraine", "Louise", "Lucy", "Mandy", "Mary", "Michelle", "Natalie", "Nicole", "Olivia", "Pamela", "Pauline", "Rachel", "Rebecca", "Rosie", "Samantha", "Sarah", "Shannon", "Sharon", "Sophia", "Sophie", "Stephanie", "Susan", "Tracey", "Tracy", "Valerie", "Victoria", "Wendy", "Zoe");
    return girls.draw();
}
exports.she = she;
/**
 * Return a random boolean.
 * @param trueChance - the probability of true, from 0 to 1
 * @return a random Boolean
 * @example
 * ```
 * bool(0.6) // 60% chance true, 40% false
 * ```
 */
function bool(trueChance = 0.5) {
    return real(0, 1) < trueChance;
}
exports.bool = bool;
//# sourceMappingURL=poker.js.map

/***/ }),

/***/ 6715:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// export function printIneq(greater: boolean, equal: boolean): Ineq {
//     if (greater && equal) return '\\ge'
//     if (greater && !equal) return '\\gt'
//     if (!greater && equal) return '\\le'
//     if (!greater && !equal) return '\\lt'
//     throw 'never'
// }
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printLabeledValue = exports.printConstraints = exports.printConstraint = exports.printPointPolar = exports.printSurd = exports.printOrTrigRoots = exports.printTrigExp = exports.printTrigValue = exports.printCombo = exports.printDfrac = void 0;
// export function parseIneq(text: Ineq): [greater: boolean, equal: boolean] {
//     let greater = text.includes('g') || text.includes('>')
//     let equal = text.includes('e') || text.includes('=')
//     return [greater, equal]
// }
function printDfrac(numerator, denominator, upSign = false) {
    let p = numerator;
    let q = denominator;
    if (p === 0)
        return '0';
    [p, q] = cal.toFraction(p / q);
    if (q === 1)
        return p.toString();
    if (upSign) {
        return '\\dfrac{' + p + '}{' + q + '}';
    }
    else {
        return p > 0 ?
            '\\dfrac{' + p + '}{' + q + '}' :
            '-\\dfrac{' + Math.abs(p) + '}{' + q + '}';
    }
}
exports.printDfrac = printDfrac;
// export function parseDfrac(dfrac: string): Fraction {
//     if (!owl.dfrac(dfrac)) throw 'not dfrac'
//     const d = String.raw`-?\d+\.?\d*`
//     const f = String.raw`-?\\dfrac{(-?\d+\.?\d*)}{(-?\d+\.?\d*)}`
//     dfrac = dfrac.match(new RegExp(f, 'g'))![0]
//     const matches = dfrac.match(new RegExp(d, 'g'))!
//     const u = dfrac.charAt(0) === '-' ? -1 : 1
//     const p = Number(matches[0]) * u
//     const q = Number(matches[1])
//     if (!(owl.num(p) && owl.num(q))) throw 'fail to parse dfrac'
//     return [p, q]
// }
function printCombo(combo) {
    let [a, b, c] = combo;
    if (a && b && c)
        return 'I, II and III';
    if (a && b && !c)
        return 'I and II only';
    if (a && !b && c)
        return 'I and III only';
    if (a && !b && !c)
        return 'I only';
    if (!a && b && c)
        return 'II and III only';
    if (!a && b && !c)
        return 'II only';
    if (!a && !b && c)
        return 'III only';
    if (!a && !b && !c)
        return 'None of the above';
    throw 'never';
}
exports.printCombo = printCombo;
function printTrigValue(T) {
    if (typeof T[1] === 'number') {
        return "\\" + T[0] + " " + T[1] + "°";
    }
    else {
        return "\\" + T[0] + " " + T[1];
    }
}
exports.printTrigValue = printTrigValue;
function printTrigExp(T) {
    return "\\" + T[0] + "(" + T[1] + "°" + (T[2] > 0 ? '+' : '-') + T[3] + ")";
}
exports.printTrigExp = printTrigExp;
function printOrTrigRoots(roots) {
    roots = roots.filter(owl.num);
    roots = roots.map(x => Round(x, 5));
    let ss = roots.map(x => x + '°');
    if (ss.length === 0)
        return "no solution";
    if (ss.length === 1)
        return ss[0];
    let last = ss.pop();
    return ss.join(',') + '~\\text{or}~' + last;
}
exports.printOrTrigRoots = printOrTrigRoots;
function printSurd(num) {
    let [p, q] = cal.toSurd(num);
    let T;
    if (p === 1) {
        T = q === 1 ? '1' : '\\sqrt{' + q + '}';
    }
    else if (p === -1) {
        T = q === 1 ? '-1' : '-\\sqrt{' + q + '}';
    }
    else {
        T = q === 1 ? p.toString() : p + '\\sqrt{' + q + '}';
    }
    return T;
}
exports.printSurd = printSurd;
function printPointPolar(point) {
    let [r, q] = RectToPol(point);
    q = cal.blur(q);
    return `(${printSurd(r)},${q}°)`;
}
exports.printPointPolar = printPointPolar;
function printConstraint(con, align = false, replaceEqual = false) {
    let [a, b, i, c] = con;
    if (i === '>=')
        i = '\\ge';
    if (i === '>')
        i = '\\gt';
    if (i === '<=')
        i = '\\le';
    if (i === '<')
        i = '\\lt';
    let j = i;
    if (replaceEqual)
        j = '=';
    if (align)
        j = ' & ' + j;
    if (a === 0 && b === 0)
        return ` 0 ${j} ${c} `;
    if (a !== 0 && b === 0)
        return ` ${a}x ${j} ${c} `;
    if (a === 0 && b !== 0)
        return ` ${b}y ${j} ${c} `;
    return ` ${a}x + ${b}y ${j} ${c} `;
}
exports.printConstraint = printConstraint;
function printConstraints(cons) {
    let T = "";
    T += ' \\left\\{ \\begin{aligned} ';
    for (let c of cons) {
        T += printConstraint(c, true) + ' \\\\ ';
    }
    T += ' \\end{aligned} \\right. ';
    return T;
}
exports.printConstraints = printConstraints;
function printLabeledValue(obj, order = 1, isAngle = false) {
    let value = obj[0];
    let label = obj[order];
    let T = label + ' = ' + value;
    if (isAngle)
        T += '°';
    return T;
}
exports.printLabeledValue = printLabeledValue;


/***/ }),

/***/ 1025:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.labeledValue1 = exports.trigExp = exports.trigValue = exports.polynomial = exports.monomial = exports.triangleSides = exports.vector3D = exports.vector = exports.properFraction = exports.fraction = exports.polar = exports.point3D = exports.point2Ds = exports.point2D = exports.interval = exports.ntuple = exports.combo = exports.triple = exports.couple = exports.arrayWith = exports.arrayOfLength = exports.array = exports.emptyObject = exports.object = exports.bool = exports.str = exports.absBetween = exports.between = exports.nonZeroInt = exports.nonZero = exports.zero = exports.nonPositiveInt = exports.nonPositive = exports.negativeInt = exports.negative = exports.nonNegativeInt = exports.nonNegative = exports.positiveInt = exports.positive = exports.sq = exports.prob = exports.even = exports.odd = exports.irrational = exports.rational = exports.terminating = exports.dec = exports.int = exports.whole = exports.num = void 0;
exports.every = exports.or = exports.and = exports.base = exports.roman = exports.trig = exports.quadrant = exports.quadrantName = exports.quadrantCode = exports.field = exports.constraints = exports.constraint = exports.dfrac = exports.ineq = exports.alphabet = exports.distinct = exports.fail = exports.pass = exports.quantity = exports.labeledValue = exports.labeledValue2 = void 0;
const num = (_) => Number.isFinite(_);
exports.num = num;
const whole = (_) => Number.isInteger(_);
exports.whole = whole;
const int = (_) => (0, exports.num)(_) && Number.isInteger(cal.blur(_));
exports.int = int;
const dec = (_) => (0, exports.num)(_) && !(0, exports.int)(_);
exports.dec = dec;
const terminating = (_) => (0, exports.num)(_) && cal.sigfig(_) < 10;
exports.terminating = terminating;
const rational = (_) => (0, exports.num)(_) && cal.isRational(_);
exports.rational = rational;
const irrational = (_) => (0, exports.num)(_) && !cal.isRational(_);
exports.irrational = irrational;
const odd = (_) => (0, exports.int)(_) && Math.abs(cal.blur(_)) % 2 === 1;
exports.odd = odd;
const even = (_) => (0, exports.int)(_) && Math.abs(cal.blur(_)) % 2 === 0;
exports.even = even;
const prob = (_) => (0, exports.num)(_) && _ >= 0 && _ <= 1;
exports.prob = prob;
const sq = (_) => (0, exports.int)(_) && (0, exports.int)(Math.sqrt(_));
exports.sq = sq;
const positive = (_) => (0, exports.num)(_) && _ > 0;
exports.positive = positive;
const positiveInt = (_) => (0, exports.int)(_) && _ > 0;
exports.positiveInt = positiveInt;
const nonNegative = (_) => (0, exports.num)(_) && _ >= 0;
exports.nonNegative = nonNegative;
const nonNegativeInt = (_) => (0, exports.int)(_) && _ >= 0;
exports.nonNegativeInt = nonNegativeInt;
const negative = (_) => (0, exports.num)(_) && _ < 0;
exports.negative = negative;
const negativeInt = (_) => (0, exports.int)(_) && _ < 0;
exports.negativeInt = negativeInt;
const nonPositive = (_) => (0, exports.num)(_) && _ <= 0;
exports.nonPositive = nonPositive;
const nonPositiveInt = (_) => (0, exports.int)(_) && _ <= 0;
exports.nonPositiveInt = nonPositiveInt;
const zero = (_) => (0, exports.num)(_) && Math.abs(_) < 1e-14;
exports.zero = zero;
const nonZero = (_) => (0, exports.num)(_) && !(0, exports.zero)(_);
exports.nonZero = nonZero;
const nonZeroInt = (_) => (0, exports.int)(_) && !(0, exports.zero)(_);
exports.nonZeroInt = nonZeroInt;
const between = (min, max) => build(`between(${min},${max})`, (_) => (0, exports.num)(_) && _ >= min && _ <= max);
exports.between = between;
const absBetween = (min, max) => build(`absBetween(${min},${max})`, (_) => (0, exports.num)(_) && Math.abs(_) >= min && Math.abs(_) <= max);
exports.absBetween = absBetween;
// JS native type
const str = (_) => typeof _ === 'string';
exports.str = str;
const bool = (_) => typeof _ === 'boolean';
exports.bool = bool;
const object = (_) => typeof _ === 'object' && _ !== null;
exports.object = object;
const emptyObject = (_) => (0, exports.object)(_) && !!_ && _.constructor === Object && Object.keys(_).length === 0;
exports.emptyObject = emptyObject;
const array = (_) => Array.isArray(_);
exports.array = array;
const arrayOfLength = (length) => build(`arrayOfLength(${length})`, (_) => (0, exports.array)(_) && _.length === length);
exports.arrayOfLength = arrayOfLength;
const arrayWith = (predicate) => build(`arrayWith(${predicate.name})`, (_) => (0, exports.array)(_) && _.every(predicate));
exports.arrayWith = arrayWith;
// Math Types
const couple = (_) => (0, exports.arrayOfLength)(2)(_) && (0, exports.arrayWith)(exports.num)(_);
exports.couple = couple;
const triple = (_) => (0, exports.arrayOfLength)(3)(_) && (0, exports.arrayWith)(exports.num)(_);
exports.triple = triple;
const combo = (_) => (0, exports.arrayOfLength)(3)(_) && (0, exports.arrayWith)(exports.bool)(_);
exports.combo = combo;
const ntuple = (_) => (0, exports.arrayWith)(exports.num)(_);
exports.ntuple = ntuple;
const interval = (_) => (0, exports.couple)(_) && _[0] <= _[1];
exports.interval = interval;
const point2D = (_) => (0, exports.couple)(_);
exports.point2D = point2D;
const point2Ds = (_) => (0, exports.arrayWith)(exports.point2D)(_);
exports.point2Ds = point2Ds;
const point3D = (_) => (0, exports.triple)(_);
exports.point3D = point3D;
const polar = (_) => (0, exports.couple)(_) && _[0] >= 0;
exports.polar = polar;
const fraction = (_) => (0, exports.couple)(_);
exports.fraction = fraction;
const properFraction = (_) => (0, exports.fraction)(_) && _[1] !== 0;
exports.properFraction = properFraction;
const vector = (_) => (0, exports.couple)(_);
exports.vector = vector;
const vector3D = (_) => (0, exports.triple)(_);
exports.vector3D = vector3D;
const triangleSides = (_) => {
    if (!(0, exports.triple)(_))
        return false;
    let [a, b, c] = _;
    return _.every(exports.positive) &&
        a + b > c &&
        b + c > a &&
        c + a > b;
};
exports.triangleSides = triangleSides;
const monomial = (_) => (0, exports.object)(_) && ('coeff' in _) && ('vars' in _);
exports.monomial = monomial;
const polynomial = (_) => (0, exports.arrayWith)(exports.monomial)(_);
exports.polynomial = polynomial;
const trigValue = (_) => (0, exports.arrayOfLength)(2)(_) && (0, exports.trig)(_[0]) && ((0, exports.num)(_[1]) || (0, exports.str)(_[1]));
exports.trigValue = trigValue;
const trigExp = (_) => (0, exports.arrayOfLength)(4)(_) && (0, exports.trig)(_[0]) && (0, exports.num)(_[1]) && (0, exports.num)(_[2]) && (0, exports.str)(_[3]);
exports.trigExp = trigExp;
const labeledValue1 = (_) => (0, exports.arrayOfLength)(2)(_) && (0, exports.num)(_[0]) && (0, exports.str)(_[1]);
exports.labeledValue1 = labeledValue1;
const labeledValue2 = (_) => (0, exports.arrayOfLength)(3)(_) && (0, exports.num)(_[0]) && (0, exports.str)(_[1]) && (0, exports.str)(_[2]);
exports.labeledValue2 = labeledValue2;
const labeledValue = (_) => (0, exports.labeledValue1)(_) || (0, exports.labeledValue2)(_);
exports.labeledValue = labeledValue;
const quantity = (_) => (0, exports.object)(_) && ('val' in _) && ('unit' in _);
exports.quantity = quantity;
// trivial
const pass = (_) => true;
exports.pass = pass;
const fail = (_) => false;
exports.fail = fail;
// relation
const distinct = (_) => toList(_).duplessDeep();
exports.distinct = distinct;
// special text
const alphabet = (_) => (0, exports.str)(_) && _.length === 1 && (_.toLowerCase() !== _.toUpperCase());
exports.alphabet = alphabet;
const ineq = (_) => (0, exports.str)(_) && ['>', '<', '>=', '<=', '\\gt', '\\lt', '\\ge', '\\le'].includes(_);
exports.ineq = ineq;
const dfrac = (_) => {
    const f = String.raw `-?\\dfrac{(-?\d+\.?\d*)}{(-?\d+\.?\d*)}`;
    return (0, exports.str)(_) && !!_.match(new RegExp(f, 'g'));
};
exports.dfrac = dfrac;
const constraint = (_) => (0, exports.arrayOfLength)(4)(_) && (0, exports.num)(_[0]) && (0, exports.num)(_[1]) && (0, exports.ineq)(_[2]) && (0, exports.num)(_[3]);
exports.constraint = constraint;
const constraints = (_) => (0, exports.arrayWith)(exports.constraint)(_);
exports.constraints = constraints;
const field = (_) => (0, exports.triple)(_);
exports.field = field;
const quadrantCode = (_) => (0, exports.int)(_) && [1, 2, 3, 4].includes(_);
exports.quadrantCode = quadrantCode;
const quadrantName = (_) => (0, exports.str)(_) && ['I', 'II', 'III', 'IV'].includes(_);
exports.quadrantName = quadrantName;
const quadrant = (_) => (0, exports.quadrantCode)(_) || (0, exports.quadrantName)(_);
exports.quadrant = quadrant;
const trig = (_) => (0, exports.str)(_) && ['sin', 'cos', 'tan'].includes(_);
exports.trig = trig;
const roman = (_) => (0, exports.str)(_) && ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'].includes(_);
exports.roman = roman;
const base = (_) => (0, exports.str)(_) && _.match(/[0-9A-Z]+\_\{[0-9]+\}/g) !== null;
exports.base = base;
// functor
function build(funcName, func) {
    const holder = { [funcName](arg) { return func(arg); } };
    return holder[funcName];
}
function and(pds, name) {
    name ??= '(' + pds.map(f => f.name).join(' && ') + ')';
    return build(name, (_) => pds.every(p => p(_)));
}
exports.and = and;
function or(pds, name) {
    name ??= '(' + pds.map(f => f.name).join(' || ') + ')';
    return build(name, (_) => pds.some(p => p(_)));
}
exports.or = or;
function every(pd, name) {
    name ??= '(every.' + pd.name + ')';
    return build(name, (_) => (0, exports.array)(_) && _.every(pd));
}
exports.every = every;


/***/ }),

/***/ 4163:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const sapphire_js_1 = __webpack_require__(3227);
globalThis.poker = sapphire_js_1.poker;
globalThis.dice = sapphire_js_1.dice;
globalThis.contract = sapphire_js_1.contract;
globalThis.cal = sapphire_js_1.cal;
globalThis.data = sapphire_js_1.data;
globalThis.list = sapphire_js_1.list;
globalThis.numbers = sapphire_js_1.numbers;
globalThis.shape = sapphire_js_1.shape;
globalThis.shape2D = sapphire_js_1.shape2D;
globalThis.shape3D = sapphire_js_1.shape3D;
globalThis.vector = sapphire_js_1.vector;
globalThis.vector2D = sapphire_js_1.vector2D;
globalThis.vector3D = sapphire_js_1.vector3D;
globalThis.toData = sapphire_js_1.toData;
globalThis.toList = sapphire_js_1.toList;
globalThis.toNumbers = sapphire_js_1.toNumbers;
globalThis.toShape = sapphire_js_1.toShape;
globalThis.toShape2D = sapphire_js_1.toShape2D;
globalThis.toShape3D = sapphire_js_1.toShape3D;
globalThis.toVector = sapphire_js_1.toVector;
globalThis.vec2D = sapphire_js_1.vec2D;
globalThis.vec3D = sapphire_js_1.vec3D;
globalThis.ineq = sapphire_js_1.ineq;
globalThis.optimizer = sapphire_js_1.optimizer;
globalThis.rein = sapphire_js_1.rein;
globalThis.toReins = sapphire_js_1.toReins;
globalThis.lin = sapphire_js_1.lin;
const $Owl = __importStar(__webpack_require__(1025));
globalThis.owl = $Owl;
const $Ink = __importStar(__webpack_require__(6715));
globalThis.ink = $Ink;


/***/ }),

/***/ 3053:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Algebra = void 0;
const contract_1 = __webpack_require__(1154);
let Algebra = class Algebra {
    constructor() { }
    /**
     * solve [x,y] from ax+by=c and px+qy=r.
     * ```
     * Crammer(1,1,5,1,-1,1) // [3,2] solving x+y=5 and x-y=1
     * Crammer(1,1,3,2,2,6) // throw
     * ```
     */
    static Crammer(a, b, c, p, q, r) {
        const D = a * q - b * p;
        const x = (c * q - b * r) / D;
        const y = (a * r - c * p) / D;
        return [x, y];
    }
    /**
     * the product of two input polynomials.
     * ```
     * // do (1x^2+2x+3)(4x+5) = 4x^3+13x^2+22x+15
     * xPolynomial([1,2,3],[4,5]) // [4,13,22,15]
     * ```
     */
    static xPolynomial(poly1, poly2) {
        const deg1 = poly1.length - 1;
        const deg2 = poly2.length - 1;
        const deg = deg1 + deg2;
        const result = Array(deg + 1).fill(0);
        for (let i = 0; i <= deg1; i++) {
            for (let j = 0; j <= deg2; j++) {
                result[i + j] += poly1[i] * poly2[j];
            }
        }
        return result;
    }
};
__decorate([
    (0, contract_1.checkIt)(owl.num),
    (0, contract_1.inspectIt)(function has_unique_sol(a, b, c, p, q, r) { return a * q - b * p !== 0; })
], Algebra, "Crammer", null);
__decorate([
    (0, contract_1.checkIt)([owl.ntuple, function non_zero_leading_coeff(_) { return _[0] !== 0; }])
], Algebra, "xPolynomial", null);
Algebra = __decorate([
    (0, contract_1.exposeAll)(),
    (0, contract_1.captureAll)()
], Algebra);
exports.Algebra = Algebra;
// function intrapolateBetween([A, B]: [Point2D, Point2D], x: number): number {
//     let [x1, y1] = A
//     let [x2, y2] = B
//     let r = (x - x1) / (x2 - x1)
//     return y1 + (y2 - y1) * r
// }
// function justOnLeft(pts: Point2D[], x: number): Point2D | undefined {
//     let smaller = pts.filter(([x0, _]) => x0 <= x)
//     if (smaller.length === 0) return undefined
//     let P = smaller[0]
//     for (let p of smaller) {
//         if (p[0] <= x && p[0] > P[0])
//             P = p
//     }
//     return P
// }
// function justOnRight(pts: Point2D[], x: number): Point2D | undefined {
//     let larger = pts.filter(([x0, _]) => x0 >= x)
//     if (larger.length === 0) return undefined
//     let P = larger[0]
//     for (let p of larger) {
//         if (p[0] >= x && p[0] < P[0])
//             P = p
//     }
//     return P
// }
// function intrapolate(sorted: Point2D[], x: number): number {
//     let first = sorted[0]
//     let last = sorted[sorted.length - 1]
//     if (x < first[0]) {
//         return intrapolateBetween([sorted[0],sorted[1]],x)
//     }
//     if (x > last[0])  {
//         return intrapolateBetween([sorted[0], sorted[1]], x)
//     }
//     let i = sorted.findIndex($ => $[0] > x) - 1
//     return intrapolateBetween([sorted[i], sorted[i + 1]], x)
// }
// function functionize() {
// }
// function differentiate(points: Point2D[],): Point2D[] {
// }


/***/ }),

/***/ 8126:
/***/ (() => {

"use strict";

/**
 * @category Circle
 * @return D,E,F of circle general form
 * ```
 * CircleGeneral([2,3],5) // [-4,-6,-12]
 * ```
 */
function CircleGeneral(centre, radius) {
    let [h, k] = centre;
    let r = radius;
    let D = -2 * h;
    let E = -2 * k;
    let F = h ** 2 + k ** 2 - r ** 2;
    return [D, E, F];
}
globalThis.CircleGeneral = contract(CircleGeneral).sign([owl.point2D, owl.positive]);
/**
 * @category Circle
 * @return centre and radius from general form
 * ```
 * CircleFromGeneral(-4,-6,-12) // [[2,3],5]
 * ```
 */
function CircleFromGeneral(D, E, F) {
    let [h, k] = [-D / 2, -E / 2];
    let R = (D / 2) ** 2 + (E / 2) ** 2 - F;
    Should(R >= 0, "radius should be real");
    let r = R ** 0.5;
    return [[h, k], r];
}
globalThis.CircleFromGeneral = contract(CircleFromGeneral).sign([owl.num]);
/**
 * @category Circle
 * @return intersections between a circle and a straight line
 * ```
 * CircleLinearIntersect([0,0],2**0.5,[1,-1,0]) // [[-1,-1],[1,1]]
 * ```
 */
function CircleLinearIntersect(center, radius, linear) {
    let [a, b, c] = linear;
    let [h, k] = center;
    let r = radius;
    if (b !== 0) {
        let m = -a / b;
        let n = -c / b - k;
        let A = 1 + m * m;
        let B = -2 * h + 2 * m * n;
        let C = h * h + n * n - r * r;
        Should(Discriminant(A, B, C) >= 0, 'no intersection');
        let [x1, x2] = QuadraticRoot(A, B, C);
        let y1 = (-a * x1 - c) / b;
        let y2 = (-a * x2 - c) / b;
        let P = [cal.blur(x1), cal.blur(y1)];
        let Q = [cal.blur(x2), cal.blur(y2)];
        return [P, Q];
    }
    else {
        let x = -c / a;
        let D = r * r - (x - h) ** 2;
        Should(D >= 0, 'no intersection');
        let y1 = k - Math.sqrt(D);
        let y2 = k + Math.sqrt(D);
        let P = [cal.blur(x), cal.blur(y1)];
        let Q = [cal.blur(x), cal.blur(y2)];
        return [P, Q];
    }
}
globalThis.CircleLinearIntersect = contract(CircleLinearIntersect).sign([owl.point2D, owl.positive, owl.triple]);
/**
 * @category Circle
 * @return intersections between a circle and a straight line through `A` and `B`.
 * ```
 * CircleLineIntersect([0,0],2**0.5,[[0,0],[1,1]]) // [[-1,-1],[1,1]]
 * ```
 */
function CircleLineIntersect(center, radius, [A, B]) {
    let lin = LinearFromTwoPoints(A, B);
    return CircleLinearIntersect(center, radius, lin);
}
globalThis.CircleLineIntersect = contract(CircleLineIntersect).sign([owl.point2D, owl.positive, owl.point2Ds]);


/***/ }),

/***/ 8401:
/***/ (() => {

"use strict";

/**
 * @category Linear
 * @return [x-int,y-int,slope] of ax+by+c=0
 * ```
 * LineFeat(2,4,6) // [-0.5,-1.5,-3]
 * LineFeat(0,4,6) // throw
 * ```
 */
function LineFeat(a, b, c) {
    let x = -c / a;
    let y = -c / b;
    let m = -a / b;
    return [m, y, x];
}
globalThis.LineFeat = contract(LineFeat).sign([owl.nonZero, owl.nonZero, owl.num]);
/**
 * @category Linear
 * @return the coeff [a,b,c] in ax+by+c=0 from given intercepts
 * ```
 * LinearFromIntercepts(1,2) // [2,1,-2]
 * LinearFromIntercepts(0,2) // throw
 * ```
 */
function LinearFromIntercepts(xInt, yInt) {
    return lin().byIntercepts(xInt, yInt).toLinear();
}
globalThis.LinearFromIntercepts = contract(LinearFromIntercepts).sign([owl.nonZero, owl.nonZero]);
/**
 * @category Linear
 * @return the coeff [a,b,c] in ax+by+c=0 from two given points
 * ```
 * LinearFromTwoPoints([1,2],[3,4]) // [1,-1,1]
 * LinearFromTwoPoints([1,2],[1,2]) // throw
 * ```
 */
function LinearFromTwoPoints(point1, point2) {
    return lin().byTwoPoints(point1, point2).toLinear();
}
globalThis.LinearFromTwoPoints = contract(LinearFromTwoPoints).seal({
    arg: [owl.point2D, owl.point2D],
    args: function different_points(p1, p2) { return owl.distinct([p1, p2]); }
});
/**
 * @category Linear
 * @return the coeff [a,b,c] in ax+by+c=0 from point and slope
 * ```
 * LinearFromPointSlope([1,2],3) // [3,-1,-1]
 * LinearFromPointSlope([1,2],0) // [0,1,-2]
 * ```
 */
function LinearFromPointSlope(point, slope) {
    return lin().byPointSlope(point, slope).toLinear();
}
globalThis.LinearFromPointSlope = contract(LinearFromPointSlope).sign([owl.point2D, owl.num]);
/**
 * @category Linear
 * @return the coeff [a,b,c] in ax+by+c=0 from perpendicular bisector of AB
 * ```
 * LinearFromBisector([1,2],[3,4]) // [1,1,-5]
 * LinearFromBisector([1,2],[1,4]) // [0,1,-3]
 * ```
 */
function LinearFromBisector(A, B) {
    return lin().byBisector(A, B).toLinear();
}
globalThis.LinearFromBisector = contract(LinearFromBisector).seal({
    arg: [owl.point2D, owl.point2D],
    args: function different_points(p1, p2) { return owl.distinct([p1, p2]); }
});
/**
 * @category Linear
 * @return [slope,yInt] from given intercepts
 * ```
 * LineFromIntercepts(1,2) // [-2,2]
 * LineFromIntercepts(0,2) // throw
 * ```
 */
function LineFromIntercepts(xInt, yInt) {
    return lin().byIntercepts(xInt, yInt).toLine();
}
globalThis.LineFromIntercepts = contract(LineFromIntercepts).sign([owl.nonZero, owl.nonZero]);
/**
 * @category Linear
 * @return [slope,yInt] from two given points
 * ```
 * LineFromTwoPoints([1,2],[3,4]) // [1,1]
 * LineFromTwoPoints([1,2],[1,2]) // throw
 * ```
 */
function LineFromTwoPoints(point1, point2) {
    return lin().byTwoPoints(point1, point2).toLine();
}
globalThis.LineFromTwoPoints = contract(LineFromTwoPoints).seal({
    arg: [owl.point2D, owl.point2D],
    args: [
        function different_points(p1, p2) { return owl.distinct([p1, p2]); },
        function non_vertical(p1, p2) { return p1[0] !== p2[0]; }
    ]
});
/**
 * @category Linear
 * @return [slope,yInt] from point and slope
 * ```
 * LineFromPointSlope([1,2],3) // [3,-1]
 * LineFromPointSlope([1,2],0) // [0,2]
 * ```
 */
function LineFromPointSlope(point, slope) {
    return lin().byPointSlope(point, slope).toLine();
}
globalThis.LineFromPointSlope = contract(LineFromPointSlope).sign([owl.point2D, owl.num]);
/**
 * @category Linear
 * @return [slope,yInt] from perpendicular bisector of AB
 * ```
 * LineFromBisector([1,2],[3,4]) // [-1,5]
 * LineFromBisector([1,2],[1,4]) // [0,3]
 * ```
 */
function LineFromBisector(A, B) {
    return lin().byBisector(A, B).toLine();
}
globalThis.LineFromBisector = contract(LineFromBisector).seal({
    arg: [owl.point2D, owl.point2D],
    args: [
        function different_points(p1, p2) { return owl.distinct([p1, p2]); },
        function non_horizontal(p1, p2) { return p1[1] !== p2[1]; }
    ]
});


/***/ }),

/***/ 1040:
/***/ (() => {

"use strict";

/**
 * @ignore
 */
class MonomialCls {
    constructor(coeff = 0, vars = []) {
        this.coeff = coeff;
        this.vars = vars;
    }
    clone() {
        let coeff = this.coeff;
        let vars = JSON.parse(JSON.stringify(this.vars));
        return new MonomialCls(coeff, vars);
    }
    random(degree, variables, maxCoeff) {
        let f = () => {
            let M = new MonomialCls();
            M.coeff = RndZ(1, maxCoeff);
            for (let v of variables) {
                if (variables.length === 1) {
                    M.vars.push({ variable: v, power: degree });
                }
                else {
                    M.vars.push({ variable: v, power: RndN(0, degree) });
                }
            }
            return M;
        };
        let mon = dice(f).shield(M => M.degree() === degree).roll();
        this.coeff = mon.coeff;
        this.vars = mon.vars;
    }
    degree() {
        return Sum(...this.vars.map(_ => _.power));
    }
    sortedVars() {
        return SortBy([...this.vars], _ => _.variable.charCodeAt(0));
    }
    size() {
        let s = this.degree();
        let order = 1;
        for (let { variable, power } of this.sortedVars()) {
            order = order / 10;
            s += order * power;
        }
        return s;
    }
    signature() {
        return JSON.stringify(this.sortedVars());
    }
    sort() {
        this.vars = this.sortedVars();
    }
    print() {
        let term = String(this.coeff);
        if (this.coeff === 0)
            return term;
        for (let v of this.vars) {
            let l = v.variable;
            let p = v.power;
            if (p === 0) {
                continue;
            }
            else if (p === 1) {
                term += l;
            }
            else {
                term += l + '^{' + p + '}';
            }
        }
        return term;
    }
    func() {
        return (input) => {
            let x = this.coeff;
            for (let { variable, power } of this.vars) {
                x = x * (input[variable] ** power);
            }
            return x;
        };
    }
}
/**
 * @category Polynomial
 * @deprecated
 * @return a monomial object
 * ```
 * ```
 */
function Monomial(coeff, vars) {
    return new MonomialCls(coeff, vars);
}
globalThis.Monomial = contract(Monomial).sign([owl.num, owl.array]);
/**
 * @category Polynomial
 * @return clone a polynomial
 * ```
 * PolyClone(7xy+3x^2y^3-2xy^3)
 * //  7xy+3x^2y^3-2xy^3
 * ```
 */
function PolyClone(poly) {
    return poly.map(M => M.clone());
}
globalThis.PolyClone = contract(PolyClone).sign([owl.polynomial]);
/**
 * @category Polynomial
 * @return a random polynomial object
 * ```
 * RndPolynomial(5, ['x', 'y'], 3, 9))
 * // may return 7xy+3x^2y^3-2xy^3
 * ```
 */
function RndPolynomial(degree, vars = ["x"], terms = degree + 1, maxCoeff = 9) {
    let RndMono = () => {
        let M = new MonomialCls();
        M.random(RndN(0, degree), vars, maxCoeff);
        return M;
    };
    let f = () => dice(RndMono).unique(M => M.size()).rolls(terms);
    return dice(f).shield(P => Max(...P.map(M => M.degree())) === degree).roll();
}
globalThis.RndPolynomial = contract(RndPolynomial).sign([owl.positiveInt, owl.arrayWith(owl.str), owl.positiveInt, owl.num]);
/**
 * @category Polynomial
 * @return a string of the polynomial object
 * ```
 * PolyPrint([x^5, 2x^6, 3x^7])
 * // x^{5}+2x^{6}+3x^{7}
 * ```
 */
function PolyPrint(poly) {
    return poly.map(M => M.print()).filter(x => x !== '0').join("+");
}
globalThis.PolyPrint = contract(PolyPrint).sign([owl.polynomial]);
/**
 * @category Polynomial
 * @return a polynomial object sorted by power
 * ```
 * PolySort([2x^6, x^5, 3x^7])
 * //  [x^5, 2x^6, 3x^7]
 * ```
 */
function PolySort(poly, desc = true) {
    poly = PolyClone(poly);
    let arr = SortBy(poly, M => desc ? -M.size() : M.size());
    return arr;
}
globalThis.PolySort = contract(PolySort).sign([owl.polynomial, owl.bool]);
// function PolyPrettyPrint(poly: polynomial) {
//     // return (new PolyClass(poly)).print()
// }
// globalThis.PolyPrettyPrint = contract(PolyPrettyPrint).sign([owl.polynomial])
/**
 * @category Polynomial
 * @return a function of the polynomial, for substitution
 * ```
 * func = PolyFunction([2x^6, x^5, 3x^7])
 * func({x:2}) // 272
 * ```
 */
function PolyFunction(poly) {
    poly = PolyClone(poly);
    return (values) => {
        return Sum(...poly.map(M => M.func()(values)));
    };
}
globalThis.PolyFunction = contract(PolyFunction).sign([owl.polynomial]);
/**
 * @category Polynomial
 * @return join arrays of monomials
 * ```
 * PolyJoin([x^5, 2x^6], [3x^7])
 * // [x^5, 2x^6, 3x^7]
 * ```
 */
function PolyJoin(...polys) {
    polys = polys.map(p => PolyClone(p));
    let arr = [];
    for (let p of polys)
        arr.push(...p);
    return arr;
}
globalThis.PolyJoin = contract(PolyJoin).sign([owl.polynomial]);
/**
 * @category Polynomial
 * @return combine like terms in polynomial
 * ```
 * PolySimplify([x^5, 2x^6, 3x^5])
 * // [4x^5, 2x^6]
 * ```
 */
function PolySimplify(poly) {
    poly = PolyClone(poly);
    let arr = [];
    function findLikeTerm(M) {
        return arr.find(m => m.signature() === M.signature());
    }
    for (let M of poly) {
        let like = findLikeTerm(M);
        if (like) {
            like.coeff += M.coeff;
        }
        else {
            arr.push(M);
        }
    }
    return arr.filter(m => m.coeff !== 0);
}
globalThis.PolySimplify = contract(PolySimplify).sign([owl.polynomial]);
/**
 * @category Polynomial
 * @return the degree of the polynomial
 * ```
 * PolyDegree([x^5, 2x^6, 3x^7]) // 7
 * ```
 */
function PolyDegree(poly) {
    return Max(...poly.map(M => M.degree()));
}
globalThis.PolyDegree = contract(PolyDegree).sign([owl.polynomial]);


/***/ }),

/***/ 3286:
/***/ (() => {

"use strict";

/**
 * @category Quadratic
 * @return the discriminant b^2-4ac.
 * ```
 * Discriminant(2,3,4) // -23
 * ```
 */
function Discriminant(a, b, c) {
    return b * b - 4 * a * c;
}
globalThis.Discriminant = contract(Discriminant).sign([owl.nonZero, owl.num, owl.num]);
/**
 * @category Quadratic
 * @return the roots [p,q] of ax^2+bx+c=0 where p<=q
 * ```
 * QuadraticRoot(1,2,-3) // [-3,1]
 * QuadraticRoot(1,2,3) // throw when no real root
 * ```
 */
function QuadraticRoot(a, b, c) {
    const d = Discriminant(a, b, c);
    const s = Math.sqrt(d);
    const r1 = Divide(-b - s, 2 * a);
    const r2 = Divide(-b + s, 2 * a);
    return [Min(r1, r2), Max(r1, r2)];
}
globalThis.QuadraticRoot = contract(QuadraticRoot).seal({
    arg: [owl.nonZero, owl.num, owl.num],
    args: function has_real_root(a, b, c) { return b ** 2 - 4 * a * c >= 0; }
});
/**
 * @category Quadratic
 * @return the vertex [h,k] of y=ax^2+bx+c.
 * ```
 * QuadraticVertex(1,2,3) // [-1,2]
 * ```
 */
function QuadraticVertex(a, b, c) {
    const h = Divide(-b, 2 * a);
    const k = a * h * h + b * h + c;
    return [h, k];
}
globalThis.QuadraticVertex = contract(QuadraticVertex).sign([owl.nonZero, owl.num, owl.num]);
/**
 * @category Quadratic
 * @return the quadratic coeff [a,b,c] from given a and roots p and q.
 * ```
 * QuadraticFromRoot(1,2,3) // [1,-5,6]
 * QuadraticFromRoot(-2,4,-3) // [-2,2,24]
 * ```
 */
function QuadraticFromRoot(a, p, q) {
    return [a, -a * (p + q), a * p * q];
}
globalThis.QuadraticFromRoot = contract(QuadraticFromRoot).sign([owl.nonZero, owl.num, owl.num]);
/**
 * @category Quadratic
 * @return the quadratic coeff [a,b,c] from given a and vertex (h,k).
 * ```
 * QuadraticFromVertex(1,2,3) // [1,-4,7]
 * QuadraticFromVertex(-2,4,-3) // [-2,16,-35]
 * ```
 */
function QuadraticFromVertex(a, h, k) {
    const b = -2 * a * h;
    const c = k - a * h * h - b * h;
    return [a, b, c];
}
globalThis.QuadraticFromVertex = contract(QuadraticFromVertex).sign([owl.nonZero, owl.num, owl.num]);


/***/ }),

/***/ 8620:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BuildRatio = void 0;
const latex_1 = __webpack_require__(1838);
const support_1 = __webpack_require__(3760);
function BuildRatio(variables, func, latex, { cases = ["Before", "After"], subscript = [1, 2], sigfig = {} } = {}) {
    let system = (0, support_1.toEquSystem)(variables, [[func, latex]]);
    let vars = system.variables;
    let [given, unknown, ...constants] = RndShuffle(...vars);
    let g = [];
    let u = [];
    system.fit();
    given.round(sigfig[given.sym]);
    unknown.round(sigfig[unknown.sym]);
    g.push(given.getVal());
    u.push(unknown.getVal());
    system.fitAgain(constants);
    for (let i = 0; i < 10; i++) { // avoid accidentally getting same set of [given,unknown]
        system.fitAgain([given, unknown]);
        given.round(sigfig[given.sym]);
        if (given.getVal() !== g[0])
            break;
    }
    system.fitAgain([unknown]);
    g.push(given.getVal());
    u.push(unknown.getVal());
    function setSubscript(order) {
        if (order === 0) {
            given.label();
            unknown.label();
        }
        let subs = subscript;
        given.label(subs[order - 1]);
        unknown.label(subs[order - 1]);
    }
    function setVal(order) {
        if (order === 0)
            return;
        given.set(g[order - 1]);
        unknown.set(u[order - 1]);
    }
    function setCase(order) {
        setSubscript(order);
        setVal(order);
    }
    function printRatioFraction(case1Show = [], case2Show = []) {
        setCase(2);
        let [lhs2, rhs2] = system.print(case2Show).split("=");
        setCase(1);
        let [lhs1, rhs1] = system.print(case1Show).split("=");
        return `\\dfrac{${lhs1}}{${lhs2}}=\\dfrac{${rhs1}}{${rhs2}}`;
    }
    function printAns() {
        setCase(2);
        return unknown.full();
    }
    function sol() {
        return (0, latex_1.latexAligned)([
            printRatioFraction(),
            printRatioFraction([given, unknown], [given]),
            printAns()
        ]);
    }
    function table() {
        setCase(1);
        let G1 = "$" + given.long();
        let U1 = "$" + unknown.long();
        setCase(2);
        let G2 = "$" + given.long();
        let U2 = "$" + unknown.symbol();
        let [case1, case2] = cases;
        setCase(0);
        return Table({
            content: [
                ["", "$" + given.symbol(), "$" + unknown.symbol()],
                [case1, G1, U1],
                [case2, G2, U2]
            ],
            columns: 'c|c:c',
            rows: 'r|r:r',
        });
    }
    function getUnknown() {
        setCase(2);
        return [unknown.symbol(), unknown.name, unknown.getVal(), unknown.unit];
    }
    function getAns() {
        setCase(2);
        return { val: unknown.getVal(), unit: unknown.unit };
    }
    return {
        table: table(),
        sol: sol(),
        consts: [
            constants.map(v => v.symbol()),
            constants.map(v => v.name)
        ],
        given: [
            given.symbol(),
            given.name
        ],
        unknown: getUnknown(),
        ans: getAns()
    };
}
exports.BuildRatio = BuildRatio;


/***/ }),

/***/ 5033:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BuildSolve = void 0;
const latex_1 = __webpack_require__(1838);
const support_1 = __webpack_require__(3760);
function BuildSolve(variables, equations, { listSym = false, avoids = [], sigfig = {} } = {}) {
    for (let i = 0; i <= 10; i++) {
        try {
            return BuildSolveOnce(variables, equations, { listSym, avoids, sigfig });
        }
        catch (e) {
            if (i === 10) {
                throw e;
            }
            else {
                continue;
            }
        }
    }
    throw "never";
}
exports.BuildSolve = BuildSolve;
function BuildSolveOnce(variables, equations, { listSym = false, avoids = [], sigfig = {} } = {}) {
    let system = (0, support_1.toEquSystem)(variables, equations);
    system.fit();
    let [givens, hiddens, unknown] = system.generateSolvables(avoids);
    givens.forEach($ => $.round(sigfig[$.sym]));
    system.fitAgain(hiddens);
    function sol() {
        if (equations.length === 1) {
            let eq = system.equations[0];
            return (0, latex_1.latexAligned)([
                eq.print(),
                eq.print(givens),
                unknown.full()
            ]);
        }
        else {
            let T = "";
            T += system.print() + " \\\\~\\\\ ";
            T += system.print(givens) + " \\\\~\\\\ ";
            // let hds = [...hiddens]
            // hds.sort((a, b) => a.order - b.order)
            T += (0, latex_1.latexBraced)(hiddens.map($ => $.full()));
            return T;
        }
    }
    return {
        list: givens.map($ => listSym ? $.rich() : $.whole()).join("\\\\"),
        sol: sol(),
        vars: system.variables.map(v => givens.includes(v) ? v.long() : v.symbol()),
        vals: system.variables.map($ => $.getVal()),
        unknown: [
            unknown.symbol(),
            unknown.name,
            unknown.getVal(),
            unknown.unit
        ],
        ans: { val: unknown.getVal(), unit: unknown.unit }
    };
}


/***/ }),

/***/ 1871:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BuildSolve2 = void 0;
const latex_1 = __webpack_require__(1838);
const support_1 = __webpack_require__(3760);
function BuildSolve2(variables, equations, { listSym = false, avoids = [], sigfig = {} } = {}) {
    for (let i = 0; i <= 10; i++) {
        try {
            return BuildSolveOnce(variables, equations, { listSym, avoids, sigfig });
        }
        catch (e) {
            if (i === 10) {
                throw e;
            }
            else {
                continue;
            }
        }
    }
    throw "never";
}
exports.BuildSolve2 = BuildSolve2;
function BuildSolveOnce(variables, equations, { listSym = false, avoids = [], sigfig = {} } = {}) {
    let system = (0, support_1.toEquSystem)(variables, equations);
    system.fit();
    let [givens, hiddens, unknown] = system.generateSolvables(avoids);
    givens.forEach($ => $.round(sigfig[$.sym]));
    system.fitAgain(hiddens);
    function sol() {
        if (equations.length === 1) {
            let eq = system.equations[0];
            return (0, latex_1.latexAligned)([
                eq.print(),
                eq.print(givens),
                unknown.full()
            ]);
        }
        else {
            // let T = ""
            // T += system.print() + " \\\\~\\\\ "
            // T += system.print(givens) + " \\\\~\\\\ "
            // // let hds = [...hiddens]
            // // hds.sort((a, b) => a.order - b.order)
            // T += latexBraced(hiddens.map($ => $.full()))
            return system.solInSteps(unknown);
        }
    }
    return {
        list: givens.map($ => listSym ? $.rich() : $.whole()).join("\\\\"),
        sol: sol(),
        vars: system.variables.map(v => givens.includes(v) ? v.long() : v.symbol()),
        vals: system.variables.map($ => $.getVal()),
        unknown: [
            unknown.symbol(),
            unknown.name,
            unknown.getVal(),
            unknown.unit
        ],
        ans: { val: unknown.getVal(), unit: unknown.unit }
    };
}


/***/ }),

/***/ 6871:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BuildTrend = void 0;
const support_1 = __webpack_require__(3760);
function BuildTrend(variables, equations, settings = {}) {
    let system = (0, support_1.toEquSystem)(variables, equations);
    let [constants, agent, responses, target] = system.generateTrend();
    function toWord(change) {
        let trendWords = settings.trends ?? ['increases', 'decreases', 'is unchanged'];
        if (change > 0)
            return trendWords[0];
        if (change === 0)
            return trendWords[2];
        if (change < 0)
            return trendWords[1];
        return "[error]";
    }
    function toCode(change) {
        if (change > 0)
            return 0;
        if (change === 0)
            return 2;
        if (change < 0)
            return 1;
        return 3;
    }
    return {
        consts: [
            constants.map(v => v.symbol()),
            constants.map(v => v.name)
        ],
        agent: [
            agent.symbol(),
            agent.name,
            toWord(agent.getVal()),
            toCode(agent.getVal())
        ],
        responses: responses.map(v => [
            v.symbol(),
            v.name,
            toWord(v.getVal()),
            toCode(v.getVal())
        ]),
        target: [
            target.symbol(),
            target.name,
            toWord(target.getVal()),
            toCode(target.getVal())
        ],
        sol: system.print()
    };
}
exports.BuildTrend = BuildTrend;


/***/ }),

/***/ 6661:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const build_solve_1 = __webpack_require__(5033);
const build_trend_1 = __webpack_require__(6871);
const build_ratio_1 = __webpack_require__(8620);
const build_solve2_1 = __webpack_require__(1871);
globalThis.BuildSolve = build_solve_1.BuildSolve;
globalThis.BuildTrend = build_trend_1.BuildTrend;
globalThis.BuildRatio = build_ratio_1.BuildRatio;
globalThis.BuildSolve2 = build_solve2_1.BuildSolve2;


/***/ }),

/***/ 404:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Equation = void 0;
class Equation {
    constructor(zeroFunc, latex, dep) {
        this.zeroFunc = zeroFunc;
        this.latex = latex;
        this.dep = dep;
    }
    // solve() {
    //     if (this.dep.solvable())
    //         this.fit()
    // }
    // fit() {
    //     let roots = bisection(this.zeroFunc, this.dep.bounds())
    //     this.dep.setVals(roots)
    // }
    // fitAgain(vars: Variable[]) {
    //     vars.forEach($ => $.clear())
    //     vars.forEach($ => $.widen())
    //     this.fit()
    // }
    print(showVars = []) {
        return this.dep.write(this.latex, showVars);
    }
}
exports.Equation = Equation;


/***/ }),

/***/ 1838:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.latexBraced = exports.latexAligned = void 0;
function latexAligned(texts) {
    let T = "";
    T += "\\begin{aligned}";
    for (let t of texts)
        T += t + " \\\\ ";
    T += " \\end{aligned}";
    T = T.replaceAll("=", "&=");
    T = T.replaceAll("&&=", "&=");
    return T;
}
exports.latexAligned = latexAligned;
function latexBraced(texts) {
    return "\\left\\{" + latexAligned(texts) + "\\right.";
}
exports.latexBraced = latexBraced;


/***/ }),

/***/ 3760:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toEquSystem = exports.toEquations = exports.toVariables = void 0;
const equation_1 = __webpack_require__(404);
const system_1 = __webpack_require__(793);
const variable_1 = __webpack_require__(7515);
function getSignature(func) {
    const fnStr = func.toString();
    return fnStr
        .slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')'))
        .replaceAll(" ", "")
        .split(",");
}
function findVarBySym(sym, vars) {
    let v = vars.find(v => v.sym === sym);
    if (v === undefined)
        throw "Fail to find variable: " + sym;
    return v;
}
function getDeps(func, vars) {
    let dep = getSignature(func);
    let vs = dep.map($ => findVarBySym($, vars));
    return new variable_1.Variables(...vs);
}
function toVariable(variable) {
    let [sym, name, range, unit, display] = variable;
    return new variable_1.Variable(sym, name, range, unit, display);
}
function toVariables(vars) {
    let vs = vars.map($ => toVariable($));
    return new variable_1.Variables(...vs);
}
exports.toVariables = toVariables;
function toEquation(eq, vars) {
    let [func, latex] = eq;
    return new equation_1.Equation(func, latex, getDeps(func, vars));
}
function toEquations(eqs, vars) {
    return eqs.map($ => toEquation($, vars));
}
exports.toEquations = toEquations;
function toEquSystem(variables, equations) {
    let vars = toVariables(variables);
    let eqs = toEquations(equations, vars);
    return new system_1.EquSystem(vars, eqs);
}
exports.toEquSystem = toEquSystem;


/***/ }),

/***/ 793:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EquSystem = void 0;
const variable_1 = __webpack_require__(7515);
const latex_1 = __webpack_require__(1838);
const gauss_1 = __webpack_require__(6912);
class EquSystem {
    constructor(variables, equations) {
        this.variables = variables;
        this.equations = equations;
        this.tree = {};
        this.fs = equations.map($ => $.zeroFunc);
    }
    fit() {
        let vals = (0, gauss_1.fit)(this.fs, this.variables.rangeObj(), this.variables.valObj());
        this.variables.setVal(vals);
    }
    fitAgain(vars) {
        vars.forEach($ => $.clear());
        vars.forEach($ => $.widen());
        this.fit();
    }
    getVariables(symbols) {
        const vars = symbols.map($ => this.variables.find(_ => _.sym === $));
        return new variable_1.Variables(...vars);
    }
    getFullTree(avoids = []) {
        let trees = RndShuffle(...(0, gauss_1.analyze)(this.fs));
        for (let tree of trees) {
            let info = (0, gauss_1.readTree)(tree);
            for (let top of RndShuffle(...info.tops)) {
                let flow = (0, gauss_1.solutionFlow)(this.fs, tree, [top]);
                if (flow.length === this.fs.length && this.checkAvoids(info.givens, top, avoids))
                    this.tree = tree; // save the tree!
                return {
                    tree,
                    top: this.getVariables([top])[0],
                    info
                };
            }
        }
        throw 'no sensible set of solvables found!';
    }
    checkAvoid(givens, unknown, avoid) {
        let allAreGivensOrUnknown = avoid.every($ => givens.includes($) || unknown === $);
        let containUnknown = avoid.includes(unknown);
        let immediatelySolved = allAreGivensOrUnknown && containUnknown;
        return !immediatelySolved;
    }
    checkAvoids(givens, unknown, avoids) {
        return avoids.every($ => this.checkAvoid(givens, unknown, $));
    }
    generateSolvables(avoids = []) {
        let { tree, top, info } = this.getFullTree(avoids);
        return [
            this.getVariables(info.givens),
            this.getVariables(info.solved),
            top,
        ];
    }
    solInSteps(unknown) {
        // use the tree stored in this
        let fs = (0, gauss_1.solutionFlow)(this.fs, this.tree, [unknown.sym]);
        let eqs = fs.map($ => this.equations.find(_ => _.zeroFunc === $));
        let info = (0, gauss_1.readTree)(this.tree);
        let givens = info.givens.map($ => this.variables.find(_ => _.sym === $));
        let T = '';
        for (let eq of eqs) {
            let solved = (0, gauss_1.solvingSymbol)(eq.zeroFunc, this.tree);
            let solvedVar = this.variables.find($ => $.sym === solved);
            T += (0, latex_1.latexAligned)([eq.print(), eq.print(givens), solvedVar.full()]);
            T += " \\\\~\\\\ ";
            givens.push(solvedVar);
        }
        return T;
    }
    generateTrend() {
        let { tree, top, info } = this.getFullTree();
        let [agent, ...constants] = RndShuffle(...this.getVariables(info.givens));
        let responses = [...this.getVariables(info.solved)];
        responses = RndShuffle(...responses);
        let target = top;
        this.variables.clear();
        this.fit();
        let oldVal = this.variables.getVals();
        agent.shake();
        this.fitAgain(responses);
        this.variables.compareWith(oldVal);
        return [constants, agent, responses, target];
    }
    print(givens = []) {
        let eqs = this.equations.map($ => $.dep.write($.latex, givens));
        return eqs.length === 1 ? eqs[0] : (0, latex_1.latexBraced)(eqs);
    }
}
exports.EquSystem = EquSystem;


/***/ }),

/***/ 3103:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseUnit = exports.findUnit = void 0;
const DEFAULT_UNIT = {
    'illuminance': 'lx',
    'luminous flux': 'lm',
    'overall thermal transfer value': 'W m-2',
    'thermal conductivity': 'W m-1  K-1',
    'thermal Transmittance': 'W m-2 K-1',
    'cooling capacity': 'W',
    'rate of conduction': 'W',
    'effciency': '\\%',
    'angular speed': 'rad s-1',
    'angular displacement': 'rad',
    'time': 's',
    'distance': 'm',
    'displacement': 'm',
    'separation': 'm',
    'speed': 'm s-1',
    'velocity': 'm s-1',
    'acceleration': 'm s-2',
    'deceleration': 'm s-2',
    'area': 'm2',
    'volume': 'm3',
    'height': 'm',
    'radius': 'm',
    'diameter': 'm',
    'length': 'm',
    'width': 'm',
    'wavelength': 'm',
    'capacitiy': 'm3',
    'angle': '°',
    'energy': 'J',
    'molar mass': 'kg mol-1',
    'mass': 'kg',
    'electromotive force': 'V',
    'specific heat capacity': 'J kg-1 °C-1',
    'heat capacity': 'J °C-1',
    'temperature': '°C',
    'latent heat': 'J kg-1',
    'pressure': 'Pa',
    'number of molecule': '',
    'number of mole': 'mol',
    'force': 'N',
    'weight': 'N',
    'tension': 'N',
    'normal reaction': 'N',
    'friction': 'N',
    'moment': 'N m',
    'power': 'W',
    'gravitational field strength': 'N kg-1',
    'angular position': '°',
    'period': 's',
    'frequency': 'Hz',
    'amplitude': 'm',
    'charge': 'C',
    'current': 'A',
    'voltage': 'V',
    'resistance': 'Ω',
    'electric field strength': 'N C-1',
    'potential difference': 'V',
    'resistivity': 'Ω m',
    'emf': 'V',
    'e.m.f.': 'V',
    'magnetic field': 'B',
    'magnetic flux': 'Wb',
    'activity': 'Bq',
    'half-life': 's',
    'decay constant': 's-1',
    'density': 'kg m-3',
    'KE': 'J',
    'PE': 'J'
};
const BASE_UNITS = [
    'rad', 'mol',
    'Wb', 'Bq', 'eV', '°C', 'Pa',
    's', 'm', 'g', 'A', 'K', 'J', 'N', 'W', 'C', 'V', 'T', 'u', 'Ω'
];
const BASE_PREFIX = ['n', 'u', 'm', 'c', 'k', 'M', 'G', 'T', ''];
const BASE_INDEX = ['-4', '-3', '-2', '-1', '1', '2', '3', '4'];
function findUnit(name) {
    for (let k in DEFAULT_UNIT) {
        if (name.includes(k))
            return DEFAULT_UNIT[k];
    }
    return undefined;
}
exports.findUnit = findUnit;
function parseUnit(raw) {
    let T = " " + raw + " ";
    for (let u of BASE_UNITS) {
        if (!T.includes(u))
            continue;
        for (let p of BASE_PREFIX) {
            T = T.replaceAll(new RegExp('([^a-zA-z°])' + p + u + '([^a-zA-z°])', 'g'), '$1' + "~\\text{" + p + u + "}" + '$2');
        }
    }
    for (let i of BASE_INDEX)
        T = T.replaceAll(new RegExp('([^0123456789-])' + i + '([^0123456789-])', 'g'), '$1' + "^{" + i + "}" + '$2');
    return T;
}
exports.parseUnit = parseUnit;


/***/ }),

/***/ 7515:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Variables = exports.Variable = void 0;
const units_1 = __webpack_require__(3103);
function parseRange(rng) {
    if (Array.isArray(rng)) {
        return rng.length === 2 ? rng : [rng[0], rng[0]];
    }
    else {
        return rng > 0 ? [rng / 10, rng * 10] : [rng * 10, rng / 10];
    }
}
class Variable {
    constructor(sym, name, range, unit, display) {
        this.sym = sym;
        this.name = name;
        this.val = NaN;
        // public order: number = -1
        this.subscript = "";
        unit ??= (0, units_1.findUnit)(name);
        unit ??= "";
        this.unit = (0, units_1.parseUnit)(unit);
        this.range = parseRange(range);
        let [min, max] = this.range;
        if (min > max)
            throw "[Variable] Range must have max > min";
        this.display = display ?? this.sym;
    }
    // bounds(): [number, number] {
    //     if (Number.isFinite(this.val))
    //         return [this.val, this.val]
    //     return this.range
    // }
    set(val) {
        this.val = val;
    }
    round(sigfig = 2) {
        this.set(Round(this.val, sigfig));
    }
    shake() {
        let ratio = RndT() ? 1.05 : 0.95;
        this.set(this.val * ratio);
    }
    clear() {
        this.set(NaN);
    }
    getVal() {
        return this.val;
    }
    // solved(): boolean {
    //     return Number.isFinite(this.val)
    // }
    widen(fraction = 0.1) {
        let [min, max] = this.range;
        this.range = [
            min - Math.abs(min * fraction),
            max + Math.abs(max * fraction)
        ];
    }
    label(subscript = "") {
        this.subscript = String(subscript);
    }
    symbol() {
        if (this.subscript.length > 0)
            return this.display + "_{" + this.subscript + "}";
        return this.display;
    }
    short() {
        let v = cal.blur(Round(this.val, 3));
        let abs = Math.abs(v);
        return String((abs >= 10000 || abs <= 0.01) ? Sci(v) : v);
    }
    long() {
        return this.short() + this.unit;
    }
    full() {
        return this.symbol() + " = " + this.long();
    }
    whole() {
        return "\\text{" + this.name + "}" + " = " + this.long();
    }
    rich() {
        return "\\text{" + this.name + "}~" + this.symbol() + " = " + this.long();
    }
    writeSymbol(latex) {
        let T = latex;
        let sym = this.sym;
        let s = this.symbol();
        T = T.replaceAll("*(" + sym + ")", s);
        T = T.replaceAll("*" + sym, s);
        T = T.replaceAll("$(" + sym + ")", s);
        T = T.replaceAll("$" + sym, s);
        return T;
    }
    writeValue(latex) {
        let T = latex;
        let sym = this.sym;
        let S = this.short();
        let L = this.long();
        T = T.replaceAll("*(" + sym + ")", "(" + S + ")");
        T = T.replaceAll("*" + sym, S);
        T = T.replaceAll("$(" + sym + ")", "(" + L + ")");
        T = T.replaceAll("$" + sym, L);
        return T;
    }
}
exports.Variable = Variable;
class Variables extends Array {
    // private store: number[] = []
    // bounds(): [number, number][] {
    //     return this.map($ => $.bounds())
    // }
    clear() {
        this.forEach($ => $.clear());
    }
    widen() {
        this.forEach($ => $.widen());
    }
    getVals() {
        return this.map($ => $.getVal());
    }
    setVal(obj) {
        for (let k in obj) {
            let val = obj[k];
            let variable = this.find($ => $.sym === k);
            variable.set(val);
        }
    }
    // setVals2(vals: number[]): void {
    //     this.forEach((v, i) => v.set(vals[i]))
    // }
    // solved(): boolean {
    //     return this.every($ => $.solved())
    // }
    // solvable(): boolean {
    //     let unsolved = this.filter($ => !$.solved())
    //     return unsolved.length === 1
    // }
    // private maxOrder(): number {
    //     let orders = this.map($ => $.order)
    //     return Math.max(...orders)
    // }
    // zeros(): Variables {
    //     return new Variables(...this.filter($ => $.order === 0))
    // }
    // shuffledZeros(): Variables {
    //     return new Variables(...RndShuffle(...this.zeros()))
    // }
    // positives(): Variables {
    //     return new Variables(...this.filter($ => $.order > 0))
    // }
    // tops(): Variables {
    //     let max = this.maxOrder()
    //     return new Variables(...this.filter($ => $.order === max))
    // }
    // pickTop(): Variable {
    //     return RndPick(...this.tops())
    // }
    write(latex, showVars) {
        let T = latex;
        let shows = [...showVars];
        shows.sort((a, b) => b.sym.length - a.sym.length);
        for (let v of this) {
            T = showVars.includes(v) ? v.writeValue(T) : v.writeSymbol(T);
        }
        return T;
    }
    compareWith(oldVals) {
        this.forEach((v, i) => {
            let b = v.getVal();
            let a = oldVals[i];
            let mid = (Math.abs(a) + Math.abs(b)) / 2;
            let percent = (b - a) / mid;
            let THRESHOLD = 0.0000001;
            let sign = 0;
            if (percent > THRESHOLD)
                sign = 1;
            if (percent < -THRESHOLD)
                sign = -1;
            v.set(sign);
        });
    }
    rangeObj() {
        let obj = {};
        for (let v of this) {
            obj[v.sym] = v.range;
        }
        return obj;
    }
    valObj() {
        let obj = {};
        for (let v of this) {
            obj[v.sym] = v.getVal();
        }
        return obj;
    }
}
exports.Variables = Variables;


/***/ }),

/***/ 8004:
/***/ (() => {

"use strict";

/**
 * @category Assertion
 * @return check is a finite number.
 * ```
 * IsNum(1.23) // true
 * IsNum(NaN) // false
 * IsNum(Infinity) // false
 * IsNum('2') // false
 * ```
 */
function IsNum(...items) {
    return items.every(owl.num);
}
globalThis.IsNum = IsNum;
/**
 * @category Assertion
 * @return check is an integer.
 * ```
 * IsInteger(5) // true
 * IsInteger(0.5) // false
 * ```
 */
function IsInteger(...items) {
    return items.every(owl.int);
}
globalThis.IsInteger = IsInteger;
/**
 * @category Assertion
 * @return check is a decimal (non-integer).
 * ```
 * IsDecimal(0.5) // true
 * IsDecimal(5) // false
 * ```
 */
function IsDecimal(...items) {
    return items.every(owl.dec);
}
globalThis.IsDecimal = IsDecimal;
/**
 * @category Assertion
 * @return check is a terminating decimal (or integer)
 * ```
 * IsTerminating(1/4) // true
 * IsTerminating(5) // false
 * ```
 */
function IsTerminating(...items) {
    return items.every(owl.terminating);
}
globalThis.IsTerminating = IsTerminating;
/**
 * @category Assertion
 * @return check is a rational number with denominator <= 1000.
 * ```
 * IsRational(0.5) // true
 * IsRational(-5) // true
 * IsRational(Math.sqrt(2)) // false
 * ```
 */
function IsRational(...items) {
    return items.every(owl.rational);
}
globalThis.IsRational = IsRational;
/**
 * @category Assertion
 * @return check is an odd integer.
 * ```
 * IsOdd(5) // true
 * IsOdd(-5) // true
 * IsOdd(4) // false
 * ```
 */
function IsOdd(...items) {
    return items.every(owl.odd);
}
globalThis.IsOdd = IsOdd;
/**
 * @category Assertion
 * @return check is an even integer.
 * ```
 * IsEven(4) // true
 * IsEven(-4) // true
 * IsEven(0) // true
 * IsEven(5) // false
 * ```
 */
function IsEven(...items) {
    return items.every(owl.even);
}
globalThis.IsEven = IsEven;
/**
 * @category Assertion
 * @return check is in range [0,1].
 * ```
 * IsProbability(0) // true
 * IsProbability(0.5467) // true
 * IsProbability(1.1) // false
 * IsProbability(-0.1) // false
 * ```
 */
function IsProbability(...items) {
    return items.every(owl.prob);
}
globalThis.IsProbability = IsProbability;
/**
 * @category Assertion
 * @return check is a square number.
 * ```
 * IsSquareNum(9) // true
 * IsSquareNum(10) // false
 * IsSquareNum(-9) // false
 * ```
 */
function IsSquareNum(...items) {
    return items.every(owl.sq);
}
globalThis.IsSquareNum = IsSquareNum;
/**
 * @category Assertion
 * @return check is positive.
 * ```
 * IsPositive(2) // true
 * IsPositive(0) // false
 * IsPositive(-2) // false
 * ```
 */
function IsPositive(...items) {
    return items.every(owl.positive);
}
globalThis.IsPositive = IsPositive;
/**
 * @category Assertion
 * @return check is non-negative.
 * ```
 * IsNonNegative(2) // true
 * IsNonNegative(0) // true
 * IsNonNegative(-2) // false
 * IsNonNegative(1.5) // true
 * ```
 */
function IsNonNegative(...items) {
    return items.every(owl.nonNegative);
}
globalThis.IsNonNegative = IsNonNegative;
/**
 * @category Assertion
 * @return check is a positive integer.
 * ```
 * IsPositiveInteger(2) // true
 * IsPositiveInteger(0) // false
 * IsPositiveInteger(-2) // false
 * IsPositiveInteger(1.5) // false
 * ```
 */
function IsPositiveInteger(...items) {
    return items.every(owl.positiveInt);
}
globalThis.IsPositiveInteger = IsPositiveInteger;
/**
 * @category Assertion
 * @return check is a non-negative integer.
 * ```
 * IsNonNegativeInteger(2) // true
 * IsNonNegativeInteger(0) // true
 * IsNonNegativeInteger(-2) // false
 * IsNonNegativeInteger(1.5) // false
 * ```
 */
function IsNonNegativeInteger(...items) {
    return items.every(owl.nonNegativeInt);
}
globalThis.IsNonNegativeInteger = IsNonNegativeInteger;
/**
 * @category Assertion
 * @return check is negative.
 * ```
 * IsNegative(-2) // true
 * IsNegative(0) // false
 * IsNegative(2) // false
 * ```
 */
function IsNegative(...items) {
    return items.every(owl.negative);
}
globalThis.IsNegative = IsNegative;
/**
 * @category Assertion
 * @return check is non-zero finite number.
 * ```
 * IsNonZero(2) // true
 * IsNonZero(0) // false
 * IsNonZero(-2) // true
 * ```
 */
function IsNonZero(...items) {
    return items.every(owl.nonZero);
}
globalThis.IsNonZero = IsNonZero;
/**
 * @category Assertion
 * @return check is between min and max inclusive.
 * ```
 * IsBetween(2,5)(3) // true
 * IsBetween(2,5)(2) // true
 * IsBetween(2,5)(1) // false
 * ```
 */
function IsBetween(min, max) {
    return (...items) => items.every(owl.between(min, max));
}
globalThis.IsBetween = contract(IsBetween).seal({
    arg: [owl.num],
    args: function is_range(min, max) { return min < max; }
});
/**
 * @category Assertion
 * @return check if its abs is between min and max inclusive.
 * ```
 * IsAbsBetween(2,5)(-3) // true
 * IsAbsBetween(2,5)(-2) // true
 * IsAbsBetween(2,5)(1) // false
 * ```
 */
function IsAbsBetween(min, max) {
    return (...items) => items.every(owl.absBetween(min, max));
}
globalThis.IsAbsBetween = contract(IsAbsBetween).seal({
    arg: [owl.nonNegative],
    args: function is_range(min, max) { return min < max; }
});
/**
 * @category Assertion
 * @return Check if the points are chessboard around anchor.
 * ```
 * IsAroundPoint([0,0],2)([2,2]) // true
 * IsAroundPoint([0,0],2)([3,0]) // false
 * ```
 */
function IsAroundPoint(anchor, range) {
    return (...points) => points.every(p => ChessboardDistance(anchor, p) <= range);
}
globalThis.IsAroundPoint = contract(IsAroundPoint).sign([owl.point2D, owl.positive]);
/**
 * @category Assertion
 * @return Check if the array of legnths can form a triangle
 * ```
 * IsTriangle([1,1,1]) // true
 * IsTriangle([6,7,8]) // true
 * IsTriangle([1,2,3]) // false
 * IsTriangle([6,14,8]) // false
 * ```
 */
function IsTriangle(...triangles) {
    return triangles.every(owl.triangleSides);
}
globalThis.IsTriangle = contract(IsTriangle).sign([owl.triple]);


/***/ }),

/***/ 5315:
/***/ (() => {

"use strict";

/**
 * @category Combinatorics
 * @return the factorial n!
 * ```
 * Factorial(5) // 120
 * Factorial(1.5) // throw
 * ```
 */
function Factorial(n) {
    return cal.factorial(n);
}
globalThis.Factorial = contract(Factorial).sign([owl.nonNegativeInt]);
/**
 * @category Combinatorics
 * @return nCr
 * ```
 * nCr(5,3) // 10
 * ```
 */
function nCr(n, r) {
    return cal.nCr(n, r);
}
globalThis.nCr = contract(nCr).seal({
    arg: [owl.nonNegativeInt],
    args: function r_less_than_n(n, r) { return n >= r; }
});
/**
 * @category Combinatorics
 * @return nPr
 * ```
 * nPr(5,3) // 60
 * ```
 */
function nPr(n, r) {
    return cal.nPr(n, r);
}
globalThis.nPr = contract(nPr).seal({
    arg: [owl.nonNegativeInt],
    args: function r_less_than_n(n, r) { return n >= r; }
});


/***/ }),

/***/ 27:
/***/ (() => {

"use strict";

/**
 * @category Function
 * @return log(b,N)
 * ```
 * log(2,8) // 3
 * ```
 */
function log(b, N) {
    const v = Math.log(N) / Math.log(b);
    return cal.blur(v);
}
globalThis.log = contract(log).sign([owl.positive]);
/**
 * @deprecated
 * @ignore
 * @category Function
 * @return a**b, a to the power of b.
 * ```
 * Power(2,3) // 8
 * ```
 */
function Power(a, b) {
    const v = Math.pow(a, b);
    return cal.blur(v);
}
globalThis.Power = contract(Power).sign([owl.num]);
/**
 * @category Function
 * @return square root of x
 * ```
 * Sqrt(4) // 2
 * ```
 */
function Sqrt(x) {
    const v = Math.sqrt(x);
    return cal.blur(v);
}
globalThis.Sqrt = contract(Sqrt).sign([owl.nonNegative]);
/**
 * @category Function
 * @return the radian of the degree
 * ```
 * Radian(180) // pi
 * Radian(90) // pi/2
 * Radian(30) // PI/6
 * ```
 */
function Radian(degree) {
    const v = degree / 180 * Math.PI;
    return cal.blur(v);
}
globalThis.Radian = contract(Radian).sign([owl.num]);
/**
 * @category Function
 * @return the degree of the radian
 * ```
 * Degree(Math.PI) // 180
 * Degree(Math.PI/2) // 90
 * Degree(Math.PI/6) // 30
 * ```
 */
function Degree(radian) {
    const v = radian * 180 / Math.PI;
    return cal.blur(v);
}
globalThis.Degree = contract(Degree).sign([owl.num]);
/**
 * @category Function
 * @return sin(x).
 * ```
 * sin(30) // 0.5
 * ```
 */
function sin(x) {
    if (x % 180 === 0)
        return 0;
    let v = Math.sin(x / 180 * Math.PI);
    return cal.blur(v);
}
globalThis.sin = contract(sin).sign([owl.num]);
/**
 * @category Function
 * @return cos(x).
 * ```
 * cos(60) // 0.5
 * ```
 */
function cos(x) {
    if ((x - 90) % 180 === 0)
        return 0;
    let v = Math.cos(x / 180 * Math.PI);
    return cal.blur(v);
}
globalThis.cos = contract(cos).sign([owl.num]);
/**
 * @category Function
 * @return tan(x).
 * ```
 * tan(45) // 1
 * ```
 */
function tan(x) {
    if (x % 180 === 0)
        return 0;
    let v = Math.tan(x / 180 * Math.PI);
    return cal.blur(v);
}
globalThis.tan = contract(tan).sign([owl.num]);
/**
 * @category Function
 * @return arcsin(x) between -90 and 90.
 * ```
 * arcsin(0.5) // 30
 * ```
 */
function arcsin(x) {
    let v = Math.asin(x) * 180 / Math.PI;
    return cal.blur(v);
}
globalThis.arcsin = contract(arcsin).sign([owl.between(-1, 1)]);
/**
 * @category Function
 * @return arccos(x) between 0 and 180.
 * ```
 * arccos(0.5) // 60
 * ```
 */
function arccos(x) {
    let v = Math.acos(x) * 180 / Math.PI;
    return cal.blur(v);
}
globalThis.arccos = contract(arccos).sign([owl.between(-1, 1)]);
/**
 * @category Function
 * @return arctan(x) between -90 and 90.
 * ```
 * arctan(1) // 45
 * ```
 */
function arctan(x) {
    let v = Math.atan(x) * 180 / Math.PI;
    return cal.blur(v);
}
globalThis.arctan = contract(arctan).sign([owl.num]);


/***/ }),

/***/ 7202:
/***/ (() => {

"use strict";

/**
 * @category Geometry
 * @return the slope of AB
 * ```
 * Slope([0,0],[1,2]) // 2
 * Slope([1,2],[1,2]) // NaN
 * ```
 */
function Slope(A, B) {
    return (A[1] - B[1]) / (A[0] - B[0]);
}
globalThis.Slope = contract(Slope).seal({
    arg: [owl.point2D],
    args: function not_vertical(A, B) { return !cal.eq(A[0], B[0]); }
});
/**
 * @category Geometry
 * @return the slope perpendicular to AB
 * ```
 * SlopePd([0,0],[1,2]) // -0.5
 * SlopePd([1,2],[1,2]) // NaN
 * ```
 */
function SlopePd(A, B) {
    return -1 / Slope(A, B);
}
globalThis.SlopePd = contract(SlopePd).seal({
    arg: [owl.point2D],
    args: function not_horizontal(A, B) { return !cal.eq(A[1], B[1]); }
});
/**
 * @category Geometry
 * @return the distance AB
 * ```
 * Distance([0,0],[1,2]) // 2.23606797749979
 * ```
 */
function Distance(A, B) {
    return ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2) ** 0.5;
}
globalThis.Distance = contract(Distance).sign([owl.point2D]);
/**
 * @category Geometry
 * @return the chessboard distance AB, max(horizontal,vertical)
 * ```
 * ChessboardDistance([0,0],[1,2]) // 2
 * ChessboardDistance([0,0],[3,2]) // 3
 * ```
 */
function ChessboardDistance(A, B) {
    let x = Abs(A[0] - B[0]);
    let y = Abs(A[1] - B[1]);
    return Max(x, y);
}
globalThis.ChessboardDistance = contract(ChessboardDistance).sign([owl.point2D]);
/**
 * @category Geometry
 * @return the mid-pt / centroid of `points`
 * ```
 * Mid([1,2],[3,4]) // [2,3]
 * Mid([1,2],[3,4],[5,6]) // [3,4]
 * ```
 */
function Mid(...points) {
    return toShape2D(points).mean().toArray();
}
globalThis.Mid = contract(Mid).sign([owl.point2D]);
/**
 * @category Geometry
 * @return the point P on AB such that AP : PB = ratio : 1-ratio
 * ```
 * Slide([1,0],[5,0],0.75) // [4,0]
 * ```
 */
function Slide(A, B, ratio) {
    let r = ratio;
    let s = 1 - r;
    return [A[0] * s + B[0] * r, A[1] * s + B[1] * r];
}
globalThis.Slide = contract(Slide).sign([owl.point2D, owl.point2D, owl.num]);
/**
 * @category Geometry
 * @return point P rotated anticlockwise by angle q about point O.
 * ```
 * Rotate([1,2],90,[0,0]) // [-2,1]
 * ```
 */
function Rotate(P, q, O = [0, 0]) {
    return vec2D(O, P).rotate(q).add(O).blur().toArray();
}
globalThis.Rotate = contract(Rotate).sign([owl.point2D, owl.num, owl.point2D]);
/**
 * @category Geometry
 * @return the polar angle of B if A is the origin within [0,360].
 * ```
 * Dir([1,0],[3,2]) // 45
 * Dir([3,2],[1,0]) // 225
 * ```
 */
function Dir(A, B) {
    return vec2D(A, B).argument();
}
globalThis.Dir = contract(Dir).seal({
    arg: [owl.point2D],
    args: function distinct_points(A, B) { return owl.distinct([A, B]); }
});
/**
 * @category Geometry
 * @return the foot of perpendicular from P to AB.
 * ```
 * PdFoot([-1,-1],[1,1],[-2,2]) // [0,0]
 * ```
 */
function PdFoot(A, B, P) {
    return vec2D(A, P).projectOn(vec2D(A, B)).add(A).toArray();
}
globalThis.PdFoot = contract(PdFoot).seal({
    arg: [owl.point2D],
    args: function distinct_points(A, B, P) { return owl.distinct([A, B]); }
});
/**
 * @category Geometry
 * @return the intersection point of AB and CD.
 * ```
 * Intersection([0,0],[2,2],[2,0],[0,2]) // [1,1]
 * ```
 */
function Intersection(A, B, C, D) {
    return Crammer(B[1] - A[1], A[0] - B[0], A[0] * B[1] - B[0] * A[1], D[1] - C[1], C[0] - D[0], C[0] * D[1] - D[0] * C[1]);
}
globalThis.Intersection = contract(Intersection).seal({
    arg: [owl.point2D],
    args: function distinct_points(A, B, C, D) {
        return owl.distinct([A, B]) && owl.distinct([C, D]);
    }
});
/**
 * @category Geometry
 * @return Translate point P in the direction `dir` by a `distance`.
 * @param dir - a polar angle, or two points [A,B] representing Dir(A,B), or one point A representing Dir(P,A)
 * ```
 * Move([1,2],90,3) // [1,5]
 * Move([1,2],[2, 2],3) // [4,2]
 * Move([1,2],[[0,0],[1,0]],3) // [4,2]
 * ```
 */
function Move(P, dir, distance) {
    let q = 0;
    if (typeof dir === 'number') {
        q = dir;
    }
    else if (owl.point2D(dir)) {
        q = Dir(P, dir);
    }
    else {
        q = Dir(dir[0], dir[1]);
    }
    let x = P[0] + distance * cos(q);
    let y = P[1] + distance * sin(q);
    return [x, y];
}
globalThis.Move = contract(Move).sign([
    owl.point2D,
    owl.or([owl.num, owl.point2D, owl.arrayWith(owl.point2D)]),
    owl.num
]);
/**
 * @category Geometry
 * @return Translate point P to the right by a distance.
 * ```
 * MoveX([1,2],3) // [4,2]
 * MoveX([1,2],-3) // [-2,2]
 * ```
 */
function MoveX(P, distance) {
    let [x, y] = P;
    return [x + distance, y];
}
globalThis.MoveX = contract(MoveX).sign([owl.point2D, owl.num]);
/**
 * @category Geometry
 * @return Translate point P upward by a distance.
 * ```
 * MoveY([1,2],3) // [4,2]
 * MoveY([1,2],-3) // [-2,2]
 * ```
 */
function MoveY(P, distance) {
    let [x, y] = P;
    return [x, y + distance];
}
globalThis.MoveY = contract(MoveY).sign([owl.point2D, owl.num]);
/**
 * @category Geometry
 * @returns Move point `P` by vector `AB`, by a distance of `AB` times `scaled`.
 * ```
 * Shift([0,1],[[0,0],[1,0]],1) // [1,1]
 * Shift([0,1],[[0,0],[1,0]],2) // [2,1]
 * ```
 */
function Shift(P, [A, B], scale = 1) {
    let [x, y] = P;
    let [xA, yA] = A;
    let [xB, yB] = B;
    return [x + (xB - xA) * scale, y + (yB - yA) * scale];
}
globalThis.Shift = contract(Shift).sign([
    owl.point2D,
    owl.arrayWith(owl.point2D),
    owl.num
]);
/**
 * @category Geometry
 * @return Reflect point P about x-axis
 * ```
 * ReflectX([1,2]) // [1,-2]
 * ReflectX([1,-2]) // [1,2]
 * ```
 */
function ReflectX(P) {
    return [P[0], -P[1]];
}
globalThis.ReflectX = contract(ReflectX).sign([owl.point2D]);
/**
 * @category Geometry
 * @return Reflect point P about y-axis
 * ```
 * ReflectY([1,2]) // [-1,2]
 * ReflectY([-1,2]) // [1,2]
 * ```
 */
function ReflectY(P) {
    return [-P[0], P[1]];
}
globalThis.ReflectY = contract(ReflectY).sign([owl.point2D]);
/**
 * @category Geometry
 * @return angle of intersection between two slopes
 * ```
 * IntersectAngle(0,1) // 45
 * IntersectAngle(1,-1) // 90
 * ```
 */
function IntersectAngle(slope1, slope2) {
    let A1 = arctan(slope1);
    let A2 = arctan(slope2);
    let d = Abs(A1 - A2);
    if (d > 90)
        d = 180 - d;
    return d;
}
globalThis.IntersectAngle = contract(IntersectAngle).sign([owl.num]);
/**
 * @category Geometry
 * @return angle AOB, non-reflex
 * ```
 * Angle([1,0],[0,0],[0,2]) // 90
 * Angle([2,2],[1,1],[1,3]) // 45
 * Angle([1,3],[1,1],[2,2]) // 45
 * ```
 */
function Angle(A, O, B) {
    let anglePolar = AnglePolar(A, O, B);
    let a = IsReflex(A, O, B) ? 360 - anglePolar : anglePolar;
    return cal.blur(a);
}
globalThis.Angle = contract(Angle).seal({
    arg: [owl.point2D],
    args: function distinct_points(A, O, B) {
        return owl.distinct([A, O]) && owl.distinct([B, O]);
    }
});
/**
 * @category Geometry
 * @return angle AOB, measured anticlockwise
 * ```
 * AnglePolar([1,0],[0,0],[0,2]) // 90
 * AnglePolar([2,2],[1,1],[1,3]) // 45
 * AnglePolar([1,3],[1,1],[2,2]) // 315
 * ```
 */
function AnglePolar(A, O, B) {
    let a = vec2D(O, A).argument();
    let b = vec2D(O, B).argument();
    return a <= b ? b - a : 360 + b - a;
}
globalThis.AnglePolar = contract(AnglePolar).seal({
    arg: [owl.point2D],
    args: function distinct_points(A, O, B) {
        return owl.distinct([A, O]) && owl.distinct([B, O]);
    }
});
/**
 * @category Geometry
 * @return check if the polar angle AOB is reflex
 * ```
 * IsReflex([1,0],[0,0],[0,2]) // false
 * IsReflex([2,2],[1,1],[1,3]) // false
 * IsReflex([1,3],[1,1],[2,2]) // true
 * ```
 */
function IsReflex(A, O, B) {
    let angle = AnglePolar(A, O, B);
    return angle > 180;
}
globalThis.IsReflex = contract(IsReflex).seal({
    arg: [owl.point2D],
    args: function distinct_points(A, O, B) {
        return owl.distinct([A, O]) && owl.distinct([B, O]);
    }
});
// /**
//  * @category Geometry
//  * @return points from turtle walk
//  * ```
//  * Turtle([0,0],[90,1],[90,1],[90,1]) // [[0,0],[1,0],[1,1],[0,1]]
//  * ```
//  */
// function Turtle(start: Point2D, ...walk: [rotate: number, distance: number][]): Point2D[] {
//     let arr: Point2D[] = [start]
//     let lastPoint = start
//     let facing = 0
//     for (let w of walk) {
//         let [rot, dist] = w
//         facing += rot
//         let P = Move(lastPoint, facing, dist)
//         arr.push(P)
//         lastPoint = P
//     }
//     return arr
// }
// globalThis.Turtle = contract(Turtle).sign([owl.point2D, owl.couple])
/**
 * @category Geometry
 * @return points on a regular polygon
 * ```
 * RegularPolygon(4,[0,0],1,0) // [[1,0],[0,1],[-1,0],[0,-1]]
 * ```
 */
function RegularPolygon(n, center, radius, startAngle) {
    let a = 360 / n;
    let arr = [];
    for (let i = 0; i < n; i++) {
        let p = PolToRect([radius, startAngle + i * a]);
        p[0] += center[0];
        p[1] += center[1];
        p[0] = cal.blur(p[0]);
        p[1] = cal.blur(p[1]);
        arr.push(p);
    }
    return arr;
}
globalThis.RegularPolygon = contract(RegularPolygon).sign([owl.num, owl.point2D, owl.num, owl.num]);
/**
 * @category Geometry
 * @return arc length with given radius and angle
 * ```
 * ArcLength(2,90) // pi
 * ArcLength(2,180) // 2*pi
 * ```
 */
function ArcLength(radius, theta) {
    return 2 * Math.PI * radius * theta / 360;
}
globalThis.ArcLength = contract(ArcLength).sign([owl.nonNegative, owl.nonNegative]);
/**
 * @category Geometry
 * @return sector area with given radius and angle
 * ```
 * SectorArea(2,90) // pi
 * SectorArea(2,180) // 2*pi
 * ```
 */
function SectorArea(radius, theta) {
    return Math.PI * radius * radius * theta / 360;
}
globalThis.SectorArea = contract(SectorArea).sign([owl.nonNegative, owl.nonNegative]);
/**
 * @category Geometry
 * @return check is convex polygon
 * ```
 * IsConvexPolygon([0,0],[1,0],[0,1]) // true
 * IsConvexPolygon([0,0],[3,0],[1,1],[0,3]) // false
 * ```
 */
function IsConvexPolygon(...points) {
    Should(points.length >= 3, "must have at least 3 points to be a polygon");
    return toShape2D(points).isConvex();
}
globalThis.IsConvexPolygon = contract(IsConvexPolygon).sign([owl.point2D]);
/**
 * @category Geometry
 * @return Arrange Points in anti-clockwise direction around their mean
 * ```
 * ArrangePoints([0,0],[1,1],[0,1],[1,0]) // [[1, 0],[0, 0],[0, 1],[1, 1]]
 * ArrangePoints([0,0],[1,2],[2,1],[0,1],[1,0])// [[1, 0],[0, 0],[0, 1],[1, 2],[2, 1]]
 * ```
 */
function ArrangePoints(...points) {
    let ss = toShape2D(points);
    ss.sortAroundMean();
    return ss.toArray();
}
globalThis.ArrangePoints = contract(ArrangePoints).sign([owl.point2D]);
/**
 * @category Geometry
 * @return a point with polar coordinates (1, `angle`).
 * ```
 * OnCircle(0) // [1,0]
 * OnCircle(90) // [0,1]
 * ```
 */
function OnCircle(angle) {
    return PolToRect([1, angle]);
}
globalThis.OnCircle = contract(OnCircle).sign([owl.num]);


/***/ }),

/***/ 4453:
/***/ (() => {

"use strict";

/**
 * Print a stem-and-leaf diagram in latex.
 * @param data - sorted data
 * @param labels - a copy of data, but you can replace some number with string label.
 * @example
 * ```
 * StemAndLeaf({
 *   data: [2,5,6,12,14,16,23,23,24,25,26,26,26,26,27,31],
 *   labels: [2,'x',6,12,14,16,23,23,24,25,26,'y',26,26,27,31],
 *   stem: "10 units",
 *   leaf: "{1} unit"
 * })
 * // a diagram with two numbers replaced by 'x' and 'y'
 * ```
 */
function StemAndLeaf({ data, labels, stem = "(tens)", leaf = "(units)" }) {
    let T = "";
    T += '\\begin{array}{r|l}';
    T += `\\text{Stem} & \\text{Leaf} \\\\ `;
    T += `\\text{${stem}} & \\text{${leaf}} \\\\ \\hline `;
    function ten(num) {
        return Math.floor(num / 10 + Number.EPSILON);
    }
    function unit(num) {
        return num - ten(num) * 10;
    }
    function parse(label) {
        if (typeof label === 'number')
            return unit(label).toString();
        return label;
    }
    labels ??= [...data];
    let parsedLabels = labels.map(parse);
    let initTen = ten(Math.min(...data));
    let endTen = ten(Math.max(...data));
    for (let t = initTen; t <= endTen; t++) {
        T += t + ' & { \\begin{array}{} ';
        let units = [];
        for (let i = 0; i < data.length; i++) {
            if (ten(data[i]) === t)
                units.push(parsedLabels[i]);
        }
        T += units.join(' & ');
        T += ' \\end{array} } \\\\ ';
    }
    T += ' \\end{array}';
    return T;
}
globalThis.StemAndLeaf = contract(StemAndLeaf)
    .sign([owl.pass]);
// ************TO BE DONE!!! VALIDATE OBJECT
/**
 * Print a table in latex.
 * @param content - the cell content
 * @param columns - a latex syntax for column border
 * @param rows - similar to `columns`
 * @param stretch - scale the height of the cells
 * @example
 * ```
 * Table({
 *     content: [
 *         ['a', 2, 3],   // 'a' will be printed as '\text{a}'
 *         ['b', 5, 6],
 *         ['$c', 7, 8],  // 'c' will be printed as is
 *         ['$d', 12, 13]
 *     ],
 *     columns: '|c::c:c|',
 *     rows: '|r||r|rr|',
 * })
 * ```
 */
function Table({ content, columns, rows, stretch }) {
    let nCol = Math.max(...content.map($ => $.length));
    columns ??= Array(nCol + 1).fill("|").join("c");
    let nRow = content.length;
    rows ??= Array(nRow + 1).fill("|").join("r");
    let rowsArr = rows.split('r').map($ => $
        .replace(/\|/g, " \\hline ")
        .replace(/\:/g, " \\hdashline "));
    let T = "";
    if (stretch)
        T += '\\def \\arraystretch{1.5} ';
    T += `\\begin{array}{${columns}}`;
    function parseCell(cell) {
        if (typeof cell === 'number')
            return String(cell);
        return cell.startsWith('$') ? cell.substring(1) : `\\text{${cell}}`;
    }
    let i = 0;
    for (let row of content) {
        T += rowsArr[i] ?? '';
        T += row.map(parseCell).join(" & ") + " \\\\ ";
        i++;
    }
    T += rowsArr[i] ?? '';
    T += ` \\end{array}`;
    return T;
}
globalThis.Table = contract(Table).sign([owl.pass]);
// ************TO BE DONE!!! VALIDATE OBJECT
/**
 * Print a frequency table in latex.
 * @param dataLabel - the label for the 1st row
 * @param freqLabel - the label for the 2nd row
 * @example
 * ```
 * FreqTable({
 *   data: [1, 1, 4, 4, 3, 3, 3],
 *   dataLabel: '$x',
 *   freqLabel: 'count'
 * })
 * ```
 */
function FreqTable({ data, dataLabel, freqLabel }) {
    let values = ListIntegers(Math.min(...data), Math.max(...data));
    let freqs = Freqs(data, values);
    return Table({
        content: [
            [dataLabel, ...values],
            [freqLabel, ...freqs]
        ]
    });
}
globalThis.FreqTable = contract(FreqTable).sign([owl.pass]);
// ************TO BE DONE!!! VALIDATE OBJECT
/**
 * Print a table in latex showing cartisian product of two items.
 * @param rows - array of row values
 * @param cols - array of column values
 * @param cell - a function mapping row and column values to cell content
 * @example
 * ```
 * PairTable({
 *    rowTitle:'first',
 *    colTitle:'second',
 *    rows: [1,2,3,4,5,6],
 *    cols: [1,2,3,4,5,6],
 *    cell: (r,c) => r+c
 * })
 * // a table showing the sum of two dices
 * ```
 */
function PairTable({ rowTitle, colTitle, rows, cols, cell }) {
    function parseCell(cell) {
        if (typeof cell === 'number')
            return String(cell);
        return cell.startsWith('$') ? cell.substring(1) : `\\text{${cell}}`;
    }
    colTitle = parseCell(colTitle);
    rowTitle = parseCell(rowTitle);
    function cellMap(r, c) {
        let val = cell(r, c);
        if (typeof val === 'number')
            return String(val);
        if (typeof val === 'string')
            return val;
        if (typeof val === 'boolean')
            return val ? '✔' : '✘';
        return String(val);
    }
    let T = "";
    T += '\\begin{matrix}';
    T += ` & ${colTitle} \\\\`;
    T += ` ${rowTitle} & {`;
    T += `\\begin{array}{c|ccc}`;
    T += ` & ` + cols.join(' & ') + ' \\\\ \\hline ';
    for (let r of rows) {
        T += ' ' + String(r) + ' & ';
        T += cols.map(c => cellMap(r, c)).join(' & ');
        T += ' \\\\';
    }
    T += ' \\end{array}';
    T += ` } `;
    T += `\\end{matrix}`;
    return T;
}
globalThis.PairTable = contract(PairTable)
    .sign([owl.pass]);
// ************TO BE DONE!!! VALIDATE OBJECT
/**
 * Print the check vertice steps.
 * @param label - the field label
 * @example
 * ```
 * CheckVertices({
 *    constraints: [
 *      [1,0,'>',0],
 *      [0,1,'>',0],
 *      [1,1,'<',2],
 * ],
 *    field: [1,2,3],
 *    label: "P"
 * })
 * ```
 */
function CheckVertices({ constraints, field, label }) {
    let T = "";
    let vs = toReins(constraints).vertices();
    for (let v of vs) {
        T += '\\text{At } ' + Coord(v) + ':~~~';
        T += label + ' = ' + optimizer({ field }).fieldAt(v) + ' \\\\ ';
    }
    return T;
}
globalThis.CheckVertices = contract(CheckVertices)
    .sign([owl.pass]);
// ************TO BE DONE!!! VALIDATE OBJECT


/***/ }),

/***/ 426:
/***/ (() => {

"use strict";

/**
 *
 * @category LinearProgram
 * @return the value of field at given point
 * ```
 * FieldAt([0,0],[1,2,3]) // 3
 * FieldAt([1,2],[3,-4,5]) // 0
 * ```
 */
function FieldAt(point, field) {
    return optimizer({ field }).fieldAt(point);
}
globalThis.FieldAt = contract(FieldAt).sign([owl.point2D, owl.field]);
/**
 *
 * @category LinearProgram
 * @return check if point is constrained by cons
 * ```
 * isConstrained([
 *    [1, 1, "<=", 5],
 *    [1, -1, "<", 4],
 *    [2, 1, ">=", -5]
 * ], [0, 0])
 * // check whether [0,0] satisfies all the constraints
 * ```
 */
function isConstrained(cons, point) {
    return toReins(cons).contains(point);
}
globalThis.isConstrained = contract(isConstrained).sign([owl.constraints, owl.point2D]);
/**
 *
 * @category LinearProgram
 * @return check if point is constrained by cons, treating all cons as 'or equal to'
 * ```
 * isLooseConstrained([
 *    [1, 1, "<=", 5],
 *    [1, -1, "<", 4],
 *    [2, 1, ">=", -5]
 * ], [0, 0])
 * // check whether [0,0] loosely satisfies all the constraints
 * ```
 */
function isLooseConstrained(cons, point) {
    return toReins(cons).looseContains(point);
}
globalThis.isLooseConstrained = contract(isLooseConstrained).sign([owl.constraints, owl.point2D]);
/**
 *
 * @category LinearProgram
 * @return the vertices of the feasible polygon
 * ```
 * FeasiblePolygon([
 *    [1, 0, '<', 10],
 *    [1, 0, '>', -5],
 *    [0, 1, '<', 10],
 *    [0, 1, '>', -5]
 * ])
 * // [[-5,-5],[10,-5],[10,10],[-5,10]]
 * ```
 */
function FeasiblePolygon(...cons) {
    let vs = toReins(cons).polygon();
    Should(vs.length > 2, 'No feasible region.');
    return vs;
}
globalThis.FeasiblePolygon = contract(FeasiblePolygon).sign([owl.constraint]);
/**
 *
 * @category LinearProgram
 * @return the vertices of the feasible polygon
 * ```
 * FeasiblePolygon([
 *    [1, 0, '<', 10],
 *    [1, 0, '>', -5],
 *    [0, 1, '<', 10],
 *    [0, 1, '>', -5]
 * ])
 * // [[-5,-5],[10,-5],[10,10],[-5,10]]
 * ```
 */
function FeasibleVertices(...cons) {
    let vs = toReins(cons).vertices();
    Should(vs.length > 0, 'no feasible vertex');
    return vs;
}
globalThis.FeasibleVertices = contract(FeasibleVertices).sign([owl.constraint]);
/**
 *
 * @category LinearProgram
 * @return check if the feasible region is bounded
 * ```
 * FeasibleIsBounded([
 *    [1, 0, '<', 10],
 *    [1, 0, '>', -5],
 *    [0, 1, '<', 10],
 *    [0, 1, '>', -5]
 * ])
 * // true
 * FeasibleIsBounded([
 *    [1, 0, '<', 10],
 * ])
 * // false
 * ```
 */
function FeasibleIsBounded(...cons) {
    return toReins(cons).isBounded();
}
globalThis.FeasibleIsBounded = contract(FeasibleIsBounded).sign([owl.constraint]);
/**
 *
 * @category LinearProgram
 * @return the integral points inside the feasible polygon
 * ```
 * FeasibleIntegral([
 *    [1, 0, '<', 3],
 *    [1, 0, '>', 0],
 *    [0, 1, '<', 2],
 *    [0, 1, '>', 0]
 * ])
 * // [[1,1],[2,1]]
 * ```
 */
function FeasibleIntegral(...cons) {
    return toReins(cons).integrals();
}
globalThis.FeasibleIntegral = contract(FeasibleIntegral).sign([owl.constraint]);
/**
 *
 * @category LinearProgram
 * @return the point with the max value of field
 * ```
 * MaximizePoint([[0,0],[10,10]],[1,2,3]) // [10,10]
 * ```
 */
function MaximizePoint(points, field) {
    Should(points.length > 0, 'No feasible point');
    let pts = optimizer({
        field: field,
        feasiblePoints: points
    }).maxPoints();
    Should(pts.length > 0, 'No max point');
    Should(pts.length < 2, 'Multiple max points');
    return pts[0];
}
globalThis.MaximizePoint = contract(MaximizePoint).sign([owl.point2Ds, owl.field]);
/**
 *
 * @category LinearProgram
 * @return the point with the min value of field
 * ```
 * MinimizePoint([[0,0],[10,10]],[1,2,3]) // [0,0]
 * ```
 */
function MinimizePoint(points, field) {
    Should(points.length > 0, 'No feasible point');
    let pts = optimizer({
        field: field,
        feasiblePoints: points
    }).minPoints();
    Should(pts.length > 0, 'No min point');
    Should(pts.length < 2, 'Multiple min points');
    return pts[0];
}
globalThis.MinimizePoint = contract(MinimizePoint).sign([owl.point2Ds, owl.field]);
/**
 *
 * @category LinearProgram
 * @return the point with the min/max value of field
 * ```
 * OptimizePoint([[0,0],[10,10]],[1,2,3],true) // [10,10]
 * OptimizePoint([[0,0],[10,10]],[1,2,3],true) // [0,0]
 * ```
 */
function OptimizePoint(points, field, max) {
    return max ? MaximizePoint(points, field) : MinimizePoint(points, field);
}
globalThis.OptimizePoint = contract(OptimizePoint).sign([owl.point2Ds, owl.field, owl.bool]);
/**
 *
 * @category LinearProgram
 * @return the max value of field
 * ```
 * MaximizeField([[0,0],[10,10]],[1,2,3]) // 33
 * ```
 */
function MaximizeField(points, field) {
    let op = optimizer({
        field: field,
        feasiblePoints: points
    });
    let val = op.max();
    Should(val !== null, 'No optimal value for this field!');
    return val;
}
globalThis.MaximizeField = contract(MaximizeField).sign([owl.point2Ds, owl.field]);
/**
 *
 * @category LinearProgram
 * @return the min value of field
 * ```
 * MinimizeField([[0,0],[10,10]],[1,2,3]) // 3
 * ```
 */
function MinimizeField(points, field) {
    let op = optimizer({
        field: field,
        feasiblePoints: points
    });
    let val = op.min();
    Should(val !== null, 'No optimal value for this field!');
    return val;
}
globalThis.MinimizeField = contract(MinimizeField).sign([owl.point2Ds, owl.field]);
/**
 *
 * @category LinearProgram
 * @return the min/max value of field
 * ```
 * OptimizeField([[0,0],[10,10]],[1,2,3],true) // 33
 * OptimizeField([[0,0],[10,10]],[1,2,3],false) // 3
 * ```
 */
function OptimizeField(points, field, max) {
    return max ? MaximizeField(points, field) : MinimizeField(points, field);
}
globalThis.OptimizeField = contract(OptimizeField).sign([owl.point2Ds, owl.field, owl.bool]);
/**
 *
 * @category LinearProgram
 * @return the constraints from the given points
 * ```
 * ConstraintsFromPoints([0,0],[0,1],[1,0]) // [[0,1,'\\ge',-0],[1,0,'\\ge',-0],[1,1,'\\le',1]]
 * ConstraintsFromPoints([0,0],[3,-1],[2,2],[1,3],[-2,2])
 * // [[[1, 3, "\\ge", -0],[1, 1, "\\ge", -0],[1, -3, "\\ge", -8],[1, 1, "\\le", 4],[3, 1, "\\le", 8]]]
 * ConstraintsFromPoints([0,0],[1,2],[2,1],[0,1],[1,0]) // [[0, 1, "\\ge", -0],[1, 0, "\\ge", -0],[1, -1, "\\ge", -1],[1, 1, "\\le", 3],[1, -1, "\\le", 1]]
 * ```
 */
function ConstraintsFromPoints(...points) {
    Should(IsConvexPolygon(...points), 'Not a convex region');
    let mean = toShape2D(points).mean().toArray();
    let pts = ArrangePoints(...points);
    pts = [...pts, pts[0]];
    let constraints = [];
    for (let i = 0; i < points.length; i++) {
        let A = pts[i];
        let B = pts[i + 1];
        let [a, b, c] = LinearFromTwoPoints(A, B);
        let sign = FieldAt(mean, [a, b, c]) > 0 ? "\\ge" : "\\le";
        constraints.push([a, b, sign, -c]);
    }
    return constraints;
}
globalThis.ConstraintsFromPoints = contract(ConstraintsFromPoints).sign([owl.point2D]);


/***/ }),

/***/ 5931:
/***/ (() => {

"use strict";

/**
 * @category Numeracy
 * @return division with x/0 handling
 * ```
 * Divide(6,2) // 3
 * Divide(6,0) // throw
 * ```
 */
function Divide(dividend, divisor) {
    return dividend / divisor;
}
globalThis.Divide = contract(Divide).sign([owl.num, owl.nonZero]);
/**
 * @category Numeracy
 * @return the absolute value. Equivalent to Math.abs(x).
 * ```
 * Abs(-2) // 2
 * ```
 */
function Abs(num) {
    return Math.abs(num);
}
globalThis.Abs = contract(Abs).sign([owl.num]);
/**
 * @category Numeracy
 * @return the sign of the number as 1,0 or -1.
 * ```
 * Sign(3) // 1
 * Sign(-4.5) // -1
 * Sign(0) // 0
 * ```
 */
function Sign(num) {
    if (num > 0)
        return 1;
    if (num < 0)
        return -1;
    return 0;
}
globalThis.Sign = contract(Sign).sign([owl.num]);
/**
 * @deprecated
 * @category Numeracy
 * @return the sign of the number as 1,0 or -1.
 * ```
 * SigFig(123.45) // 5
 * ```
 */
function SigFig(num) {
    return cal.sigfig(cal.blur(num));
}
globalThis.SigFig = contract(SigFig).sign([owl.num]);
/**
 * @category Numeracy
 * @return the number rounded off to given sigfig.
 * ```
 * Round(1.23456,3) // 1.23
 * Round(1.23567,3) // 1.24
 * ```
 */
function Round(num, sigfig = 3) {
    num = num * (1 + Number.EPSILON);
    return cal.round(num, sigfig).off();
}
globalThis.Round = contract(Round).sign([owl.num, owl.positiveInt]);
/**
 * @category Numeracy
 * @return the number rounded up to given sigfig.
 * ```
 * RoundUp(1.23456,3) // 1.23
 * RoundUp(1.23567,1) // 2
 * ```
 */
function RoundUp(num, sigfig = 3) {
    num = num * (1 - Number.EPSILON);
    return cal.round(num, sigfig).up();
}
globalThis.RoundUp = contract(RoundUp).sign([owl.num, owl.positiveInt]);
/**
 * @category Numeracy
 * @return the number rounded down to given sigfig.
 * ```
 * RoundDown(1.23456,5) // 1.2345
 * RoundDown(1.6789,1) // 1
 * ```
 */
function RoundDown(num, sigfig = 3) {
    num = num * (1 + Number.EPSILON);
    return cal.round(num, sigfig).down();
}
globalThis.RoundDown = contract(RoundDown).sign([owl.num, owl.positiveInt]);
/**
 * @category Numeracy
 * @return the number rounded off to given decimal place.
 * ```
 * Fix(12345.678) // round to integer by default, return 12346
 * Fix(12345.678,0) // round to integer, return 12346
 * Fix(12345.678,2) // round to 2 dp, return 12345.68
 * Fix(12345.678,-2) // round to hundred, return 12300
 * ```
 */
function Fix(num, dp = 0) {
    num = num * (1 + Number.EPSILON);
    return cal.fix(num, dp).off();
}
globalThis.Fix = contract(Fix).sign([owl.num, owl.int]);
/**
 * @category Numeracy
 * @return the number rounded up to given decimal place.
 * ```
 * FixUp(12.34) // round to integer by default, return 13
 * FixUp(12.34,0) // round to integer, return 13
 * FixUp(12.34,1) // round to 1 dp, return 12.4
 * FixUp(12.34,-1) // round to ten, return 20
 * ```
 */
function FixUp(num, dp = 0) {
    num = num * (1 - Number.EPSILON);
    return cal.fix(num, dp).up();
}
globalThis.FixUp = contract(FixUp).sign([owl.num, owl.int]);
/**
 * @category Numeracy
 * @return the number rounded down to given decimal place.
 * ```
 * FixDown(17.89) // round to integer by default, return 17
 * FixDown(17.89,0) // round to integer, return 17
 * FixDown(17.89,1) // round to 1 dp, return 17.8
 * FixDown(17.89,-1) // round to ten, return 10
 * ```
 */
function FixDown(num, dp = 0) {
    num = num * (1 + Number.EPSILON);
    return cal.fix(num, dp).down();
}
globalThis.FixDown = contract(FixDown).sign([owl.num, owl.int]);
/**
 * @category Numeracy
 * @return the ceiling integer of the number.
 * ```
 * Ceil(1.1) // 2
 * Ceil(-1.1) // -1
 * Ceil(2)) // 2
 * ```
 */
function Ceil(num) {
    return Math.ceil(num);
}
globalThis.Ceil = contract(Ceil).sign([owl.num]);
/**
 * @category Numeracy
 * @return the floor integer of the number.
 * ```
 * Floor(1.9) // 1
 * Floor(-1.9) // -2
 * Floor(2)) // 2
 * ```
 */
function Floor(num) {
    return Math.floor(num);
}
globalThis.Floor = contract(Floor).sign([owl.num]);
// /**
//  * @category Numeracy
//  * @deprecated use Ratio() instead
//  * @return reduce input array to simplest ratio.
//  * ```
//  * SimpRatio(2,4,6) // [1,2,3]
//  * SimpRatio(0,4,6) // [0,2,3]
//  * SimpRatio(0,4) // [0,1]
//  * ```
//  */
// function SimpRatio(...nums: number[]): number[] {
//     let ns = toNumbers(nums).blur()
//     // nums = nums.map(cal.blur)
//     if (!IsInteger(...ns)) return nums
//     let nonzeros = ns.filter($ => IsNonZero($))
//     Should(nonzeros.length > 0, 'at least one non-zero num')
//     return ns.reduceRatio()
// }
// globalThis.SimpRatio = contract(SimpRatio).sign([owl.num])
/**
 * @category Numeracy
 * @return reduce input array to integral ratio.
 * ```
 * IntegerRatio(2,4,6) // [1,2,3]
 * IntegerRatio(0,4,6) // [0,2,3]
 * IntegerRatio(0,4) // [0,1]
 * IntegerRatio(1/3,1/2,1/4) // [4,6,3]
 * IntegerRatio(Math.sqrt(2),1/2,1/4) // throw
 * ```
 */
function Ratio(...nums) {
    return toNumbers(nums).ratio();
}
globalThis.Ratio = contract(Ratio).sign([owl.rational]);
/**
 * @category Numeracy
 * @return The HCF of nums.
 * ```
 * HCF(6,8) // 2
 * HCF(6,8,9) // 1
 * HCF(1,3) // 1
 * HCF(0.5,3) // throw
 * HCF(0,3) // throw
 * ```
 */
function HCF(...nums) {
    return toNumbers(nums).hcf();
}
globalThis.HCF = contract(HCF).sign([owl.nonZeroInt]);
/**
 * @category Numeracy
 * @return The LCM of nums.
 * ```
 * LCM(2,3) // 6
 * LCM(2,3,5) // 30
 * LCM(0.5,3) // throw
 * LCM(0,3) // throw
 * ```
 */
function LCM(...nums) {
    return toNumbers(nums).lcm();
}
globalThis.LCM = contract(LCM).sign([owl.nonZeroInt]);
/**
 * @category Numeracy
 * @return convert num to fraction
 * ```
 * ToFrac(0.5) // [1,2]
 * ToFrac(-456/123) // [-152,41]
 * ```
 */
function ToFrac(num) {
    return cal.toFraction(num);
}
globalThis.ToFrac = contract(ToFrac).sign([owl.rational]);


/***/ }),

/***/ 1307:
/***/ (() => {

"use strict";

var PhyConst = {
    R: 8.31,
    N_A: 6.02e23,
    g: 9.81,
    G: 6.67e-11,
    c: 3.00e8,
    e: 1.60e-19,
    m_e: 9.11e-31,
    epsilon_0: 8.85e-12,
    mu_0: 4 * Math.PI * (1e-7),
    m_u: 1.661e-27,
    au: 1.50e11,
    light_year: 9.46e15,
    parsec: 3.09e16,
    sigma: 5.67e-8,
    h: 6.63e-34,
};
globalThis.PhyConst = PhyConst;


/***/ }),

/***/ 8219:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PhyEqCls = void 0;
function makeFn(args, body) {
    const paras = args.join(',');
    return new Function("return (" + paras + ") => (" + body.toString() + ').apply(null,[' + args + '])')();
}
function makeLatex(args, template, units, brackets) {
    let T = template;
    for (let i = 0; i < args.length; i++) {
        const [l, r] = brackets[i] === '|' ? ['(', ')'] : ['', ''];
        const u = units[i];
        T = T.replace('@', u + l + args[i] + r);
    }
    return T;
}
class PhyEqCls {
    constructor() {
        this.Motion = {
            /**
             * v = u + at
             */
            vuat(v = 'v', u = 'u', a = 'a', t = 't', $ = '****') {
                let args = [v, u, a, t];
                return [
                    makeFn(args, (v, u, a, t) => v - u - a * t),
                    makeLatex(args, '@=@+@@', $, '::||')
                ];
            },
            /**
             * v^2 = u^2 + 2as
             */
            vu2as(v = 'v', u = 'u', a = 'a', s = 's', $ = '****') {
                let args = [v, u, a, s];
                return [
                    makeFn(args, (v, u, a, s) => v ** 2 - u ** 2 - 2 * a * s),
                    makeLatex(args, '@^2=@^2+2@@', $, '||||')
                ];
            },
            /**
             * s = ut + 0.5at^2
             */
            sutat2(s = 's', u = 'u', t = 't', a = 'a', $ = '****') {
                let args = [s, u, t, a];
                let [_s, _u, _t, _a] = $;
                return [
                    makeFn(args, (s, u, t, a) => s - u * t - 0.5 * a * t * t),
                    makeLatex([s, u, t, a, t], '@=@@+\\dfrac{1}{2}@@^2', [_s, _u, _t, _a, _t].join(''), ':||||')
                ];
            },
            /**
             * s = 0.5(u+v)t
             */
            suvt(s = 's', u = 'u', v = 'v', t = 't', $ = '****') {
                let args = [s, u, v, t];
                return [
                    makeFn(args, (s, u, v, t) => s - 0.5 * (u + v) * t),
                    makeLatex(args, '@=\\dfrac{1}{2}(@+@)@', $, ':::|')
                ];
            },
            /**
             * s  = 0.5at^2
             */
            sat2(s = 's', a = 'a', t = 't', $ = '***') {
                let args = [s, a, t];
                return [
                    makeFn(args, (s, a, t) => s - 0.5 * a * t * t),
                    makeLatex(args, '@=\\dfrac{1}{2}@@^2', $, ':||')
                ];
            },
            /**
             * v = at
             */
            vat(v = 'v', a = 'a', t = 't', $ = '***') {
                let args = [v, a, t];
                return [
                    makeFn(args, (v, a, t) => v - a * t),
                    makeLatex(args, '@=@@', $, ':||')
                ];
            },
            /**
             * v^2 = 2as
             */
            v2as(v = 'v', a = 'a', s = 's', $ = '***') {
                let args = [v, a, s];
                return [
                    makeFn(args, (v, a, s) => v ** 2 - 2 * a * s),
                    makeLatex(args, '@^2=2@@', $, '|||')
                ];
            },
        };
        this.CircularMotion = {
            /**
             * s = vt
             */
            svt(s = 's', v = 'v', t = 't', $ = '***') {
                let args = [s, v, t];
                return [
                    makeFn(args, (s, v, t) => s - v * t),
                    makeLatex(args, '@=@@', $, ':||')
                ];
            },
            /**
             * θ = ωt
             */
            θωt(θ = 'θ', ω = 'ω', t = 't', $ = '$$$') {
                let args = [θ, ω, t];
                return [
                    makeFn(args, (θ, ω, t) => θ - ω * t),
                    makeLatex(args, '@=@@', $, ':||')
                ];
            },
            /**
             * ω = 2π/T
             */
            ωT(ω = 'ω', T = 'T', $ = '$$') {
                let args = [ω, T];
                return [
                    makeFn(args, (ω, T) => ω - 2 * Math.PI / T),
                    makeLatex(args, '@=\\dfrac{2π}{@}', $, '::')
                ];
            },
            /**
             * s = rθ
             */
            srθ(s = 's', r = 'r', θ = 'θ', $ = '**$') {
                let args = [s, r, θ];
                return [
                    makeFn(args, (s, r, θ) => s - r * θ),
                    makeLatex(args, '@=@@', $, ':||')
                ];
            },
            /**
             * v = rω
             */
            vrω(v = 'v', r = 'r', ω = 'ω', $ = '***') {
                let args = [v, r, ω];
                return [
                    makeFn(args, (v, r, ω) => v - r * ω),
                    makeLatex(args, '@=@@', $, ':||')
                ];
            },
            /**
             * a = vω
             */
            avω(a = 'a', v = 'v', ω = 'ω', $ = '***') {
                let args = [a, v, ω];
                return [
                    makeFn(args, (a, v, ω) => a - v * ω),
                    makeLatex(args, '@=@@', $, ':||')
                ];
            },
            /**
             * a = v^2/r
             */
            avr(a = 'a', v = 'v', r = 'r', $ = '***') {
                let args = [a, v, r];
                return [
                    makeFn(args, (a, v, r) => a - v * v / r),
                    makeLatex(args, '@=\\dfrac{@^2}{@}', $, ':|:')
                ];
            },
            /**
             * a = rω^2
             */
            arω(a = 'a', r = 'r', ω = 'ω', $ = '***') {
                let args = [a, r, ω];
                return [
                    makeFn(args, (a, r, ω) => a - r * ω * ω),
                    makeLatex(args, '@=@@^2', $, ':||')
                ];
            },
            /**
             * F = mvω
             */
            Fmvω(F = 'F', m = 'm', v = 'v', ω = 'ω', $ = '****') {
                let args = [F, m, v, ω];
                return [
                    makeFn(args, (F, m, v, ω) => F - m * v * ω),
                    makeLatex(args, '@=@@@', $, ':|||')
                ];
            },
            /**
             * F = mv^2/r
             */
            Fmvr(F = 'F', m = 'm', v = 'v', r = 'r', $ = '****') {
                let args = [F, m, v, r];
                return [
                    makeFn(args, (F, m, v, r) => F - m * v * v / r),
                    makeLatex(args, '@=\\dfrac{@@^2}{@}', $, ':||:')
                ];
            },
            /**
             * F = mrω^2
             */
            Fmrω(F = 'F', m = 'm', r = 'r', ω = 'ω', $ = '****') {
                let args = [F, m, r, ω];
                return [
                    makeFn(args, (F, m, r, ω) => F - m * r * ω * ω),
                    makeLatex(args, '@=@@@^2', $, ':|||')
                ];
            }
        };
        this.Gravitation = {
            /**
             * F = GMm/r^2
             */
            FGMmr2(F = 'F', M = 'M', m = 'm', r = 'r', $ = '****') {
                let args = [F, M, m, r];
                return [
                    makeFn(args, (F, M, m, r) => F - PhyConst.G * M * m / (r ** 2)),
                    makeLatex(args, '@=\\dfrac{G@@}{@^2}', $, ':|||')
                ];
            },
            /**
             * F = GMm/(R+h)^2
             */
            FGMmRh2(F = 'F', M = 'M', m = 'm', R = 'R', h = 'h', $ = '*****') {
                let args = [F, M, m, R, h];
                return [
                    makeFn(args, (F, M, m, R, h) => F - PhyConst.G * M * m / ((R + h) ** 2)),
                    makeLatex(args, '@=\\dfrac{G@@}{(@+@)^2}', $, ':||::')
                ];
            },
            /**
             * g = GM/r^2
             */
            gGMr2(g = 'g', M = 'M', r = 'r', $ = '***') {
                let args = [g, M, r];
                return [
                    makeFn(args, (g, M, r) => g - PhyConst.G * M / (r ** 2)),
                    makeLatex(args, '@=\\dfrac{G@}{@^2}', $, ':||')
                ];
            },
            /**
             * g = GM/(R+h)^2
             */
            gGMRh2(g = 'g', M = 'M', R = 'R', h = 'h', $ = '****') {
                let args = [g, M, R, h];
                return [
                    makeFn(args, (g, M, R, h) => g - PhyConst.G * M / ((R + h) ** 2)),
                    makeLatex(args, '@=\\dfrac{G@}{(@+@)^2}', $, ':|::')
                ];
            },
            /**
             * F = mg
             */
            Fmg(F = 'F', m = 'm', g = 'g', $ = '***') {
                let args = [F, m, g];
                return [
                    makeFn(args, (F, m, g) => F - m * g),
                    makeLatex(args, '@=@@', $, ':||')
                ];
            },
            /**
             * GMm/r2 = mv2/r
             */
            GMmr2v2r(M = 'M', r = 'r', v = 'v', $ = '***') {
                let args = [M, r, v];
                let [_M, _r, _v] = $;
                $ = [_M, _r, _v, _r].join('');
                return [
                    makeFn(args, (M, r, v) => PhyConst.G * M / r / r - v * v / r),
                    makeLatex([M, r, v, r], '\\dfrac{G@m}{@^2}=\\dfrac{m@^2}{@}', $, '|||:')
                ];
            },
            /**
             * GMm/r2 = mrω2
             */
            GMmr2rω2(M = 'M', r = 'r', ω = 'ω', $ = '***') {
                let args = [M, r, ω];
                let [_M, _r, _ω] = $;
                $ = [_M, _r, _r, _ω].join('');
                return [
                    makeFn(args, (M, r, ω) => PhyConst.G * M / r / r - r * ω * ω),
                    makeLatex([M, r, r, ω], '\\dfrac{G@m}{@^2}=m@@^2', $, '||||')
                ];
            },
        };
    }
}
exports.PhyEqCls = PhyEqCls;
globalThis.PhyEq = new PhyEqCls();


/***/ }),

/***/ 2113:
/***/ (() => {

"use strict";

/**
 * @category Random
 * @return a random integer in [min, max] inclusive.
 * ```
 * RndN(2,5) // may return 2, 3, 4 or 5
 * ```
 */
function RndN(min, max) {
    return poker.integer(min, max);
}
globalThis.RndN = contract(RndN).sign([owl.num]);
/**
 * @category Random
 * @return an array of n unique random integer in [min, max] inclusive.
 * ```
 * RndNs(2,8,3) // may return [5,3,7]
 * ```
 */
function RndNs(min, max, n = 10) {
    n = Math.min(Math.floor(max - min + 1), n);
    return dice(() => RndN(min, max)).unique().rolls(n);
}
globalThis.RndNs = contract(RndNs).sign([owl.num, owl.num, owl.positiveInt]);
/**
 * @category Random
 * @return a random real number in [min, max] inclusive
 * ```
 * RndR(1,2) // may return 1.242574363
 * ```
 */
function RndR(min, max) {
    return poker.real(min, max);
}
globalThis.RndR = contract(RndR).sign([owl.num]);
/**
 * @category Random
 * @return an array of n unique random real number in [min, max] inclusive.
 * ```
 * RndRs(2,8,3) // may return [5.5315,3.653456,7.542345]
 * ```
 */
function RndRs(min, max, n = 10) {
    return dice(() => RndR(min, max)).unique().rolls(n);
}
globalThis.RndRs = contract(RndRs).sign([owl.num, owl.num, owl.positiveInt]);
/**
 * @category Random
 * @return a random fraction (non-integer) with largest numerator / denominator, within range inclusive.
 * ```
 * RndQ(9,[2,9]) // may return 7/2
 * RndQ(-9,[-9,9]) // may return 7/2 or -7/2, i.e. can be +ve or -ve
 * ```
 */
function RndQ(largest = 9, range) {
    let L = Math.abs(largest);
    let sign = largest > 0 ? 1 : RndU();
    let f = () => RndN(1, L) / RndN(2, L) * sign;
    let d = dice(f).shield(_ => owl.dec(_));
    if (range) {
        d.shield(_ => _ >= range[0])
            .shield(_ => _ <= range[1]);
    }
    return d.roll();
}
globalThis.RndQ = contract(RndQ).sign([owl.nonZeroInt, owl.interval]);
/**
 * @category Random
 * @return an array of n unique random fractions (non-integer) .
 * ```
 * RndQs(9,[2,9],3) // may return [5/2,7/3,9/2]
 * ```
 */
function RndQs(largest = 9, range, n = 10) {
    n = Math.min(Math.abs(largest) + 1, n);
    return dice(() => RndQ(largest, range)).unique().rolls(n);
}
globalThis.RndQs = contract(RndQs).sign([owl.nonZeroInt, owl.interval, owl.positiveInt]);
/**
 * @category Random
 * @return 1 or -1
 * ```
 * RndU() // may return 1 or -1
 * ```
 */
function RndU() {
    return list(1, -1).draw();
}
globalThis.RndU = RndU;
/**
 * @category Random
 * @return true or false.
 * ```
 * RndT() // may return true or false
 * ```
 */
function RndT() {
    return poker.bool();
}
globalThis.RndT = RndT;
/**
 * @category Random
 * @return a random integer in [min, max] or [-max, -min] inclusive.
 * ```
 * RndZ(2,4) // return -4, -3, -2, 2, 3 or 4
 * ```
 */
function RndZ(min, max) {
    return RndN(min, max) * RndU();
}
globalThis.RndZ = contract(RndZ).sign([owl.num]);
/**
 * @category Random
 * @param n - default to 10
 * @return an array of n absolutely unique random integers in [min, max] or [-max, -min] inclusive.
 * ```
 * RndZs(2,8,3) // may return [5,-3,7]
 * ```
 */
function RndZs(min, max, n = 10) {
    n = Math.min(Math.floor(max - min + 1), n);
    return dice(() => RndN(min, max)).unique().rolls(n).map(x => x * RndU());
}
globalThis.RndZs = contract(RndZs).sign([owl.nonNegative, owl.nonNegative, owl.positiveInt]);
/**
 * @category Random
 * @return a random prime number less than or equal to max.
 * ```
 * RndP(10) // may return 2, 3, 5 or 7
 * ```
 */
function RndP(max) {
    return poker.prime(2, max);
}
globalThis.RndP = contract(RndP).sign([owl.positive]);
/**
 * @category Random
 * @return a random odd integer in [min, max] inclusive
 * ```
 * RndOdd(3,8) // return 3, 5 or 7
 * ```
 */
function RndOdd(min, max) {
    min = Math.ceil((min + 1) / 2);
    max = Math.floor((max + 1) / 2);
    return 2 * RndN(min, max) - 1;
}
globalThis.RndOdd = contract(RndOdd).sign([owl.num]);
/**
 * @category Random
 * @return a random even integer in [min, max] inclusive
 * ```
 * RndEven(3,8) // return 4, 6 or 8
 * ```
 */
function RndEven(min, max) {
    min = Math.ceil(min / 2);
    max = Math.floor(max / 2);
    return 2 * RndN(min, max);
}
globalThis.RndEven = contract(RndEven).sign([owl.num]);
/**
 * @category Random
 * @return an array of random polynomial coefficients
 * ```
 * RndPoly(2,3,4) // equivalent to [RndN(1,2), RndZ(1,3), RndZ(1,4)]
 * ```
 */
function RndPoly(...coeff) {
    let arr = coeff.map(x => RndZ(1, x));
    arr[0] = Math.abs(arr[0]);
    return arr;
}
globalThis.RndPoly = contract(RndPoly).sign([owl.positive]);
/**
 * @category Random
 * @return an array of a Pyth Triple
 * ```
 * RndPyth(10) // may return [3,4,5]
 * ```
 */
function RndPyth(max = 100) {
    let arr = [];
    for (let m = 1; m < 10; m++) {
        for (let n = 1; n < m; n++) {
            for (let k = 1; k < 10; k++) {
                let a = m * m - n * n;
                let b = 2 * m * n;
                let c = m * m + n * n;
                if (c <= max)
                    arr.push([a, b, c]);
            }
        }
    }
    return toList(arr).draw();
}
globalThis.RndPyth = contract(RndPyth).sign([owl.positive]);
/**
 * @category Random
 * @return a point within given range, x and y are distinct and non-zero
 * ```
 * RndPoint([1,4],[10,14]) // may return [2,12]
 * RndPoint(2,4) // equivalent to RndPoint([-2,2],[-4,4])
 * RndPoint(2) // equivalent to RndPoint([-2,2],[-2,2])
 * ```
 */
function RndPoint(xRange, yRange = xRange) {
    if (typeof xRange === 'number')
        xRange = [-xRange, xRange];
    if (typeof yRange === 'number')
        yRange = [-yRange, yRange];
    let [x1, x2] = xRange;
    let [y1, y2] = yRange;
    let f = () => [RndN(x1, x2), RndN(y1, y2)];
    return dice(f)
        .shield(([x, y]) => x !== 0)
        .shield(([x, y]) => y !== 0)
        .shield(([x, y]) => x !== y)
        .roll();
}
globalThis.RndPoint = contract(RndPoint).sign([owl.or([owl.num, owl.interval])]);
/**
 * @category Random
 * @return n points within given range, no horizontal / vertical / collinear
 * ```
 * RndPoints([1,4],[10,14],3) // may return [[2,12],[3,11],[1,13]]
 * ```
 */
function RndPoints(xRange, yRange = xRange, n = 10) {
    return dice(() => RndPoint(xRange, yRange))
        .unique(([x, y]) => x)
        .unique(([x, y]) => y)
        .coherent($ => toList($).combinations(3).every(([A, B, C]) => Slope(A, B) !== Slope(B, C)))
        .rolls(n);
}
globalThis.RndPoints = contract(RndPoints)
    .sign([owl.or([owl.num, owl.interval]), owl.or([owl.num, owl.interval]), owl.num]);
/**
 * @category Random
 * @return n angles in [0,360] at least cyclic separated by separation
 * ```
 * RndAngles(3,50) // may return [30,90,200]
 * ```
 */
function RndAngles(n, separation) {
    let angles = dice(() => RndN(0, 360))
        .coherent(angles => toNumbers(angles).gapsMod(360).min() > separation)
        .unique()
        .rolls(n);
    return [...toList(angles).ascending()];
}
globalThis.RndAngles = contract(RndAngles).sign([owl.positiveInt, owl.positive]);
/**
 * @category Random
 * @return `n` points on a unit circle at least cyclic separated by separation
 * ```
 * RndOnCircle(3,50) // may return [[1,0],[0,1],[-1,0]]]
 * ```
 */
function RndOnCircle(n, separation) {
    let t = RndN(0, 360);
    return RndAngles(n, separation).map($ => OnCircle($ + t));
}
globalThis.RndOnCircle = contract(RndOnCircle).sign([owl.positiveInt, owl.positive]);
/**
 * @category Random
 * @return n vertices of a convex polygon generated by rounding a cyclic polygon
 * ```
 * RndConvexPolygon(3,[0,0],10,50) // may return [[10,0],[-6,8],[0,-10]]
 * ```
 */
function RndConvexPolygon(n, center, radius, separation) {
    let [h, k] = center;
    let r = radius;
    let angles = RndAngles(n, separation);
    let vertices = angles.map(a => [h + r * cos(a), k + r * sin(a)]);
    vertices = vertices.map(([x, y]) => [Fix(x), Fix(y)]);
    return vertices;
}
globalThis.RndConvexPolygon = contract(RndConvexPolygon)
    .sign([owl.positiveInt, owl.point2D, owl.positive, owl.positive]);
/**
 * @category Random
 * @return n integers from [min, max], must be uni-moded
 * ```
 * RndData(10,15,5) // may return [11,11,12,13,15]
 * ```
 */
function RndData(min, max, n) {
    let data = dice(() => RndN(min, max))
        .coherent(d => toData(d).isSingleMode())
        .rolls(n);
    return toList(data).ascending();
}
globalThis.RndData = contract(RndData).sign([owl.num, owl.num, owl.positiveInt]);
/**
 * @category Random
 * @return 3 points forming a triangle, with min angle and length
 * ```
 * RndTriangle([0,5],[0,5],{minAngle:30,minLength:2})
 * ```
 */
function RndTriangle(xRange, yRange, { minAngle = 0, maxAngle = 180, minLength = 0, obtuse = false } = {}) {
    let [x1, x2] = xRange;
    let [y1, y2] = yRange;
    let arr = [];
    for (let i = x1; i <= x2; i++) {
        for (let j = y1; j <= y2; j++) {
            arr.push([i, j]);
        }
    }
    arr = RndShuffle(...arr);
    for (let i = 0; i < arr.length; i++) {
        for (let j = i + 1; j < arr.length; j++) {
            for (let k = j + 1; k < arr.length; k++) {
                let A = arr[i];
                let B = arr[j];
                let C = arr[k];
                if (A[0] === B[0])
                    continue;
                if (B[0] === C[0])
                    continue;
                if (C[0] === A[0])
                    continue;
                if (A[1] === B[1])
                    continue;
                if (B[1] === C[1])
                    continue;
                if (C[1] === A[1])
                    continue;
                if (Slope(A, B) === Slope(B, C))
                    continue;
                let A_ = Angle(C, A, B);
                let B_ = Angle(A, B, C);
                let C_ = Angle(B, C, A);
                let smallestAngle = Min(A_, B_, C_);
                let largestAngle = Max(A_, B_, C_);
                if (smallestAngle < minAngle)
                    continue;
                if (largestAngle > maxAngle)
                    continue;
                if (Distance(A, B) < minLength)
                    continue;
                if (Distance(B, C) < minLength)
                    continue;
                if (Distance(C, A) < minLength)
                    continue;
                if (obtuse && largestAngle <= 90)
                    continue;
                return [A, B, C];
            }
        }
    }
    throw 'RndTriangle fail to find a suitable triangle.';
}
globalThis.RndTriangle = contract(RndTriangle).sign([owl.interval, owl.interval, owl.object]);
/**
 * @category Random
 * @return an array like ['sin',60] representing sin 60, which is numerically equivalent to the input
 * ```
 * RndTrigValue('sin',60) // RndPick(['sin',60],['sin',120],['cos',30],['cos',330])
 * ```
 */
function RndTrigValue(func, angle) {
    let trig = (funcName, q) => {
        if (funcName === 'sin')
            return sin(q);
        if (funcName === 'cos')
            return cos(q);
        if (funcName === 'tan')
            return tan(q);
        throw 'never';
    };
    let atrig = (funcName, val) => {
        if (funcName === 'sin')
            return arcsin(val);
        if (funcName === 'cos')
            return arccos(val);
        if (funcName === 'tan')
            return arctan(val);
        throw 'never';
    };
    let v = trig(func, angle);
    angle = atrig(func, Abs(trig(func, angle)));
    angle = cal.blur(angle);
    let arr = [];
    for (let f of ['sin', 'cos', 'tan']) {
        for (let a of [0, 90, 180, 270, 360]) {
            for (let s of [angle, -angle]) {
                if (a === 360 && s > 0)
                    continue;
                if (a === 0 && s < 0)
                    continue;
                if (cal.eq(trig(f, a + s), v))
                    arr.push([f, a + s]);
            }
        }
    }
    return RndPick(...arr);
}
globalThis.RndTrigValue = contract(RndTrigValue).sign([owl.trig, owl.num]);
/**
 * @category Random
 * @return an array like ['sin',180,-1,'x'] representing sin(180-x), which is numerically equivalent to the input
 * ```
 * RndTrigEqv('sin','x') // RndPick(['sin',180,-1,'x'],['cos',90,-1,'x'],['cos',270,1,'x'])
 * ```
 */
function RndTrigEqv(result, label) {
    let trig = (funcName, angle) => {
        if (funcName === 'sin')
            return sin(angle);
        if (funcName === 'cos')
            return cos(angle);
        if (funcName === 'tan')
            return tan(angle);
        throw 'never';
    };
    let v = 0;
    if (result === 'sin')
        v = sin(1);
    if (result === '-sin')
        v = -sin(1);
    if (result === 'cos')
        v = cos(1);
    if (result === '-cos')
        v = -cos(1);
    if (result === 'tan')
        v = tan(1);
    if (result === '-tan')
        v = -tan(1);
    if (result === '1/tan')
        v = 1 / tan(1);
    if (result === '-1/tan')
        v = -1 / tan(1);
    let arr = [];
    for (let f of ['sin', 'cos', 'tan']) {
        for (let a of [90, 180, 270, 360]) {
            for (let s of [1, -1]) {
                if (a === 360 && s > 0)
                    continue;
                if (cal.eq(trig(f, a + s), v))
                    arr.push([f, a, s, label]);
            }
        }
    }
    return RndPick(...arr);
}
globalThis.RndTrigEqv = contract(RndTrigEqv).sign([owl.str, owl.str]);
/**
 * @category Random
 * @return a random point (in rect coord) at special polar angle and radius, whose rect coords must be in the form of a*sqrt(b).
 * ```
 * RndPointPolar()
 * // maybe [sqrt(3),3] representing polar [2*sqrt(3),60]
 * ```
 */
function RndPointPolar() {
    let angle = RndPick(30, 45, 60, 120, 135, 150, 210, 225, 240, 300, 315, 330);
    let a = RndEven(2, 6);
    let b = RndPick(1, 2, 3);
    let r = a * Math.sqrt(b);
    return PolToRect([r, angle]);
}
globalThis.RndPointPolar = contract(RndPointPolar).sign([]);
/**
 * @category Random
 * @return a random ratio group in [min, max] inclusive.
 * ```
 * RndRatio(2,9,3) // may return [3,7,5]
 * ```
 */
function RndRatio(min, max, n = 10) {
    let nums = RndNs(min, max, n);
    return toNumbers(nums).ratio();
}
globalThis.RndRatio = contract(RndRatio).sign([owl.positive, owl.positive, owl.positiveInt]);


/***/ }),

/***/ 9348:
/***/ (() => {

"use strict";

/**
 * @category RandomShake
 * @deprecated
 * @return an array of n nearby values around anchor, within range inclusive, auto detecting the input type.
 * ```
 * RndShake(10)
 * // equivalent to RndShakeN(10)
 * RndShake(10.5)
 * // equivalent to RndShakeR(10.5)
 * ```
 */
function RndShake(anchor) {
    if (typeof anchor === 'string') {
        // Fraction, to be deleted
        if (owl.dfrac(anchor)) {
            Should(false, 'RndShakeDfrac is not supported anymore');
            // return RndShakeDfrac(anchor)
        }
        // Inequal Sign
        if (owl.ineq(anchor)) {
            return RndShakeIneq(anchor);
        }
        // trig
        if (owl.trig(anchor)) {
            return RndShakeTrig(anchor);
        }
        // else convert to number
        if (Number(anchor)) {
            anchor = Number(anchor);
        }
    }
    if (owl.quantity(anchor)) {
        // quantity
        return RndShakeQuantity(anchor);
    }
    if (owl.point2D(anchor)) {
        // Point
        return RndShakePoint(anchor);
    }
    if (owl.combo(anchor)) {
        // Combo
        return RndShakeCombo(anchor);
    }
    if (owl.trigValue(anchor)) {
        // TrigValue
        return RndShakeTrigValue(anchor);
    }
    if (owl.constraint(anchor)) {
        // Constraint
        return RndShakeConstraint(anchor);
    }
    if (owl.constraints(anchor)) {
        // Constraints
        return RndShakeConstraints(anchor);
    }
    if (typeof anchor === 'number' && owl.num(anchor)) {
        anchor = cal.blur(anchor);
        // Integer
        if (owl.int(anchor)) {
            return RndShakeN(anchor);
        }
        // Decimal
        if (owl.num(anchor)) {
            return RndShakeR(anchor);
        }
        if (isNaN(anchor)) {
            return [];
        }
    }
    if (anchor === undefined)
        return [];
    throw MathError('Fail to RndShake: ' + anchor);
}
globalThis.RndShake = RndShake;
/**
 * @category RandomShake
 * @return 3 nearby same-signed integers, range = Max(5, anchor * 10%)
 * ```
 * RndShakeN(5) // return 3 unique integers from 1-10
 * ```
 */
function RndShakeN(anchor) {
    anchor = cal.blur(anchor);
    let a = Abs(anchor);
    let s = Sign(anchor);
    let f;
    if (anchor === 0) {
        f = () => RndN(1, 3);
    }
    else {
        let range = Max(3, a * 0.1);
        let max = Min(Floor(a + range), cal.logCeil(a) - 1);
        let min = Max(Ceil(a - range), 1, cal.logFloor(a));
        f = () => RndN(min, max) * s;
    }
    return dice(f)
        .shield(x => x !== anchor)
        .unique()
        .rolls(3);
}
globalThis.RndShakeN = contract(RndShakeN).sign([owl.int]);
/**
 * @category RandomShake
 * @return 3 nearby same-signed real number with same precision, range = anchor * 50%
 * ```
 * RndShakeR(3.5) // return 3 unique values from [1.8,5.2]
 * ```
 */
function RndShakeR(anchor) {
    let exp = cal.e(anchor);
    let m = cal.blur(cal.mantissa(anchor));
    if (IsInteger(m))
        return RndShakeN(m).map(x => Number(x + "e" + exp));
    let dp = cal.dp(m);
    return dice(() => Fix(m * (1 + RndR(0, 0.5) * RndU()), dp))
        .shield(x => x * m > 0)
        .shield(x => cal.e(x) === cal.e(m))
        .shield(x => x !== m)
        .unique()
        .rolls(3)
        .map(x => Number(x + "e" + exp));
}
globalThis.RndShakeR = contract(RndShakeR).sign([owl.num]);
/**
 * @category RandomShake
 * @return 3 nearby same-sign rational by shaking the numerator and denominator (simplest) within range, preserve IsProbability.
 * ```
 * RndShakeQ(5/6)
 * // return 3 unique fractions around [5,6]
 * RndShakeQ(6/-5)
 * // return 3 unique fractions around [6,-5]
 * ```
 */
function RndShakeQ(anchor) {
    if (owl.int(anchor))
        return RndShakeN(anchor);
    let [p, q] = ToFrac(anchor);
    [p, q] = [p, q].map(cal.blur);
    Should(IsInteger(p, q), 'input should be integral fraction');
    return dice(() => {
        const h = RndShakeN(p)[0];
        const k = RndShakeN(q)[0];
        let a = RndR(0, 1) < 1 / Math.abs(p) ? p : h;
        let b = RndR(0, 1) < 1 / Math.abs(q) ? q : k;
        if (a === p && b === q)
            return [h, k];
        return [a, b];
    })
        .shield(([a, b]) => AreCoprime(a, b))
        .shield(([a, b]) => a !== 0)
        .shield(([a, b]) => b !== 0)
        .shield(([a, b]) => b !== 1)
        .shield(([a, b]) => b !== 1)
        .shield(([a, b]) => IsProbability(p / q) ? IsProbability(a / b) : true)
        .unique(([p, q]) => p / q)
        .rolls(3)
        .map(([p, q]) => p / q);
}
globalThis.RndShakeQ = contract(RndShakeQ).sign([owl.rational]);
// /**
//  * @category RandomShake
//  * @deprecated
//  * @return 3 nearby same-sign fraction by shaking the numerator and denominator (simplest) within range, preserve IsProbability.
//  * ```
//  * RndShakeFrac([5,6])
//  * // return 3 unique fractions around [5,6]
//  * RndShakeFrac([6,-5])
//  * // return 3 unique fractions around [6,-5]
//  * ```
//  */
// function RndShakeFrac(anchor: Fraction): Fraction[] {
//     let [p, q] = cal.toFraction(anchor[0] / anchor[1]);
//     [p, q] = [p, q].map(cal.blur)
//     Should(IsInteger(p, q), 'input should be integral fraction')
//     return poker
//         .dice(
//             (): Fraction => {
//                 const h = RndShakeN(p)[0]
//                 const k = RndShakeN(q)[0]
//                 let a = RndR(0, 1) < 1 / Math.abs(p) ? p : h
//                 let b = RndR(0, 1) < 1 / Math.abs(q) ? q : k
//                 if (a === p && b === q) return [h, k]
//                 return [a, b]
//             })
//         .shield(([a, b]) => AreCoprime(a, b))
//         .shield(([a, b]) => a !== 0)
//         .shield(([a, b]) => b !== 0)
//         .shield(([a, b]) => b !== 1)
//         .shield(([a, b]) => b !== 1)
//         .shield(([a, b]) => IsProbability(p / q) ? IsProbability(a / b) : true)
//         .unique(_ => _[0] / _[1])
//         .rolls(3)
// }
// globalThis.RndShakeFrac = contract(RndShakeFrac).sign([owl.fraction])
// /**
//  * @category RandomShake
//  * @deprecated
//  * @return 3 nearby same-signed Dfrac by shaking the numerator and denominator (simplest) within range, preserve IsProbability.
//  * ```
//  * RndShakeDfrac('\\dfrac{5}{6}')
//  * // return 3 unique Dfrac around [5,6]
//  * RndShakeDfrac('-\\dfrac{6}{5}')
//  * // return 3 unique Dfrac around [6,-5]
//  * ```
//  */
// function RndShakeDfrac(anchor: string): string[] {
//     Should(false, 'RndShakeDfrac is deprecated')
//     let f = ink.parseDfrac(anchor)
//     return RndShakeFrac(f).map(x => Dfrac(...x))
// }
// globalThis.RndShakeDfrac = contract(RndShakeDfrac).sign([owl.dfrac])
/**
 * @category RandomShake
 * @return an array of 3 ineq signs, balanced in number.
 * ```
 * RndShakeIneq('\\ge')
 * // may return ['\\ge','\\le','\\le']
 * ```
 */
function RndShakeIneq(anchor) {
    let i = ineq(anchor);
    let me = i.print();
    let flip = i.flip();
    return list(me, flip, flip).shuffled();
}
globalThis.RndShakeIneq = contract(RndShakeIneq).sign([owl.ineq]);
/**
 * @category RandomShake
 * @return an array of 3 point, both x and y are unique
 * ```
 * RndShakePoint([3,4])
 * // may return [[2,5],[1,6],[4,2]]
 * ```
 */
function RndShakePoint(anchor) {
    let [x, y] = anchor;
    let func = () => {
        const h = IsInteger(x) ? RndShakeN(x)[0] : RndShakeR(x)[0];
        const k = IsInteger(y) ? RndShakeN(y)[0] : RndShakeR(y)[0];
        return [h, k];
    };
    return dice(func)
        .unique(([x, y]) => x)
        .unique(([x, y]) => y)
        .rolls(3);
}
globalThis.RndShakePoint = contract(RndShakePoint).sign([owl.point2D]);
/**
 * @category RandomShake
 * @return an array of 3 combo
 * ```
 * RndShakeCombo([true,true,true])
 * // may return [[true,false,true],[false,true,false],[false,true,true]]
 * ```
 */
function RndShakeCombo(anchor) {
    let [a, b, c] = anchor;
    let func = () => {
        return [
            RndT() ? a : !a,
            RndT() ? b : !b,
            RndT() ? c : !c
        ];
    };
    let diff = (bools) => { return bools.some($ => $) && bools.some($ => !$); };
    return dice(func).unique()
        .coherent(all => diff([a, ...all.map($ => $[0])]))
        .coherent(all => diff([b, ...all.map($ => $[1])]))
        .coherent(all => diff([c, ...all.map($ => $[2])]))
        .rolls(3);
}
globalThis.RndShakeCombo = contract(RndShakeCombo).sign([owl.combo]);
/**
 * @category RandomShake
 * @return an array of 3 trig
 * ```
 * RndShakeTrig('sin')
 * // may return ['cos','sin','cos']
 * ```
 */
function RndShakeTrig(anchor) {
    return [...list('sin', 'cos', 'tan').draws(3)];
}
globalThis.RndShakeTrig = contract(RndShakeTrig).sign([owl.trig]);
/**
 * @category RandomShake
 * @return an array of 3 TrigValue
 * ```
 * RndShakeTrigValue(['sin','x'])
 * // may return [['cos','x'],['sin','x'],['cos','x']]
 * ```
 */
function RndShakeTrigValue(anchor) {
    return RndShakeTrig(anchor[0]).map(x => [x, anchor[1]]);
}
globalThis.RndShakeTrigValue = contract(RndShakeTrigValue).sign([owl.trigValue]);
/**
 * @category RandomShake
 * @return an array of 3 ratios
 * ```
 * RndShakeRatio([4,5,6])
 * // may return [[3,6,5],[7,5,3],[8,4,5]]
 * ```
 */
function RndShakeRatio(anchor) {
    anchor = [...toNumbers(anchor).ratio()];
    let func = () => {
        return anchor.map(x => RndR(0, 1) < 1 / (Math.abs(x) + 1) ? x : RndShakeN(x)[0]);
    };
    return dice(func)
        .shield(r => toNumbers(r).hcf() === 1)
        .shield(r => AreDifferent(anchor, r))
        .unique()
        .rolls(3);
}
globalThis.RndShakeRatio = contract(RndShakeRatio).sign([owl.ntuple]);
/**
 * @category RandomShake
 * @return an array of 3 ratios
 * ```
 * RndShakeBase('AB0CD_{16}')
 * // may return ['BB0CE_{16}','AB0DD_{16}','BA0BE_{16}']
 * ```
 */
function RndShakeBase(anchor) {
    let [num, base] = anchor.split('_');
    base = base.replace('{', '').replace('}', '');
    let digits = '0123456789ABCDEF'.substring(0, Number(base)).split('');
    function shake(d) {
        let x = digits.indexOf(d) + RndU();
        if (x < 0)
            x = 0;
        if (x > digits.length - 1)
            x = digits.length - 1;
        return digits[x];
    }
    function mutate(str) {
        let s = [];
        let nonzero = str.split('').filter(_ => _ !== '0').length;
        for (let d of str.split('')) {
            if (d === '0') {
                let go = poker.bool(0.1);
                s.push(go ? toList(digits).draw() : '0');
            }
            else {
                let go = poker.bool(1 / (nonzero + 2));
                s.push(go ? shake(d) : d);
            }
        }
        let T = s.join('');
        if (poker.bool(0.2))
            T += '0';
        return T;
    }
    function dress(str) {
        str = str.replace(/^0+/, '');
        return str + '_{' + base + '}';
    }
    let f = () => {
        let middle = Math.ceil(num.length / 2);
        let s1 = num.slice(0, middle);
        let s2 = num.slice(middle);
        let t1 = mutate(s1);
        let t2 = mutate(s2);
        let B1 = dress(s1 + t2);
        let B2 = dress(t1 + s2);
        let B3 = dress(t1 + t2);
        return [B1, B2, B3];
    };
    return dice(f).shield(_ => toList([num, ..._]).dupless()).roll();
}
globalThis.RndShakeBase = contract(RndShakeBase).sign([owl.base]);
/**
 * @category RandomShake
 * @return an array of 3 points, all are special in polar coordinates
 * ```
 * RndShakePointPolar([3,60])
 * // may return [[3, 120], [3*sqrt(2), 120], [3*sqrt(2), 60]]
 * ```
 */
function RndShakePointPolar(anchor) {
    let [r1, q1] = RectToPol(anchor);
    let [a, b] = cal.toSurd(r1);
    let r2 = b === 1 ? a * Math.sqrt(RndPick(2, 3)) : a;
    let angles = list(30, 45, 60, 120, 135, 150, 210, 225, 240, 300, 315, 330);
    let q2 = angles.except([q1]).draw();
    return RndShuffle([r1, q2], [r2, q1], [r2, q2]).map($ => PolToRect($));
}
globalThis.RndShakePointPolar = contract(RndShakePointPolar).sign([owl.point2D]);
/**
 * @category RandomShake
 * @return an array of 3 constraint, with only the sign shaken
 * ```
 * RndShakeConstraint([1,2,'>',3])
 * // may return [[1,2,'>',3], [1,2,'<',3], [1,2,'<',3]]
 * ```
 */
function RndShakeConstraint(anchor) {
    let flip = rein(anchor).flip().constraint;
    return list(anchor, flip, flip).shuffled();
}
globalThis.RndShakeConstraint = contract(RndShakeConstraint).sign([owl.constraint]);
/**
 * @category RandomShake
 * @return an array of 3 sets of constraints, with only the sign shaken
 * ```
 * RndShakeConstraints([
 *   [1,2,'>',3], [4,5,'>',6]
 * ])
 * // may return [
 * // [[1,2,'>',3],[4,5,'>',6]],
 * // [[1,2,'<',3],[4,5,'<',6]],
 * // [[1,2,'<',3],[4,5,'>',6]]
 * // ]
 * ```
 */
function RndShakeConstraints(anchor) {
    let func = () => [...toReins(anchor).shake().map($ => $.constraint)];
    return dice(func)
        .forbid(anchor)
        .shield($ => toReins($).isConsistent())
        .unique()
        .rolls(3);
}
globalThis.RndShakeConstraints = contract(RndShakeConstraints).sign([owl.constraints]);
function RndShakeQuantity(anchor) {
    let { val, unit } = anchor;
    let vals = RndShake(val);
    return vals.map($ => ({ val: $, unit }));
}
globalThis.RndShakeQuantity = contract(RndShakeQuantity).sign([owl.quantity]);


/***/ }),

/***/ 1759:
/***/ (() => {

"use strict";

/**
 * @category RandomUtil
 * @return a random item from the given items
 * ```
 * RndPick(2,4,6) // may return 2, 4 or 6
 * ```
 */
function RndPick(...items) {
    return toList(items).draw();
}
globalThis.RndPick = RndPick;
/**
 * @category RandomUtil
 * @return a shuffled array of the given items
 * ```
 * RndShuffle(2,4,6) // may return [4,2,6]
 * ```
 */
function RndShuffle(...items) {
    return [...toList(items).shuffled()];
}
globalThis.RndShuffle = RndShuffle;
/**
 * @category RandomUtil
 * @return n random items from given items without replacement, but NOT necessarily unique if there are duplicated object in items.
 * ```
 * RndPickN([1,2,3,4,5],3) // may return [2,5,3]
 * ```
 */
function RndPickN(items, n) {
    return [...toList(items).sample(n)];
}
globalThis.RndPickN = contract(RndPickN).sign([owl.array, owl.positiveInt]);
/**
 * @category RandomUtil
 * @return n random unique items from given items, deep compare.
 * ```
 * RndPickUnique([2,4,6],2) // may return [4,2]
 * RndPickUnique([1,2,2,2,2,2,2,2],2) // must return [1,2] or [2,1]
 * ```
 */
function RndPickUnique(items, n) {
    return [...toList(items).uniqueDeep().sample(n)];
}
globalThis.RndPickUnique = contract(RndPickUnique).sign([owl.array, owl.positiveInt]);
/**
 * @category RandomUtil
 * @return a random male name
 * ```
 * RndHe() // may return 'Peter', 'David', etc
 * ```
 */
function RndHe() {
    return poker.he();
}
globalThis.RndHe = RndHe;
/**
 * @category RandomUtil
 * @return a random female name
 * ```
 * RndShe() // may return 'Mary', 'Alice', etc
 * ```
 */
function RndShe() {
    return poker.she();
}
globalThis.RndShe = RndShe;
/**
 * @category RandomUtil
 * @return a random 3-letters array
 * ```
 * RndLetters() // may return ['a','b','c'] or ['x','y','z'] or etc
 * ```
 */
function RndLetters() {
    return RndPick(['a', 'b', 'c'], ['h', 'k', 'l'], ['m', 'n', 'l'], ['p', 'q', 'r'], ['r', 's', 't'], ['u', 'v', 'w'], ['x', 'y', 'z']);
}
globalThis.RndLetters = RndLetters;
/**
 * @category RandomUtil
 * @return a random 3-letters array
 * ```
 * RndCapitals() // may return ['A','A','A'] or ['X','Y','Z'] or etc
 * ```
 */
function RndCapitals() {
    return RndPick(['A', 'B', 'C'], ['H', 'K', 'L'], ['M', 'N', 'L'], ['P', 'Q', 'R'], ['R', 'S', 'T'], ['U', 'V', 'W'], ['X', 'Y', 'Z']);
}
globalThis.RndCapitals = RndCapitals;


/***/ }),

/***/ 6007:
/***/ (() => {

"use strict";

/**
 * @category Relation
 * @return Check if the numbers are all distinct.
 * ```
 * AreDistinct(1,2,3) // true
 * AreDistinct(1,2,2) // false
 * ```
 */
function AreDistinct(...nums) {
    nums = nums.map(cal.blur);
    return (new Set(nums)).size === nums.length;
}
globalThis.AreDistinct = contract(AreDistinct).sign([owl.num]);
/**
 * @category Relation
 * @return Check if the absolute values of the numbers are all distinct.
 * ```
 * AreAbsDistinct(1,2,3) // true
 * AreAbsDistinct(1,2,2) // false
 * AreAbsDistinct(1,2,-2) // false
 * ```
 */
function AreAbsDistinct(...nums) {
    return AreDistinct(...nums.map(Math.abs));
}
globalThis.AreAbsDistinct = contract(AreAbsDistinct).sign([owl.num]);
/**
 * @category Relation
 * @return Check if the numbers all have the same sign.
 * ```
 * AreSameSign(1,2,3) // true
 * AreSameSign(1,2,-3) // false
 * AreSameSign(1,2,0) // false
 * ```
 */
function AreSameSign(...nums) {
    return [...new Set(nums.map(Math.sign))].length === 1;
}
globalThis.AreSameSign = contract(AreSameSign).sign([owl.num]);
/**
 * @category Relation
 * @return Check if the numbers all pairwise coprime.
 * ```
 * AreCoprime(2,3) // true
 * AreCoprime(2,6) // false
 * AreCoprime(1,2) // true
 * AreCoprime(2,3,6) // true
 * AreCoprime(1.5,3) // true
 * AreCoprime(0,3) // true
 * ```
 */
function AreCoprime(...nums) {
    nums = nums.map(cal.blur);
    if (!IsInteger(...nums))
        return true;
    if (!IsNonZero(...nums))
        return true;
    return toList(nums).pairs().every(([a, b]) => HCF(a, b) === 1);
}
globalThis.AreCoprime = contract(AreCoprime).sign([owl.num]);
// /**
//  * @category Relation
//  * @deprecated use AreDifferent
//  * @return Check if the points are all distinct.
//  * ```
//  * AreDistinctPoint([1,2],[3,4]) // true
//  * AreDistinctPoint([1,2],[1,2]) // false
//  * ```
//  */
// function AreDistinctPoint(...points: Point2D[]) {
//     return toList(points).duplessDeep()
// }
// globalThis.AreDistinctPoint = contract(AreDistinctPoint).sign([owl.point2D])
/**
 * @category Relation
 * @return Check if the points are pairwise distant apart.
 * ```
 * AreDistantPoint(2)([0,0],[3,0]) // true
 * AreDistantPoint(2)([0,0],[1,0]) // false
 * ```
 */
function AreDistantPoint(distance) {
    let AreDistant = function (...points) {
        return toShape2D(points).distances().min() >= distance;
    };
    return contract(AreDistant).sign([owl.point2D]);
}
globalThis.AreDistantPoint = contract(AreDistantPoint).sign([owl.positive]);
/**
 * @category Relation
 * @return Check if slopes are at least oblique at minAngle
 * ```
 * AreOblique(40)(0,1) // true
 * AreOblique(40)(0,0.5) // false
 * ```
 */
function AreOblique(minAngle) {
    let areOblique = function (...slopes) {
        return toList(slopes).pairs().every(([a, b]) => IntersectAngle(a, b) >= minAngle);
    };
    return contract(areOblique).sign([owl.num]);
}
globalThis.AreOblique = contract(AreOblique).sign([owl.positive]);
/**
 * @category Relation
 * @return Check if the items are all distinct, by JSON.stringify.
 * ```
 * AreDifferent([1,2],[3,4]) // true
 * AreDifferent([1,2],[1,2]) // false
 * ```
 */
function AreDifferent(...items) {
    return toList(items).duplessDeep();
}
globalThis.AreDifferent = contract(AreDifferent).sign([owl.pass]);


/***/ }),

/***/ 188:
/***/ (() => {

"use strict";

/**
* @category Sequence
* @return an array of integers from start to end inclusive.
* ```
* ListIntegers(2,6) // [2,3,4,5,6]
* ListIntegers(-2,1) // [-2,-1,0,1]
* ```
*/
function ListIntegers(start, end) {
    return cal.range(start, end);
}
globalThis.ListIntegers = contract(ListIntegers).seal({
    arg: [owl.num],
    args: function is_range(start, end) { return start < end; }
});
/**
* @category Sequence
* @return Tn in an arithmetic sequence: a+(n-1)d
* ```
* ASterm(2,3,10) // 29
* ASterm(5,-2,6) // -5
* ```
*/
function ASterm(a, d, n) {
    return a + (n - 1) * d;
}
globalThis.ASterm = contract(ASterm).sign([owl.num, owl.num, owl.positiveInt]);
/**
* @category Sequence
* @return Sn in an arithmetic sequence: (n/2)(2a+(n-1)d).
* ```
* ASsum(2,3,10) // 155
* ASsum(5,-2,6) // 0
* ```
*/
function ASsum(a, d, n) {
    return 0.5 * n * (2 * a + (n - 1) * d);
}
globalThis.ASsum = contract(ASsum).sign([owl.num, owl.num, owl.positiveInt]);
/**
* @category Sequence
* @return an array of the first n terms in an arithmetic sequence.
* ```
* ASequence(2,3,5) // [2,5,8,11,14]
* ASequence(5,-2,3) // [5,3,1]
* ```
*/
function ASequence(a, d, n = 10) {
    let arr = [];
    for (let i = 1; i <= n; i++) {
        arr.push(ASterm(a, d, i));
    }
    return arr;
}
globalThis.ASequence = contract(ASequence).sign([owl.num, owl.num, owl.positiveInt]);
/**
* @category Sequence
* @return Tn in a geometric sequence: ar**(n-1)
* ```
* GSterm(2,3,4) // 54
* GSterm(5,-2,6) // -160
* ```
*/
function GSterm(a, r, n) {
    return a * (r ** (n - 1));
}
globalThis.GSterm = contract(GSterm).sign([owl.num, owl.num, owl.positiveInt]);
/**
* @category Sequence
* @return Sn in a geometric sequence: a*(r*n-1)/(r-1)
* ```
* GSsum(2,3,4) // 80
* GSsum(5,-2,3) // 15
* GSsum(3,0.5) // 6 , sum to inf if omit n
* ```
*/
function GSsum(a, r, n = -1) {
    return n > 0 ? a * (r ** n - 1) / (r - 1) : a / (1 - r);
}
globalThis.GSsum = contract(GSsum).sign([owl.num, owl.num, owl.int]);
/**
* @category Sequence
* @return an array of the first n terms in a geometric sequence.
* ```
* GSequence(2,3,5) // return [2,6,18,54,162]
* GSequence(5,-2,3) // return [5,-10,20]
* ```
*/
function GSequence(a, r, n = 10) {
    let arr = [];
    for (let i = 1; i <= n; i++) {
        arr.push(GSterm(a, r, i));
    }
    return arr;
}
globalThis.GSequence = contract(GSequence).sign([owl.num, owl.num, owl.positiveInt]);
/**
* @category Sequence
* @return the nth term in a quadratic sequence, 1st term = a, P_i+1=P_i + pi+q
* ```
* QuadraticSequence(1,2,3,4) //
* ```
*/
function QuadraticSequence(a, p, q, n) {
    let c = a;
    for (let i = 2; i <= n; i++) {
        c += p * (i - 1) + q;
    }
    return c;
}
globalThis.QuadraticSequence = contract(QuadraticSequence).sign([owl.num, owl.num, owl.num, owl.positiveInt]);
/**
* @category Sequence
* @return the nth term in a lucas sequence, a_i = p*a_{i-1} + q*a_{i-2}
* ```
* LucasSequence(1,2,3,4,5) //
* ```
*/
function LucasSequence(first, second, p, q, n) {
    if (n === 1)
        return first;
    if (n === 2)
        return second;
    let S = [first, second];
    for (let i = 3; i <= n; i++) {
        S.push(p * S[i - 2] + q * S[i - 3]);
    }
    return S[n - 1];
}
globalThis.LucasSequence = contract(LucasSequence).sign([owl.num, owl.num, owl.num, owl.num, owl.positiveInt]);


/***/ }),

/***/ 701:
/***/ (() => {

"use strict";

/**
 * @category Stat
 * @return the minimum value. Equivalent to Math.min().
 * ```
 * Min(2,3,4) // 2
 * ```
 */
function Min(...nums) {
    return Math.min(...nums);
}
globalThis.Min = contract(Min).sign([owl.num]);
/**
 * @category Stat
 * @return the maximum value. Equivalent to Math.max().
 * ```
 * Max(2,3,4) // 4
 * ```
 */
function Max(...nums) {
    return Math.max(...nums);
}
globalThis.Max = contract(Max).sign([owl.num]);
/**
 * @category Stat
 * @return the sorted array of numbers.
 * ```
 * Sort(2,3,1) // [1,2,3]
 * ```
 */
function Sort(...nums) {
    return [...nums].sort((a, b) => a - b);
}
globalThis.Sort = contract(Sort).sign([owl.num]);
/**
 * @category Stat
 * @return the sorted array of items by giving each item a value.
 * ```
 * SortBy([2,3,1],x=>x) // [1,2,3]
 * SortBy(["aa", "aaa", "a"], x => x.length) // ["a", "aa", "aaa"]
 * ```
 */
function SortBy(items, valueFunc) {
    return [...items].sort((a, b) => valueFunc(a) - valueFunc(b));
}
globalThis.SortBy = contract(SortBy).sign([owl.array, owl.pass]);
/**
 * @category Stat
 * @return sum of nums
 * ```
 * Sum(1,2,3) // 6
 * Sum(-1,2,3,4,5) // 13
 * ```
 */
function Sum(...nums) {
    return toData(nums).sum();
}
globalThis.Sum = contract(Sum).sign([owl.num]);
/**
 * @category Stat
 * @return mean of nums
 * ```
 * Mean(1,2,3) // 2
 * Mean(-1,2,3,4,5) // 2.6
 * ```
 */
function Mean(...nums) {
    return toData(nums).mean();
}
globalThis.Mean = contract(Mean).seal({
    arg: [owl.num],
    args: function is_not_empty(...nums) { return nums.length > 0; }
});
/**
 * @category Stat
 * @return median of nums
 * ```
 * Median(1,2,3,4,50) // 3
 * Median(1,2,3,4,5,7) // 3.5
 * ```
 */
function Median(...nums) {
    return toData(nums).median();
}
globalThis.Median = contract(Median).sign([owl.num]);
/**
 * @category Stat
 * @return lower quartile of nums
 * ```
 * LowerQ(1,2,3,4,5) // 1.5
 * LowerQ(1,2,3,4,5,7) // 2
 * ```
 */
function LowerQ(...nums) {
    return toData(nums).lowerQuartile();
}
globalThis.LowerQ = contract(LowerQ).sign([owl.num]);
/**
 * @category Stat
 * @return lower quartile of nums
 * ```
 * UpperQ(1,2,3,4,5) // 4.5
 * UpperQ(1,2,3,4,5,7) // 5
 * ```
 */
function UpperQ(...nums) {
    return toData(nums).upperQuartile();
}
globalThis.UpperQ = contract(UpperQ).sign([owl.num]);
/**
 * @category Stat
 * @return range of nums
 * ```
 * StatRange(1,2,3,4,5) // 4
 * StatRange(1,2,3,4,5,7) // 6
 * ```
 */
function StatRange(...nums) {
    return toData(nums).range();
}
globalThis.StatRange = contract(StatRange).sign([owl.num]);
/**
 * @category Stat
 * @return inter-quartile range of nums
 * ```
 * IQR(1,2,3,4,5,6) // 3
 * ```
 */
function IQR(...nums) {
    return toData(nums).IQR();
}
globalThis.IQR = contract(IQR).sign([owl.num]);
// /**
//  * @category Stat
//  * @deprecated
//  * @return count frequency of item in array
//  * ```
//  * Frequency(1)(2,3,4,1,5,1,1,4,5) // 3
//  * ```
//  */
// function Frequency<T>(item: T) {
//     return (...items: T[]) => toList(items).freq(item)
// }
// globalThis.Frequency = Frequency
/**
 * @category Stat
 * @return count frequency of item in array
 * ```
 * Freq([2,3,4,1,5,1,1,4,5],1) // 3
 * ```
 */
function Freq(array, item) {
    return toList(array).freq(item);
}
globalThis.Freq = contract(Freq).sign([owl.array, owl.pass]);
/**
 * @category Stat
 * @return mode of nums
 * ```
 * Mode(1,2,3,2,2,3,4) \\ [2]
 * Mode(1,1,2,2,3) \\ [1,2]
 * ```
 */
function Mode(...nums) {
    return [...toData(nums).modes()];
}
globalThis.Mode = contract(Mode).sign([owl.num]);
/**
 * @category Stat
 * @return the only mode of nums, if there are multiple modes, then throw error
 * ```
 * UniMode(1,2,3,2,2,3,4) \\ 2
 * UniMode(1,1,2,2,3) \\ throw error
 * ```
 */
function UniMode(...nums) {
    return toData(nums).mode();
}
globalThis.UniMode = contract(UniMode).seal({
    arg: [owl.num],
    args: function has_single_mode(...nums) { return toData(nums).isSingleMode(1); }
});
/**
 * @category Stat
 * @return SD of nums
 * ```
 * StdDev(1,2,3,2,2,3,4) \\ 0.903507902
 * StdDev(1,1,2,2,3) \\ 0.748331477
 * ```
 */
function StdDev(...nums) {
    return toData(nums).stdDev();
}
globalThis.StdDev = contract(StdDev).sign([owl.num]);
/**
 * @category Stat
 * @return z-score of `num` in a data set with `mean` and `SD`
 * ```
 * ZScore(80,60,10) \\ 2
 * ```
 */
function ZScore(num, mean, SD) {
    return (num - mean) / SD;
}
globalThis.ZScore = contract(ZScore).sign([owl.num]);
/**
 * @category Stat
 * @return the location of median
 * ```
 * MedianAt(12) \\ 6.5
 * MedianAt(13) \\ 7
 * ```
 */
function MedianAt(total) {
    return (total + 1) / 2;
}
globalThis.MedianAt = contract(MedianAt).sign([owl.int]);
/**
 * @category Stat
 * @return the location of LQ
 * ```
 * LowerQAt(12) \\ 3.5
 * LowerQAt(13) \\ 3.5
 * ```
 */
function LowerQAt(total) {
    total = Math.floor(total / 2);
    return MedianAt(total);
}
globalThis.LowerQAt = contract(LowerQAt).sign([owl.int]);
/**
 * @category Stat
 * @return the location of UQ
 * ```
 * UpperQAt(12) \\ 9.5
 * UpperQAt(13) \\ 10.5
 * ```
 */
function UpperQAt(total) {
    return total + 1 - LowerQAt(total);
}
globalThis.UpperQAt = contract(UpperQAt).sign([owl.int]);
/**
 * @category Stat
 * @return array of all integers between the min and max of `data`.
 * ```
 * ListRange(1,1,4,4,3,3,3) \\ [1,2,3,4]
 * ```
 */
function ListRange(...data) {
    let min = Math.min(...data);
    let max = Math.max(...data);
    return cal.range(min, max);
}
globalThis.ListRange = contract(ListRange).sign([owl.int]);
/**
 * @category Stat
 * @return array of the corresponding frequency of `nums` in a data set. If `nums` is omitted, default to the whole range of `data`.
 * ```
 * Freqs([1,1,4,4,3,3,3],[1,2,3,4]) \\ [2,0,3,2]
 * ```
 */
function Freqs(data, nums) {
    let ls = toList(data);
    nums ??= ListRange(...data);
    let arr = [];
    for (let v of nums) {
        arr.push(ls.freq(v));
    }
    return arr;
}
globalThis.Freqs = contract(Freqs).sign([owl.ntuple, owl.ntuple]);
/**
 * @category Stat
 * @return make a data set from frequencies
 * ```
 * DataFromFreqs([1,9,5],[2,2,3])
 * // [1,1,9,9,5,5,5]
 * ```
 */
function DataFromFreqs(values, frequencies) {
    Should(values.length === frequencies.length, 'values and frequencies must be the same length');
    let data = [];
    for (let i = 0; i < values.length; i++) {
        data.push(...Array(frequencies[i]).fill(values[i]));
    }
    return data;
}
globalThis.DataFromFreqs = contract(DataFromFreqs).sign([owl.ntuple]);
/**
 * @category Stat
 * @return array of summary of the data [Minimum,LowerQ,Median,UpperQ,Maximum]
 * ```
 * Summary(1,1,2,3,3,3,3,4,5,5) \\ [1,2,3,4,5]
 * Summary(1,2,3,4,5,6,7,8,9,10) \\ [1,3,5.5,8,10]
 * ```
 */
function Summary(...data) {
    let d = toData(data);
    return [
        d.min(),
        d.lowerQuartile(),
        d.median(),
        d.upperQuartile(),
        d.max()
    ];
}
globalThis.Summary = contract(Summary).sign([owl.num]);


/***/ }),

/***/ 8730:
/***/ (() => {

"use strict";

/**
* @category Text
* @return a string of joined elements. [1,2,3] --> '1, 2 and 3'
* ```
* GrammarJoin(1,2,3,4) // '1, 2, 3 and 4'
* GrammarJoin('a','b','c') // 'a, b and c'
* ```
*/
function GrammarJoin(...items) {
    let L = items.length;
    if (L === 0)
        return '';
    if (L === 1)
        return String(items[0]);
    let arr = [];
    for (let i = 0; i < L - 1; i++) {
        arr.push(items[i]);
    }
    return arr.join(', ') + ' and ' + items[items.length - 1];
}
globalThis.GrammarJoin = GrammarJoin;
// /**
// * @category Text
// * @deprecated
// * @return '✔' or '✘'.
// * ```
// * Tick(true) // '✔'
// * Tick(false) // '✘'
// * ```
// */
// function Tick(bool: boolean): string {
//     return bool ? '✔' : '✘'
// }
// globalThis.Tick = contract(Tick).sign([owl.bool])
// /**
// * @category Text
// * @deprecated
// * @return Array of '✔' or '✘'.
// * ```
// * Ticks(true,false) // ['✔','✘']
// * ```
// */
// function Ticks(...bools: boolean[]): string[] {
//     return bools.map(x => Tick(x))
// }
// globalThis.Ticks = contract(Ticks).sign([owl.bool])
/**
* @category Text
* @deprecated use symbol printing instead!!!
* @return a pair of latex inequalities sign array like ['\\ge', '\\le'].
* ```typescript
* IneqSign(true,true) // ['\\ge', '\\le']
* IneqSign(true,false) // ['\\gt', '\\lt']
* IneqSign(false,true) // ['\\le', '\\ge']
* IneqSign(false,false) // ['\\lt', '\\gt']
* ```
*/
function IneqSign(greater, equal = false) {
    if (greater && equal) {
        return ['\\ge', '\\le'];
    }
    if (greater && !equal) {
        return ['\\gt', '\\lt'];
    }
    if (!greater && equal) {
        return ['\\le', '\\ge'];
    }
    if (!greater && !equal) {
        return ['\\lt', '\\gt'];
    }
    throw 'never';
}
globalThis.IneqSign = contract(IneqSign).sign([owl.bool, owl.bool]);
/**
* @category Text
* @deprecated
* @param upSign - put -ve sign on numerator instead of the front.
* @return latex of dfrac p/q like \dfrac{1}{2}.
* ```
* Dfrac(1,2) // '\\dfrac{1}{2}'
* Dfrac(1,-2) // '\\dfrac{-1}{2}'
* Dfrac(6,4) // '\\dfrac{3}{2}'
* Dfrac(6,-2) // '-3'
* Dfrac(0,2) // '0'
* Dfrac(5,0) // undefined
* ```
*/
function Dfrac(numerator, denominator, upSign = false) {
    return ink.printDfrac(numerator, denominator, upSign);
}
globalThis.Dfrac = contract(Dfrac).sign([owl.num, owl.nonZero, owl.bool]);
/**
 * @category Text
 * @return convert index katex to surd
 * ```
 * IndexToSurd('{x}^{0.5}') // '\\sqrt{x}'
 * IndexToSurd('{(y)}^{0.5}') // '\\sqrt{y}'
 * ```
 */
function IndexToSurd(text) {
    return text.replace(/\{\(*([^\{\(\}\)]*)\)*\}\^\{0\.5\}/g, "\\sqrt{$1}");
}
globalThis.IndexToSurd = contract(IndexToSurd).sign([owl.str]);
/**
 * @category Text
 * @deprecated
 * @return the coordinates '(a, b)' of point [a,b]
 * ```
 * Coord([1,2]) // '(1, 2)'
 * ```
 */
function Coord(point, dp = 1) {
    let [a, b] = point.map(_ => cal.blur(_));
    a = Fix(a, dp);
    b = Fix(b, dp);
    return '(' + a + ', ' + b + ')';
}
globalThis.Coord = contract(Coord).sign([owl.point2D]);
/**
 * @category Text
 * @deprecated
 * @return the scientific notation of number
 * ```
 * Sci(123.45) // '1.2345 x 10^{ 2}'
 * Sci(1.2345) // '1.2345'
 * ```
 */
function Sci(num) {
    if (num === 0)
        return '0';
    let m = cal.e(cal.blur(num));
    if (m === 0)
        return num.toString();
    num = num / (10 ** m);
    num = cal.blur(num);
    return num.toString() + ' \\times ' + '10^{ ' + m + '}';
}
globalThis.Sci = contract(Sci).sign([owl.num]);
/**
 * @category Text
 * @return the katex of long division
 * ```
 * LongDivision([1,2,3,4],[1,2]) //
 * LongDivision([1,2,3,4],[1,2]) //
 * ```
 */
function LongDivision(dividend, divisor) {
    dividend = dividend.reverse();
    divisor = divisor.reverse();
    function xTerm(power) {
        if (power === 0)
            return "";
        if (power === 1)
            return "x";
        return "x^" + power;
    }
    function printSolid(poly) {
        let arr = [];
        poly.forEach((v, i) => {
            if (v !== null)
                arr.push(v + xTerm(i));
        });
        return arr.reverse().join("+");
    }
    function printUnderline(poly) {
        return "\\underline{" + printSolid(poly) + "}";
    }
    function printPhantom(poly) {
        let arr = [];
        poly.forEach((v, i) => {
            if (v === null)
                arr.push(dividend[i] + xTerm(i));
        });
        let T = arr.reverse().join("+");
        if (T.length === 0)
            return "";
        return "\\phantom{" + "+" + T + "}";
    }
    function writeSolid(poly) {
        return printSolid(poly) + printPhantom(poly);
    }
    function writeUnderline(poly) {
        return printUnderline(poly) + printPhantom(poly);
    }
    function pushDivide(dividend, divisor) {
        let t1 = dividend[dividend.length - 1];
        let t2 = divisor[divisor.length - 1];
        return t1 / t2;
    }
    function step(current, divisor) {
        let q = pushDivide(current, divisor);
        let under = divisor.map(x => x * q);
        for (let i = 1; i <= current.length - divisor.length; i++)
            under.unshift(null);
        let next = [];
        for (let i = 0; i < current.length - 1; i++)
            next.push(current[i] - Number(under[i]));
        let nextPrint = [...next].reverse();
        for (let i = 0; i < nextPrint.length; i++)
            if (i > divisor.length - 1)
                nextPrint[i] = null;
        nextPrint.reverse();
        return { next, nextPrint, under, q };
    }
    function compose(dividend, divisor) {
        let T = "\\begin{array}{r}";
        T += "QUOTIENT \\\\";
        T += writeSolid(divisor);
        T += "{\\overline{\\smash{\\big)}";
        T += writeSolid(dividend);
        T += "}}\\\\";
        let current = dividend;
        let quotient = [];
        while (true) {
            let { next, nextPrint, under, q } = step(current, divisor);
            T += writeUnderline(under) + "\\\\";
            T += writeSolid(nextPrint) + "\\\\";
            current = next;
            quotient.push(q);
            if (current.length < divisor.length)
                break;
        }
        T += "\\end{array}";
        quotient.reverse();
        T = T.replace('QUOTIENT', writeSolid(quotient));
        return T;
    }
    return compose(dividend, divisor);
}
globalThis.LongDivision = contract(LongDivision).sign([owl.ntuple, owl.ntuple]);
// /**
//  * @category Text
//  * @param num - from 1 to 10
//  * @return roman number
//  * ```
//  * Roman(1) // "I"
//  * Roman(2) // "II"
//  * ```
//  */
// function Roman(num: number): string {
//     return ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'][num - 1]
// }
// globalThis.Roman = contract(Roman).sign([[owl.positiveInt, owl.between(1, 10)]])
// /**
//  * @category Text
//  * @param roman - from I to X
//  * @return arabic number
//  * ```
//  * DeRoman("I") // 1
//  * DeRoman("II") // 2
//  * ```
//  */
// function DeRoman(roman: string): number {
//     const romans = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X']
//     return romans.indexOf(roman) + 1
// }
// globalThis.DeRoman = contract(DeRoman).sign([owl.roman])
/**
 * @category Text
 * @return the representation of num in base b
 * ```
 * ToBase(1000,16) // '3E8_{16}'
 * ToBase(13,2) // '1101_{2}'
 * ```
 */
function ToBase(num, base) {
    return num.toString(base).toUpperCase() + '_{' + base + '}';
}
globalThis.ToBase = contract(ToBase).sign([[owl.num, Number.isSafeInteger], owl.positiveInt]);
/**
 * @category Text
 * @return a prime factorization layout for HCF or LCM
 * ```
 * PrimeFactorize({
 *  'number': [30, 15, 12],
 *   a: [3, 0, 5],
 *   b: [5, 6, 1],
 *   '(x+1)': [8, 7, 5]
 * },
 * {hcf:true,lcm:true,multiply:!true}
 * )
 * ```
 */
function PrimeFactorize(val, { hcf = false, lcm = false, multiply = false }) {
    let T = '\\begin{matrix} ';
    function add(variable, power) {
        let s = multiply ? '& \\times &' : '&';
        if (power > 1) {
            T += s + variable + '^{' + power + '}';
        }
        else if (power === 1) {
            T += s + variable;
        }
        else {
            T += multiply ? '& &' : ' & ';
        }
    }
    let keys = Object.keys(val);
    let n = val[keys[0]].length;
    for (let i = 0; i < n; i++) {
        T += ' & ';
        if (keys.includes('number'))
            T += ' & ' + val.number[i];
        for (let k of keys) {
            if (k === 'number')
                continue;
            add(k, val[k][i]);
        }
        T += ' \\\\ ';
    }
    T += '\\hline';
    if (hcf) {
        T += ' \\text{HCF} & = ';
        if (keys.includes('number'))
            T += ' & ' + HCF(...val.number);
        for (let k of keys) {
            if (k === 'number')
                continue;
            add(k, Min(...val[k]));
        }
        T += ' \\\\ ';
    }
    if (lcm) {
        T += ' \\text{LCM} & = ';
        if (keys.includes('number'))
            T += ' & ' + LCM(...val.number);
        for (let k of keys) {
            if (k === 'number')
                continue;
            add(k, Max(...val[k]));
        }
        T += ' \\\\ ';
    }
    T += '\\end{matrix}';
    return T;
}
globalThis.PrimeFactorize = contract(PrimeFactorize).sign([owl.object, owl.object]);
/**
 * @category Text
 * @return the latex representing the `constraint`
 * ```
 * ConstraintText([1,2,'<',3],true,'h','k') // 'h+2k<3'
 * ConstraintText([1,2,'<',3],false) // 'x+2y>3'
 * ConstraintText([1,2,'<',3],null) // 'x+2y=3'
 * ```
 */
function ConstraintText(constraint, sign = true, xReplace = 'x', yReplace = 'y') {
    if (sign === false)
        constraint = rein(constraint).flip().constraint;
    let T = ink.printConstraint(constraint, false, sign === null);
    T = T.replace(/x/g, xReplace);
    T = T.replace(/y/g, yReplace);
    return T;
}
globalThis.ConstraintText = contract(ConstraintText)
    .sign([owl.constraint, owl.pass, owl.str, owl.str]);


/***/ }),

/***/ 2561:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Host = void 0;
const contract_1 = __webpack_require__(1154);
let angle = owl.between(0, 180);
let side = owl.positive;
function triangle_ineq(a, b, c) {
    return owl.triangleSides([a, b, c]);
}
let Host = class Host {
    /**
     * Find c from a and b of a right triangle.
     * ```
     * Pyth(3,4) // 5
     * ```
     */
    static Pyth(a, b) {
        return (a ** 2 + b ** 2) ** 0.5;
    }
    /**
     * Find b from c and a of a right triangle.
     * ```
     * PythLeg(5,4) // 3
     * ```
     */
    static PythLeg(c, a) {
        return (c ** 2 - a ** 2) ** 0.5;
    }
    /**
     * Find side length c by cosine law. Input sides a,b and angle C.
     * ```
     * CosineLawLength(3, 4, 90) // 5
     * ```
     */
    static CosineLawLength(a, b, C) {
        return (a ** 2 + b ** 2 - 2 * a * b * cos(C)) ** 0.5;
    }
    /**
     * Find angle C by cosine law. Input sides a,b,c.
     * ```
     * CosineLawAngle(5,5,5) // 60
     * CosineLawAngle(3,4,5) // 90
     * CosineLawAngle(7,8,9) // 73.3984504
     * ```
     */
    static CosineLawAngle(a, b, c) {
        return arccos((c ** 2 - a ** 2 - b ** 2) / (-2 * a * b));
    }
    /**
     * Find side b by sine law.
     * ```
     * SineLawLength(60,1,60) // 1
     * ```
     */
    static SineLawLength(A, a, B) {
        return a / sin(A) * sin(B);
    }
    /**
     * Find angle B by sine law. Assume acute.
     * ```
     * SineLawAngle(1,60,1) // 60
     * ```
     */
    static SineLawAngle(a, A, b) {
        return arcsin(sin(A) / a * b);
    }
    /**
     * Find area by Heron's formula.
     * ```
     * Heron(3,4,5) // 6
     * Heron(1,1,1) // 0.433012701
     * Heron(7,8,9) // 26.83281573
     * ```
     */
    static Heron(a, b, c) {
        let s = (a + b + c) / 2;
        return (s * (s - a) * (s - b) * (s - c)) ** 0.5;
    }
    /**
     * Solve SSS triangle.
     * ```
     * SolveSSS(1,sqrt(3),2) // [90,30,60]
     * ```
     */
    static SolveSSS(a, b, c) {
        let A = CosineLawAngle(b, c, a);
        let B = CosineLawAngle(c, a, b);
        let C = CosineLawAngle(a, b, c);
        return [C, A, B];
    }
    /**
     * Solve SAS triangle.
     * ```
     * SolveSAS(1,90,sqrt(3)) // [30,2,60]
     * ```
     */
    static SolveSAS(a, C, b) {
        let c = CosineLawLength(a, b, C);
        let [_, A, B] = SolveSSS(a, b, c);
        return [A, c, B];
    }
    /**
     * Solve AAS triangle.
     * ```
     * SolveAAS(60,90,sqrt(3)) // [1,30,2]
     * ```
     */
    static SolveAAS(A, B, a) {
        let C = 180 - A - B;
        let b = SineLawLength(A, a, B);
        let c = CosineLawLength(a, b, C);
        return [c, C, b];
    }
    /**
     * Solve ASA triangle.
     * ```
     * SolveASA(90,sqrt(3),30) // [2,60,1]
     * ```
     */
    static SolveASA(A, c, B) {
        let C = 180 - A - B;
        let a = SineLawLength(C, c, A);
        let b = SineLawLength(C, c, B);
        return [a, C, b];
    }
    /**
     * Solve SSA triangle.
     * ```
     * SolveSSA(1,sqrt(3),30) // [90,2,60]
     * ```
     */
    static SolveSSA(a, b, A) {
        let B = SineLawAngle(a, A, b);
        let C = 180 - A - B;
        let c = SineLawLength(A, a, C);
        return [C, c, B];
    }
    /**
     * Find heights of SSS triangle.
     * ```
     * HeightsBySSS(1,sqrt(3),2) // [sqrt(3),1,sqrt(3)/2]
     * ```
     */
    static HeightsBySSS(a, b, c) {
        let area = Heron(a, b, c);
        let Ha = 2 * area / a;
        let Hb = 2 * area / b;
        let Hc = 2 * area / c;
        return [Ha, Hb, Hc];
    }
    /**
     * Find height of SSS triangle, against the first base.
     * ```
     * HeightBySSS(1,sqrt(3),2) // sqrt(3)
     * ```
     */
    static HeightBySSS(a, b, c) {
        let area = Heron(a, b, c);
        return 2 * area / a;
    }
    /**
     * Find heights of SAS triangle.
     * ```
     * HeightsBySAS(1,90,sqrt(3)) // [sqrt(3),1,sqrt(3)/2]
     * ```
     */
    static HeightsBySAS(a, C, b) {
        let [A, c, B] = SolveSAS(a, C, b);
        return HeightsBySSS(a, b, c);
    }
    /**
     * Find height of SAS triangle, opposite to the given angle.
     * ```
     * HeightBySAS(1,90,sqrt(3)) // sqrt(3)/2
     * ```
     */
    static HeightBySAS(a, C, b) {
        let [ha, hb, hc] = HeightsBySAS(a, C, b);
        return hc;
    }
    /**
     * @deprecated
     * @param fix - Round all return values to integer.
     * Return the 6 elements of a triangle given vertice. { sideC, angleB, sideA, angleC, sideB, angleA }
     * ```
     * TriangleFromVertex([0,0],[4,0],[0,3],false)
     * // {sideC:4, angleB:36.86989765, sideA:5, angleC:53.13013235, sideB:3, angleA:90}
     * ```
     */
    static TriangleFromVertex(A, B, C, fix = true) {
        let sideC = Distance(A, B);
        let sideA = Distance(B, C);
        let sideB = Distance(C, A);
        let angleC = CosineLawAngle(sideA, sideB, sideC);
        let angleA = CosineLawAngle(sideB, sideC, sideA);
        let angleB = CosineLawAngle(sideA, sideC, sideB);
        if (fix) {
            sideC = Fix(sideC);
            sideA = Fix(sideA);
            sideB = Fix(sideB);
            angleC = Fix(angleC);
            angleA = Fix(angleA);
            angleB = Fix(angleB);
        }
        return { sideC, angleB, sideA, angleC, sideB, angleA };
    }
    /**
     * @deprecated
     * Solve a triangle. return the triangle object solved.
     * ```
     * SolveTriangle({sideC:2, sideA:2, sideB:2})
     * // {sideC:2, angleB:60, sideA:2, angleC:60, sideB:2, angleA:60}
     * SolveTriangle({sideC:3, angleB:90, sideA:4})
     * // {sideC:3, angleB:90, sideA:4, angleC:36.86989765, sideB:5, angleA:53.13010235}
     * SolveTriangle({sideC:5, angleB:30, angleC:80})
     * // {sideC:5, angleB:30, sideA:4.770944471, angleC:80, sideB:2.53856653, angleA:70}
     * SolveTriangle({sideC:6, angleB:30, angleA:40})
     * // {sideC:6, angleB:30, sideA:4.10424172, angleC:110, sideB:3.192533317, angleA:40}
     * ```
     */
    static SolveTriangle({ sideA, sideB, sideC, angleA, angleB, angleC }) {
        let a = sideA;
        let b = sideB;
        let c = sideC;
        let A = angleA;
        let B = angleB;
        let C = angleC;
        // temp
        if (a === null)
            throw 'SolveTriangle not accept null now';
        if (b === null)
            throw 'SolveTriangle not accept null now';
        if (c === null)
            throw 'SolveTriangle not accept null now';
        if (A === null)
            throw 'SolveTriangle not accept null now';
        if (B === null)
            throw 'SolveTriangle not accept null now';
        if (C === null)
            throw 'SolveTriangle not accept null now';
        function angleSum() {
            if (A === undefined && B !== undefined && C !== undefined)
                A = 180 - B - C;
            if (B === undefined && A !== undefined && C !== undefined)
                B = 180 - A - C;
            if (C === undefined && B !== undefined && A !== undefined)
                C = 180 - A - B;
        }
        function SSS() {
            if (a !== undefined && b !== undefined && c !== undefined) {
                A = CosineLawAngle(b, c, a);
                B = CosineLawAngle(c, a, b);
                C = CosineLawAngle(a, b, c);
            }
        }
        function SAS() {
            if (a !== undefined && b !== undefined && C !== undefined && c === undefined)
                c = CosineLawLength(a, b, C);
            if (b !== undefined && c !== undefined && A !== undefined && a === undefined)
                a = CosineLawLength(b, c, A);
            if (c !== undefined && a !== undefined && B !== undefined && b === undefined)
                b = CosineLawLength(c, a, B);
        }
        function AAS() {
            let r = undefined;
            if (A !== undefined && a !== undefined && r === undefined)
                r = sin(A) / a;
            if (B !== undefined && b !== undefined && r === undefined)
                r = sin(B) / b;
            if (C !== undefined && c !== undefined && r === undefined)
                r = sin(C) / c;
            if (r !== undefined && A !== undefined && a === undefined)
                a = sin(A) / r;
            if (r !== undefined && B !== undefined && b === undefined)
                b = sin(B) / r;
            if (r !== undefined && C !== undefined && c === undefined)
                c = sin(C) / r;
        }
        for (let i = 0; i < 10; i++) {
            if (a !== undefined && b !== undefined && c !== undefined
                && A !== undefined && B !== undefined && C !== undefined) {
                return { sideA: a, sideB: b, sideC: c, angleA: A, angleB: B, angleC: C };
            }
            angleSum();
            SSS();
            SAS();
            AAS();
        }
        Should(false, 'Solve Triangle Fail!');
        throw 'never';
    }
    /**
     * the orthocentre of a triangle
     * ```
     * Orthocentre([9,-6],[6,10],[-7,10])  // [9,13]
     * ```
     */
    static Orthocentre(A, B, C) {
        let H = PdFoot(A, B, C);
        let G = PdFoot(B, C, A);
        let [x, y] = Intersection(C, H, A, G);
        return [cal.blur(x), cal.blur(y)];
    }
    /**
     * the circumcentre of a triangle
     * ```
     * Circumcentre([1,7],[8,-4],[-10,0])  // [-1,-2]
     * ```
     */
    static Circumcentre(A, B, C) {
        let [a1, b1, c1] = LinearFromBisector(A, B);
        let [a2, b2, c2] = LinearFromBisector(B, C);
        let [x, y] = Crammer(a1, b1, -c1, a2, b2, -c2);
        return [cal.blur(x), cal.blur(y)];
    }
    /**
     * the centroid of a triangle
     * ```
     * Centroid([3,6],[9,12],[15,21])  // [9,13]
     * ```
     */
    static Centroid(A, B, C) {
        let [x, y] = [(A[0] + B[0] + C[0]) / 3, (A[1] + B[1] + C[1]) / 3];
        return [cal.blur(x), cal.blur(y)];
    }
    /**
     * the incentre of a triangle
     * ```
     * Incentre([3,0],[-3,0],[0,4])  // [0,1.5]
     * ```
     */
    static Incentre(A, B, C) {
        let a = Distance(B, C);
        let b = Distance(A, C);
        let c = Distance(A, B);
        let p = a + b + c;
        let x = (a * A[0] + b * B[0] + c * C[0]) / p;
        let y = (a * A[1] + b * B[1] + c * C[1]) / p;
        return [cal.blur(x), cal.blur(y)];
    }
    /**
     * the scaled points [A,B,C] so that their orthecentre and themselves becomes integral
     */
    static ScaleOrthocentreToInt(A, B, C) {
        let [x, y] = Orthocentre(A, B, C);
        let q = numbers(x, y, ...A, ...B, ...C).ratioFactor();
        Should(owl.num(q), 'original orthocentre must be rational');
        return shape2D(A, B, C).scale(q).toArray();
    }
    /**
     * the scaled points [A,B,C] so that their circumcentre and themselves becomes integral
     */
    static ScaleCircumcentreToInt(A, B, C) {
        let [x, y] = Circumcentre(A, B, C);
        let q = numbers(x, y, ...A, ...B, ...C).ratioFactor();
        Should(owl.num(q), 'original circumcentre must be rational');
        return shape2D(A, B, C).scale(q).toArray();
    }
    /**
     * the scaled points [A,B,C] so that their centroid and themselves becomes integral
     */
    static ScaleCentroidToInt(A, B, C) {
        let [x, y] = Centroid(A, B, C);
        let q = numbers(x, y, ...A, ...B, ...C).ratioFactor();
        Should(owl.num(q), 'original centroid must be rational');
        return shape2D(A, B, C).scale(q).toArray();
    }
    /**
     * the scaled points [A,B,C] so that their incentre and themselves becomes integral
     */
    static ScaleIncentreToInt(A, B, C) {
        let [x, y] = Incentre(A, B, C);
        let q = numbers(x, y, ...A, ...B, ...C).ratioFactor();
        Should(owl.num(q), 'original incentre must be rational');
        return shape2D(A, B, C).scale(q).toArray();
    }
};
__decorate([
    (0, contract_1.checkIt)(side)
], Host, "Pyth", null);
__decorate([
    (0, contract_1.checkIt)(side),
    (0, contract_1.inspectIt)(function is_triangle(c, a) { return c >= a; })
], Host, "PythLeg", null);
__decorate([
    (0, contract_1.checkIt)(side, side, angle)
], Host, "CosineLawLength", null);
__decorate([
    (0, contract_1.checkIt)(side),
    (0, contract_1.inspectIt)(triangle_ineq)
], Host, "CosineLawAngle", null);
__decorate([
    (0, contract_1.checkIt)(angle, side, angle)
], Host, "SineLawLength", null);
__decorate([
    (0, contract_1.checkIt)(side, angle, side),
    (0, contract_1.inspectIt)(function is_triangle(a, A, b) { return sin(A) / a * b >= 0 && sin(A) / a * b <= 1; })
], Host, "SineLawAngle", null);
__decorate([
    (0, contract_1.checkIt)(side),
    (0, contract_1.inspectIt)(triangle_ineq)
], Host, "Heron", null);
__decorate([
    (0, contract_1.checkIt)(side),
    (0, contract_1.inspectIt)(triangle_ineq)
], Host, "SolveSSS", null);
__decorate([
    (0, contract_1.checkIt)(side, angle, side)
], Host, "SolveSAS", null);
__decorate([
    (0, contract_1.checkIt)(angle, angle, side)
], Host, "SolveAAS", null);
__decorate([
    (0, contract_1.checkIt)(angle, side, angle)
], Host, "SolveASA", null);
__decorate([
    (0, contract_1.checkIt)(side, side, angle)
], Host, "SolveSSA", null);
__decorate([
    (0, contract_1.checkIt)(side),
    (0, contract_1.inspectIt)(triangle_ineq)
], Host, "HeightsBySSS", null);
__decorate([
    (0, contract_1.checkIt)(side),
    (0, contract_1.inspectIt)(triangle_ineq)
], Host, "HeightBySSS", null);
__decorate([
    (0, contract_1.checkIt)(side, angle, side)
], Host, "HeightsBySAS", null);
__decorate([
    (0, contract_1.checkIt)(side, angle, side)
], Host, "HeightBySAS", null);
__decorate([
    (0, contract_1.checkIt)(owl.point2D, owl.point2D, owl.point2D, owl.bool)
], Host, "TriangleFromVertex", null);
__decorate([
    (0, contract_1.checkIt)(owl.point2D)
], Host, "Orthocentre", null);
__decorate([
    (0, contract_1.checkIt)(owl.point2D)
], Host, "Circumcentre", null);
__decorate([
    (0, contract_1.checkIt)(owl.point2D)
], Host, "Centroid", null);
__decorate([
    (0, contract_1.checkIt)(owl.point2D)
], Host, "Incentre", null);
__decorate([
    (0, contract_1.checkIt)(owl.point2D)
], Host, "ScaleOrthocentreToInt", null);
__decorate([
    (0, contract_1.checkIt)(owl.point2D)
], Host, "ScaleCircumcentreToInt", null);
__decorate([
    (0, contract_1.checkIt)(owl.point2D)
], Host, "ScaleCentroidToInt", null);
__decorate([
    (0, contract_1.checkIt)(owl.point2D)
], Host, "ScaleIncentreToInt", null);
Host = __decorate([
    (0, contract_1.exposeAll)(),
    (0, contract_1.captureAll)()
], Host);
exports.Host = Host;


/***/ }),

/***/ 9812:
/***/ (() => {

"use strict";

/**
 * @category Trigonometry
 * @param rect - The rectangular coordinates [x,y] of a point, or a polar angle theta.
 * @return  the quadrant of a point or angle: 'I','II','III' or 'IV'.
 * ```
 * Quadrant([1,1]) \\ 'I'
 * Quadrant([-1,1]) \\ 'II'
 * Quadrant(200) \\ 'III'
 * Quadrant(350) \\ 'IV'
 * ```
 */
function Quadrant(rect) {
    if (!Array.isArray(rect))
        rect = PolToRect([1, rect]);
    const q = RectToPol(rect)[1];
    if (q >= 0 && q < 90)
        return "I";
    if (q >= 90 && q < 180)
        return "II";
    if (q >= 180 && q < 270)
        return "III";
    if (q >= 270 && q < 360)
        return "IV";
    Should(false, 'fail to parse quadrant!');
    throw 'never';
}
globalThis.Quadrant = contract(Quadrant).sign([owl.or([owl.point2D, owl.num])]);
/**
 * @category Trigonometry
 * @return the rectangular coordinates [x,y] from a polar coordinates [r,theta].
 * ```
 * PolToRect([1,45]) // [0.707,0.707]
 * ```
 */
function PolToRect([r, q]) {
    return [r * cos(q), r * sin(q)];
}
globalThis.PolToRect = contract(PolToRect).sign([owl.polar]);
/**
 * @category Trigonometry
 * @return the polar coordinates [r,theta] of a rectangular coordinates [x,y].
 * ```
 * RectToPol([1,1]) // [1.414,45]
 * ```
 */
function RectToPol([x, y]) {
    const r = Math.sqrt(x * x + y * y);
    let q = Math.atan2(y, x) * 180 / Math.PI;
    if (q < 0)
        q = q + 360;
    return [r, q];
}
globalThis.RectToPol = contract(RectToPol).sign([owl.point2D]);
/**
 * @category Trigonometry
 * @return the sign from ASTC diagram, 1 or -1, representing positive or negative.
 * ```
 * ASTC(2,'cos') // -1
 * ASTC('III','tan') // 1
 * ```
 */
function ASTC(quadrant, func) {
    if (quadrant == "I")
        quadrant = 1;
    if (quadrant == "II")
        quadrant = 2;
    if (quadrant == "III")
        quadrant = 3;
    if (quadrant == "IV")
        quadrant = 4;
    if (quadrant == 1)
        return 1;
    if (quadrant == 2)
        return func === 'sin' ? 1 : -1;
    if (quadrant == 3)
        return func === 'tan' ? 1 : -1;
    if (quadrant == 4)
        return func === 'cos' ? 1 : -1;
    return 0;
}
globalThis.ASTC = contract(ASTC).sign([owl.quadrant, owl.trig]);
/**
 * @category Trigonometry
 * @deprecated use TrigSolve instead
 * @return the roots of trig equations sin(x)=k , cos(x)=k or tan(x)=k. The angles [r1,r2,r3].
 * ```
 * TrigRoot('sin',0) // [0, 180, 360]
 * TrigRoot('sin',0.5) // [30, 150, undefined]
 * TrigRoot('sin',1) // [90, undefined, undefined]
 * ```
 */
function TrigRoot(func, k) {
    if (func == 'sin') {
        if (k > 1 || k < -1)
            return [undefined, undefined, undefined];
        if (k == 0)
            return [0, 180, 360];
        if (k == 1)
            return [90, undefined, undefined];
        if (k == -1)
            return [270, undefined, undefined];
        if (k > 0) {
            let a = arcsin(k);
            let b = 180 - a;
            return [a, b, undefined];
        }
        if (k < 0) {
            let x = -arcsin(k);
            let a = 180 + x;
            let b = 360 - x;
            return [a, b, undefined];
        }
    }
    if (func == 'cos') {
        if (k > 1 || k < -1)
            return [undefined, undefined, undefined];
        if (k == 0)
            return [90, 270, undefined];
        if (k == 1)
            return [0, 360, undefined];
        if (k == -1)
            return [180, undefined, undefined];
        let a = arccos(k);
        let b = 360 - a;
        return [a, b, undefined];
    }
    if (func == 'tan') {
        if (k == 0)
            return [0, 180, 360];
        if (k > 0) {
            let a = arctan(k);
            let b = 180 + a;
            return [a, b, undefined];
        }
        if (k < 0) {
            let x = -arctan(k);
            let a = 180 - x;
            let b = 360 - x;
            return [a, b, undefined];
        }
    }
    return [undefined, undefined, undefined];
}
globalThis.TrigRoot = contract(TrigRoot).sign([owl.trig, owl.num]);
/**
 * @category Trigonometry
 * @return the roots of trig equations sin(x)=k , cos(x)=k or tan(x)=k.
 * ```
 * TrigSolve('sin',0) // [0, 180, 360]
 * TrigSolve('sin',0.5) // [30, 150]
 * TrigSolve('sin',1) // [90]
 * ```
 */
function TrigSolve(func, k) {
    if (func == 'sin') {
        if (k > 1 || k < -1)
            return [];
        if (k == 0)
            return [0, 180, 360];
        if (k == 1)
            return [90];
        if (k == -1)
            return [270];
        if (k > 0) {
            let a = arcsin(k);
            let b = 180 - a;
            return [a, b];
        }
        if (k < 0) {
            let x = -arcsin(k);
            let a = 180 + x;
            let b = 360 - x;
            return [a, b];
        }
    }
    if (func == 'cos') {
        if (k > 1 || k < -1)
            return [];
        if (k == 0)
            return [90, 270];
        if (k == 1)
            return [0, 360];
        if (k == -1)
            return [180];
        let a = arccos(k);
        let b = 360 - a;
        return [a, b];
    }
    if (func == 'tan') {
        if (k == 0)
            return [0, 180, 360];
        if (k > 0) {
            let a = arctan(k);
            let b = 180 + a;
            return [a, b];
        }
        if (k < 0) {
            let x = -arctan(k);
            let a = 180 - x;
            let b = 360 - x;
            return [a, b];
        }
    }
    return [];
}
globalThis.TrigSolve = contract(TrigSolve).sign([owl.trig, owl.num]);
/**
 * @category Trigonometry
 * @deprecated
 * @return reduce the polar angle into the range [0,360)
 * ```
 * PolarReduce(370) // 10
 * PolarReduce(-10) // 350
 * ```
 */
function PolarReduce(q) {
    q = q % 360;
    if (q < 0)
        q += 360;
    return q;
}
globalThis.PolarReduce = contract(PolarReduce).sign([owl.num]);
/**
 * @category Trigonometry
 * @deprecated
 * @return the angle (within [0,180]) between two polar angles
 * ```
 * PolarDiff(80,70) // 10
 * PolarDiff(350,10) // 20
 * ```
 */
function PolarDiff(angle1, angle2) {
    angle1 = PolarReduce(angle1);
    angle2 = PolarReduce(angle2);
    let d = Abs(angle1 - angle2);
    return Math.min(d, 360 - d);
}
globalThis.PolarDiff = contract(PolarDiff).sign([owl.num]);
/**
 * @category Trigonometry
 * @return the whole bearing in the polar angle direction
 * ```
 * WholeBearing(0) // '090°'
 * WholeBearing(180) // '270°'
 * ```
 */
function WholeBearing(polarAngle) {
    let q = polarAngle;
    q = PolarReduce(q);
    q = cal.blur(q);
    q = q <= 90 ? 90 - q : 450 - q;
    q = cal.blur(q);
    return q.toString().padStart(3, '0') + '°';
}
globalThis.WholeBearing = contract(WholeBearing).sign([owl.int]);
/**
 * @category Trigonometry
 * @return the compass bearing in the polar angle direction
 * ```
 * CompassBearing(30) // 'N60°E'
 * ```
 */
function CompassBearing(polarAngle) {
    let q = polarAngle;
    q = PolarReduce(q);
    q = cal.blur(q);
    if (q === 0)
        return 'east';
    if (q === 270)
        return 'south';
    if (q === 180)
        return 'west';
    if (q === 90)
        return 'north';
    if (0 < q && q < 90)
        return 'N' + (90 - q) + '°E';
    if (90 < q && q < 180)
        return 'N' + (q - 90) + '°W';
    if (180 < q && q < 270)
        return 'S' + (270 - q) + '°W';
    if (270 < q && q < 360)
        return 'S' + (q - 270) + '°E';
    throw 'never';
}
globalThis.CompassBearing = contract(CompassBearing).sign([owl.int]);


/***/ }),

/***/ 6779:
/***/ (() => {

"use strict";

// /**
//  * @category Vector
//  * @return the vector OP
//  * ```
//  * Vector([1,2],[10,5]) // [9,3]
//  * ```
//  */
// function Vector(O: Point2D, P: Point2D): Point2D {
//     return [P[0] - O[0], P[1] - O[1]];
// }
// globalThis.Vector = contract(Vector).sign([owl.point2D])
// /**
//  * @category Vector
//  * @return sum of all vectors
//  * ```
//  * VectorAdd([1,2],[3,4],[5,6]) // [9,12]
//  * ```
//  */
// function VectorAdd(...vectors: Point2D[]): Point2D {
//     const x = Sum(...vectors.map(p => p[0]))
//     const y = Sum(...vectors.map(p => p[1]))
//     return [x, y];
// }
// globalThis.VectorAdd = contract(VectorAdd).sign([owl.vector])
// /**
//  * @category Vector
//  * @return mean of all vectors
//  * ```
//  * Mid([1,2],[3,4],[5,6]) // [3,4]
//  * Mid([0,0],[2,0],[2,2],[0,2]) // [1,1]
//  * ```
//  */
// function Mid(...vectors: Point2D[]): Point2D {
//     const x = Sum(...vectors.map(p => p[0])) / vectors.length
//     const y = Sum(...vectors.map(p => p[1])) / vectors.length
//     return [x, y];
// }
// globalThis.Mid = contract(Mid).sign([owl.vector])
// /**
//  * @category Vector
//  * @deprecated useless
//  * @return length of vector
//  * ```
//  * VectorLength([-3,4]) // 5
//  * VectorLength([0,0]) // 0
//  * VectorLength([1,2]) // sqrt(5)
//  * ```
//  */
// function VectorLength(v: Vector): number {
//     const [x, y] = v
//     return (x * x + y * y) ** 0.5
// }
// globalThis.VectorLength = contract(VectorLength).sign([owl.vector])
// /**
//  * @category Vector
//  * @deprecated useless
//  * @return argument of vector
//  * ```
//  * VectorArg([2,0]) // 0
//  * VectorArg([0,2]) // 90
//  * VectorArg([-2,0]) // 180
//  * VectorArg([0,-2]) // 270
//  * VectorArg([0,0]) // 0
//  * VectorArg([1,1]) // 45
//  * ```
//  */
// function VectorArg(v: Vector): number {
//     const [x, y] = v
//     let arg = Math.atan2(y, x) / Math.PI * 180;
//     if (arg < 0) arg += 360
//     return arg
// }
// globalThis.VectorArg = contract(VectorArg).sign([owl.vector])
// /**
//  * @category Vector
//  * @return find [kx,ky] from [x,y]
//  * ```
//  * VectorScale([1,2],2) // [2,4]
//  * VectorScale([1,2],-2) // [-2,-4]
//  * ```
//  */
// function VectorScale(v: Vector, k: number): Vector {
//     return [k * v[0], k * v[1]];
// }
// globalThis.VectorScale = contract(VectorScale).sign([owl.vector, owl.num])
// /**
//  * @category Vector
//  * @deprecated Useless
//  * @return the negative of the vector
//  * ```
//  * VectorRev([-3,4]) // [3,-4]
//  * VectorRev([0,0]) // [0,0]
//  * VectorRev([1,2]) // [-1,-2]
//  * ```
//  */
// function VectorRev(v: Vector): Vector {
//     const [x, y] = v
//     return [-x, -y]
// }
// globalThis.VectorRev = contract(VectorRev).sign([owl.vector])
// /**
//  * @category Vector
//  * @deprecated Useless
//  * @return the unit vector of v
//  * ```
//  * VectorUnit([2,0]) // [1,0]
//  * VectorUnit([0,-2]) // [0,-1]
//  * VectorUnit([1,2]) // [1/sqrt(5),2/sqrt(5)]
//  * ```
//  */
// function VectorUnit(v: Vector): Vector {
//     const [x, y] = v
//     const L = VectorLength(v)
//     return [x / L, y / L]
// }
// globalThis.VectorUnit = contract(VectorUnit).sign([owl.vector])
// /**
//  * @category Vector
//  * @deprecated useless
//  * @return scale the vector to the given length
//  * ```
//  * VectorScaleTo([2,0],10) // [10,0]
//  * VectorScaleTo([0,-2],100) // [0,-100]
//  * VectorScaleTo([-3,4],15) // [-9,12]
//  * ```
//  */
// function VectorScaleTo(v: Vector, length: number): Vector {
//     return VectorScale(VectorUnit(v), length)
// }
// globalThis.VectorScaleTo = contract(VectorScaleTo).sign([owl.vector, owl.num])
// /**
//  * @category Vector
//  * @deprecated Useless
//  * @return rotate a vector anticlockwise by angle.
//  * ```
//  * VectorRotate([1,2],90) // [-2,1]
//  * ```
//  */
// function VectorRotate(v: Vector, angle: number): Vector {
//     const [x, y] = v
//     const S = sin(angle)
//     const C = cos(angle)
//     const x1 = x * C - y * S
//     const y1 = x * S + y * C
//     return [x1, y1]
// }
// globalThis.VectorRotate = contract(VectorRotate).sign([owl.vector, owl.num])


/***/ }),

/***/ 4154:
/***/ (() => {

"use strict";

// /**
//  * @category Vector3D
//  * @return the vector OP
//  * ```
//  * Vec3D([1,2,3],[10,5,2]) // [9,3,-1]
//  * ```
//  */
// function Vec3D(O: Point3D, P: Point3D): Point3D {
//     return [P[0] - O[0], P[1] - O[1], P[2] - O[2]];
// }
// globalThis.Vec3D = contract(Vec3D).sign([owl.point3D])
// /**
//  * @category Vector3D
//  * @deprecated useless
//  * @return sum of all vectors
//  * ```
//  * Vec3DAdd([1,2,3],[3,4,5],[5,6,7]) // [9,12,15]
//  * ```
//  */
// function Vec3DAdd(...vectors: Point3D[]): Point3D {
//     const x = Sum(...vectors.map(p => p[0]))
//     const y = Sum(...vectors.map(p => p[1]))
//     const z = Sum(...vectors.map(p => p[2]))
//     return [x, y, z];
// }
// globalThis.Vec3DAdd = contract(Vec3DAdd).sign([owl.vector3D])
/**
 * @category Vector3D
 * @return mean of all vectors
 * ```
 * Mid3D([1,2,3],[3,4,5],[5,6,7]) // [3,4,5]
 * ```
 */
function Mid3D(...vectors) {
    const x = Sum(...vectors.map(p => p[0])) / vectors.length;
    const y = Sum(...vectors.map(p => p[1])) / vectors.length;
    const z = Sum(...vectors.map(p => p[2])) / vectors.length;
    return [x, y, z];
}
globalThis.Mid3D = contract(Mid3D).sign([owl.vector3D]);
/**
 * @category Geometry
 * @return the point P on AB such that AP : PB = ratio : 1-ratio
 * ```
 * Slide3D([1,0,0],[5,0,0],0.75) // [4,0,0]
 * ```
 */
function Slide3D(A, B, ratio) {
    let r = ratio;
    let s = 1 - r;
    return [
        A[0] * s + B[0] * r,
        A[1] * s + B[1] * r,
        A[2] * s + B[2] * r
    ];
}
globalThis.Slide3D = contract(Slide3D).sign([owl.point3D, owl.point3D, owl.num]);
// /**
//  * @category Vector3D
//  * @deprecated useless
//  * @return length of vector
//  * ```
//  * Vec3DLength([-3,4,0]) // 5
//  * Vec3DLength([0,0,4]) // 4
//  * Vec3DLength([1,2,3]) // sqrt(14)
//  * ```
//  */
// function Vec3DLength(v: Vector3D): number {
//     const [x, y, z] = v
//     return (x * x + y * y + z * z) ** 0.5
// }
// globalThis.Vec3DLength = contract(Vec3DLength).sign([owl.vector3D])
// /**
//  * @category Vector3D
//  * @deprecated useless
//  * @return find [kx,ky,kz] from [x,y,z]
//  * ```
//  * Vec3DScale([1,2,3],2) // [2,4,6]
//  * Vec3DScale([1,2,3],-2) // [-2,-4,-6]
//  * ```
//  */
// function Vec3DScale(v: Point3D, k: number): Point3D {
//     return [k * v[0], k * v[1], k * v[2]];
// }
// globalThis.Vec3DScale = contract(Vec3DScale).sign([owl.vector3D, owl.num])
// /**
//  * @category Vector3D
//  * @deprecated useless
//  * @return the unit vector of v
//  * ```
//  * Vec3DUnit([2,0,0]) // [1,0,0]
//  * Vec3DUnit([0,-2,0]) // [0,-1,0]
//  * Vec3DUnit([1,2,3]) // [1/sqrt(14),2/sqrt(14),3/sqrt(14)]
//  * ```
//  */
// function Vec3DUnit(v: Vector3D): Vector3D {
//     return Vec3DScale(v, 1 / Vec3DLength(v))
// }
// globalThis.Vec3DUnit = contract(Vec3DUnit).sign([owl.vector3D])
// /**
//  * @category Vector3D
//  * @deprecated useless
//  * @return scale the vector to the given length
//  * ```
//  * Vec3DScaleTo([2,0,0],10) // [10,0,0]
//  * Vec3DScaleTo([0,-2,0],100) // [0,-100,0]
//  * Vec3DScaleTo([1,2,2],6) // [2,4,4]
//  * ```
//  */
// function Vec3DScaleTo(v: Vector3D, length: number): Vector3D {
//     return Vec3DScale(Vec3DUnit(v), length)
// }
// globalThis.Vec3DScaleTo = contract(Vec3DScaleTo).sign([owl.vector3D, owl.num])
// /**
//  * @category Vector3D
//  * @deprecated useless
//  * @return the projection vector of v
//  * ```
//  * Vec3DProj([2,1,3],[1,0,0]) // [2,0,0]
//  * ```
//  */
// function Vec3DProj(v: Vector3D, onto: Vector3D): Vector3D {
//     let scale = DotProduct(v, onto) / DotProduct(onto, onto)
//     return Vec3DScale(onto, scale)
// }
// globalThis.Vec3DProj = contract(Vec3DProj).sign([owl.vector3D, owl.vector3D])
// /**
//  * @category Vector3D
//  * @deprecated useless
//  * @return dot product of v1 and v2
//  * ```
//  * DotProduct([1, 1, 0], [0, 1, 1]) // 1
//  * DotProduct([1, 2, 3], [4, 5, -6]) // -4
//  * ```
//  */
// function DotProduct(v1: Vector3D, v2: Vector3D): number {
//     return vec3D(v1).dot(v2)
// }
// globalThis.DotProduct = contract(DotProduct).sign([owl.vector3D])
// /**
//  * @category Vector3D
//  * @deprecated useless
//  * @return cross product of v1 and v2
//  * ```
//  * CrossProduct([1, 1, 0], [0, 1, 1]) // [1, -1, 1]
//  * ```
//  */
// function CrossProduct(v1: Vector3D, v2: Vector3D): Vector3D {
//     return vec3D(v1).cross(v2).toArray()
// }
// globalThis.CrossProduct = contract(CrossProduct).sign([owl.vector3D])
// /**
//  * @category Vector3D
//  * @deprecated useless
//  * @return unit normal vector to the plane OAB
//  * ```
//  * NormalVector([0,0,0], [1,1,0], [0,1,1]) // [1/sqrt(3), -1/sqrt(3), 1/sqrt(3)]
//  * ```
//  */
// function NormalVector(O: Point3D, A: Point3D, B: Point3D): Vector3D {
//     return vec3D(O, A).cross(vec3D(O, B)).unit().toArray()
// }
// globalThis.NormalVector = contract(NormalVector).sign([owl.point3D])
/**
 * @category Vector3D
 * @return projection of a point on a plane
 * ```
 * let P = [2,3,4]
 * let [A,B,C] = [[0,0,0],[1,0,0],[0,1,0]]
 * PdFoot3D(P,[A,B,C]) // [2,3,0]
 * PdFoot3D(P,[A,B]) // [2,0,0]
 * ```
 */
function PdFoot3D(point, base) {
    if (base.length === 3) {
        let [A, B, C] = base;
        return vec3D(A, point).projectOnPlane(vec3D(A, B), vec3D(B, C)).add(A).toArray();
    }
    else if (base.length === 2) {
        let [A, B] = base;
        return vec3D(A, point).projectOn(vec3D(A, B)).add(A).toArray();
    }
    Should(false, 'base must have 2 or 3 points');
    throw 'never';
}
globalThis.PdFoot3D = contract(PdFoot3D)
    .sign([owl.vector3D, owl.arrayWith(owl.vector3D)]);
/**
 * @category Vector3D
 * @return embed points on xy-plane onto a plane in 3D
 * ```
 * let [A,B,C] = [[0,0],[1,0],[0,1]]
 * Embed([A,B,C],[0,0,2],[1,0,0],[0,1,0]) // [[0,0,2],[1,0,2],[0,1,2]]
 * ```
 */
function Embed(plane2D, origin, xVec, yVec) {
    return toShape2D(plane2D)
        .erect(xVec, yVec)
        .translate(origin)
        .toArray();
}
globalThis.Embed = contract(Embed)
    .sign([owl.arrayWith(owl.point2D), owl.point3D, owl.vector3D, owl.vector3D]);
/**
 * @category Vector3D
 * @return embed 2D points onto a plane in 3D with constant x. The x-axis becomes the 3D y-axis. The y-axis becomes the 3D z-axis.
 * ```
 * let [A,B,C] = [[0,0],[3,0],[0,1]]
 * EmbedX([A,B,C],2) // [[2,0,0],[2,3,0],[2,0,1]]
 * ```
 */
function EmbedX(plane2D, x = 0) {
    return Embed(plane2D, [x, 0, 0], [0, 1, 0], [0, 0, 1]);
}
globalThis.EmbedX = contract(EmbedX).sign([owl.arrayWith(owl.point2D), owl.num]);
/**
 * @category Vector3D
 * @return embed 2D points onto a plane in 3D with constant y. The x-axis becomes the 3D x-axis. The y-axis becomes the 3D z-axis.
 * ```
 * let [A,B,C] = [[0,0],[3,0],[0,1]]
 * EmbedY([A,B,C],2) // [[0,2,0],[3,2,0],[0,2,1]]
 * ```
 */
function EmbedY(plane2D, y = 0) {
    return Embed(plane2D, [0, y, 0], [1, 0, 0], [0, 0, 1]);
}
globalThis.EmbedY = contract(EmbedY).sign([owl.arrayWith(owl.point2D), owl.num]);
/**
 * @category Vector3D
 * @return embed points on xy-plane onto a plane in 3D with constant z
 * ```
 * let [A,B,C] = [[0,0],[3,0],[0,1]]
 * EmbedZ([A,B,C],2) // [[0,0,2],[3,0,2],[0,1,2]]
 * ```
 */
function EmbedZ(plane2D, z = 0) {
    return Embed(plane2D, [0, 0, z], [1, 0, 0], [0, 1, 0]);
}
globalThis.EmbedZ = contract(EmbedZ).sign([owl.arrayWith(owl.point2D), owl.num]);
/**
 * @category Vector3D
 * @return flatten points to the same z-plane
 * ```
 * let [A,B,C] = [[0,0,0],[3,0,1],[0,1,2]]
 * FlatZ([A,B,C],2) // [[0,0,2],[3,0,2],[0,1,2]]
 * ```
 */
function FlatZ(points, z = 0) {
    return points.map(([x, y, _]) => [x, y, z]);
    let arr = [];
    for (let [x, y, _] of points) {
        arr.push([x, y, z]);
    }
    return arr;
}
globalThis.FlatZ = contract(FlatZ).sign([owl.arrayWith(owl.point3D), owl.num]);
// /**
//  * @category Vector3D
//  * @deprecated use Extrude
//  * @return extrude the lower base of a frustum towards the upper base by a ratio
//  * ```
//  * let [A,B,C] = [[0,0,0],[4,0,0],[0,4,0]]
//  * ExtrudeBase([A,B,C],[[0,0,4]],0.25) // [[0,0,0],[3,0,0],[0,3,0]]
//  * ```
//  */
// function ExtrudeBase(lowerBase: Point3D[], upperBase: Point3D[], ratio: number) {
//     let arr: Point3D[] = []
//     for (let i = 0; i < Math.max(lowerBase.length, upperBase.length); i++) {
//         let L = i < lowerBase.length ? lowerBase[i] : lowerBase[lowerBase.length - 1]
//         let U = i < upperBase.length ? upperBase[i] : upperBase[upperBase.length - 1]
//         let r = ratio
//         let s = 1 - r
//         arr.push(Vec3DAdd(Vec3DScale(U, r), Vec3DScale(L, s)))
//     }
//     return arr
// }
// globalThis.ExtrudeBase = contract(ExtrudeBase).sign([owl.arrayWith(owl.point3D), owl.arrayWith(owl.point3D), owl.num])
/**
 * @category Vector3D
 * @return extrude the lower base of a frustum towards the upper base by a ratio
 * ```
 * let [A,B,C] = [[0,0,0],[4,0,0],[0,4,0]]
 * Extrude([A,B,C],[[0,0,4]],0.75) // [[0,0,0],[3,0,0],[0,3,0]]
 * ```
 */
function Extrude(lowerBase, upperBase, scale) {
    let max = Math.max(lowerBase.length, upperBase.length);
    let LB = toShape3D(lowerBase).padTail(max);
    let UB = toShape3D(upperBase).padTail(max);
    return LB.extrudeToShape(UB, scale).toArray();
}
globalThis.Extrude = contract(Extrude).sign([owl.arrayWith(owl.point3D), owl.arrayWith(owl.point3D), owl.num]);
/**
* @category 3DPen
* @deprecated use built-in projector in Pen instead
* @return projector function from 3D point to 2D plane
* ```
* const pj = Projector(60,0.5) // create a 3D projector function
* pj(1,1,0) // [1.25, 0.433012701892]
* ```
*/
function Projector(angle = 60, depth = 0.5) {
    return function (x, y, z) {
        let x_new = x + depth * y * cos(angle);
        let y_new = z + depth * y * sin(angle);
        return [x_new, y_new];
    };
}
globalThis.Projector = Projector;
/**
* @category 3DPen
* @deprecated use built-in projector in Pen instead
* @return projector function from 3D point to 2D plane
* ```
* const pj = Projector3D(60,0.5) // create a 3D projector function
* pj([1,1,0]) // [1.25, 0.433012701892]
* ```
*/
function Projector3D(angle = 60, depth = 0.5) {
    let projector = function (point3D) {
        let [x, y, z] = point3D;
        let x_new = x + depth * y * cos(angle);
        let y_new = z + depth * y * sin(angle);
        return [x_new, y_new];
    };
    return contract(projector).sign([owl.point3D]);
}
globalThis.Projector3D = contract(Projector3D).sign([owl.num, owl.num]);


/***/ }),

/***/ 3221:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(8004);
__webpack_require__(5315);
__webpack_require__(27);
__webpack_require__(7202);
__webpack_require__(4453);
__webpack_require__(426);
__webpack_require__(5931);
__webpack_require__(1307);
__webpack_require__(8219);
__webpack_require__(2113);
__webpack_require__(9348);
__webpack_require__(1759);
__webpack_require__(6007);
__webpack_require__(188);
__webpack_require__(701);
__webpack_require__(8730);
__webpack_require__(2561);
__webpack_require__(9812);
__webpack_require__(6779);
__webpack_require__(4154);
__webpack_require__(3053);
__webpack_require__(8126);
__webpack_require__(3286);
__webpack_require__(8401);
__webpack_require__(1040);
__webpack_require__(7414);
__webpack_require__(6661);


/***/ }),

/***/ 7414:
/***/ (() => {

"use strict";

class CustomErrorCls extends Error {
    constructor(name, message) {
        super(message);
        this.name = name;
    }
}
function CustomError(name, message) {
    return new CustomErrorCls(name, message);
}
globalThis.CustomError = CustomError;
function toError(e) {
    if (e instanceof Error) {
        return e;
    }
    else if (typeof e === 'string') {
        return CustomError('UnknownError', e);
    }
    else {
        return CustomError('UnknownError', JSON.stringify(e));
    }
}
globalThis.toError = toError;
function MathError(message) {
    return new CustomErrorCls('MathError', message);
}
globalThis.MathError = MathError;
function Should(condition, msg = "Should condition failed!") {
    if (!condition) {
        let caller = (new Error()).stack.split("\n")[2].trim().split(" ")[1];
        // let caller = 'function'
        caller = caller ?? 'Anonymous ';
        throw MathError(caller + ': ' + msg);
    }
}
globalThis.Should = Should;


/***/ }),

/***/ 5336:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AutoPenCls = void 0;
/**
 * @category DrawingPen
 */
class AutoPenCls {
    /**
     * @ignore
     */
    constructor() {
        this.pen = new Pen();
    }
    /**
     * Export the canvas to image tag.
     * @param html - The html string to export to.
     * @param placeholder - The src field of the image tag to export to.
     * ```
     * question = autoPen.export(question,'imgQ')
     * // paste the canvas to the image tag with src field 'imgQ'
     * ```
     */
    export(html, placeholder) {
        return this.pen.exportTrim(html, placeholder);
    }
    /**
     * A short division diagram for prime factorization of numbers.
     * @param numbers - The array of numbers to factorize.
     * ```
     * let pen = new AutoPen()
     * pen.PrimeFactorization({numbers:[12,24]})
     * ```
     */
    PrimeFactorization({ numbers }) {
        function lowestFactor(arr) {
            const primes = [2, 3, 5, 7, 11, 13, 17, 19];
            for (let p of primes) {
                if (HCF(...arr) % p === 0)
                    return p;
            }
            return 1;
        }
        const pen = new Pen();
        pen.range.set([-10, 10], [-15, 5]);
        pen.size.set(4);
        const w = 1;
        const h = 1;
        function drawRow(arr, pivot) {
            for (let i = 0; i < arr.length; i++) {
                pen.write([pivot[0] + i * w, pivot[1]], arr[i].toString());
            }
        }
        function drawVert(pivot) {
            pen.line([pivot[0] - 0.5 * w, pivot[1] - h / 2], [pivot[0] - 0.5 * w, pivot[1] + h / 2]);
        }
        function drawUnderline(arr, pivot) {
            for (let i = 0; i < arr.length; i++) {
                pen.line([pivot[0] + i * w - 0.5 * w, pivot[1] - h / 2], [pivot[0] + i * w + 0.5 * w, pivot[1] - h / 2]);
            }
        }
        function drawDivisor(pivot, divisor) {
            pen.write([pivot[0] - w, pivot[1]], divisor.toString());
        }
        function drawDiv(arr, pivot) {
            const d = lowestFactor(arr);
            drawVert(pivot);
            drawUnderline(arr, pivot);
            drawDivisor(pivot, d);
            arr = arr.map(x => x / d);
            pivot = [pivot[0], pivot[1] - h];
            drawRow(arr, pivot);
            return [arr, pivot];
        }
        let pivot = [1, 0];
        drawRow(numbers, pivot);
        while (HCF(...numbers) > 1) {
            [numbers, pivot] = drawDiv(numbers, pivot);
        }
        this.pen = pen;
    }
    /**
     * Arrow diagram for inequalities.
     * @param items - Represent the inequalities.
     * @param ticks - Represent the tick or cross for each region.
     * @param scale - scale for pen.setup.size()
     * @param ratio - ratio for pen.setup.size()
     * ```
     * let pen = new AutoPen()
     * pen.Inequalities({
     *    items:[
     *       { position: 0.3, sign: "\\ge", num: 5,vertical:true },
     *       { position: 0.7, sign: "<", num: "k" }
     *    ],
     *    ticks:[true,true,false]
     * })
     * ```
     */
    Inequalities({ items = [], ticks = [], scale = 1.6, ratio = 0.5 }) {
        const width = 5;
        const height = 2;
        let ineqs = items.map((x, i) => ({ base: -i * (height + 2), ...x }));
        const pen = new Pen();
        pen.range.set([-width - 2, width + 2], [-(ineqs.length) * (height + 2) + 2, height + 1]);
        pen.size.set(scale, scale * ratio);
        pen.set.textLatex(true);
        function inequality({ position, sign, num, base, vertical }) {
            let greater = sign.includes('>') || sign.includes('g');
            let solid = sign.includes('=') || sign.includes('e');
            let align = -width + 2 * width * position;
            let B = [align, base];
            let T = [align, base + height];
            let E = [greater ? align + 0.4 * width : align - 0.4 * width, base + height];
            let E1 = [greater ? width : -width, base + height];
            let E2 = [greater ? width : -width, base];
            if (vertical) {
                pen.set.color('grey');
                pen.set.dash([10, 10]);
                pen.graph.vertical(align);
                pen.set.color();
                pen.set.dash();
            }
            pen.polyshade(B, T, E1, E2);
            pen.arrow([-width, base], [width, base]);
            pen.line(B, T);
            pen.arrow(T, E);
            if (solid) {
                pen.set.color('black');
                pen.circle(T, 3, [0, 360], true);
            }
            else {
                pen.set.color('white');
                pen.circle(T, 3, [0, 360], true);
                pen.set.color('black');
                pen.circle(T, 3, [0, 360]);
            }
            pen.set.weight();
            pen.set.color('black');
            pen.label.point(B, num.toString(), 270);
        }
        function tick(position, correct) {
            let align = -width + 2 * width * position;
            let y = -(ineqs.length - 1) * (height + 2) - height / 2;
            pen.write([align, y], correct ? '✔' : '✘');
        }
        ineqs.forEach(x => inequality(x));
        let cutting = ineqs.map(x => x.position);
        cutting = [0, ...cutting, 1];
        for (let i = 0; i < ticks.length; i++) {
            let p = (cutting[i] + cutting[i + 1]) / 2;
            tick(p, ticks[i]);
        }
        this.pen = pen;
    }
    /**
     * Trig Graph for solving basic trig equation.
     * @param trig - 'sin' | 'cos' | 'tan'
     * @param k - value of trig, like sin = k.
     * @param scale - scale for pen.setup.size()
     * @param ratio - ratio for pen.setup.size()
     * ```
     * let pen = new AutoPen()
     * pen.TrigSolution({trig:'sin', k:0.5})
     * ```
     */
    TrigSolution({ trig = 'sin', k = 0, scale = 1.4, ratio = 0.7 }) {
        if (trig === 'sin' || trig === 'cos') {
            if (k > 2)
                k = 2;
            if (0.9 < k && k < 1)
                k = 0.9;
            if (0 < k && k < 0.3)
                k = 0.3;
            if (-1 < k && k < -0.9)
                k = -0.9;
            if (-0.3 < k && k < 0)
                k = -0.3;
            if (k < -2)
                k = -2;
        }
        if (trig === 'tan') {
            if (k > 4)
                k = 4;
            if (k < -4)
                k = -4;
            if (0 < k && k < 0.9)
                k = 0.9;
            if (0 > k && k > -0.9)
                k = -0.9;
        }
        let [a, b, c] = TrigRoot(trig, k);
        const pen = new Pen();
        let limit = Max(1, Abs(k)) + 0.2;
        if (trig === 'sin')
            pen.range.set([-40, 390], [-limit, limit]);
        if (trig === 'cos')
            pen.range.set([-40, 390], [-limit, limit]);
        if (trig === 'tan')
            pen.range.set([-40, 390], [-5, 5]);
        pen.size.set(scale, scale * ratio);
        pen.axis.x();
        pen.axis.y();
        if (trig === 'sin' || trig === 'cos') {
            pen.tick.x(360);
        }
        if (trig === 'tan') {
            pen.tick.x(180);
        }
        if (trig === 'sin' || trig === 'cos') {
            pen.cutY([0, 1]);
            pen.cutY([0, -1]);
            pen.label.point([0, 1], '1', 180);
            pen.label.point([0, -1], '-1', 180);
        }
        pen.set.weight(1.5);
        if (trig === 'sin')
            pen.plot(x => sin(x), 0, 360);
        if (trig === 'cos')
            pen.plot(x => cos(x), 0, 360);
        if (trig === 'tan') {
            pen.plot(x => tan(x), 0, 360);
            pen.set.color('grey');
            pen.set.dash([5, 10]);
            pen.set.weight(0.7);
            pen.graph.vertical(90);
            pen.graph.vertical(270);
            pen.set.color();
            pen.set.dash();
            pen.set.weight(1);
        }
        pen.set.weight(1);
        function arrow(x, y, func, label = '') {
            if (x === undefined)
                return;
            let anchor = 0;
            let skipAnchor = false;
            if (func === 'sin') {
                if ([0, 90, 180, 270, 360].includes(x))
                    skipAnchor = true;
                if (x > 0 && x < 90)
                    anchor = 0;
                if (x > 90 && x < 270)
                    anchor = 180;
                if (x > 270 && x < 360)
                    anchor = 360;
            }
            if (func === 'cos') {
                if ([0, 90, 180, 270, 360].includes(x))
                    skipAnchor = true;
                if (x > 0 && x < 180 && x !== 90)
                    anchor = 0;
                if (x > 180 && x < 360 && x !== 270)
                    anchor = 360;
            }
            if (func === 'tan') {
                if ([0, 90, 180, 270, 360].includes(x))
                    skipAnchor = true;
                if (x > 0 && x < 180)
                    anchor = 0;
                if (x > 180 && x < 360)
                    anchor = 180;
            }
            let P = [x, y];
            let Q = [x, 0];
            let R = [anchor, 0];
            pen.set.color();
            pen.point(P);
            pen.set.color('red');
            if (y !== 0) {
                pen.arrow(P, Q);
            }
            if (y >= 0) {
                pen.label.point(Q, label, 270);
            }
            if (y < 0) {
                pen.label.point(Q, label, 90);
            }
            if (skipAnchor)
                return;
            pen.set.weight(3);
            pen.set.color('blue');
            pen.line(R, Q);
            pen.set.weight(1);
            pen.set.color('red');
        }
        pen.set.color('red');
        pen.set.dash([5, 5]);
        pen.graph.horizontal(k);
        pen.set.dash();
        if (trig === 'sin') {
            if (k === 0) {
                arrow(a, k, 'sin', '0');
                arrow(b, k, 'sin', '180');
                arrow(c, k, 'sin', '360');
            }
            if (k === 1) {
                arrow(a, k, 'sin', '90');
            }
            if (k === -1) {
                arrow(a, k, 'sin', '270');
            }
            if (k > -1 && k < 1 && k !== 0) {
                arrow(a, k, 'sin', 'α');
                arrow(b, k, 'sin', 'β');
            }
        }
        if (trig === 'cos') {
            if (k === 0) {
                arrow(a, k, 'cos', '90');
                arrow(b, k, 'cos', '270');
            }
            if (k === 1) {
                arrow(a, k, 'cos', '0');
                arrow(b, k, 'cos', '360');
            }
            if (k === -1) {
                arrow(a, k, 'cos', '180');
            }
            if (k > -1 && k < 1 && k !== 0) {
                arrow(a, k, 'cos', 'α');
                arrow(b, k, 'cos', 'β');
            }
        }
        if (trig === 'tan') {
            if (k === 0) {
                arrow(a, k, 'tan', '0');
                arrow(b, k, 'tan', '180');
                arrow(c, k, 'tan', '360');
            }
            if (k !== 0) {
                arrow(a, k, 'tan', 'α');
                arrow(b, k, 'tan', 'β');
            }
        }
        this.pen = pen;
    }
    /**
     * Sketch for solving quadratic inequality.
     * @param quadratic - [a,b,c] representing coeff of quadratic inequality.
     * @param sign - The sign of the inequality. Can be like '>=' , '<' or '\\ge' , '\\lt'.
     * @param scale - scale for pen.setup.size()
     * @param ratio - ratio for pen.setup.size()
     * ```
     * let pen = new AutoPen()
     * pen.QuadraticInequality({quadratic:[1,2,-3],sign:'\\ge'})
     * ```
     */
    QuadraticInequality({ quadratic, sign, scale = 1, ratio = 0.8 }) {
        let a = quadratic[0];
        let b = quadratic[1];
        let c = quadratic[2];
        let greater = sign.includes('>') || sign.includes('g');
        let equal = sign.includes('=') || sign.includes('e');
        let p;
        let q;
        try {
            [p, q] = QuadraticRoot(a, b, c);
        }
        catch {
            [p, q] = [undefined, undefined];
        }
        if (p !== undefined && q !== undefined) {
            [p, q] = [Max(p, q), Min(p, q)];
            p = Fix(p, 2);
            q = Fix(q, 2);
        }
        const pen = new Pen();
        pen.range.set([-5, 5], [-5, 5]);
        pen.size.set(scale, scale * ratio);
        pen.set.textLatex(true);
        pen.axis.x('');
        if (p !== undefined && q !== undefined && p !== q) {
            pen.plot(x => Sign(a) * (x ** 2 - 4));
            let P = [2, 0];
            let Q = [-2, 0];
            pen.cutX(P);
            pen.cutX(Q);
            pen.set.weight(3);
            pen.set.color('red');
            if (a > 0) {
                if (greater) {
                    pen.plot(x => Sign(a) * (x ** 2 - 4), -5, -2);
                    pen.plot(x => Sign(a) * (x ** 2 - 4), 2, 5);
                }
                else {
                    pen.plot(x => Sign(a) * (x ** 2 - 4), -2, 2);
                }
            }
            if (a < 0) {
                if (greater) {
                    pen.plot(x => Sign(a) * (x ** 2 - 4), -2, 2);
                }
                else {
                    pen.plot(x => Sign(a) * (x ** 2 - 4), -5, -2);
                    pen.plot(x => Sign(a) * (x ** 2 - 4), 2, 5);
                }
            }
            pen.set.weight();
            pen.set.color();
            pen.label.point(P, p.toString(), a > 0 ? 315 : 45);
            pen.label.point(Q, q.toString(), a > 0 ? 225 : 135);
        }
        if (p === undefined && q === undefined) {
            if ((a > 0 && greater) || (a < 0 && !greater)) {
                pen.set.weight(3);
                pen.set.color('red');
            }
            if (a > 0)
                pen.plot(x => x ** 2 + 2);
            if (a < 0)
                pen.plot(x => -(x ** 2) - 2);
        }
        if (p !== undefined && q !== undefined && p === q) {
            let func = a > 0 ? (x) => x ** 2 : (x) => -(x ** 2);
            pen.plot(func);
            pen.label.point([0, 0], p.toString(), a > 0 ? 270 : 90);
            if (a > 0) {
                pen.set.weight(3);
                pen.set.color('red');
                if (greater && equal)
                    pen.plot(func);
                if (greater && !equal) {
                    pen.plot(func);
                    pen.set.color('white');
                    pen.circle([0, 0], 4, [0, 360], true);
                    pen.set.color();
                    pen.circle([0, 0], 4, [0, 360]);
                }
                if (!greater && equal) {
                    pen.set.color('red');
                    pen.circle([0, 0], 4, [0, 360], true);
                }
                if (!greater && !equal) { }
            }
            if (a < 0) {
                pen.set.weight(3);
                pen.set.color('red');
                if (!greater && equal)
                    pen.plot(func);
                if (!greater && !equal) {
                    pen.plot(func);
                    pen.set.color('white');
                    pen.circle([0, 0], 4, [0, 360], true);
                    pen.set.color();
                    pen.circle([0, 0], 4, [0, 360]);
                }
                if (greater && equal) {
                    pen.set.color('red');
                    pen.circle([0, 0], 4, [0, 360], true);
                }
                if (greater && !equal) { }
            }
        }
        this.pen = pen;
    }
    /**
     * Draw a triangle.
     * @param vertices - [A,B,C] an array of coordinates [x,y] of 3 vertices, must be anticlockwise.
     * @param triangle - The elements of triangle to print, {sideC,angleB,sideA,angleC,sideB,angleA}. If falsy, show no label.
     * @param labels - The labels of the vertices. If falsy, show no label.
     * @param heights - Whether to draw the height.
     * @param scale - scale for pen.setup.size()
     * ```
     * let pen = new AutoPen()
     * pen.Triangle({
     *   vertices:[[0,0],[4,0],[0,3]],
     *   triangle:{sideC:4,angleB:37,sideA:5,angleC:53,sideB:3,angleA:90},
     *   labels:['A','B','C'],
     *   heights :[false, false, false]
     * })
     * ```
     */
    Triangle({ vertices, triangle = {}, labels = ['', '', ''], heights = [false, false, false], scale = 1.6 }) {
        let A = vertices[0];
        let B = vertices[1];
        let C = vertices[2];
        let xmax = Math.max(A[0], B[0], C[0]);
        let xmin = Math.min(A[0], B[0], C[0]);
        let xmid = (xmax + xmin) / 2;
        let ymax = Math.max(A[1], B[1], C[1]);
        let ymin = Math.min(A[1], B[1], C[1]);
        let ymid = (ymax + ymin) / 2;
        let dx = xmax - xmin;
        let dy = ymax - ymin;
        let dmax = Math.max(dx, dy) * 0.8;
        let G = Mid(A, B, C);
        let T = triangle;
        let sideA = T.sideA;
        let sideB = T.sideB;
        let sideC = T.sideC;
        let angleA = T.angleA;
        let angleB = T.angleB;
        let angleC = T.angleC;
        let labelA = labels[0];
        let labelB = labels[1];
        let labelC = labels[2];
        const pen = new Pen();
        pen.range.set([xmid - dmax, xmid + dmax], [ymid - dmax, ymid + dmax]);
        pen.size.set(scale);
        function drawHeight(vertex, base) {
            let F = PdFoot(base[0], base[1], vertex);
            pen.set.dash([5, 5]);
            pen.set.color('grey');
            pen.line(vertex, F);
            if (F[0] === base[0][0] && F[1] === base[0][1]) {
                pen.line(F, base[1]);
            }
            else {
                pen.line(F, base[0]);
            }
            pen.set.dash();
            if (F[0] === base[0][0] && F[1] === base[0][1]) {
                pen.rightAngle(vertex, F, base[1]);
            }
            else {
                pen.rightAngle(vertex, F, base[0]);
            }
            pen.set.color();
        }
        if (heights[0])
            drawHeight(A, [B, C]);
        if (heights[1])
            drawHeight(B, [C, A]);
        if (heights[2])
            drawHeight(C, [A, B]);
        pen.polygon(A, B, C);
        pen.set.textItalic(true);
        if (labelA)
            pen.label.point(A, labelA.toString(), Dir(G, A));
        if (labelB)
            pen.label.point(B, labelB.toString(), Dir(G, B));
        if (labelC)
            pen.label.point(C, labelC.toString(), Dir(G, C));
        pen.set.textItalic();
        let AB = [B[0] - A[0], B[1] - A[1]];
        let BC = [C[0] - B[0], C[1] - B[1]];
        let anticlockwise = (AB[0] * BC[1] - AB[1] * BC[0]) > 0;
        function writeSide(side, start, end) {
            if (side) {
                if (typeof side === 'string' && !(/\d/.test(side)))
                    pen.set.textItalic(true);
                if (anticlockwise) {
                    pen.label.line([start, end], side.toString());
                }
                else {
                    pen.label.line([end, start], side.toString());
                }
                pen.set.textItalic();
            }
        }
        writeSide(sideC, A, B);
        writeSide(sideA, B, C);
        writeSide(sideB, C, A);
        function writeAngle(angle, P, O, Q) {
            if (angle) {
                if (typeof angle === 'string')
                    pen.set.textItalic(true);
                if (typeof angle === 'number')
                    angle = angle + '°';
                pen.angle(P, O, Q, angle);
                pen.set.textItalic();
            }
        }
        writeAngle(angleA, B, A, C);
        writeAngle(angleB, C, B, A);
        writeAngle(angleC, A, C, B);
        this.pen = pen;
    }
    /**
     * Draw a graph for linear programming.
     * @deprecated
     * @param constraints - Constraint as system of inequalities, like [[1,1,'<',2]] represent x+y<2.
     * @param field - The target linear function to optimize, [a,b,c] represent ax+by+c.
     * @param contours - The contours to draw, [4,5] represent P=4 and P=5.
     * @param labelConstraints - Constraint to label integral points.
     * @param highlights - Points to highlight, [{point,color,circle,contour,coordinates,label}].
     * @param ranges - Range of Canvas.
     * @param resolution - Resolution of Canvas
     * ```
     * let pen = new AutoPen()
     * let constraints = [[1, 1, "<=", 5], [1, -1, "<", 4], [2, 1, ">=", -5], [3, 1, ">", -10]]
     * pen.LinearProgram({
     *     constraints,
     *     field: [1, -3, 3],
     *     contours: [4,5],
     *     labelConstraints: [(x,y)=>y>0],
     *     highlights: [{point:[0,0]}],
     *     ranges: [[-10,10],[-10,10]],
     *     resolution: 0.2,
     *     grid: 0,
     *     subGrid: 0,
     *     tick: 0,
     *     showLine: true,
     *     showShade: true,
     *     showVertex: false,
     *     showVertexCoordinates: false,
     *     showVertexLabel: false,
     *     showVertexMax: false,
     *     showVertexMin: false,
     *     showIntegral: false,
     *     showIntegralLabel: false,
     *     showIntegralMax: false,
     *     showIntegralMin: false,
     *     contourColor : "grey",
     *     constraintColors : ['black','black']
     * })
     * ```
     */
    LinearProgram({ constraints = [], field = [0, 0, 0], contours = [], labelConstraints = [], highlights = [], ranges = [[-10, 10], [-10, 10]], resolution = 0.2, grid = 0, subGrid = 0, tick = 0, showLine = true, showShade = true, showVertex = false, showVertexCoordinates = false, showVertexLabel = false, showVertexMax = false, showVertexMin = false, showIntegral = false, showIntegralLabel = false, showIntegralMax = false, showIntegralMin = false, contourColor = "grey", constraintColors = [], }) {
        function fieldAt(p) {
            const [a, b, c] = field;
            const [x, y] = p;
            return Fix(a * x + b * y + c, 1);
        }
        let vertices = FeasiblePolygon(...constraints);
        let integrals = [];
        if (showIntegral || showIntegralMax || showIntegralMin) {
            integrals = FeasibleIntegral(...constraints);
        }
        const pen = new Pen();
        let [[xmin, xmax], [ymin, ymax]] = ranges;
        let bound = 0.7;
        xmin -= bound;
        xmax += bound;
        ymin -= bound;
        ymax += bound;
        pen.range.set([xmin, xmax], [ymin, ymax]);
        pen.size.resolution(resolution);
        pen.axis.x('');
        pen.axis.y('');
        if (grid > 0) {
            pen.set.alpha(0.6);
            pen.grid.x(grid);
            pen.grid.y(grid);
            pen.set.alpha();
        }
        if (subGrid > 0) {
            pen.set.alpha(0.4);
            pen.grid.x(grid);
            pen.grid.y(grid);
            pen.set.alpha();
        }
        if (tick > 0) {
            pen.set.color("grey");
            pen.set.textSize(0.8);
            pen.tick.x(tick);
            pen.tick.y(tick);
            pen.set.color();
            pen.set.textSize();
        }
        function drawLines() {
            for (let i = 0; i < constraints.length; i++) {
                let [a, b, s, c] = constraints[i];
                if (!ineq(s).canEqual())
                    pen.set.dash([5, 5]);
                pen.set.color(constraintColors[i] ?? 'black');
                pen.graph.linear(a, b, -c);
                pen.set.color();
                pen.set.dash();
            }
        }
        labelConstraints.push((x, y) => x > xmin);
        labelConstraints.push((x, y) => x < xmax);
        labelConstraints.push((x, y) => y > ymin);
        labelConstraints.push((x, y) => y < ymax);
        function labelField(p) {
            pen.set.textAlign("left");
            pen.label.point(p, fieldAt(p).toString(), 60, 10);
            pen.set.textAlign();
        }
        function drawIntegral(label = false) {
            integrals.forEach((p) => {
                pen.point(p);
                if (label && labelConstraints.every((f) => f(...p)))
                    labelField(p);
            });
        }
        function drawVertex(coordinates = false, label = false) {
            vertices.forEach((p) => {
                pen.point(p);
                if (coordinates)
                    pen.label.coordinates(p, 270);
                if (label && labelConstraints.every((f) => f(...p)))
                    labelField(p);
            });
        }
        function drawShade() {
            pen.polyshade(...vertices);
        }
        function drawContour(value) {
            pen.graph.linear(field[0], field[1], field[2] - value);
        }
        function drawContours(color = contourColor) {
            pen.set.color(color);
            contours.forEach(drawContour);
            pen.set.color();
        }
        function drawHighlight({ point = [0, 0], color = "red", circle = true, contour = true, coordinates = true, label = true, }) {
            pen.set.color(color);
            pen.point(point);
            if (circle)
                pen.circle(point, 5);
            if (contour)
                drawContour(fieldAt(point));
            if (coordinates)
                pen.label.coordinates(point, 270);
            if (label)
                labelField(point);
            pen.set.color();
        }
        function drawHighlights() {
            highlights.forEach((h) => drawHighlight(h));
        }
        if (showLine)
            drawLines();
        if (showIntegral)
            drawIntegral(showIntegralLabel);
        if (showShade)
            drawShade();
        if (showVertex)
            drawVertex(showVertexCoordinates, showVertexLabel);
        drawHighlights();
        drawContours();
        if (showVertexMax)
            drawHighlight({
                point: MaximizePoint(vertices, field),
                color: "red"
            });
        if (showVertexMin)
            drawHighlight({
                point: MinimizePoint(vertices, field),
                color: "blue"
            });
        if (showIntegralMax)
            drawHighlight({
                point: MaximizePoint(integrals, field),
                color: "red"
            });
        if (showIntegralMin)
            drawHighlight({
                point: MinimizePoint(integrals, field),
                color: "blue"
            });
        this.pen = pen;
    }
    /**
     * A dot pattern
     * @param a - no. of dot of 1st pattern
     * @param p - P_n+1 = P_n + (pn+q)
     * @param q - P_n+1 = P_n + (pn+q)
     * @param n - the pattern required
     * @param offset - offset of initial position
     * ```
     * let pen = new AutoPen()
     * pen.DotPattern({a:3, p:3, q:2, n:4, offset:1})
     * ```
     */
    DotPattern({ a, p, q, n, offset }) {
        const pen = new Pen();
        pen.range.set([-2, 30], [-4, 10]);
        pen.size.resolution(0.08);
        function drawRow(n, j, offset = 0) {
            for (let i = 1 + offset; i <= n + offset; i++) {
                pen.point([i, j]);
            }
        }
        drawRow(a + (n - 1) * p, 1);
        for (let j = 2; j <= n; j++) {
            drawRow(q + (n - j) * p, j, (j - 1) * offset);
        }
        let m = "";
        if (n === 1)
            m = '1st';
        if (n === 2)
            m = '2nd';
        if (n === 3)
            m = '3rd';
        if (n >= 3)
            m = n + 'th';
        pen.write([(1 + a + (n - 1) * p) / 2, -1], m + ' pattern');
        this.pen = pen;
    }
    /**
     * A pie chart
     * ```
     * let pen = new AutoPen()
     * pen.PieChart({
     *   categories: ['a','b','c','d','e'],
     *   labels: ['10%','20%','30%','40%',''],
     *   angles: [45,135,60,50,70],
     *   angleLabels: [null,'x',null,undefined,''],
     *   size:1.5
     * })
     * ```
     */
    PieChart({ categories, labels, angles, angleLabels, size = 2 }) {
        const pen = new Pen();
        pen.range.set([-1.2, 1.2], [-1.2, 1.2]);
        pen.size.set(size);
        pen.graph.circle([0, 0], 1);
        pen.set.angle('polar');
        let O = [0, 0];
        pen.line(O, [1, 0]);
        let current = 0;
        for (let i = 0; i < angles.length; i++) {
            let a = angles[i];
            let next = current + a;
            let mid = current + a / 2;
            pen.line(O, PolToRect([1, next]));
            if (categories[i] === '') {
                pen.write(PolToRect([0.7, mid]), labels[i]);
            }
            else if (labels[i] === '') {
                pen.write(PolToRect([0.7, mid]), categories[i]);
            }
            else {
                pen.label.point(PolToRect([0.7, mid]), categories[i], 90, 10);
                pen.label.point(PolToRect([0.7, mid]), labels[i], 270, 10);
            }
            if (angleLabels[i] !== undefined) {
                pen.angle(PolToRect([1, current]), O, PolToRect([1, next]), angleLabels[i] ?? angles[i] + "°");
            }
            current += a;
        }
        this.pen = pen;
    }
    /**
     * A bar chart / line chart / histogram / frequency polygon / cf polygon
     * ```
     * let pen = new AutoPen()
     * pen.HeightChart({
     *   categories: ['a','b','c','d','e'],
     *   data:[7,47,15,3,7],
     *   xLabel:'x-axis',
     *   yLabel:'y-axis',
     *   interval:5,
     *   subInterval:1,
     *   barWidth:1,
     *   barGap:1,
     *   showBar:true,
     *   showLine:true
     * })
     * ```
     */
    HeightChart({ categories, data, xLabel = "", yLabel = "", interval = 5, subInterval = 1, barWidth = 1, barGap = 1, showBar = false, showLine = false }) {
        const pen = new Pen();
        let endGap = barWidth + barGap / 2;
        let width = endGap + categories.length * (barWidth + barGap) + endGap;
        let max = Max(...data);
        let maxUnit = Ceil(max / interval);
        let maxSubUnit = maxUnit * (interval / subInterval);
        let height = (maxUnit) * interval * 1.1;
        pen.range.set([-width * 0.5, width], [-height, height]);
        pen.size.resolution(0.2, 1.4 / height);
        pen.line([0, 0], [width, 0]);
        pen.arrow([0, 0], [0, height]);
        pen.set.textDir(90);
        pen.write([-1.5, height / 2], yLabel);
        pen.set.textDir();
        pen.label.point([width / 2, 0], xLabel, 270, 40);
        function grid(y) {
            pen.line([0, y], [width, y]);
        }
        for (let y = 1; y <= maxUnit; y++) {
            let h = y * interval;
            pen.set.alpha(0.2);
            grid(h);
            pen.cutY([0, h]);
            pen.set.alpha();
            pen.label.point([0, h], h.toString(), 180);
        }
        for (let y = 1; y <= maxSubUnit; y++) {
            pen.set.alpha(0.1);
            grid(y * subInterval);
            pen.set.alpha();
        }
        function bar(x, w, h) {
            pen.set.color('grey');
            pen.polyfill([x, 0], [x, h], [x + w, h], [x + w, 0]);
            pen.set.color();
            pen.polygon([x, 0], [x, h], [x + w, h], [x + w, 0]);
        }
        function writeCat(x, w, text) {
            pen.label.point([x + w / 2, 0], text, 270, 15);
        }
        if (showBar) {
            for (let i = 0; i < categories.length; i++) {
                let x = endGap + i * (barWidth + barGap) + barGap / 2;
                bar(x, barWidth, data[i]);
                writeCat(x, barWidth, categories[i]);
            }
        }
        if (showLine) {
            let points = [];
            for (let i = 0; i < categories.length; i++) {
                let x = endGap + i * (barWidth + barGap) + barGap / 2;
                let p = [x + barWidth / 2, data[i]];
                pen.point(p);
                points.push(p);
                writeCat(x, barWidth, categories[i]);
            }
            pen.set.weight(2);
            pen.polyline(...points);
            pen.set.weight();
        }
        this.pen = pen;
    }
    /**
     * A boxplot
     * ```
     * let pen = new AutoPen()
     * pen.Boxplot({
     *   summary: [41,45,48,52,55],
     *   labels: [null,null,'x',null,'y'],
     *   size: 2,
     *   tick: 1,
     *   start: 38,
     *   end: 60,
     *   showDash: false,
     *   showValue: false,
     *   showTick: false
     * })
     * ```
     */
    Boxplot({ summary = [0, 0, 0, 0, 0], labels = [null, null, null, null, null], size = 2, tick = 1, start, end, showDash = false, showValue = false, showTick = false }) {
        const pen = new Pen();
        let [Q0, Q1, Q2, Q3, Q4] = summary;
        let height = showDash ? 1 : 0.5;
        let thickness = 1;
        let b = height;
        let t = b + thickness;
        let m = (b + t) / 2;
        let L = [Q0, m];
        let R = [Q4, m];
        let A1 = [Q1, t];
        let A2 = [Q1, b];
        let Am = [Q1, m];
        let B1 = [Q2, t];
        let B2 = [Q2, b];
        let C1 = [Q3, t];
        let C2 = [Q3, b];
        let Cm = [Q3, m];
        let L_ = [Q0, 0];
        let R_ = [Q4, 0];
        let A_ = [Q1, 0];
        let B_ = [Q2, 0];
        let C_ = [Q3, 0];
        start ??= Q0 - (Q4 - Q0) * 0.2;
        end ??= Q4 + (Q4 - Q0) * 0.2;
        pen.range.set([start, end], [-(t + 1), t + 1]);
        pen.size.set(size, 1);
        if (showTick) {
            pen.tick.x(tick);
        }
        pen.axis.x('');
        pen.polygon(A1, A2, C2, C1);
        pen.line(B1, B2);
        pen.line(L, Am);
        pen.line(R, Cm);
        if (showDash) {
            pen.dash(L, L_);
            pen.dash(A2, A_);
            pen.dash(B2, B_);
            pen.dash(C2, C_);
            pen.dash(R, R_);
        }
        if (showValue) {
            pen.cutX(L_);
            pen.label.point(L_, labels[0] ?? String(Q0), 270);
            pen.cutX(A_);
            pen.label.point(A_, labels[1] ?? String(Q1), 270);
            pen.cutX(B_);
            pen.label.point(B_, labels[2] ?? String(Q2), 270);
            pen.cutX(C_);
            pen.label.point(C_, labels[3] ?? String(Q3), 270);
            pen.cutX(R_);
            pen.label.point(R_, labels[4] ?? String(Q4), 270);
        }
        this.pen = pen;
    }
    /**
     * A regular polygon
     * ```
     * let pen = new AutoPen()
     * pen.RegularPolygon({
     *   side: 8,
     *   diagonal: true,
     *   reflectional: false,
     *   rotational: false,
     * })
     * ```
     */
    RegularPolygon({ side, diagonal = false, reflectional = false, rotational = false, }) {
        const pen = new Pen();
        pen.range.square(1.3);
        pen.size.set(1.5);
        let gon = RegularPolygon(side, [0, 0], 1, 0);
        pen.polygon(...gon);
        if (diagonal) {
            pen.set.alpha(0.3);
            for (let i = 0; i < side; i++) {
                for (let j = i + 1; j < side; j++) {
                    pen.line(gon[i], gon[j]);
                }
            }
            pen.set.alpha();
        }
        if (reflectional) {
            pen.set.alpha(0.5);
            pen.set.dash(true);
            if (side % 2 === 0) {
                pen.set.color('red');
                for (let n = 0; n < side; n += 2) {
                    pen.graph.through([0, 0], PolToRect([1, n * 180 / side]));
                }
                pen.set.color('blue');
                for (let n = 1; n < side; n += 2) {
                    pen.graph.through([0, 0], PolToRect([1, n * 180 / side]));
                }
            }
            else {
                for (let n = 0; n < side; n++) {
                    pen.graph.through([0, 0], PolToRect([1, n * 180 / side]));
                }
            }
            pen.set.alpha();
            pen.set.dash();
        }
        if (rotational) {
            for (let i = 0; i < side; i++) {
                pen.line(gon[i], [0, 0]);
            }
        }
        this.pen = pen;
    }
    /**
     * A 2x2 binary tree diagram for probability.
     * ```
     * let pen = new AutoPen()
     * pen.TreeDiagram({
     *    titles: ['step 1', 'step 2'],
     *    probabilities: [[0.1], [0.2, 0.3]],
     *    events: [[['✔', '✘']], [['✔✔', '✔✘'], ['✘✔', '✘✘']]],
     *    select: [1]
     * })
     * ```
     */
    TreeDiagram({ titles, probabilities, events, select, circleSize }) {
        const pen = new Pen();
        pen.range.set([-5, 15], [-12, 12]);
        pen.size.resolution(0.12);
        function path(P, Q, prob, event, selected, circle) {
            let T = MoveX(Q, 2);
            pen.write(T, event);
            pen.line(P, Q, prob);
            if (selected) {
                pen.set.weight(3);
                pen.line(P, Q, prob);
                if (circle)
                    pen.halo(T, circleSize ?? 30);
                pen.set.weight();
            }
        }
        function branch(C, w, h1, h2, prob, [eventA, eventB], [selectedA, selectedB], circle, [title, titleHeight] = ['', 0]) {
            let D = MoveX(C, w);
            let probA;
            let probB;
            if (typeof prob === 'number') {
                probA = String(Round(prob, 5));
                probB = String(Round(1 - prob, 5));
            }
            else {
                probA = prob[0];
                probB = prob[1];
            }
            // upper branch
            let A1 = MoveY(C, h1);
            let A2 = MoveY(D, h2);
            path(A1, A2, probA, eventA, selectedA, circle);
            // lower branch
            let B1 = MoveY(C, -h1);
            let B2 = MoveY(D, -h2);
            path(B1, B2, probB, eventB, selectedB, circle);
            // title
            if (title && titleHeight) {
                let M = Mid(C, D);
                let T = MoveY(M, titleHeight);
                pen.write(T, title);
            }
        }
        let s1 = select.includes(1);
        let s2 = select.includes(2);
        let s3 = select.includes(3);
        let s4 = select.includes(4);
        let [t1, t2] = titles;
        let [[p00], [p10, p11]] = probabilities;
        let [[e00], [e10, e11]] = events;
        branch([0, 0], 2, 2, 4, p00, e00, [s1 || s2, s3 || s4], false, [t1, 8]);
        branch([6, 4], 3, 1, 2, p10, e10, [s1, s2], true, [t2, 5]);
        branch([6, -4], 3, 1, 2, p11, e11, [s3, s4], true);
        this.pen = pen;
    }
}
exports.AutoPenCls = AutoPenCls;


/***/ }),

/***/ 1377:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PenCls = void 0;
const paint_1 = __webpack_require__(5619);
/**
 * @ignore
 */
const DEFAULT_POINT_RADIUS_PIXEL = 2;
/**
 * @ignore
 */
const DEFAULT_CUTTER_LENGTH_PIXEL = 5;
class PenCls extends paint_1.Pencil {
    /**
     * @ignore
     */
    constructor() {
        super();
        /**
         * Setup of canvas coordinate range.
         * @category setting
         */
        this.range = {
            /**
             * @ignore
             */
            _pen: this,
            /**
             * @ignore
             */
            AUTO_BORDER: false,
            /**
             * Set the coordinate range.
             * ```
             * pen.range.set([-5,5],[-2,4]) // -5<x<5 and -2<y<4
             * ```
             */
            set(xRange, yRange = xRange) {
                this._pen.initRange(xRange, yRange);
            },
            /**
             * Set the coordinate range as a square.
             * ```
             * pen.range.square(5) // -5<x<5 and -5<y<5
             * pen.range.square(5,[1,2]) // -4<x<6 and -3<y<7
             * ```
             */
            square(size, center = [0, 0]) {
                let [x, y] = center;
                this.set([x - size, x + size], [y - size, y + size]);
            },
            /**
             * Set the coordinate range by capture points or objects.
             * @param things - point / circle [[h,k],r] / sphere [[a,b,c],r]
             * ```
             * pen.range.capture([1,2],[3,4]) //  [1,2], [3,4] must be in-view
             * pen.range.capture([[1,2],3]) //  [1-3,2-3], [1+3,2+3] must be in-view
             * ```
             */
            capture(...things) {
                this._pen.cv.capture(things);
                this.AUTO_BORDER = true;
            },
            /**
             * Set the coordinate range by capture points or objects, include O(0,0).
             * @param things - point / circle [[h,k],r] / sphere [[a,b,c],r]
             * ```
             * pen.range.extend([1,2],[3,4]) // [0,0], [1,2], [3,4] must be in-view
             * ```
             */
            extend(...things) {
                this.capture([0, 0], ...things);
            }
        };
        /**
         * Setup of canvas size.
         * @category setting
         */
        this.size = {
            /**
             * @ignore
             */
            _pen: this,
            /**
             * Set the canvas size.
             * ```
             * pen.size.set(0.5,2) // width = 0.5 inch, height = 2 inch
             * ```
             */
            set(widthInch = 1, heightInch = widthInch) {
                this._pen.initSize(widthInch, heightInch);
                if (this._pen.range.AUTO_BORDER)
                    this._pen.initOuterBorder();
                this._pen.set.reset();
            },
            /**
             * Set the canvas size by resolution.
             * ```
             * pen.size.resolution(0.1,0.2)
             * // 0.1 inch for each x-unit, and 0.2 inch for each y-unit
             * ```
             */
            resolution(xIPU = 0.1, yIPU = xIPU) {
                let xScale = this._pen.cv.dx() * xIPU;
                let yScale = this._pen.cv.dy() * yIPU;
                this.set(xScale, yScale);
            },
            /**
             * Set the canvas size, locking x-y ratio.
             * ```
             * pen.size.lock(1, 2) // max at width = 1 inch and height = 2 inch
             * pen.size.lock(0.5) // max at both = 0.5 inch
             * ```
             */
            lock(maxWidthInch = 1, maxHeightInch = maxWidthInch) {
                let ratio = this._pen.cv.yxRatio();
                if (maxWidthInch * ratio < maxHeightInch) {
                    this.set(maxWidthInch, maxWidthInch * ratio);
                }
                else {
                    this.set(maxHeightInch / ratio, maxHeightInch);
                }
            },
        };
        /**
         * Settings.
         * @category setting
         */
        this.set = {
            /**
             * @ignore
             */
            _pen: this,
            /**
             * @ignore
             */
            _cv: this.cv,
            /**
             * Set the weight of the pen (line width).
             * ```
             * pen.set.weight(2) // set a bold line
             * ```
             */
            weight(weight = 1) {
                this._cv.$WEIGHT = weight;
            },
            /**
             * Set the color of both filling and stroke.
             * ```
             * pen.set.color('grey')
             * ```
             */
            color(color = "black") {
                this._cv.$COLOR = color;
            },
            /**
             * Set the transparency.
             * @param value - 0 is transparent, 1 is opaque
             * ```
             * pen.set.alpha(0.9) // slightly transparent
             * ```
             */
            alpha(value = 1) {
                this._cv.$ALPHA = value;
            },
            /**
             * Set the dash pattern of line.
             * ```
             * pen.set.dash([5,5]) // set dash line
             * pen.set.dash(5) // same
             * pen.set.dash(true) // same
             * pen.set.dash(false) // set solid line
             * ```
             */
            dash(segments = []) {
                this._cv.$DASH = segments;
            },
            /**
             * Set the horizontal alignment of text.
             * ```
             * pen.set.textAlign('left') // {'left','right','center'}
             * ```
             */
            textAlign(align = "center") {
                this._cv.$TEXT_ALIGN = align;
            },
            /**
             * Set the vertical alignment of text.
             * ```
             * pen.set.textBaseline('bottom') // {'top','bottom','middle'}
             * ```
             */
            textBaseline(baseline = "middle") {
                this._cv.$TEXT_BASELINE = baseline;
            },
            /**
             * Set the size of text.
             * ```
             * pen.set.textSize(2) // double-sized text
             * ```
             */
            textSize(size = 1) {
                this._cv.$TEXT_SIZE = size;
            },
            /**
             * Set italic style of text.
             * ```
             * pen.set.textItalic(true)
             * ```
             */
            textItalic(italic = false) {
                this._cv.$TEXT_ITALIC = italic;
            },
            /**
             * Set text direction.
             * ```
             * pen.set.textDir(90) // vertical text
             * ```
             */
            textDir(angle = 0) {
                this._cv.$TEXT_DIR = angle;
            },
            /**
             * Set text latex mode.
             * ```
             * pen.set.textLatex(true)
             * ```
             */
            textLatex(on = false) {
                this._cv.$TEXT_LATEX = on;
            },
            /**
             * Set the center for label dodge.
             * ```
             * pen.set.labelCenter(A,B,C,D) // centroid of A,B,C,D
             * pen.set.labelCenter() // center of canvas
             * ```
             */
            labelCenter(...centers) {
                this._cv.$LABEL_CENTER = centers;
            },
            /**
             * Set length unit for line label.
             * ```
             * pen.set.lengthUnit('cm')
             * ```
             */
            lengthUnit(text = '') {
                this._cv.$LENGTH_UNIT = text;
            },
            /**
             * Set the mode for angle.
             * All angles (e.g. AOB) will be understood as this mode.
             * ```
             * pen.set.angle('polar') // {normal' | 'polar' | 'reflex'}
             * ```
             */
            angle(mode = 'normal') {
                this._cv.$ANGLE_MODE = mode;
            },
            /**
             * Set 3D projector function.
             * ```
             * pen.set.Projector3D(60, 0.5)
             * // tilted 60 degree, 0.5 depth for y-axis
             * ```
             */
            projector3D(angle = 60, depth = 0.5) {
                this._cv.$3D_ANGLE = angle;
                this._cv.$3D_DEPTH = depth;
            },
            /**
             * Ser the border inch when auto creating outer border.
             * ```
             * pen.set.border(0.2) // 0.2 inch
             * ```
             */
            border(border = 0.2) {
                this._cv.$BORDER = border;
            },
            /**
             * Ser the mode for direction of line label.
             * ```
             * pen.set.lineLabel('auto') // {'auto', 'left', 'right'}
             * ```
             */
            lineLabel(setting = 'auto') {
                this._cv.$LINE_LABEL = setting;
            },
            /**
             * Reset all pen settings.
             */
            reset() {
                this.weight();
                this.color();
                this.alpha();
                this.dash();
                this.textAlign();
                this.textBaseline();
                this.textSize();
                this.textItalic();
                this.textDir();
                this.textLatex();
                this.labelCenter();
                this.lengthUnit();
                this.angle();
                this.lineLabel();
            },
            /**
             * Reset all pen settings, including border and 3D.
             */
            resetAll() {
                this.reset();
                this.border();
                this.projector3D();
            }
        };
        /**
         * Drawing graph of functions.
         * @category graph
         */
        this.graph = {
            /**
             * @ignore
             */
            _pen: this,
            /**
             * Draw a circle (x-h)^2+(y-k)^2 = r^2.
             * ```
             * pen.graph.circle([1,2],3) // (x-1)^2+(y-2)^2 = 9
             * ```
             */
            circle(center, radius) {
                const [h, k] = center;
                this._pen.plot(t => [h + radius * cos(t), k + radius * sin(t)], 0, 365);
            },
            /**
             * Draw an arc. AOB must be in polar direction.
             * ```
             * pen.graph.arc([0,0],[1,0],[-1,0]) // upper semi-unit circle
             *
             * ```
             */
            arc(O, A, B) {
                this._pen.cv.sectoroidLine(O, A, B, []);
            },
            /**
             * Draw a sector. AOB must be in polar direction.
             * ```
             * pen.graph.sector([0,0],[1,0],[0,1]) // quarter circle sector
             * ```
             */
            sector(O, A, B) {
                this._pen.cv.sectoroidLine(O, A, B, [O, A]);
            },
            /**
             * Draw a circle segment. AOB must be in polar direction.
             * ```
             * pen.graph.segment([0,0],[1,0],[0,1]) // quarter circle segment
             * ```
             */
            segment(O, A, B) {
                this._pen.cv.sectoroidLine(O, A, B, [A]);
            },
            /**
             * Draw a quadratic graph.
             * ```
             * pen.graph.quadratic(1,2,3) // y=x^2+2x+3.
             * ```
             */
            quadratic(a, b, c) {
                this._pen.plot(x => a * x * x + b * x + c);
            },
            /**
             * Draw a line y=mx+c.
             * ```
             * pen.graph.line(2,1) // y=2x+1
             * ```
             */
            line(m, c) {
                const { xmin, xmax } = this._pen.cv;
                const y = (x) => m * x + c;
                this._pen.line([xmin, y(xmin)], [xmax, y(xmax)]);
            },
            /**
             * Draw a horizontal line.
             * ```
             * pen.graph.horizontal(2) // y=2
             * ```
             */
            horizontal(y) {
                this._pen.cv.lineHori(y);
            },
            /**
             * Draw a vertical line.
             * ```
             * pen.graph.vertical(2) // x=2
             * ```
             */
            vertical(x) {
                this._pen.cv.lineVert(x);
            },
            /**
             * Draw a line ax+by+c=0.
             * ```
             * pen.graph.linear(1,2,3) // x+2y+3=0
             * ```
             */
            linear(a, b, c) {
                if (a === 0 && b !== 0)
                    this.horizontal(-c / b);
                if (b == 0 && a !== 0)
                    this.vertical(-c / a);
                if (a !== 0 && b !== 0)
                    this.line(-a / b, -c / b);
            },
            /**
             * Draw a line through two points.
             * ```
             * pen.graph.through([0,0],[1,1]) // y = x
             * ```
             */
            through(A, B) {
                let ptA = this._pen.pj(A);
                let ptB = this._pen.pj(B);
                let [a, b, c] = lin().byTwoPoints(ptA, ptB).toLinear();
                this.linear(a, b, c);
            },
            /**
             * Draw the perpendicular bisector of two points.
             * ```
             * pen.graph.perpBisector([0,0],[2,2]) // y = -x+2
             * ```
             */
            perpBisector(A, B) {
                let [a, b, c] = lin().byBisector(A, B).toLinear();
                this.linear(a, b, c);
            }
        };
        /**
         * Fill a shape.
         * @category fill
         */
        this.fill = {
            /**
             * @ignore
             */
            _pen: this,
            /**
             * Fill a circle.
             * ```
             * pen.fill.circle([1,2],3) // fill (x-1)^2+(y-2)^2 = 9.
             * ```
             */
            circle(center, radius) {
                let points = cal.traceCircle(center, radius, [0, 360]);
                this._pen.polyfill(...points);
            },
            /**
             * Fill a sector. AOB must be in polar direction.
             * ```
             * pen.fill.sector([0,0],[1,0],[0,1]) // fill a quarter circle sector
             * ```
             */
            sector(O, A, B) {
                this._pen.cv.sectoroidFill(O, A, B, [O]);
            },
            /**
             * Fill a circle segment. AOB must be in polar direction.
             * ```
             * pen.fill.segment([0,0],[1,0],[0,1]) // fill a quarter circle segment
             * ```
             */
            segment(O, A, B) {
                this._pen.cv.sectoroidFill(O, A, B, []);
            },
            /**
             * Fill a sector-like area. AOB must be in polar direction.
             * ```
             * pen.fill.sectoroid([0,0],[1,0],[0,1],[[-1,0]]) // fill a long sector-like region
             * ```
             */
            sectoroid(O, A, B, vertices) {
                this._pen.cv.sectoroidFill(O, A, B, vertices);
            },
            /**
             * Fill a rectangle.
             * ```
             * pen.fill.rect([0,0],[2,3]) // fill a rectangle [[0,0],[2,0],[2,3],[0,3]]
             * ```
             */
            rect(A, C) {
                let [a, b] = A;
                let [c, d] = C;
                this._pen.polyfill([a, b], [c, b], [c, d], [a, d]);
            }
        };
        /**
         * Shade a shape.
         * @category shade
         */
        this.shade = {
            /**
             * @ignore
             */
            _pen: this,
            /**
             * Shade a circle (x-h)^2+(y-k)^2 = r^2.
             * ```
             * pen.shade.circle([1,2],3) // shade (x-1)^2+(y-2)^2 = 9.
             * ```
             */
            circle(center, radius) {
                let points = cal.traceCircle(center, radius, [0, 360]);
                this._pen.polyshade(...points);
            },
            /**
             * Shade a sector. AOB must be in polar direction.
             * ```
             * pen.shade.sector([0,0],[1,0],[0,1]) // shade a quarter circle sector
             * ```
             */
            sector(O, A, B) {
                this._pen.cv.sectoroidShade(O, A, B, [O]);
            },
            /**
             * Shade a circle segment. AOB must be in polar direction.
             * ```
             * pen.shade.segment([0,0],[1,0],[0,1]) // shade a quarter circle segment
             * ```
             */
            segment(O, A, B) {
                this._pen.cv.sectoroidShade(O, A, B, []);
            },
            /**
             * Shade a sector-like area. AOB must be in polar direction.
             * ```
             * pen.shade.sectoroid([0,0],[1,0],[0,1],[[-1,0]]) // shade a long sector-like region
             * ```
             */
            sectoroid(O, A, B, vertices) {
                this._pen.cv.sectoroidShade(O, A, B, vertices);
            },
            /**
             * Shade a rectangle.
             * ```
             * pen.shade.rect([0,0],[2,3]) // shade a rectangle [[0,0],[2,0],[2,3],[0,3]]
             * ```
             */
            rect(A, C) {
                let [a, b] = A;
                let [c, d] = C;
                this._pen.polyshade([a, b], [c, b], [c, d], [a, d]);
            }
        };
        /**
         * Linear Programming tools.
         * @category linProg
         */
        this.linProg = {
            /**
             * @ignore
             */
            _pen: this,
            /**
             * Draw a constraint line.
             * ```
             * pen.linProg.constraint([1,2,'>',3])
             * ```
             */
            drawConstraints(...constraints) {
                for (let c of toReins(constraints)) {
                    if (c.canEqual()) {
                        this._pen.graph.linear(...c.toLinear());
                    }
                    else {
                        this._pen.set.dash(true);
                        this._pen.graph.linear(...c.toLinear());
                        this._pen.set.dash();
                    }
                }
            },
            /**
             * Shade the region of the constraint set.
             * ```
             * pen.linProg.shadeConstraints([[1,2,'>',3]])
             * ```
             */
            shadeConstraints(constraints) {
                let poly = toReins(constraints).polygon();
                this._pen.polyshade(...poly);
            },
            /**
             * Label coordinates of the vertices of the feasible region.
             * ```
             * pen.linProg.verticesCoord([
             * [1,0,'>',0],
             * [0,1,'>',0],
             * [1,1,'<',2]
             * ])
             * ```
             */
            verticesCoord(constraints) {
                let vs = toReins(constraints).vertices();
                for (let v of vs) {
                    this._pen.label.coordinates(v);
                }
            }
        };
        /**
         * @category text
         */
        this.label = {
            /**
             * @ignore
             */
            _pen: this,
            /**
             * Add a label to a point.
             * ```
             * pen.label.point([1,2],'A',180)
             * // label the point [1,2] as 'A', place the label on the left (180 degree)
             * ```
             */
            point(point, text = '', dir, radius = 15) {
                if (dir !== undefined) {
                    this._pen.cv.labelPoint(text, point, dir, radius);
                }
                else {
                    this._pen.cv.labelPointAuto(text, point, radius);
                }
            },
            /**
             * Add a label to points, using index as text.
             * ```
             * pen.label.points({A,B}) // label point A as 'A', point B as 'B'
             * ```
             */
            points(points) {
                for (let k in points) {
                    this.point(points[k], k);
                }
            },
            /**
             * Add a label to points, using index as text, with label center set as center of points.
             * ```
             * pen.label.vertices({A,B}) // label point A as 'A', point B as 'B'
             * ```
             */
            vertices(points) {
                this._pen.cv.save();
                this._pen.set.labelCenter(...Object.values(points));
                this.points(points);
                this._pen.cv.restore();
            },
            /**
             * Add a label to an angle AOB.
             * ```
             * pen.label.angle([[1,2],[0,0],[-2,1]],'x')
             * // label the angle as 'x'
             * ```
             */
            angle([A, O, B], text, dir = 0, radius = -1) {
                if (radius < 0) {
                    radius = 28 + this._pen.cv.getAngleAllowance(A, O, B, 40, 1.5);
                }
                this._pen.cv.labelAngle(text, [A, O, B], dir, radius);
            },
            /**
             * Add a label to a line AB.
             * ```
             * pen.label.line([[0,0],[2,4]],'L') // label the line as 'L'
             * ```
             */
            line([A, B], text, dir = 0, radius = 15) {
                this._pen.cv.labelLine(text, [A, B], dir, radius);
            },
            /**
             * Add a label to a polygon.
             * ```
             * pen.label.polygon([[0,0],[1,0],[0,1]],'L') // label the polygon as 'L'
             * ```
             */
            polygon(points, text) {
                let pts = this._pen.pjs(points);
                this._pen.cv.labelPoint(String(text), Mid(...pts), 0, 0);
            },
            /**
             * Add a coordinates label to a point.
             * ```
             * pen.label.coordinates([1,2],180)
             * // label the point [1,2] as '(1, 2)', place the label on the left (180 degree)
             * ```
             */
            coordinates(point, dir, radius = 15) {
                let [x, y] = point;
                x = Fix(x, 1);
                y = Fix(y, 1);
                let text = `(${x}, ${y})`;
                this.point(point, text, dir, radius);
            }
        };
        /**
         * The axis.
         * @category axis
         */
        this.axis = {
            /**
             * @ignore
             */
            _pen: this,
            /**
             * Draw x-axis.
             * ```
             * pen.axis.x('time') // draw the x-axis, label as 'time'
             * ```
             */
            x(label = "x") {
                this._pen.cv.xAxis();
                this._pen.cv.xAxisLabel(label);
            },
            /**
             * Draw y-axis.
             * ```
             * pen.axis.y('height') // draw the y-axis, label as 'height'
             * ```
             */
            y(label = "y") {
                this._pen.cv.yAxis();
                this._pen.cv.yAxisLabel(label);
            },
            /**
             * Draw both axis.
             * ```
             * pen.axis.xy('x','y') // draw both axis, label as 'x' and 'y'
             * ```
             */
            xy(xlabel = "x", ylabel = "y") {
                this.x(xlabel);
                this.y(ylabel);
            },
        };
        /**
         * The axis ticks.
         * @category axis
         */
        this.tick = {
            /**
             * @ignore
             */
            _pen: this,
            /**
             * Draw ticks on the x-axis.
             * ```
             * pen.tick.x(2) // draw ticks on the x-axis, at interval 2 units
             * ```
             */
            x(interval = 1, mark = true) {
                this._pen.cv.xAxisTick(interval);
                if (mark)
                    this._pen.cv.xAxisTickMark(interval);
            },
            /**
             * Draw ticks on the y-axis.
             * ```
             * pen.tick.y(2) // draw ticks on the y-axis, at interval 2 units
             * ```
             */
            y(interval = 1, mark = true) {
                this._pen.cv.yAxisTick(interval);
                if (mark)
                    this._pen.cv.yAxisTickMark(interval);
            },
            /**
             * Draw ticks on both axis.
             * ```
             * pen.tick.xy(2) // draw ticks on both axis, at interval 2 units
             * ```
             */
            xy(interval = 1, mark = true) {
                this.x(interval, mark);
                this.y(interval, mark);
            }
        };
        /**
         * The axis gridlines.
         * @category axis
         */
        this.grid = {
            /**
             * @ignore
             */
            _pen: this,
            /**
             * Draw gridlines on the x-axis.
             * ```
             * pen.grid.x(2) // draw gridlines on the x-axis, at interval 2 units
             * ```
             */
            x(interval = 1) {
                this._pen.cv.xAxisGrid(interval);
            },
            /**
             * Draw gridlines on the y-axis.
             * ```
             * pen.grid.y(2) // draw gridlines on the y-axis, at interval 2 units
             * ```
             */
            y(interval = 1) {
                this._pen.cv.yAxisGrid(interval);
            },
            /**
             * Draw gridlines on both axis.
             * ```
             * pen.grid.xy(2) // draw gridlines on both axis, at interval 2 units
             * ```
             */
            xy(interval = 1) {
                this.x(interval);
                this.y(interval);
            }
        };
        /**
         * The 3D pen
         * @category 3D
         */
        this.d3 = {
            /**
             * @ignore
             */
            _pen: this,
            /**
             * Draw the 3D axis, for development only.
             * @deprecated
             * ```
             * pen.d3.axis3D(100) // draw 3D axis with length 100
             * ```
             */
            axis3D(length = 999) {
                this._pen.line([-length, 0, 0], [length, 0, 0]);
                this._pen.line([0, -length, 0], [0, length, 0]);
                this._pen.dash([0, 0, -length], [0, 0, length]);
            },
            /**
             * Draw a circle in 3D
             * ```
             * pen.d3.circle([0,0,1],2,[1,0,0],[0,1,0]) // draw a xy circle with radius 2
             * ```
             */
            circle(center, radius, xVec, yVec, { line = true, dash = !true, shade = !true, fill = !true, arc = [0, 360] } = {}) {
                let ps = cal.traceCircle([0, 0], radius, arc);
                let ps3D = Embed(ps, center, xVec, yVec);
                if (line) {
                    this._pen.cv.save();
                    if (dash)
                        this._pen.set.dash(true);
                    if (arc[1] - arc[0] >= 360) {
                        this._pen.polygon(...ps3D);
                    }
                    else {
                        this._pen.polyline(...ps3D);
                    }
                    this._pen.cv.restore();
                }
                if (shade)
                    this._pen.polyshade(...ps3D);
                if (fill)
                    this._pen.polyfill(...ps3D);
            },
            /**
             * Draw a circle on XZ plane in 3D
             * ```
             * pen.d3.circleXZ([0,3,0],2) // draw a xz circle with radius 2
             * ```
             */
            circleXZ(center, radius, { line = true, dash = !true, shade = !true, fill = !true, arc = [0, 360] } = {}) {
                this.circle(center, radius, [1, 0, 0], [0, 0, 1], {
                    line,
                    dash,
                    shade,
                    fill,
                    arc
                });
            },
            /**
             * Draw a circle on YZ plane in 3D
             * ```
             * pen.d3.circleYZ([3,0,0],2) // draw a yz circle with radius 2
             * ```
             */
            circleYZ(center, radius, { line = true, dash = !true, shade = !true, fill = !true, arc = [0, 360] } = {}) {
                this.circle(center, radius, [0, 1, 0], [0, 0, 1], {
                    line,
                    dash,
                    shade,
                    fill,
                    arc
                });
            },
            /**
             * Draw a circle on XY plane in 3D
             * ```
             * pen.d3.circleXY([0,0,3],2) // draw a xy circle with radius 2
             * ```
             */
            circleXY(center, radius, { line = true, dash = !true, shade = !true, fill = !true, arc = [0, 360] } = {}) {
                this.circle(center, radius, [1, 0, 0], [0, 1, 0], {
                    line,
                    dash,
                    shade,
                    fill,
                    arc
                });
            },
            /**
             * Draw a sphere in 3D
             * ```
             * pen.d3.sphere([1,0,0],3) // draw a sphere with radius 3
             * ```
             */
            sphere(center, radius, { baseDash = !true, baseShade = !true, radiusLine = !true, radiusDash = !true, radiusLabel = '', lowerOnly = !true, upperOnly = !true } = {}) {
                if (upperOnly)
                    this.circleXZ(center, radius, { arc: [0, 180] });
                if (lowerOnly)
                    this.circleXZ(center, radius, { arc: [180, 360] });
                if (!upperOnly && !lowerOnly)
                    this.circleXZ(center, radius, { arc: [0, 360] });
                this.circleXY(center, radius, { line: true, dash: baseDash, shade: baseShade });
                let leftEnd = vec3D(center).add([radius, 0, 0]).toArray();
                if (radiusLine)
                    this._pen.line(center, leftEnd);
                if (radiusDash)
                    this._pen.dash(center, leftEnd);
                if (radiusLabel.length > 0)
                    this._pen.label.line([leftEnd, center], radiusLabel);
            },
            /**
             * Return the envelop of a frustum
             * @param lowerBase - the points in the lower base
             * @param upperBase - the point in the upper base, must have the same length as lowerBase
             * ```
             * let [A,B,C] = [[0,0,0],[1,0,0],[0,1,0]]
             * let [D,E,F] = [[0,0,3],[1,0,3],[0,1,3]]
             * pen.d3.envelope([A,B,C],[D,E,F])
             * ```
             */
            envelope(lowerBase, upperBase) {
                const LB = toList(lowerBase);
                const UB = toList(upperBase);
                let isPolar = (A, O, B) => AnglePolar(this._pen.pj(A), this._pen.pj(O), this._pen.pj(B))
                    < 180 ? 1 : -1;
                let lastPolarwise = isPolar(LB.cyclicAt(-1), UB.cyclicAt(-1), LB.cyclicAt(0));
                let arr = [];
                for (let i = 0; i < LB.length; i++) {
                    let polarwise = isPolar(LB.cyclicAt(i), UB.cyclicAt(i), LB.cyclicAt(i + 1));
                    if (lastPolarwise * polarwise === -1)
                        arr.push([LB.cyclicAt(i), UB.cyclicAt(i)]);
                    lastPolarwise = polarwise;
                }
                return arr;
            },
            /**
             * Draw a frustum
             * ```
             * let [A,B,C] = [[0,0,0],[2,0,0],[0,2,0]]
             * let V = [0,0,5]
             * pen.d3.frustum([A,B,C],[V]) // draw a cone
             * ```
             */
            frustum(lowerBase, upperBase, { base = true, height = !true, shadeLower = !true, shadeUpper = !true, envelope = !true, } = {}) {
                if (owl.point3D(upperBase)) {
                    upperBase = Array(lowerBase.length).fill(upperBase);
                }
                if (base) {
                    this._pen.polygon(...lowerBase);
                    this._pen.polygon(...upperBase);
                }
                if (envelope) {
                    let env = this.envelope(lowerBase, upperBase);
                    for (let e of env) {
                        this._pen.line(e[0], e[1]);
                    }
                }
                else {
                    for (let i = 0; i < lowerBase.length; i++) {
                        this._pen.line(lowerBase[i], upperBase[i]);
                    }
                }
                if (height) {
                    let V = toShape3D(upperBase).mean().toArray();
                    let [A, B, C] = lowerBase;
                    let O = PdFoot3D(V, [A, B, C]);
                    this._pen.dash(O, V);
                }
                if (shadeLower)
                    this._pen.polyshade(...lowerBase);
                if (shadeUpper)
                    this._pen.polyshade(...upperBase);
            },
            /**
             * Draw a prism along the z-direction
             * ```
             * let [A,B,C] = [[0,0],[2,0],[0,2]]
             * pen.d3.prismZ([A,B,C],0,4) // draw a triangular prism
             * ```
             */
            prismZ(lowerBase, lowerZ, upperZ, { base = true, height = !true, shadeLower = !true, shadeUpper = !true, envelope = !true, } = {}) {
                let lower = EmbedZ(lowerBase, lowerZ);
                let upper = EmbedZ(lowerBase, upperZ);
                this.frustum(lower, upper, {
                    base,
                    height,
                    shadeLower,
                    shadeUpper,
                    envelope
                });
            },
            /**
             * Draw a cylinder along the z-direction
             * ```
             * pen.d3.cylinderZ([0,0],2,0,4) // draw a cylinder
             * ```
             */
            cylinderZ(center, radius, lowerZ, upperZ, { base = true, height = !true, shadeLower = !true, shadeUpper = !true, envelope = true, } = {}) {
                let ps = cal.traceCircle(center, radius, [0, 360]);
                this.prismZ(ps, lowerZ, upperZ, {
                    base,
                    height,
                    shadeLower,
                    shadeUpper,
                    envelope
                });
            },
            /**
             * Draw a pyramid along the z-direction
             * ```
             * let [A,B,C] = [[0,0],[2,0],[0,2]]
             * pen.d3.pyramidZ([A,B,C],0,[0,0,4]) // draw a triangular prism
             * ```
             */
            pyramidZ(lowerBase, lowerZ, vertex, { base = true, height = !true, shadeLower = !true, envelope = !true, } = {}) {
                let lower = EmbedZ(lowerBase, lowerZ);
                this.frustum(lower, vertex, {
                    base,
                    height,
                    shadeLower,
                    envelope
                });
            },
            /**
             * Draw a cone along the z-direction
             * ```
             * pen.d3.coneZ([0,0],2,[0,0,4]) // draw a cone
             * ```
             */
            coneZ(center, radius, lowerZ, vertex, { base = true, height = !true, shadeLower = !true, envelope = true, } = {}) {
                let ps = cal.traceCircle(center, radius, [0, 360]);
                this.pyramidZ(ps, lowerZ, vertex, {
                    base,
                    height,
                    shadeLower,
                    envelope
                });
            },
            /**
             * Draw a frustum along the z-direction
             * ```
             * let [A,B,C] = [[0,0],[2,0],[0,2]]
             * pen.d3.frustumZ([A,B,C],0,[0,0,4],0.25) // draw a triangular frustum
             * ```
             */
            frustumZ(lowerBase, lowerZ, vertex, scale, { base = true, height = !true, shadeLower = !true, shadeUpper = !true, envelope = !true, } = {}) {
                let lower = EmbedZ(lowerBase, lowerZ);
                let upper = Extrude(lower, [vertex], scale);
                this.frustum(lower, upper, {
                    base,
                    height,
                    shadeLower,
                    shadeUpper,
                    envelope
                });
            },
            /**
             * Draw a conical frustum along the z-direction
             * ```
             * pen.d3.conicalFrustumZ([0,0],2,[0,0,4],0.25) // draw a conical frustum
             * ```
             */
            conicalFrustumZ(center, radius, lowerZ, vertex, scale, { base = true, height = !true, shadeLower = !true, shadeUpper = !true, envelope = true, } = {}) {
                let ps = cal.traceCircle(center, radius, [0, 360]);
                this.frustumZ(ps, lowerZ, vertex, scale, {
                    base,
                    height,
                    shadeLower,
                    shadeUpper,
                    envelope
                });
            },
            /**
             * Draw the angle between two plane.
             * ```
             * let P = [0,0,1]
             * let O = [0,0,0]
             * let Q = [1,0,0]
             * let A = [0,1,0]
             * let B = [0,-1,0]
             * pen.d3.angleBet([P,O,Q], [A,B], 'x')
             * ```
             */
            angleBet(angle, line, label) {
                let [P, O, Q] = angle;
                let [A, B] = line;
                this._pen.line(P, O);
                this._pen.line(Q, O);
                this._pen.angle(P, O, Q);
                if (label !== undefined)
                    this._pen.label.angle([P, O, Q], label);
                if (A !== undefined)
                    this._pen.rightAngle(P, O, A);
                if (B !== undefined)
                    this._pen.rightAngle(Q, O, B);
            },
            /**
             * Draw the dash height and right-angle.
             * ```
             * pen.d3.height([0,0,1],[0,0,0],[0,1,0])
             * ```
             */
            height(vertex, foot, leg, label) {
                this._pen.dash(vertex, foot);
                this._pen.rightAngle(vertex, foot, leg);
                this._pen.line(foot, leg);
                if (label !== undefined)
                    this._pen.label.line([vertex, foot], label);
            },
            /**
             * Draw the solid height and right-angle.
             * ```
             * pen.d3.altitude([0,0,1],[0,0,0],[0,1,0])
             * ```
             */
            altitude(vertex, foot, leg, label) {
                this._pen.line(vertex, foot);
                this._pen.rightAngle(vertex, foot, leg);
                this._pen.line(foot, leg);
                if (label !== undefined)
                    this._pen.label.line([vertex, foot], label);
            }
        };
        this.range.set([-5, 5], [-5, 5]);
        this.size.set(1);
        this.set.reset();
    }
    /**
     * Plot an explicit or parametric function.
     * @category graph
     * ```
     * pen.plot(x=>x**2,1,2) // y=x^2 from x = 1 to 2
     * pen.plot(x=>x**2) // y=x^2 in from x = xmin to xmax
     * pen.plot(t=>[cos(t),sin(t)],0,360) // a unit circle
     * ```
     */
    plot(func, tStart, tEnd) {
        this.cv.plot(func, tStart, tEnd, 1000);
    }
    /**
     * Same as .plot but dashed.
     * @category graph
     */
    plotDash(func, tStart, tEnd) {
        this.cv.save();
        this.set.dash(true);
        this.cv.plot(func, tStart, tEnd, 1000);
        this.cv.restore();
    }
    /**
     * Draw a point.
     * @category draw
     * ```
     * pen.point([1,2]) // draw a point at [1,2]
     * pen.point([1,2],"A") // draw a point at [1,2] and label as "A"
     * ```
     */
    point(position, label) {
        this.cv.disc(position, DEFAULT_POINT_RADIUS_PIXEL);
        if (label !== undefined)
            this.label.point(position, label);
    }
    /**
     * Draw a point.
     * @category draw
     * ```
     * pen.points({A,B}) // mark and label point A as 'A', point B as 'B'
     * pen.points({A,B},false) // mark point A and B, without label
     * ```
     */
    points(positions, label = true) {
        for (let k in positions) {
            if (label) {
                this.point(positions[k], k);
            }
            else {
                this.point(positions[k]);
            }
        }
    }
    /**
     * Draw a cutter to a horizontal line.
     * @category draw
     * ```
     * pen.cutX([1,2]) // draw a vertical cutter at [1,2]
     * pen.cutX(1) // same as cutX([1,0])
     * ```
     */
    cutX(position, label) {
        if (typeof position === 'number')
            position = [position, 0];
        this.cv.tickVert(position, DEFAULT_CUTTER_LENGTH_PIXEL);
        if (label !== undefined)
            this.label.point(position, label, 270);
    }
    /**
     * Draw a cutter to a vertical line.
     * @category draw
     * ```
     * pen.cutY([1,2]) // draw a horizontal cutter at [1,2]
     * pen.cutY(1) // same as cutY([0,1])
     * ```
     */
    cutY(position, label) {
        if (typeof position === 'number')
            position = [0, position];
        this.cv.tickHori(position, DEFAULT_CUTTER_LENGTH_PIXEL);
        if (label !== undefined)
            this.label.point(position, label, 180);
    }
    /**
     * Draw a guide line from `point` to the x-axis.
     * @category draw
     * ```
     * pen.guideX([1,2],'1') // draw guide from [1,2] and label '1' on x-axis
     * ```
     */
    guideX(point, label) {
        let [x, y] = point;
        this.dash([x, 0], point);
        if (label !== undefined) {
            this.cutX(x);
            this.label.point([x, 0], label, y >= 0 ? 270 : 90);
        }
    }
    /**
     * Draw a guide line from `point` to the y-axis.
     * @category draw
     * ```
     * pen.guideY([1,2],'2') // draw guide from [1,2] and label '2' on y-axis
     * ```
     */
    guideY(point, label) {
        let [x, y] = point;
        this.dash([0, y], point);
        if (label !== undefined) {
            this.cutY(y);
            this.label.point([0, y], label, x >= 0 ? 180 : 0);
        }
    }
    /**
     * Draw a circle or arc.
     * @category draw
     * ```
     * pen.circle([1,2], 10) // draw a circle centered at [1,2] with r=10px
     * pen.circle([1,2], 10, [0,180]) // draw a upper semi-circle
     * ```
     */
    circle(center, radius, angles = [0, 360], fill = false) {
        this.cv.circle(center, radius);
        if (fill)
            this.cv.disc(center, radius);
    }
    /**
     * Fill a disc.
     * @category draw
     * ```
     * pen.disc([1,2], 10) // draw a disc centered at [1,2] with 10 px radius
     * ```
     */
    disc(center, radius) {
        this.cv.disc(center, radius);
    }
    /**
     * Shade a disc.
     * @category draw
     * ```
     * pen.halo([1,2], 10) // shade a disc centered at [1,2] with 10 px radius
     * ```
     */
    halo(center, radius) {
        this.cv.halo(center, radius);
    }
    /**
     * Draw a line between two points.
     * @category draw
     * ```
     * pen.line([1,2],[3,4]) // draw a line from [1,2] to [3,4]
     * pen.line([1,2],[3,4],'10') //  also label '10'
     * ```
     */
    line(A, B, label) {
        this.cv.line([A, B]);
        if (label !== undefined)
            this.label.line([A, B], label);
    }
    /**
     * Draw a dash line between two points.
     * @category draw
     * ```
     * pen.dash([1,2],[3,4]) // draw a dash line from [1,2] to [3,4]
     * pen.dash([1,2],[3,4],'10') //  also label '10'
     * ```
     */
    dash(A, B, label) {
        this.cv.dash([A, B]);
        if (label !== undefined)
            this.label.line([A, B], label);
    }
    /**
     * Draw an arrow between two points.
     * @category draw
     * ```
     * pen.arrow([1,2],[3,4]) // draw an arrow from [1,2] to [3,4]
     * ```
     */
    arrow(A, B, label) {
        this.cv.arrow(A, B, 5);
        if (label !== undefined)
            this.label.line([A, B], label);
    }
    /**
     * Draw the component of the arrow.
     * @category draw
     * ```
     * pen.arrowCompo([1,2],[3,4],0,'x')
     * // draw the horizontal component of arrow from [1,2] to [3,4]
     * // label the angle as 'x'
     * ```
     */
    arrowCompo(O, P, dir, angleLabel) {
        let X = Move(O, dir, 1);
        let Q = PdFoot(O, X, P);
        this.arrow(O, Q);
        if (angleLabel !== undefined)
            this.angle(Q, O, P, angleLabel);
    }
    /**
     * Draw both components of the arrow.
     * @category draw
     * ```
     * pen.arrowResolve([1,2],[3,4],0,'x')
     * // draw the horizontal and vertical components of arrow from [1,2] to [3,4]
     * // label the angle with the horizontal as 'x'
     * ```
     */
    arrowResolve(O, P, dir, angleLabel) {
        this.arrowCompo(O, P, dir, angleLabel);
        this.arrowCompo(O, P, dir + 90);
    }
    /**
     * Draw a length between two points.
     * @category draw
     * ```
     * pen.length([1,2],[3,4],'d')
     * // draw an length 'd' from [1,2] to [3,4]
     * ```
     */
    length(A, B, label) {
        this.cv.line([A, B]);
        this.cv.tick(A, B, 5, 0);
        this.cv.tick(B, A, 5, 0);
        if (label !== undefined)
            this.label.line([A, B], label);
    }
    /**
     * Draw a dashed height with right angle, from V to AB.
     * @category draw
     * ```
     * pen.height([0,4],[[-1,0],[1,0]],'h')
     * // draw the height 'h' from [0,4] to x-axis
     * ```
     */
    height(V, [A, B], label) {
        let F = PdFoot(A, B, V);
        this.dash(V, F);
        this.rightAngle(A, F, V);
        if (label !== undefined) {
            const c = vec2D(V, A).cross2D(vec2D(V, B));
            if (c > 0) {
                this.label.line([V, F], label);
            }
            else {
                this.label.line([F, V], label);
            }
        }
    }
    /**
     * Draw a polyline given points.
     * @category draw
     * ```
     * pen.polyline([0,0],[5,2],[3,4]) // draw a polyline through 3 points
     * ```
     */
    polyline(...points) {
        this.cv.line(points);
    }
    /**
     * Draw a polygon given points.
     * @category draw
     * ```
     * pen.polygon([0,0],[5,2],[3,4]) // draw a triangle
     * ```
     */
    polygon(...points) {
        this.cv.shape(points);
    }
    /**
     * Fill a polygon given points.
     * @category draw
     * ```
     * pen.polyfill([0,0],[5,2],[3,4]) // fill a triangle
     * ```
     */
    polyfill(...points) {
        this.cv.fill(points);
    }
    /**
     * Shade a polygon given points.
     * @category draw
     * ```
     * pen.polyshade([0,0],[5,2],[3,4]) // shade a triangle
     * ```
     */
    polyshade(...points) {
        this.cv.shade(points);
    }
    /**
     * Draw and shade a polygon given points.
     * @category draw
     * ```
     * pen.polyshape([0,0],[5,2],[3,4]) // draw and shade a triangle
     * ```
     */
    polyshape(...points) {
        this.polygon(...points);
        this.polyshade(...points);
    }
    /**
     * Draw an angle with label.
     * @category draw
     * ```
     * pen.angle([0,0],[5,2],[3,4],'x')
     * ```
     */
    angle(A, O, B, label, arc = 1, radius = -1) {
        if (radius < 0)
            radius = 15 + this.cv.getAngleAllowance(A, O, B, 40, 1.5);
        let space = 3;
        this.cv.angle(A, O, B, radius, arc, space);
        if (label !== undefined && label !== '')
            this.label.angle([A, O, B], label, undefined, radius < 0 ? radius : radius + 13);
    }
    /**
     * Decorate equal side lengths.
     * @category decorator
     * ```
     * pen.decorate.equalSide([1,0],[3,2],2)
     * // a double-tick at the mid-pt of [1,0] and [3,2]
     * ```
     */
    equalSide(A, B, tick = 1) {
        this.cv.equalSide(A, B, 5, tick, 3);
    }
    /**
     * Decorate bisecting equal lengths of a side.
     * @category decorator
     * ```
     * pen.decorate.bisectSide([0,0], [2,2], 2)
     * // two double-ticks bisecting [0,0] and [2,2] at their mid-pt
     * ```
     */
    bisectSide(A, B, tick = 1) {
        [A, B] = this.pjs([A, B]);
        let M = Mid(A, B);
        this.equalSide(A, M, tick);
        this.equalSide(B, M, tick);
    }
    /**
     * Decorate parallel side.
     * @category decorator
     * ```
     * pen.decorate.parallel([1,0],[3,2],2)
     * // a double-tick parallel mark at the mid-pt of [1,0] and [3,2]
     * ```
     */
    parallel(A, B, tick = 1) {
        this.cv.parallel(A, B, 4, tick, 6);
    }
    /**
     * Decorate a right-angle AOB.
     * @category decorator
     * ```
     * pen.decorate.rightAngle([1,0],[0,0],[3,2])
     * // an right-angle AOB
     * ```
     */
    rightAngle(A, O, B, size = 12) {
        A = this.pj(A);
        O = this.pj(O);
        B ??= Rotate(A, 90, O);
        B = this.pj(B);
        this.cv.rightAngle(A, O, B, size);
    }
    /**
     * Decorate a compass.
     * @category decorator
     * ```
     * pen.decorate.compass([1,2])
     * // a compass at [1,2]
     * ```
     */
    compass(point) {
        this.cv.compass(point, 17, 20, 3.5);
    }
    /**
     * Write text.
     * @category text
     * ```
     * pen.write([1,2],'abc') // 'abc' at [1,2]
     * ```
     */
    write(point, text) {
        this.cv.write(text, point);
    }
    /**
     * Set the background image url.
     * @category export
     * ```
     * pen.background('https://www2.pyc.edu.hk/img/pycnet_logo.png')
     * ```
     */
    background(url) {
        this.cv.backgroundURL = url;
    }
    /**
     * Export the canvas to image tag.
     * @category export
     * ```
     * question = pen.export(question,'imgQ')
     * // paste the canvas to the image tag with src field 'imgQ'
     * ```
     */
    export(html, placeholder) {
        return this.cv.export(html, placeholder, false);
    }
    ;
    /**
     * Export the canvas to image tag, with white space trimmed.
     * @category export
     * ```
     * question = pen.exportTrim(question,'imgQ')
     * // paste the canvas to the image tag with src field 'imgQ'
     * ```
     */
    exportTrim(html, placeholder) {
        return this.cv.export(html, placeholder, true);
    }
    ;
    /**
     * Clear the canvas.
     * @category export
     */
    clear() {
        this.cv.clearImg();
    }
    /**
     * Temporarily save the img internally. Can be later restored by restoreImg.
     * @category export
     */
    saveImg() {
        this.cv.saveImg();
    }
    /**
     * Restored the previously saved img by saveImg.
     * @category export
     */
    restoreImg() {
        this.cv.restoreImg();
    }
}
exports.PenCls = PenCls;
;


/***/ }),

/***/ 9905:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PhyPenCls = void 0;
class PhyPenCls {
    /**
     * @ignore
     */
    constructor() {
        this.pen = new Pen();
    }
    /**
     * Export the canvas to image tag.
     * ```
     * question = autoPen.export(question,'imgQ')
     * // paste the canvas to the image tag with src field 'imgQ'
     * ```
     */
    export(html, placeholder) {
        return this.pen.exportTrim(html, placeholder);
    }
    /**
     * A car on a banked road.
     * Circular Motion.
     * ```
     * let pen = new PhyPen()
     * pen.CarOnBankedRoad({
     *  carMid : 10,
     *  carWidth : 3,
     *  wheelHeight : 1,
     *  carHeight : 2,
     *  angle : 25,
     *  angleLabel : 'θ',
     *  weight : 4,
     *  weightLabel : 'mg',
     *  normal : 5,
     *  normalLabel : 'R',
     *  friction : 0,
     *  frictionLabel : 'f',
     *  showAllForces : false
     * })
     * ```
     */
    CarOnBankedRoad({ carMid = 10, carWidth = 3, wheelHeight = 1, carHeight = 2, angle = 25, angleLabel = 'θ', weight = 4, weightLabel = 'mg', normal = 5, normalLabel = 'R', friction = 0, frictionLabel = 'f', showAllForces = false }) {
        let O = [0, 0];
        let l = carMid - carWidth / 2;
        let r = carMid + carWidth / 2;
        // wheels
        let A = [l, 0];
        let B = [r, 0];
        // car body
        let P = MoveY(A, wheelHeight);
        let Q = MoveY(P, carHeight);
        let R = MoveY(B, wheelHeight);
        let S = MoveY(R, carHeight);
        [A, B, P, Q, R, S] = [A, B, P, Q, R, S].map($ => Rotate($, angle, O));
        // road
        let Z = [2 * r, 0];
        let Y = Rotate(Z, angle, O);
        // mg
        let G = Mid(P, Q, R, S);
        let W = MoveY(G, -weight);
        // normal reaction
        let N = Move(G, 90 + angle, normal);
        // friction
        let g = friction > 0 ? A : B;
        let f = Move(g, friction > 0 ? 180 + angle : angle, Math.abs(friction));
        let pen = new Pen();
        pen.range.capture(O, A, B, P, Q, R, S, N, f);
        pen.size.lock(1.3);
        pen.set.labelCenter(G);
        pen.set.textLatex(true);
        pen.polygon(P, Q, S, R);
        pen.line(O, Z);
        pen.line(O, Y);
        pen.angle(Y, O, Z, angleLabel);
        pen.set.weight(4);
        pen.line(A, P);
        pen.line(B, R);
        if (showAllForces) {
            pen.set.weight(3);
            pen.set.color('red');
            pen.set.lineLabel('left');
            pen.arrow(G, W, weightLabel);
            pen.set.lineLabel();
            pen.set.weight(3);
            pen.set.color('purple');
            pen.arrow(G, N);
            pen.label.point(N, normalLabel);
            pen.set.weight(2);
            pen.arrowResolve(G, N, 90, angleLabel);
            if (friction !== 0) {
                pen.set.weight(3);
                pen.set.color('blue');
                pen.arrow(g, f);
                pen.label.point(f, frictionLabel);
                pen.set.weight(2);
                pen.arrowResolve(g, f, 0, angleLabel);
            }
        }
        this.pen = pen;
    }
    /**
     * A plane making a turn.
     * Circular Motion.
     * ```
     * let pen = new PhyPen()
     * pen.AirplaneTurning({
     *   wingWidth = 7,
     *   planeRadius = 1,
     *   angle = 35,
     *   angleLabel = 'θ',
     *   weight = 4,
     *   weightLabel = 'mg',
     *   lift = 5,
     *   liftLabel = 'L',
     *   showAllForces = false
     * })
     * ```
     */
    AirplaneTurning({ wingWidth = 7, planeRadius = 1, angle = 35, angleLabel = 'θ', weight = 4, weightLabel = 'mg', lift = 5, liftLabel = 'L', showAllForces = false }) {
        let O = [0, 0];
        // plane centre
        let P = [-wingWidth, 0];
        let Q = [+wingWidth, 0];
        [P, Q] = [P, Q].map($ => Rotate($, angle, O));
        // mg
        let W = MoveY(O, -weight);
        // lift
        let N = Move(O, 90 + angle, lift);
        let pen = new Pen();
        pen.range.capture(P, Q, W, N);
        pen.size.lock(1.3);
        pen.set.labelCenter(O);
        pen.set.textLatex(true);
        pen.graph.circle(O, planeRadius);
        pen.shade.circle(O, planeRadius);
        pen.set.weight(3);
        pen.line(P, Q);
        pen.set.weight();
        pen.set.dash(true);
        pen.graph.horizontal(0);
        pen.set.dash();
        pen.angle(Q, O, [1, 0], angleLabel);
        if (showAllForces) {
            pen.set.weight(3);
            pen.set.color('red');
            pen.set.lineLabel('left');
            pen.arrow(O, W, weightLabel);
            pen.set.lineLabel();
            pen.set.weight(3);
            pen.set.color('purple');
            pen.arrow(O, N);
            pen.label.point(N, liftLabel);
            pen.set.weight(2);
            pen.arrowResolve(O, N, 90, angleLabel);
        }
        this.pen = pen;
    }
    /**
     * A conical pendulum.
     * Circular Motion.
     * ```
     * let pen = new PhyPen()
     * pen.ConicalPendulum({
     *    bobRadius = 1,
     *    length = 15,
     *    angle = 50,
     *    angleLabel = 'θ',
     *    weight = 7,
     *    weightLabel = 'mg',
     *    tension = 10,
     *    tensionLabel = 'T',
     *    showAllForces = false
     * })
     * ```
     */
    ConicalPendulum({ bobRadius = 1, length = 15, angle = 50, angleLabel = 'θ', weight = 7, weightLabel = 'mg', tension = 10, tensionLabel = 'T', showAllForces = false }) {
        let O = [0, 0];
        let P = Rotate([0, -length], angle, O);
        let V = [0, P[1]];
        // weight
        let W = MoveY(P, -weight);
        // tension
        let T = Move(P, 90 + angle, tension);
        let pen = new Pen();
        pen.set.border(0.3);
        pen.range.capture(O, P, V, ReflectY(P), W);
        pen.size.lock(1.3);
        pen.set.textLatex(true);
        pen.set.color('grey');
        pen.plotDash(t => [P[0] * cos(t) + V[0], 1 * sin(t) + V[1]], 0, 360);
        pen.set.color();
        pen.dash(O, V);
        pen.line(O, P);
        pen.fill.circle(P, bobRadius);
        pen.angle(P, O, V, angleLabel);
        if (showAllForces) {
            // weight
            pen.set.color('red');
            pen.set.weight(3);
            pen.arrow(P, W, weightLabel);
            // tension
            pen.set.color('blue');
            pen.arrow(P, T);
            pen.set.weight(2);
            pen.arrowResolve(P, T, 90, angleLabel);
            pen.set.weight();
            pen.label.point(T, tensionLabel);
        }
        this.pen = pen;
    }
    /**
     * A satellite orbits around a planet.
     * Gravitation.
     * ```
     * let pen = new PhyPen()
     * pen.SatelliteOrbit({
     *    planetRadius = 1.3,
     *    orbitRadius = 2,
     *    angle = 30,
     * })
     * ```
     */
    SatelliteOrbit({ planetRadius = 1.3, orbitRadius = 2, angle = 30, showHeight = false }) {
        let pen = new Pen();
        let O = [0, 0];
        //satellite
        let P = PolToRect([orbitRadius, angle]);
        // r line
        let Q = PolToRect([orbitRadius, -angle]);
        // R line
        let A = [-planetRadius, 0];
        // h line
        let B = PolToRect([planetRadius, angle]);
        // M label
        let C = [0, -planetRadius];
        pen.range.capture([O, orbitRadius]);
        pen.size.set(1.2);
        pen.shade.circle(O, planetRadius);
        pen.graph.circle(O, planetRadius);
        pen.label.point(C, 'M', 270);
        pen.point(P, 'm');
        pen.point(O);
        if (showHeight) {
            pen.set.color('red');
            pen.line(B, P, 'h');
        }
        pen.set.color('blue');
        pen.line(O, Q, 'r');
        pen.set.color('grey');
        pen.line(O, A, 'R');
        pen.set.color();
        pen.set.dash(true);
        pen.graph.circle(O, orbitRadius);
        this.pen = pen;
    }
}
exports.PhyPenCls = PhyPenCls;


/***/ }),

/***/ 1370:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const Pen_1 = __webpack_require__(1377);
const AutoPen_1 = __webpack_require__(5336);
const PhyPen_1 = __webpack_require__(9905);
/**
 * @ignore
 */
globalThis.Pen = Pen_1.PenCls;
/**
 * @ignore
 */
globalThis.AutoPen = AutoPen_1.AutoPenCls;
/**
 * @ignore
 */
globalThis.PhyPen = PhyPen_1.PhyPenCls;


/***/ }),

/***/ 1476:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Dict = exports.Config = void 0;
const html_1 = __webpack_require__(9870);
class Config {
    constructor(sections = [], answer = "A", options = {}, shuffle = true) {
        this.sections = sections;
        this.answer = answer;
        this.options = options;
        this.shuffle = shuffle;
    }
}
exports.Config = Config;
class Dict {
    constructor(a = Symbol(), b = Symbol(), c = Symbol(), d = Symbol(), e = Symbol(), f = Symbol(), g = Symbol(), h = Symbol(), i = Symbol(), j = Symbol(), k = Symbol(), l = Symbol(), m = Symbol(), n = Symbol(), o = Symbol(), p = Symbol(), q = Symbol(), r = Symbol(), s = Symbol(), t = Symbol(), u = Symbol(), v = Symbol(), w = Symbol(), x = Symbol(), y = Symbol(), z = Symbol(), A = Symbol(), B = Symbol(), C = Symbol(), D = Symbol(), E = Symbol(), F = Symbol(), G = Symbol(), H = Symbol(), I = Symbol(), J = Symbol(), K = Symbol(), L = Symbol(), M = Symbol(), N = Symbol(), O = Symbol(), P = Symbol(), Q = Symbol(), R = Symbol(), S = Symbol(), T = Symbol(), U = Symbol(), V = Symbol(), W = Symbol(), X = Symbol(), Y = Symbol(), Z = Symbol()) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.f = f;
        this.g = g;
        this.h = h;
        this.i = i;
        this.j = j;
        this.k = k;
        this.l = l;
        this.m = m;
        this.n = n;
        this.o = o;
        this.p = p;
        this.q = q;
        this.r = r;
        this.s = s;
        this.t = t;
        this.u = u;
        this.v = v;
        this.w = w;
        this.x = x;
        this.y = y;
        this.z = z;
        this.A = A;
        this.B = B;
        this.C = C;
        this.D = D;
        this.E = E;
        this.F = F;
        this.G = G;
        this.H = H;
        this.I = I;
        this.J = J;
        this.K = K;
        this.L = L;
        this.M = M;
        this.N = N;
        this.O = O;
        this.P = P;
        this.Q = Q;
        this.R = R;
        this.S = S;
        this.T = T;
        this.U = U;
        this.V = V;
        this.W = W;
        this.X = X;
        this.Y = Y;
        this.Z = Z;
        this.variables = [
            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
            'i', 'j', 'k', 'l', 'm', 'n', 'o',
            'p', 'q', 'r', 's', 't', 'u', 'v',
            'w', 'x', 'y', 'z',
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
            'I', 'J', 'K', 'L', 'M', 'N', 'O',
            'P', 'Q', 'R', 'S', 'T', 'U', 'V',
            'W', 'X', 'Y', 'Z'
        ];
    }
    update(other) {
        for (let key of this.variables) {
            if (key in other)
                this[key] = other[key];
        }
    }
    checked() {
        for (let key of this.variables) {
            let v = this[key];
            if (v === undefined ||
                // v === null ||
                (typeof v === 'number' && !Number.isFinite(v)))
                return false;
        }
        return true;
    }
    substitute(text) {
        for (let key of this.variables) {
            let num = this[key];
            if (typeof num === 'symbol')
                continue;
            text = (0, html_1.PrintVariable)(text, key, num);
        }
        return text;
    }
}
exports.Dict = Dict;


/***/ }),

/***/ 6183:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const soil_1 = __webpack_require__(6842);
class MathSoilCls {
    reap(seed) {
        let soil = new soil_1.Soil(seed.gene);
        return soil.nurture();
    }
    /**
     * @deprecated
     */
    grow(seed) {
        // if ('content' in seed) seed.gene = seed.content // for backward compatible
        seed.fruit = this.reap(seed);
        // seed.question = seed.fruit // for backward compatible
    }
    /**
     * @deprecated
     */
    growAll(seeds) {
        seeds.forEach(x => this.grow(x));
    }
    /**
     * @deprecated
     */
    test(seed, repeat = 100) {
        let counters = [];
        for (let i = 1; i <= repeat; i++) {
            this.grow(seed);
            if (!seed.fruit.success)
                return;
            counters.push(seed.fruit.counter);
        }
        seed.fruit.counter = Mean(...counters);
    }
}
var MathSoil = new MathSoilCls();
globalThis.MathSoil = MathSoil;
class MathSoil2Cls {
    reap(gene) {
        let soil = new soil_1.Soil(gene);
        return soil.nurture();
    }
    inspect(gene, repeat) {
        let counters = [];
        let times = [];
        for (let i = 1; i <= repeat; i++) {
            let fruit = this.reap(gene);
            if (!fruit.success)
                return {
                    counter: 0,
                    success: false,
                    logs: fruit.logs,
                    time: 0
                };
            counters.push(fruit.counter);
            times.push(fruit.time);
        }
        return {
            counter: Mean(...counters),
            success: true,
            logs: [],
            time: Mean(...times)
        };
    }
}
var MathSoil2 = new MathSoil2Cls();
globalThis.MathSoil2 = MathSoil2;


/***/ }),

/***/ 6842:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Soil = void 0;
const section_1 = __webpack_require__(3646);
const dress_1 = __webpack_require__(3752);
const shuffle_1 = __webpack_require__(4660);
const option_1 = __webpack_require__(3084);
const cls_1 = __webpack_require__(1476);
const eval_1 = __webpack_require__(5784);
const auto_render_1 = __importDefault(__webpack_require__(2116));
// util functions
function katex(html) {
    let ele = document.createElement('div');
    ele.innerHTML = html;
    (0, auto_render_1.default)(ele);
    let T = ele.innerHTML;
    ele.remove();
    return T;
}
class Timer {
    constructor(limit // in second
    ) {
        this.limit = limit;
        this.start = Date.now();
    }
    elapsed() {
        return (Date.now() - this.start) / 1000; // in second
    }
    over() {
        return this.elapsed() > this.limit;
    }
    check() {
        if (this.over())
            throw CustomError('TimeoutError', 'running too long: > ' + this.limit + 's');
    }
}
class ErrorLogger {
    constructor() {
        this.pile = [];
    }
    add(e) {
        let err = toError(e);
        this.pile.push('[' + err.name + '] ' + err.message);
    }
    readHtml(delimiter) {
        return this.pile.map($ => $.replaceAll('\n', '<br/>')).join(delimiter);
    }
    logs() {
        return [...this.pile];
    }
    html() {
        let text = this.readHtml("<br/><br/>");
        let len = text.length;
        if (len > 1000)
            text = text.substring(0, 1000) + ` ... (${len} chars)`;
        return text;
    }
    lastLogHtml() {
        return this.pile[this.pile.length - 1].replaceAll('\n', '<br/>');
    }
}
class Soil {
    constructor(gene) {
        this.gene = gene;
        this.qn = "";
        this.sol = "";
        // working variables during growth
        this.dict = new cls_1.Dict();
        this.config = new cls_1.Config();
        // state
        this.counter = 0;
        this.timer = new Timer(10);
        this.logger = new ErrorLogger();
        this.reset();
    }
    reset() {
        this.qn = this.gene.qn;
        this.sol = this.gene.sol;
        this.dict = new cls_1.Dict();
        this.config = new cls_1.Config();
    }
    evalCode(code) {
        let { result, context } = (0, eval_1.evaluate)(code, {
            dict: this.dict,
            sections: this.config.sections,
            answer: this.config.answer,
            options: this.config.options,
            shuffle: this.config.shuffle,
            qn: this.qn,
            sol: this.sol
        });
        this.dict = context.dict;
        this.config = {
            sections: context.sections,
            answer: context.answer,
            options: context.options,
            shuffle: context.shuffle
        };
        this.qn = context.qn;
        this.sol = context.sol;
        return result;
    }
    pushDict() {
        this.counter++;
        this.evalCode(this.gene.populate);
    }
    isValidated() {
        let v = this.gene.validate;
        if (v === "")
            return true;
        v = v.replace('\n', ' '); //is it a bug? only once?
        return this.evalCode(v) === true;
    }
    runPopulate() {
        while (this.counter <= 1000) {
            this.timer.check();
            try {
                this.pushDict();
                if (!this.dict.checked())
                    throw CustomError('PopulationError', 'Dict Check Failed.');
                if (!this.isValidated())
                    throw CustomError('PopulationError', 'Cannot pass validate.');
                return true;
            }
            catch (e) {
                if (e instanceof Error) {
                    switch (e.name) {
                        case 'ContractError':
                            this.logger.add(e);
                            break;
                        case 'MathError':
                            this.logger.add(e);
                            break;
                        case 'PopulationError':
                            this.logger.add(e);
                            break;
                        default:
                            throw e;
                    }
                }
                else {
                    throw e;
                }
            }
        }
        ;
        throw CustomError('PopulationError', "No population found after 1000 trials!");
    }
    runSection() {
        // crop section
        this.qn = (0, section_1.ExecSection)(this.qn, this.config.sections, this.dict);
        this.sol = (0, section_1.ExecSection)(this.sol, this.config.sections, this.dict);
        return true;
    }
    runPreprocess() {
        this.evalCode(this.gene.preprocess);
        return true;
    }
    runOption() {
        let nTrial = 0;
        while (nTrial <= 100) {
            nTrial++;
            try {
                this.qn = (0, option_1.AutoOptions)(this.config.options, this.qn, this.dict);
                return true;
            }
            catch (e) {
                this.logger.add(e);
                continue;
            }
        }
        ;
        throw CustomError('OptionError', "No valid option generated after 100 trials");
    }
    runIntrapolate() {
        this.qn = (0, eval_1.intrapolate)(this.qn, this.dict);
        this.sol = (0, eval_1.intrapolate)(this.sol, this.dict);
        return true;
    }
    runSubstitute() {
        // pour
        this.qn = this.dict.substitute(this.qn);
        this.sol = this.dict.substitute(this.sol);
        // dress
        this.qn = (0, dress_1.dress)(this.qn);
        this.sol = (0, dress_1.dress)(this.sol);
        return true;
    }
    runPostprocess() {
        this.evalCode(this.gene.postprocess);
        return true;
    }
    runShuffle() {
        let shuffler = new shuffle_1.OptionShuffler(this.qn, this.sol, this.config.answer, this.config.shuffle);
        if (shuffler.AreOptionsDuplicated()) {
            this.logger.add(CustomError('ShuffleError', 'Duplicated options found!'));
            return false;
        }
        this.qn = shuffler.genQn();
        this.sol = shuffler.genSol();
        this.config.answer = shuffler.genAns();
        return true;
    }
    runKatex() {
        this.qn = katex(this.qn);
        this.sol = katex(this.sol);
        return true;
    }
    successFruit() {
        return {
            qn: this.qn,
            sol: this.sol,
            ans: this.config.answer,
            counter: this.counter,
            success: true,
            logs: this.logger.logs(),
            time: this.timer.elapsed()
        };
    }
    errorFruit() {
        return {
            qn: "Error!<br/>" + this.logger.lastLogHtml(),
            sol: this.logger.html(),
            ans: "X",
            counter: this.counter,
            success: false,
            logs: this.logger.logs(),
            time: this.timer.elapsed()
        };
    }
    nurture() {
        try {
            do {
                this.reset();
                this.runPopulate();
                this.runSection();
                this.runPreprocess();
                this.runOption();
                this.runIntrapolate();
                this.runSubstitute();
                this.runPostprocess();
                if (!this.runShuffle())
                    continue;
                this.runKatex();
                break;
            } while (true);
            return this.successFruit();
        }
        catch (e) {
            this.logger.add(e);
            return this.errorFruit();
        }
    }
}
exports.Soil = Soil;


/***/ }),

/***/ 3752:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dress = void 0;
function or(...reg) {
    return '(' + reg.join('|') + ')';
}
// function inTag(input: string): string {
//     return input + String.raw``
// }
const s = String.raw `(?:\s|&nbsp;)*`;
const p = String.raw `\+`;
const m = String.raw `\-`;
const e = String.raw `(?:\=|\>|\<|&lt;|&gt;|\\ge|\\le|\\gt|\\lt)`;
const l = String.raw `[\(\[\{]`;
const r = String.raw `[\)\]\}]`;
const pl = String.raw `[\(\[]`;
const pr = (/* unused pure expression or super */ null && (String.raw `[\)\]]`));
const c = String.raw `\,`;
const v = String.raw `(?:[A-Za-z]|\\alpha|\\beta|\\theta|\\phi|\\pi|\\sigma|\\mu|α|β|θ|φ|μ|π|σ)`;
const f = String.raw `(?:\\sin|\\cos|\\tan|\\log|\\ln)`;
const sl = String.raw `\\`;
const left = String.raw `\\left`;
const sq = String.raw `\\sqrt`;
const endtag = String.raw `(?=[^<>]*</span>)`;
function regReplace(input, reg, replace) {
    return input.replace(new RegExp(reg, 'g'), replace);
}
function handleSigns(input) {
    input = regReplace(input, p + s + m, '-');
    input = regReplace(input, m + s + p, '-');
    input = regReplace(input, or(l, e, c) + s + m + s + m, '$1');
    input = regReplace(input, '(\,)' + s + m + s + m, '$1');
    input = regReplace(input, m + s + m, '+');
    input = regReplace(input, m + s + m, '+');
    return input;
}
function handlePower(input) {
    input = regReplace(input, String.raw `\^\{1\}`, '');
    return input;
}
function handleSqrt(input) {
    input = regReplace(input, String.raw `\\sqrt\[2\]`, '\\sqrt');
    return input;
}
function handleCoeff(input) {
    input = regReplace(input, or(p, m, e, l, sl, r, c) + s + 1 + s + or(v, f, pl, left, sq) + endtag, '$1 $2');
    return input;
}
function handlePrime(input) {
    input = regReplace(input, '(' + v + ')' + "'" + endtag, '$1 \\prime ');
    return input;
}
function dress(html) {
    html = handleSigns(html);
    html = handlePower(html);
    html = handleSqrt(html);
    html = handleCoeff(html);
    html = handlePrime(html);
    return html;
}
exports.dress = dress;
// .replace(/(?<=<span class="math-tex">[^<>]*)([\+\-\=\(\[\{\\\)\]\}\,])(\s|&nbsp;)*1(\s|&nbsp;)*(?=[A-Za-z\(\[][^<>]*<\/span>)/g, '$1')


/***/ }),

/***/ 5784:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.intrapolate = exports.evalInline = exports.evaluate = void 0;
const html_1 = __webpack_require__(9870);
function detectVarErr(e) {
    if (e instanceof Error) {
        let isVarErr = e.message === 'Cannot convert a Symbol value to a number';
        if (isVarErr) {
            return CustomError('VariableError', "A variable is used before a value is defined.");
        }
        else {
            return e;
        }
    }
    return e;
}
function evaluate(code, context) {
    // injectables
    let { a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z } = context.dict;
    let sections = context.sections;
    let answer = context.answer;
    let options = context.options;
    let shuffle = context.shuffle;
    let question = context.qn;
    let solution = context.sol;
    // execute
    let result;
    try {
        result = eval(code);
    }
    catch (e) {
        throw detectVarErr(e);
    }
    // allow answer to be number
    if (typeof answer === 'number')
        answer = ['A', 'B', 'C', 'D'][answer];
    //retrieve
    context.dict.update({
        a, b, c, d, e, f, g, h, i, j, k, l, m, n,
        o, p, q, r, s, t, u, v, w, x, y, z,
        A, B, C, D, E, F, G, H, I, J, K, L, M, N,
        O, P, Q, R, S, T, U, V, W, X, Y, Z
    });
    let newContext = {
        dict: context.dict,
        sections,
        answer,
        options,
        shuffle,
        qn: question,
        sol: solution
    };
    return { result, context: newContext };
}
exports.evaluate = evaluate;
function htmlDecode(str) {
    return str.replace(/&amp;|&lt;|&gt;|&#39;|&quot;/g, (tag) => ({
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&#39;': "'",
        '&quot;': '"'
    }[tag] || tag));
}
function evalInline(code, dict) {
    code = htmlDecode(code);
    // injectables
    let { a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z } = dict;
    // execute
    try {
        return eval(code);
    }
    catch (e) {
        throw detectVarErr(e);
    }
}
exports.evalInline = evalInline;
function intrapolate(html, dict) {
    function intra(signal, prefix) {
        html = html.replace(new RegExp(String.raw `\*${prefix}\\\{([^\{\}]*)\\\}`, 'g'), (match, code) => {
            let result = evalInline(code, dict);
            return (0, html_1.ParseForPrint)(result, signal);
        });
        html = html.replace(new RegExp(String.raw `\*${prefix}\{([^\{\}]*)\}`, 'g'), (match, code) => {
            let result = evalInline(code, dict);
            return (0, html_1.ParseForPrint)(result, signal);
        });
    }
    intra('', '');
    intra('/', '\\/');
    intra('*', '\\*');
    return html;
}
exports.intrapolate = intrapolate;


/***/ }),

/***/ 9870:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParseForPrint = exports.PrintVariable = exports.QuestionHTML = void 0;
class QuestionHTML {
    // assume a structure '...<ul><li>...</li><li>...</li><li>...</li></ul>'
    // there must be no ul or li tags except the answer options
    constructor(html = '') {
        this.body = (new DOMParser())
            .parseFromString(html, 'text/html')
            .getElementsByTagName('body')[0];
    }
    export() {
        return this.body.innerHTML;
    }
    get li() {
        return [...this.body.getElementsByTagName('li')];
    }
    get ul() {
        return this.body.getElementsByTagName('ul')[0];
    }
    cloneLi(sourceIndex, repeat = 1) {
        for (let i = 1; i <= repeat; i++) {
            this.ul.appendChild(this.li[sourceIndex].cloneNode(true));
        }
    }
    printInWhole(symbol, value) {
        this.body.innerHTML = PrintVariable(this.body.innerHTML, symbol, value);
    }
    printInLi(index, symbol, value) {
        let li = this.li[index];
        li.innerHTML = PrintVariable(li.innerHTML, symbol, value);
    }
    isLiDuplicated() {
        let htmls = this.li.map(x => x.innerHTML.replace(/\s+/g, ''));
        return (new Set(htmls)).size !== htmls.length;
    }
    shuffleLi(shuffle = true) {
        let oldHTMLs = this.li.map(x => x.innerHTML);
        let newHTMLs;
        if (shuffle) {
            newHTMLs = RndShuffle(...oldHTMLs);
        }
        else {
            newHTMLs = [...oldHTMLs];
        }
        for (let i = 0; i < newHTMLs.length; i++) {
            this.li[i].innerHTML = newHTMLs[i];
        }
        return oldHTMLs.map(x => newHTMLs.indexOf(x));
    }
}
exports.QuestionHTML = QuestionHTML;
function PrintVariable(html, symbol, value) {
    let print = (signal, prefix, suffix = "") => {
        html = html.replace(new RegExp(prefix + symbol + suffix, 'g'), () => ParseForPrint(value, signal));
    };
    // print **x as sci notation
    print("*", "\\*\\*");
    // print */x as fraction
    print("/", "\\*\\/");
    // print *//x as fraction
    print("//", "\\*\\/\\/");
    // print */x as fraction
    print("/()", "\\*\\/\\(", "\\)");
    // print *(x) as bracket if negative
    print("()", "\\*\\(", "\\)");
    // print *!x as surd
    print("!", "\\*\\!");
    // print *|x| as abs(x)
    print("||", "\\*\\|", "\\|");
    // print *^+_x as sign of x
    print("+", "\\*\\^\\+\\_");
    // print *^-_x as opposite sign of x
    print("-", "\\*\\^\\-\\_");
    // print *^\gt_x as '>' or '<'
    print(">", "\\*\\^\\\\gt\\_");
    // print *^\lt_x as '<' or '>'
    print("<", "\\*\\^\\\\lt\\_");
    // print *^\ge_x as '>=' or '<='
    print(">=", "\\*\\^\\\\ge\\_");
    // print *^\le_x as '<=' or '>='
    print("<=", "\\*\\^\\\\le\\_");
    // print *\%x as percent
    print("%", "\\*\\%");
    print("\\%", "\\*\\\\\\%");
    // print *:x as ratio
    print(":", "\\*\\:");
    // print *x as normal
    print("", "\\*");
    // print *|.x as OR trig roots
    print("|.", "\\*\\|\\.");
    // print *.x as polar coordinates, with r being a surd
    print(".", "\\*\\.");
    // print *= as equation for labeled value
    print("=", "\\*\\=");
    print("==", "\\*\\=\\=");
    print("=.", "\\*\\=\\.");
    print("==.", "\\*\\=\\=\\.");
    return html;
}
exports.PrintVariable = PrintVariable;
function numberDefault(num) {
    let v = num;
    if (owl.zero(v))
        return 0;
    if (IsInteger(v)) {
        v = Fix(v, 0);
    }
    else {
        v = Math.abs(v) > 100 ? Fix(v, 2) : Round(v, 5);
    }
    return v;
}
function ParseForPrint(value, signal = "") {
    let T = typeof value;
    if (signal === '') {
        if (T === 'number') {
            return String(numberDefault(value));
        }
        if (T === 'boolean') {
            return value ? '✔' : '✘';
        }
        if (owl.quantity(value)) {
            let { val, unit } = value;
            return String(numberDefault(val)) + unit;
        }
        if (owl.point2D(value)) {
            return Coord(value);
        }
        if (owl.combo(value)) {
            return ink.printCombo(value);
        }
        if (owl.polynomial(value)) {
            return PolyPrint(value);
        }
        if (owl.trigValue(value)) {
            return ink.printTrigValue(value);
        }
        if (owl.trigExp(value)) {
            return ink.printTrigExp(value);
        }
        if (owl.constraint(value)) {
            return ink.printConstraint(value);
        }
        if (owl.constraints(value)) {
            return ink.printConstraints(value);
        }
    }
    if (signal === '*') {
        if (T === 'number') {
            let v = cal.blur(Round(value, 3));
            let abs = Math.abs(v);
            return String((abs >= 10000 || abs <= 0.01) ? Sci(v) : v);
        }
        if (owl.quantity(value)) {
            let { val, unit } = value;
            let v = cal.blur(Round(val, 3));
            let abs = Math.abs(v);
            return String((abs >= 10000 || abs <= 0.01) ? Sci(v) : v) + unit;
        }
    }
    if (signal === '/') {
        if (T === 'number') {
            let [p, q] = ToFrac(value);
            return Dfrac(p, q);
        }
    }
    if (signal === '/()') {
        if (T === 'number') {
            let [p, q] = ToFrac(value);
            if (q === 1 && p >= 0)
                return Dfrac(p, q);
            if (q === 1 && p < 0)
                return '(' + Dfrac(p, q) + ')';
            return '\\left ( ' + Dfrac(p, q) + ' \\right )';
        }
    }
    if (signal === '//') {
        if (T === 'number') {
            let [p, q] = ToFrac(value);
            return Dfrac(p, q).replace(/dfrac/g, 'frac');
        }
    }
    if (signal === '()') {
        if (T === 'number') {
            let v = numberDefault(value);
            return String(v >= 0 ? v : '(' + v + ')');
        }
    }
    if (signal === '!') {
        if (T === 'number') {
            return ink.printSurd(value);
        }
        if (owl.point2D(value)) {
            let [a, b] = value;
            return '(' + ink.printSurd(a) + ',' + ink.printSurd(b) + ')';
        }
    }
    if (signal === '+') {
        if (T === 'number')
            return value >= 0 ? '+' : '-';
    }
    if (signal === '-') {
        if (T === 'number')
            return value >= 0 ? '-' : '+';
    }
    if (signal === '||') {
        if (T === 'number') {
            return String(numberDefault(Math.abs(value)));
        }
    }
    if (signal === '>') {
        if (T === 'boolean')
            return value ? '\\gt' : '\\lt';
        if (T === 'number')
            return value > 0 ? '\\gt' : value < 0 ? '\\lt' : '=';
    }
    if (signal === '<') {
        if (T === 'boolean')
            return value ? '\\lt' : '\\gt';
        if (T === 'number')
            return value > 0 ? '\\lt' : value < 0 ? '\\gt' : '=';
    }
    if (signal === '>=') {
        if (T === 'boolean')
            return value ? '\\ge' : '\\le';
        if (T === 'number')
            return value > 0 ? '\\ge' : value < 0 ? '\\le' : '=';
    }
    if (signal === '<=') {
        if (T === 'boolean')
            return value ? '\\le' : '\\ge';
        if (T === 'number')
            return value > 0 ? '\\le' : value < 0 ? '\\ge' : '=';
    }
    if (signal === '%') {
        if (T === 'number') {
            return numberDefault(value * 100) + '%';
        }
    }
    if (signal === '\\%') {
        if (T === 'number') {
            return numberDefault(value * 100) + '\\%';
        }
    }
    if (signal === ':') {
        if (owl.ntuple(value)) {
            return toNumbers(value).ratio().join(":");
        }
        if (T === 'number') {
            let [p, q] = cal.toFraction(value);
            return p + ":" + q;
        }
    }
    if (signal === '|.') {
        if (owl.array(value)) {
            return ink.printOrTrigRoots(value);
        }
    }
    if (signal === '.') {
        if (owl.point2D(value)) {
            return ink.printPointPolar(value);
        }
    }
    if (signal === '=') {
        if (owl.labeledValue(value)) {
            let v = [...value];
            v[0] = numberDefault(v[0]);
            return ink.printLabeledValue(v, 1, false);
        }
    }
    if (signal === '==') {
        if (owl.labeledValue2(value)) {
            let v = [...value];
            v[0] = numberDefault(v[0]);
            return ink.printLabeledValue(v, 2, false);
        }
    }
    if (signal === '=.') {
        if (owl.labeledValue(value)) {
            let v = [...value];
            v[0] = numberDefault(v[0]);
            return ink.printLabeledValue(v, 1, true);
        }
    }
    if (signal === '==.') {
        if (owl.labeledValue2(value)) {
            let v = [...value];
            v[0] = numberDefault(v[0]);
            return ink.printLabeledValue(v, 2, true);
        }
    }
    return String(value);
}
exports.ParseForPrint = ParseForPrint;


/***/ }),

/***/ 3084:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AutoOptions = void 0;
const html_1 = __webpack_require__(9870);
function Produce(source, assigned) {
    return Array.isArray(assigned) && assigned !== source
        ? RndShuffle(...assigned)
        : RndShake(source);
}
function ExecInstructions(instructions, source) {
    let products = {};
    let k;
    for (k in instructions) {
        products[k] = Produce(source[k], instructions[k]);
    }
    return products;
}
/**
* append the array of options to question
* ```typescript
* let question = 'abc<ul><li>*x</li></ul>'
* AutoOptions(question,{x:3})
* // 'abc<ul><li>*x</li><li>2</li><li>4</li><li>5</li></ul>'
* ```
*/
function AutoOptions(instructions, question, source) {
    if (owl.emptyObject(instructions))
        return question;
    let Qn = new html_1.QuestionHTML(question);
    let products = ExecInstructions(instructions, source);
    if (Qn.li.length === 1) {
        Qn.cloneLi(0, 3);
        for (let k in products) {
            Qn.printInLi(1, k, products[k][0]);
            Qn.printInLi(2, k, products[k][1]);
            Qn.printInLi(3, k, products[k][2]);
        }
        return Qn.export();
    }
    if (Qn.li.length === 2) {
        Qn.cloneLi(0);
        Qn.cloneLi(1);
        for (let k in products) {
            Qn.printInLi(2, k, products[k][0]);
            Qn.printInLi(3, k, products[k][0]);
        }
        return Qn.export();
    }
    return question;
}
exports.AutoOptions = AutoOptions;


/***/ }),

/***/ 3646:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExecSection = void 0;
const eval_1 = __webpack_require__(5784);
function DropVersion(html, section, version) {
    let id = section + '.' + version;
    return html.replace(new RegExp('<p>##' + id + '<\\/p>((\\s|\\S)(?!##))*<p>##<\\/p>', 'g'), '');
}
function DropTags(html) {
    html = html.replace(new RegExp('<[^#<]*##[^#>]*>', 'g'), '');
    return html;
}
function KeepVersion(html, section, version) {
    for (let i = 0; i < 10; i++) {
        if (i === version)
            continue;
        html = DropVersion(html, section, i);
    }
    return html;
}
function ExecSection(html, sections, dict) {
    for (let i = 0; i < sections.length; i++) {
        let [section, version] = sections[i];
        html = KeepVersion(html, section.toString(), version);
    }
    html = DropCondition(html, dict);
    html = DropTags(html);
    return html;
}
exports.ExecSection = ExecSection;
function DropCondition(html, dict) {
    return html.replace(new RegExp('<p>##\{([^\{\}]*)\}<\\/p>((\\s|\\S)(?!##))*<p>##<\\/p>', 'g'), (match, p1) => (0, eval_1.evalInline)(p1, dict) ? match : "");
}


/***/ }),

/***/ 4660:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OptionShuffler = void 0;
const html_1 = __webpack_require__(9870);
class OptionShuffler {
    constructor(qn, sol, ans, shuffle) {
        this.qn = qn;
        this.sol = sol;
        this.ans = ans;
        this.shuffle = shuffle;
        this.perm = [];
        this.valid = false;
        this.Qn = new html_1.QuestionHTML(qn);
        if (!this.Qn.ul)
            return; // no <ul></ul>
        if (this.Qn.li.length === 0)
            return; // blank <ul></ul>
        this.valid = true;
    }
    AreOptionsDuplicated() {
        return this.Qn.isLiDuplicated();
    }
    genQn() {
        if (!this.valid)
            return this.qn;
        this.perm = this.Qn.shuffleLi(this.shuffle);
        return this.Qn.export();
    }
    mapLetter(oldLetter) {
        let oldIndex = ['A', 'B', 'C', 'D', 'E', 'F'].indexOf(oldLetter);
        let newIndex = this.perm[oldIndex];
        return ['A', 'B', 'C', 'D', 'E', 'F'][newIndex];
    }
    genAns() {
        if (!this.valid)
            return "X";
        return this.mapLetter(this.ans);
    }
    genSol() {
        if (!this.valid)
            return this.sol;
        let newSol = "<p>Answer: "
            + this.genAns()
            + "</p><p><b>Solution:</b></p>"
            + this.sol;
        let ansList = ['A', 'B', 'C', 'D', 'E', 'F'];
        ansList.length = this.perm.length;
        for (let x of ansList) {
            newSol = newSol.replace(new RegExp('\{\#' + x + '\}', 'g'), this.mapLetter(x));
        }
        return newSol;
    }
}
exports.OptionShuffler = OptionShuffler;


/***/ }),

/***/ 7798:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.matchTreaty = exports.matchRule = void 0;
var rule_1 = __webpack_require__(5810);
Object.defineProperty(exports, "matchRule", ({ enumerable: true, get: function () { return rule_1.matchRule; } }));
var treaty_1 = __webpack_require__(7510);
Object.defineProperty(exports, "matchTreaty", ({ enumerable: true, get: function () { return treaty_1.matchTreaty; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 5810:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.matchRule = void 0;
function nameOf(f) {
    return f.name ?? f.toString();
}
function matchOne(val, rule) {
    return rule(val) ? true : nameOf(rule);
}
function matchAnd(val, rule) {
    for (let p of rule)
        if (!p(val))
            return nameOf(p);
    return true;
}
function matchObj(val, rule) {
    for (let k in rule) {
        const has = k in val;
        if (!has)
            return 'should have property: ' + k;
        const p = rule[k];
        const pass = p(val[k]);
        if (!pass)
            return k + ' -> ' + nameOf(p);
    }
    return true;
}
function isOne(rule) {
    return typeof rule === 'function';
}
function isAnd(rule) {
    return Array.isArray(rule);
}
function isObj(rule) {
    return typeof rule === 'object' &&
        !Array.isArray(rule) &&
        rule !== null;
}
function matchRule(val, rule) {
    if (isOne(rule))
        return matchOne(val, rule);
    if (isAnd(rule))
        return matchAnd(val, rule);
    if (isObj(rule))
        return matchObj(val, rule);
    return 'fail to recognize the rule';
}
exports.matchRule = matchRule;
//# sourceMappingURL=rule.js.map

/***/ }),

/***/ 7510:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.matchTreaty = void 0;
function nameOf(f) {
    return f.name ?? f.toString();
}
function matchOne(vals, treaty) {
    return treaty(...vals) ? true : nameOf(treaty);
}
function matchAnd(vals, treaty) {
    for (let p of treaty)
        if (!p(...vals))
            return nameOf(p);
    return true;
}
function isOne(treaty) {
    return typeof treaty === 'function';
}
function isAnd(treaty) {
    return Array.isArray(treaty);
}
function matchTreaty(vals, treaty) {
    if (isOne(treaty))
        return matchOne(vals, treaty);
    if (isAnd(treaty))
        return matchAnd(vals, treaty);
    return 'fail to recognize the rule';
}
exports.matchTreaty = matchTreaty;
//# sourceMappingURL=treaty.js.map

/***/ }),

/***/ 3279:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.acceptIt = exports.accept = void 0;
const util_1 = __webpack_require__(6991);
const assertion_1 = __webpack_require__(7798);
function e(f, argValues, returnValue, msg) {
    return (0, util_1.err)(f, 'args = (' + (0, util_1.join)(argValues) + ')', 'return = ' + returnValue, 'violate: ' + msg);
}
function match(f, argValues, returnValue, rule) {
    const pass = (0, assertion_1.matchRule)(returnValue, rule);
    if (pass !== true)
        throw e(f, argValues, returnValue, pass);
}
function accept(f, rule) {
    (0, util_1.brand)(f);
    const nf = (...args) => {
        const result = f(...args);
        match(f, args, result, rule);
        return result;
    };
    (0, util_1.transferBrand)(f, nf);
    return nf;
}
exports.accept = accept;
function acceptIt(rule) {
    return (0, util_1.makeStaticDecorator)($ => accept($, rule));
}
exports.acceptIt = acceptIt;
//# sourceMappingURL=accept.js.map

/***/ }),

/***/ 7025:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.captureAll = exports.captureIt = exports.capture = void 0;
const util_1 = __webpack_require__(6991);
function catchString(f, vals, e) {
    return (0, util_1.err)(f, 'args = (' + (0, util_1.join)(vals) + ')', 'throw: ' + e);
}
function catchErrObj(f, vals, e) {
    return (0, util_1.err)(f, 'args = (' + (0, util_1.join)(vals) + ')', 'throw: ' + e.name, 'message: ' + e.message);
}
function catchAny(f, vals, e) {
    return (0, util_1.err)(f, 'args = (' + (0, util_1.join)(vals) + ')', 'throw: ' + (0, util_1.str)(e));
}
function isError(e) {
    return typeof e === 'object' && e !== null && 'name' in e && 'message' in e;
}
function isContractError(e) {
    return isError(e) && e.name === 'ContractError';
}
function catchErr(f, vals, e) {
    if (isContractError(e))
        return e;
    if (typeof e === 'string')
        return catchString(f, vals, e);
    if (isError(e))
        return catchErrObj(f, vals, e);
    return catchAny(f, vals, e);
}
function capture(f) {
    (0, util_1.brand)(f);
    const nf = (...args) => {
        try {
            return f(...args);
        }
        catch (e) {
            throw catchErr(f, args, e);
        }
    };
    (0, util_1.transferBrand)(f, nf);
    return nf;
}
exports.capture = capture;
function captureIt() {
    return (0, util_1.makeStaticDecorator)($ => capture($));
}
exports.captureIt = captureIt;
function captureAll() {
    return function (constructor) {
        for (let key of (0, util_1.getClassStaticNames)(constructor)) {
            let descriptor = Object.getOwnPropertyDescriptor(constructor, key);
            if (descriptor !== undefined) {
                descriptor.value = capture(descriptor.value);
                Object.defineProperty(constructor, key, descriptor);
            }
        }
    };
}
exports.captureAll = captureAll;
//# sourceMappingURL=capture.js.map

/***/ }),

/***/ 349:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkIt = exports.check = void 0;
const util_1 = __webpack_require__(6991);
const assertion_1 = __webpack_require__(7798);
function getToTail(arr, index) {
    const n = arr.length - 1;
    const i = Math.min(index, n);
    return arr[i];
}
function e(f, argIndex, argValue, msg) {
    return (0, util_1.err)(f, 'arg[' + argIndex + '] = ' + (0, util_1.str)(argValue), 'violate: ' + msg);
}
function match(f, argIndex, argValue, rule) {
    const pass = (0, assertion_1.matchRule)(argValue, rule);
    if (pass !== true)
        throw e(f, argIndex, argValue, pass);
}
function check(f, rules) {
    (0, util_1.brand)(f);
    const nf = (...args) => {
        args.forEach((v, i) => match(f, i, v, getToTail(rules, i)));
        return f(...args);
    };
    (0, util_1.transferBrand)(f, nf);
    return nf;
}
exports.check = check;
function checkIt(...rules) {
    return (0, util_1.makeStaticDecorator)($ => check($, rules));
}
exports.checkIt = checkIt;
//# sourceMappingURL=check.js.map

/***/ }),

/***/ 9602:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.exposeAll = exports.exposeIt = exports.expose = void 0;
const util_1 = __webpack_require__(6991);
function expose(name, f) {
    // @ts-ignore
    globalThis[String(name)] = f;
}
exports.expose = expose;
function exposeIt() {
    return function (target, key, descriptor) {
        expose(key, descriptor.value);
        return descriptor;
    };
}
exports.exposeIt = exposeIt;
function exposeAll() {
    return function (constructor) {
        for (let key of (0, util_1.getClassStaticNames)(constructor)) {
            let descriptor = Object.getOwnPropertyDescriptor(constructor, key);
            if (descriptor !== undefined) {
                expose(key, descriptor.value);
            }
        }
    };
}
exports.exposeAll = exposeAll;
//# sourceMappingURL=expose.js.map

/***/ }),

/***/ 4114:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.inspectIt = exports.inspect = void 0;
const util_1 = __webpack_require__(6991);
const assertion_1 = __webpack_require__(7798);
function e(f, vals, msg) {
    return (0, util_1.err)(f, 'args = (' + (0, util_1.join)(vals) + ')', 'violate: ' + msg);
}
function match(f, vals, treaty) {
    const pass = (0, assertion_1.matchTreaty)(vals, treaty);
    if (pass !== true)
        throw e(f, vals, pass);
}
function inspect(f, treaty) {
    (0, util_1.brand)(f);
    const nf = (...args) => {
        match(f, args, treaty);
        return f(...args);
    };
    (0, util_1.transferBrand)(f, nf);
    return nf;
}
exports.inspect = inspect;
function inspectIt(treaty) {
    return (0, util_1.makeStaticDecorator)($ => inspect($, treaty));
}
exports.inspectIt = inspectIt;
//# sourceMappingURL=inspect.js.map

/***/ }),

/***/ 1154:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.exposeAll = exports.exposeIt = exports.expose = exports.inspectIt = exports.inspect = exports.checkIt = exports.check = exports.acceptIt = exports.accept = exports.captureAll = exports.captureIt = exports.capture = void 0;
var capture_1 = __webpack_require__(7025);
Object.defineProperty(exports, "capture", ({ enumerable: true, get: function () { return capture_1.capture; } }));
Object.defineProperty(exports, "captureIt", ({ enumerable: true, get: function () { return capture_1.captureIt; } }));
Object.defineProperty(exports, "captureAll", ({ enumerable: true, get: function () { return capture_1.captureAll; } }));
var accept_1 = __webpack_require__(3279);
Object.defineProperty(exports, "accept", ({ enumerable: true, get: function () { return accept_1.accept; } }));
Object.defineProperty(exports, "acceptIt", ({ enumerable: true, get: function () { return accept_1.acceptIt; } }));
var check_1 = __webpack_require__(349);
Object.defineProperty(exports, "check", ({ enumerable: true, get: function () { return check_1.check; } }));
Object.defineProperty(exports, "checkIt", ({ enumerable: true, get: function () { return check_1.checkIt; } }));
var inspect_1 = __webpack_require__(4114);
Object.defineProperty(exports, "inspect", ({ enumerable: true, get: function () { return inspect_1.inspect; } }));
Object.defineProperty(exports, "inspectIt", ({ enumerable: true, get: function () { return inspect_1.inspectIt; } }));
var expose_1 = __webpack_require__(9602);
Object.defineProperty(exports, "expose", ({ enumerable: true, get: function () { return expose_1.expose; } }));
Object.defineProperty(exports, "exposeIt", ({ enumerable: true, get: function () { return expose_1.exposeIt; } }));
Object.defineProperty(exports, "exposeAll", ({ enumerable: true, get: function () { return expose_1.exposeAll; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6991:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getClassStaticNames = exports.makeClassDecorator = exports.makeStaticDecorator = exports.transferBrand = exports.brand = exports.err = exports.join = exports.str = exports.signature = void 0;
function error(msg) {
    const e = new Error(msg);
    e.name = 'ContractError';
    return e;
}
function signature(f) {
    const s = f.toString();
    return s.slice(s.indexOf('(') + 1, s.indexOf(')'));
}
exports.signature = signature;
function str(obj) {
    return JSON.stringify(obj);
}
exports.str = str;
function join(arr) {
    return arr.map(str).join(',');
}
exports.join = join;
function err(f, ...msgs) {
    const h = `${f.wax_name}(${f.wax_signature})`;
    const ms = [h, ...msgs];
    return error(ms.join('\n'));
}
exports.err = err;
function brand(f) {
    if (!('wax_name' in f))
        f.wax_name = f.name ?? f.toString();
    if (!('wax_signature' in f))
        f.wax_signature = signature(f);
}
exports.brand = brand;
function transferBrand(source, target) {
    target.wax_name = source.wax_name;
    target.wax_signature = source.wax_signature;
}
exports.transferBrand = transferBrand;
function makeStaticDecorator(transform) {
    return function (target, key, descriptor) {
        descriptor.value = transform(descriptor.value);
        return descriptor;
    };
}
exports.makeStaticDecorator = makeStaticDecorator;
function makeClassDecorator(transform) {
    return function (target, key, descriptor) {
        descriptor.value = transform(descriptor.value);
        return descriptor;
    };
}
exports.makeClassDecorator = makeClassDecorator;
function getClassStaticNames(constructor) {
    return Object.getOwnPropertyNames(constructor)
        .filter($ => $ !== 'length' && $ !== 'prototype' && $ !== 'name');
}
exports.getClassStaticNames = getClassStaticNames;
//# sourceMappingURL=util.js.map

/***/ }),

/***/ 3631:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.analyze = void 0;
const utils_1 = __webpack_require__(9407);
class Vabe {
    constructor(symbol) {
        this.symbol = symbol;
        this.order = NaN;
    }
    reset() {
        this.order = NaN;
    }
    setZero() {
        this.order = 0;
    }
    solve(order) {
        this.order = order;
    }
    solved() {
        return Number.isFinite(this.order);
    }
}
class Eqube {
    constructor(vabes) {
        this.vabes = vabes;
    }
    unsolvedVabes() {
        return this.vabes.filter($ => !$.solved());
    }
    solved() {
        return this.unsolvedVabes().length === 0;
    }
    solvable() {
        return this.unsolvedVabes().length === 1;
    }
    orders() {
        return this.vabes.map($ => $.order);
    }
    realOrders() {
        return this.orders().filter($ => Number.isFinite($));
    }
    maxOrder() {
        const orders = this.realOrders();
        if (orders.length === 0)
            return -1;
        return Math.max(...orders);
    }
    nextOrder() {
        return this.maxOrder() + 1;
    }
    forceSolve() {
        let nextOrder = this.nextOrder();
        for (let v of this.unsolvedVabes()) {
            v.solve(nextOrder);
        }
    }
    trySolve() {
        if (this.solvable()) {
            this.forceSolve();
            return true;
        }
        else {
            return false;
        }
    }
}
class PresetAnalyzer {
    constructor(vabes, equbes, preset) {
        this.vabes = vabes;
        this.equbes = equbes;
        this.preset = preset;
    }
    reset() {
        for (let v of this.vabes) {
            const isPreset = this.preset.includes(v);
            isPreset ? v.setZero() : v.reset();
        }
    }
    trySolveNext() {
        for (let eq of this.equbes) {
            const t = eq.trySolve();
            if (t === true)
                return true;
        }
        return false;
    }
    exportOrder() {
        const orders = {};
        for (let v of this.vabes) {
            orders[v.symbol] = v.order;
        }
        return orders;
    }
    /**
     * Get the tree of the system under current preset.
     * The process is deterministic, so a unique tree should be obtained.
     * The tree may or may not be healthy, i.e. fully solved.
     */
    getTree() {
        this.reset();
        for (let i = 0; i <= this.equbes.length; i++) {
            const t = this.trySolveNext();
            if (!t)
                break;
        }
        return this.exportOrder();
    }
}
class Analyzer {
    constructor(vabes, equbes) {
        this.vabes = vabes;
        this.equbes = equbes;
    }
    allVabeCombinations() {
        const n = this.vabes.length - this.equbes.length;
        return (0, utils_1.combinations)(this.vabes, n);
    }
    getTrees() {
        const combs = this.allVabeCombinations();
        const ts = [];
        for (let c of combs) {
            const ana = new PresetAnalyzer(this.vabes, this.equbes, c);
            ts.push(ana.getTree());
        }
        return ts;
    }
    isHealthy(tree) {
        // return true
        const orders = Object.values(tree);
        return orders.every($ => Number.isFinite($));
    }
    /**
     * Get all the healthy trees generated from all possible 'given variables' combinations.
     */
    getHealthyTrees() {
        return this.getTrees().filter($ => this.isHealthy($));
    }
}
/**
 * Get all the healthy trees of this system generated from all possible 'given variables' combinations.
 */
function analyze(fs) {
    const symbols = (0, utils_1.getAllVars)(fs);
    const vabes = symbols.map($ => new Vabe($));
    const equbes = [];
    for (let f of fs) {
        let syms = (0, utils_1.getVars)(f);
        const vs = syms.map($ => vabes.find(_ => _.symbol === $));
        let eq = new Eqube(vs);
        equbes.push(eq);
    }
    let analyzer = new Analyzer(vabes, equbes);
    return analyzer.getHealthyTrees();
}
exports.analyze = analyze;
//# sourceMappingURL=analyze.js.map

/***/ }),

/***/ 8476:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readTree = exports.solvingSymbol = exports.solutionFlow = exports.analyze = void 0;
var analyze_1 = __webpack_require__(3631);
Object.defineProperty(exports, "analyze", ({ enumerable: true, get: function () { return analyze_1.analyze; } }));
var reader_1 = __webpack_require__(3323);
Object.defineProperty(exports, "solutionFlow", ({ enumerable: true, get: function () { return reader_1.solutionFlow; } }));
Object.defineProperty(exports, "solvingSymbol", ({ enumerable: true, get: function () { return reader_1.solvingSymbol; } }));
Object.defineProperty(exports, "readTree", ({ enumerable: true, get: function () { return reader_1.readTree; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 3323:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readTree = exports.solvingSymbol = exports.solutionFlow = void 0;
const utils_1 = __webpack_require__(9407);
class TreeReader {
    constructor(tree) {
        this.tree = tree;
        this.symbols = Object.keys(tree);
        this.orders = Object.values(this.tree);
        this.realOrders = this.orders.filter($ => Number.isFinite($));
        this.maxOrder = Math.max(...this.realOrders);
    }
    symbolsWithOrder(order) {
        return this.symbols.filter($ => this.tree[$] === order);
    }
    givenSymbols() {
        return this.symbolsWithOrder(0);
    }
    topSymbols() {
        return this.symbolsWithOrder(this.maxOrder);
    }
    stepSymbols() {
        const arr = [];
        for (let i = 1; i < this.maxOrder; i++) {
            arr.push(...this.symbolsWithOrder(i));
        }
        return arr;
    }
    solvedSymbols() {
        return [...this.stepSymbols(), ...this.topSymbols()];
    }
}
class EquationReader {
    constructor(f, tree) {
        this.f = f;
        this.tree = tree;
        this.myTree = {};
        this.symbols = (0, utils_1.getVars)(f);
        for (let k in tree) {
            if (this.symbols.includes(k))
                this.myTree[k] = tree[k];
        }
        this.reader = new TreeReader(this.myTree);
    }
    /**
     * Is this equation actively solved, or passively satisfied?
     */
    isActiveSolve() {
        const m = this.maxOrder();
        return m !== 0 && this.symbolsWithOrder(m).length === 1;
    }
    maxOrder() {
        return this.reader.maxOrder;
    }
    symbolsWithOrder(order) {
        return this.symbols.filter($ => this.tree[$] === order);
    }
    /**
     * Which symbol is solved using this equation?
     */
    solvingSymbol() {
        if (!this.isActiveSolve())
            return undefined;
        return this.reader.topSymbols()[0];
    }
    /**
     * Which symbols are given in this equation?
     */
    givenSymbols() {
        return this.reader.givenSymbols();
    }
    /**
     * Which symbols are the steps when solving this equation?
     */
    stepSymbols() {
        return this.reader.stepSymbols();
    }
}
class Tracer {
    constructor(tree, eqReaders) {
        this.tree = tree;
        this.eqReaders = eqReaders;
        this.symbols = Object.keys(this.tree);
    }
    /**
     * Which equation is used solve this symbol in the final step?
     */
    revealer(symbol) {
        for (let eq of this.eqReaders) {
            if (eq.solvingSymbol() === symbol)
                return eq;
        }
        return undefined;
    }
    /**
     * In the revealer of this symbol, what symbols are the step symbols?
     */
    prerequisites(symbol) {
        return this.revealer(symbol)?.stepSymbols() ?? [];
    }
    /**
     * Get the ordered list of equation in the sequential step when solving for this symbol.
     */
    flowForOne(symbol) {
        const order = this.tree[symbol];
        if (order === 0)
            return [];
        if (order === 1)
            return [this.revealer(symbol)];
        let eqs = [];
        for (let s of this.prerequisites(symbol)) {
            eqs.push(...this.flowForOne(s));
        }
        eqs.push(this.revealer(symbol));
        return [...new Set(eqs)];
    }
    /**
     * Get the ordered list of equation in the sequential step when solving for these symbols.
     */
    flow(unknowns) {
        let eqs = [];
        for (let u of unknowns) {
            eqs.push(...this.flowForOne(u));
        }
        return [...new Set(eqs)];
    }
}
/**
 * Get the ordered list of function in the sequential step when solving for these symbols under the given tree.
 */
function solutionFlow(fs, tree, unknownSymbols) {
    const eqReaders = fs.map($ => new EquationReader($, tree));
    const tracer = new Tracer(tree, eqReaders);
    let flow = tracer.flow(unknownSymbols);
    return flow.map($ => $.f);
}
exports.solutionFlow = solutionFlow;
/**
 * Which symbol is solved using this function under the given tree?
 */
function solvingSymbol(f, tree) {
    const eqReader = new EquationReader(f, tree);
    return eqReader.solvingSymbol();
}
exports.solvingSymbol = solvingSymbol;
/**
 * Read basic info of a tree.
 */
function readTree(tree) {
    const reader = new TreeReader(tree);
    return {
        maxOrder: reader.maxOrder,
        givens: reader.givenSymbols(),
        tops: reader.topSymbols(),
        steps: reader.stepSymbols(),
        solved: reader.solvedSymbols()
    };
}
exports.readTree = readTree;
//# sourceMappingURL=reader.js.map

/***/ }),

/***/ 7017:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Bisection = void 0;
function randomUniform(range) {
    const [min, max] = range;
    return Math.random() * (max - min) + min;
}
function randomLog(range) {
    const [min, max] = range;
    const logmin = Math.log10(min);
    const logmax = Math.log10(max);
    const e = randomUniform([logmin, logmax]);
    return 10 ** e;
}
function randomLogNeg(range) {
    const [minNeg, maxNeg] = range;
    const min = -maxNeg;
    const max = -minNeg;
    return -randomLog([min, max]);
}
function randomValue(range) {
    let [min, max] = range;
    if (min > 0 && max > 0)
        return randomLog(range);
    if (min < 0 && max < 0)
        return randomLogNeg(range);
    return randomUniform(range);
}
function mid(a, b) {
    return a.map(($, i) => ($ + b[i]) / 2);
}
function equal(a, b) {
    return a.every(($, i) => $ === b[i])
        && a.length === b.length;
}
class Bisection {
    constructor(equation, ranges) {
        this.equation = equation;
        this.ranges = ranges;
        this.a = []; // positive point
        this.b = []; // negative point
        this.precision = 10;
    }
    randomPoint() {
        return this.ranges.map(randomValue);
    }
    randomSignedPoint(sign) {
        for (let i = 0; i < 100; i++) {
            const point = this.randomPoint();
            const value = this.equation(...point);
            const sameSign = value * sign > 0;
            if (sameSign)
                return point;
        }
        console.error("[bisection] No signed point in ranges: " + JSON.stringify(this.ranges));
        throw '';
    }
    intialize() {
        this.a = this.randomSignedPoint(1);
        this.b = this.randomSignedPoint(-1);
    }
    iterate() {
        const m = mid(this.a, this.b);
        const M = this.equation(...m);
        if (!Number.isFinite(M)) {
            console.error('[bisection] The function value is not a finite number!');
            throw '';
        }
        if (M >= 0)
            this.a = m;
        if (M <= 0)
            this.b = m;
    }
    done() {
        const precision_a = this.a.map($ => $.toPrecision(this.precision));
        const precision_b = this.b.map($ => $.toPrecision(this.precision));
        return equal(precision_a, precision_b);
    }
    assertRange() {
        const pass = this.ranges.some(([min, max]) => max > min);
        if (!pass) {
            console.error('[bisection] all variables are locked already');
            throw '';
        }
    }
    run() {
        this.assertRange();
        this.intialize();
        for (let i = 0; i < 100; i++) {
            this.iterate();
            if (this.done())
                return [...this.a];
        }
        console.error('[bisection] fail to find tolarable solution after 100 iteration');
        throw '';
    }
    exec() {
        try {
            return this.run();
        }
        catch {
            throw '[bisection] An error occur during bisection.';
        }
    }
}
exports.Bisection = Bisection;
//# sourceMappingURL=bisection.js.map

/***/ }),

/***/ 4665:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bisect = void 0;
const utils_1 = __webpack_require__(9407);
const bisection_1 = __webpack_require__(7017);
function toObject(keys, vals) {
    const obj = {};
    for (let i = 0; i < keys.length; i++) {
        obj[keys[i]] = vals[i];
    }
    return obj;
}
function narrowRange(ranges, preset) {
    const rngs = { ...ranges };
    for (let k in preset) {
        const val = preset[k];
        if (k in rngs && Number.isFinite(val))
            rngs[k] = [val, val];
    }
    return rngs;
}
/**
 * Find a solution of the function under these ranges and presets.
 */
function bisect(f, ranges, preset) {
    const vars = (0, utils_1.getVars)(f);
    const narrowedRngs = narrowRange(ranges, preset);
    const bounds = vars.map($ => narrowedRngs[$]);
    const bi = new bisection_1.Bisection(f, bounds);
    const sol = bi.exec();
    return toObject(vars, sol);
}
exports.bisect = bisect;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4626:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Fitter = void 0;
const Bisection_1 = __webpack_require__(4665);
const utils_1 = __webpack_require__(9407);
const searcher_1 = __webpack_require__(8125);
class Fitter {
    constructor(fs, ranges, preset) {
        this.fs = fs;
        this.ranges = ranges;
        this.preset = preset;
        this.vals = {};
        this.allVariables = (0, utils_1.getAllVars)(fs);
        this.reset();
    }
    reset() {
        this.vals = {};
        this.allVariables.forEach($ => this.vals[$] = NaN);
        this.setVals(this.preset);
    }
    setVals(vals) {
        this.vals = { ...this.vals, ...vals };
    }
    fitOne(f) {
        const sol = (0, Bisection_1.bisect)(f, this.ranges, this.vals);
        this.setVals(sol);
    }
    /**
     * Try to fit the system by fitting the equations one by one in a fittable order.
     * To avoid accidental range conflict, 10 retries are allowed.
     */
    fit() {
        const orderedFS = (0, searcher_1.getFittableOrder)(this.fs, this.preset);
        if (orderedFS === undefined)
            throw 'There is no fittable order for this system.';
        for (let i = 0; i < 10; i++) {
            try {
                this.reset();
                orderedFS.forEach($ => this.fitOne($));
                return this.vals;
            }
            catch {
            }
        }
        throw 'The system is not fittable in given range.';
    }
}
exports.Fitter = Fitter;
//# sourceMappingURL=fitter.js.map

/***/ }),

/***/ 2380:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fit = void 0;
const fitter_1 = __webpack_require__(4626);
/**
 * Fit the system of equations under given ranges and presets.
 */
function fit(fs, ranges, preset) {
    let fitter = new fitter_1.Fitter(fs, ranges, preset);
    return fitter.fit();
}
exports.fit = fit;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8125:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getFittableOrder = void 0;
const utils_1 = __webpack_require__(9407);
class Searcher {
    constructor(fs, givens = []) {
        this.fs = fs;
        this.givens = givens;
        this.founds = new Set();
    }
    reset() {
        this.founds = new Set(this.givens);
    }
    /**
     * A function is full if all variables in it are found.
     */
    isFull(f) {
        return (0, utils_1.getVars)(f).every($ => this.founds.has($));
    }
    fit(f) {
        (0, utils_1.getVars)(f).forEach($ => this.founds.add($));
    }
    /**
     * Check if the functions can be fitted one by one without being full.
     */
    isFittableOrder(fs) {
        this.reset();
        for (let f of fs) {
            if (this.isFull(f))
                return false;
            this.fit(f);
        }
        return true;
    }
    /**
     * Randomly get a fittable order under current presets.
     */
    getFittableOrder() {
        for (let fs of (0, utils_1.permute)(this.fs)) {
            if (this.isFittableOrder(fs))
                return fs;
        }
        return undefined;
    }
}
/**
 * Randomly get a fittable order for this set of functions under these presets.
 * If no fittable order exists, return undefined.
 */
function getFittableOrder(fs, preset) {
    const givens = [];
    for (let k in preset) {
        let v = preset[k];
        if (Number.isFinite(v))
            givens.push(k);
    }
    const sr = new Searcher(fs, givens);
    return sr.getFittableOrder();
}
exports.getFittableOrder = getFittableOrder;
//# sourceMappingURL=searcher.js.map

/***/ }),

/***/ 6912:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readTree = exports.solvingSymbol = exports.solutionFlow = exports.analyze = exports.fit = void 0;
var EquationFitter_1 = __webpack_require__(2380);
Object.defineProperty(exports, "fit", ({ enumerable: true, get: function () { return EquationFitter_1.fit; } }));
var EquationAnalyzer_1 = __webpack_require__(8476);
Object.defineProperty(exports, "analyze", ({ enumerable: true, get: function () { return EquationAnalyzer_1.analyze; } }));
Object.defineProperty(exports, "solutionFlow", ({ enumerable: true, get: function () { return EquationAnalyzer_1.solutionFlow; } }));
Object.defineProperty(exports, "solvingSymbol", ({ enumerable: true, get: function () { return EquationAnalyzer_1.solvingSymbol; } }));
Object.defineProperty(exports, "readTree", ({ enumerable: true, get: function () { return EquationAnalyzer_1.readTree; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9407:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.combinations = exports.permute = exports.getAllVars = exports.getVars = void 0;
function getVars(func) {
    const fnStr = func.toString();
    return fnStr
        .slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')'))
        .replaceAll(" ", "")
        .split(",");
}
exports.getVars = getVars;
function getAllVars(fs) {
    const vars = fs.map($ => getVars($)).flat();
    return [...new Set(vars)];
}
exports.getAllVars = getAllVars;
function permute(arr) {
    let result = [];
    if (arr.length === 0)
        return [];
    if (arr.length === 1)
        return [arr];
    for (let i = 0; i < arr.length; i++) {
        const current = arr[i];
        const remaining = [...arr.slice(0, i), ...arr.slice(i + 1)];
        const remainingPermuted = permute(remaining);
        for (let permuted of remainingPermuted) {
            result.push([current, ...permuted]);
        }
    }
    return result;
}
exports.permute = permute;
function combinations(arr, k) {
    if (k > arr.length || k <= 0)
        return [];
    if (k === arr.length)
        return [[...arr]];
    if (k === 1)
        return arr.map($ => [$]);
    const combs = [];
    let tail_combs = [];
    for (let i = 0; i <= arr.length - k + 1; i++) {
        let tail = arr.slice(i + 1);
        tail_combs = combinations(tail, k - 1);
        for (let j = 0; j < tail_combs.length; j++) {
            combs.push([arr[i], ...tail_combs[j]]);
        }
    }
    return combs;
}
exports.combinations = combinations;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 1335:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Canvas00 = void 0;
const trim_1 = __webpack_require__(8838);
// The scale factor of canvas size for clearer image.
const QUALITY = 3;
// The scale factor for width and height settings.
const INCH_SCALE = 10;
// REM_PIXEL is the default font size of the browser, usually 16px
const REM_PIXEL = parseFloat(getComputedStyle(document.documentElement).fontSize);
function inchToPx(inch) {
    return inch * INCH_SCALE * REM_PIXEL;
}
function pxToInch(px) {
    return px / INCH_SCALE / REM_PIXEL;
}
/**
 * Handle:
 * - all canvas width and height issue
 * - save and restore canvas image
 * - exporting
 */
class Canvas00 {
    constructor() {
        this.canvas = document.createElement('canvas');
        this.ctx = this.canvas.getContext("2d");
        // image store
        this.imgStore = null;
        // export
        this.backgroundURL = "";
    }
    // size in pixel
    reset() {
        this.ctx.scale(QUALITY, QUALITY);
        this.ctx.font = 'normal 10px Times New Roman';
    }
    get width() {
        return this.canvas.width / QUALITY;
    }
    set width(value) {
        this.canvas.width = value * QUALITY;
        this.reset();
    }
    get height() {
        return this.canvas.height / QUALITY;
    }
    set height(value) {
        this.canvas.height = value * QUALITY;
        this.reset();
    }
    // size in inch
    get widthInch() {
        return pxToInch(this.width);
    }
    set widthInch(value) {
        this.width = inchToPx(value);
    }
    get heightInch() {
        return pxToInch(this.height);
    }
    set heightInch(value) {
        this.height = inchToPx(value);
    }
    saveImg() {
        const w = this.canvas.width;
        const h = this.canvas.height;
        this.imgStore = this.ctx.getImageData(0, 0, w, h);
    }
    restoreImg() {
        if (this.imgStore !== null)
            this.ctx.putImageData(this.imgStore, 0, 0);
    }
    clearImg() {
        const w = this.canvas.width;
        const h = this.canvas.height;
        this.ctx.clearRect(0, 0, w, h);
    }
    export(html, placeholder, trim) {
        let cv = cloneCanvas(this.canvas);
        if (trim)
            (0, trim_1.trimCanvas)(cv);
        const displayWidth = Math.floor(cv.width / QUALITY);
        const displayHeight = Math.floor(cv.height / QUALITY);
        const src = `src="${cv.toDataURL()}"`;
        const width = ` width="${displayWidth}"`;
        const height = ` height="${displayHeight}"`;
        const bg = this.backgroundURL.length === 0 ?
            '' :
            ` style="background-image:url('${this.backgroundURL}');background-size:100% 100%;" `;
        return html.replace('src="' + placeholder + '"', src + width + height + bg);
    }
}
exports.Canvas00 = Canvas00;
/**
 * Return a clone of the canvas.
 */
function cloneCanvas(canvas) {
    let oldCanvas = canvas;
    //create a new canvas
    let newCanvas = document.createElement('canvas');
    let context = newCanvas.getContext('2d');
    //set dimensions
    newCanvas.width = oldCanvas.width;
    newCanvas.height = oldCanvas.height;
    //apply the old canvas to the new one
    context.drawImage(oldCanvas, 0, 0);
    //return the new canvas
    return newCanvas;
}
//# sourceMappingURL=canvas00.js.map

/***/ }),

/***/ 1880:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Canvas01 = void 0;
const canvas00_1 = __webpack_require__(1335);
// pixel conversion
function toPixelX(xmin, xmax, width, xCoord) {
    return (xCoord - xmin) / (xmax - xmin) * width;
}
function toPixelY(ymin, ymax, height, yCoord) {
    return height - (yCoord - ymin) / (ymax - ymin) * height;
}
/**
 * Handle:
 * - 2D coordinate definition
 * - 2D coordinate to px conversion
 */
class Canvas01 extends canvas00_1.Canvas00 {
    constructor() {
        // coord
        super(...arguments);
        this.xmin = 0;
        this.xmax = 0;
        this.ymin = 0;
        this.ymax = 0;
    }
    dx() {
        return this.xmax - this.xmin;
    }
    dy() {
        return this.ymax - this.ymin;
    }
    yxRatio() {
        return this.dy() / this.dx();
    }
    center() {
        let x = (this.xmin + this.xmax) / 2;
        let y = (this.ymin + this.ymax) / 2;
        return [x, y];
    }
    edgeTop(x = 0) {
        return [x, this.ymax];
    }
    edgeBottom(x = 0) {
        return [x, this.ymin];
    }
    edgeLeft(y = 0) {
        return [this.xmin, y];
    }
    edgeRight(y = 0) {
        return [this.xmax, y];
    }
    // capture
    capturePoints2D(pts) {
        if (pts.length === 0)
            return;
        let [first, ...rest] = pts;
        let xmin = first[0];
        let xmax = first[0];
        let ymin = first[1];
        let ymax = first[1];
        for (let [x, y] of rest) {
            if (x < xmin)
                xmin = x;
            if (x > xmax)
                xmax = x;
            if (y < ymin)
                ymin = y;
            if (y > ymax)
                ymax = y;
        }
        this.xmin = xmin;
        this.xmax = xmax;
        this.ymin = ymin;
        this.ymax = ymax;
    }
    fixCollapsedRange() {
        let { xmin, xmax, ymin, ymax } = this;
        let xSize = xmax - xmin;
        let ySize = ymax - ymin;
        if (xSize === 0 && ySize === 0) {
            xmax++;
            xmin--;
            ymax++;
            ymin--;
        }
        if (xSize === 0 && ySize !== 0) {
            xmax += ySize / 2;
            xmin -= ySize / 2;
        }
        if (xSize !== 0 && ySize === 0) {
            ymax += xSize / 2;
            ymin -= xSize / 2;
        }
        this.xmin = xmin;
        this.xmax = xmax;
        this.ymin = ymin;
        this.ymax = ymax;
    }
    // border
    addBorder(borderInch) {
        let borderXUnit = this.dx() / this.widthInch * borderInch;
        let borderYUnit = this.dy() / this.heightInch * borderInch;
        this.xmin -= borderXUnit;
        this.xmax += borderXUnit;
        this.ymin -= borderYUnit;
        this.ymax += borderYUnit;
        this.widthInch += 2 * borderInch;
        this.heightInch += 2 * borderInch;
    }
    // conversion
    point2DtoPx(point) {
        let [xCoord, yCoord] = point;
        let x = toPixelX(this.xmin, this.xmax, this.width, xCoord);
        let y = toPixelY(this.ymin, this.ymax, this.height, yCoord);
        return [x, y];
    }
}
exports.Canvas01 = Canvas01;
//# sourceMappingURL=canvas01.js.map

/***/ }),

/***/ 5595:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Canvas02 = void 0;
const canvas01_1 = __webpack_require__(1880);
const capture_1 = __webpack_require__(3570);
function proj(point3D, angle, depth) {
    let a = angle * Math.PI / 180;
    let s = Math.sin(a);
    let c = Math.cos(a);
    let [x, y, z] = point3D;
    let x_new = x + depth * y * c;
    let y_new = z + depth * y * s;
    return [x_new, y_new];
}
function forceProj(point, angle, depth) {
    return point.length === 3
        ? proj(point, angle, depth)
        : point;
}
/**
 * Handle:
 * - 3D coordinate to px conversion
 * - capturing things
 */
class Canvas02 extends canvas01_1.Canvas01 {
    constructor() {
        // setting
        super(...arguments);
        this.Proj_3D_Angle = 60;
        this.Proj_3D_Depth = 0.5;
    }
    // conversion
    pj(point) {
        return forceProj(point, this.Proj_3D_Angle, this.Proj_3D_Depth);
    }
    pjs(points) {
        return points.map($ => this.pj($));
    }
    toPx(point) {
        let pt = this.pj(point);
        return this.point2DtoPx(pt);
    }
    // capture
    capture(things) {
        let pts = (0, capture_1.thingsToPoints)(things);
        let pt2Ds = this.pjs(pts);
        this.capturePoints2D(pt2Ds);
    }
}
exports.Canvas02 = Canvas02;
//# sourceMappingURL=canvas02.js.map

/***/ }),

/***/ 2023:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Canvas03 = void 0;
const canvas02_1 = __webpack_require__(5595);
function segmentArray(seg) {
    if (Array.isArray(seg))
        return seg;
    if (typeof seg === 'number')
        return [seg, seg];
    if (typeof seg === 'boolean')
        return seg ? [5, 5] : [];
    return [];
}
// REM_PIXEL is the default font size of the browser, usually 16px
const REM_PIXEL = parseFloat(getComputedStyle(document.documentElement).fontSize);
/**
 * Handle:
 * - Settings
 */
class Canvas03 extends canvas02_1.Canvas02 {
    constructor() {
        // native settings
        super(...arguments);
        // user setting
        this.$TEXT_DIR = 0;
        this.$TEXT_LATEX = false;
        this.$ANGLE_MODE = 'normal';
        this.$LENGTH_UNIT = '';
        this.$BORDER = 0.2;
        this.$LINE_LABEL = 'auto';
        this._$LABEL_CENTER = this.center();
        // setting meta
        this.states = [];
    }
    get $WEIGHT() {
        return this.ctx.lineWidth;
    }
    set $WEIGHT(value) {
        this.ctx.lineWidth = value;
    }
    get $COLOR() {
        let c = this.ctx.fillStyle;
        return typeof c === 'string' ? c : '';
    }
    set $COLOR(value) {
        this.ctx.strokeStyle = value;
        this.ctx.fillStyle = value;
    }
    get $ALPHA() {
        return this.ctx.globalAlpha;
    }
    set $ALPHA(value) {
        this.ctx.globalAlpha = value;
    }
    get $DASH() {
        return this.ctx.getLineDash();
    }
    set $DASH(value) {
        let seg = segmentArray(value);
        this.ctx.setLineDash(seg);
    }
    get $TEXT_ALIGN() {
        return this.ctx.textAlign;
    }
    set $TEXT_ALIGN(value) {
        this.ctx.textAlign = value;
    }
    get $TEXT_BASELINE() {
        return this.ctx.textBaseline;
    }
    set $TEXT_BASELINE(value) {
        this.ctx.textBaseline = value;
    }
    get $TEXT_PIXEL() {
        let match = this.ctx.font.match(/(\d+)px/);
        if (match === null)
            return NaN;
        return Number.parseInt(match[1]);
    }
    set $TEXT_PIXEL(value) {
        value = Math.round(value);
        this.ctx.font = this.ctx.font.replace(/\d+px/g, value + 'px');
    }
    get $TEXT_SIZE() {
        return this.$TEXT_PIXEL / REM_PIXEL;
    }
    set $TEXT_SIZE(value) {
        this.$TEXT_PIXEL = value * REM_PIXEL;
    }
    get $TEXT_ITALIC() {
        return this.ctx.font.includes('italic');
    }
    set $TEXT_ITALIC(value) {
        this.ctx.font = this.ctx.font.replace('italic ', '');
        if (value)
            this.ctx.font = 'italic ' + this.ctx.font;
    }
    // parent setting
    get $3D_ANGLE() {
        return this.Proj_3D_Angle;
    }
    set $3D_ANGLE(value) {
        this.Proj_3D_Angle = value;
    }
    get $3D_DEPTH() {
        return this.Proj_3D_Depth;
    }
    set $3D_DEPTH(value) {
        this.Proj_3D_Depth = value;
    }
    set $LABEL_CENTER(centers) {
        let empty = centers.length === 0;
        this._$LABEL_CENTER = empty ? this.center() : mid(this.pjs(centers));
    }
    get $LABEL_CENTER() {
        return [this._$LABEL_CENTER];
    }
    save() {
        this.ctx.save();
        this.states.push({
            $3D_ANGLE: this.$3D_ANGLE,
            $3D_DEPTH: this.$3D_DEPTH,
            $TEXT_DIR: this.$TEXT_DIR,
            $TEXT_LATEX: this.$TEXT_LATEX,
            $LABEL_CENTER: this.$LABEL_CENTER,
            $ANGLE_MODE: this.$ANGLE_MODE,
            $LENGTH_UNIT: this.$LENGTH_UNIT,
            $BORDER: this.$BORDER,
            $LINE_LABEL: this.$LINE_LABEL
        });
    }
    restore() {
        this.ctx.restore();
        let state = this.states.pop();
        if (state === undefined)
            return;
        this.$3D_ANGLE = state.$3D_ANGLE;
        this.$3D_DEPTH = state.$3D_DEPTH;
        this.$TEXT_DIR = state.$TEXT_DIR;
        this.$TEXT_LATEX = state.$TEXT_LATEX;
        this.$LABEL_CENTER = state.$LABEL_CENTER;
        this.$ANGLE_MODE = state.$ANGLE_MODE;
        this.$LENGTH_UNIT = state.$LENGTH_UNIT;
        this.$BORDER = state.$BORDER;
        this.$LINE_LABEL = state.$LINE_LABEL;
    }
}
exports.Canvas03 = Canvas03;
function mid(Points) {
    if (Points.length === 0)
        return [0, 0];
    let X = 0;
    let Y = 0;
    for (let p of Points) {
        X += p[0];
        Y += p[1];
    }
    let n = Points.length;
    return [X / n, Y / n];
}
//# sourceMappingURL=canvas03.js.map

/***/ }),

/***/ 5138:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Canvas04 = void 0;
const canvas03_1 = __webpack_require__(2023);
function rad(degree) {
    return degree * Math.PI / 180;
}
function deg(radian) {
    return radian / Math.PI * 180;
}
function dotVec([x1, y1], [x2, y2]) {
    return [x2 - x1, y2 - y1];
}
function dir(A, B) {
    let [dx, dy] = dotVec(A, B);
    let rad = -Math.atan2(dy, dx);
    return deg(rad);
}
function scaleDot([x, y], ratio) {
    return [x * ratio, y * ratio];
}
function dist(A, B) {
    let [dx, dy] = dotVec(A, B);
    return (dx * dx + dy * dy) ** 0.5;
}
function addDot([x1, y1], [x2, y2]) {
    return [x1 + x2, y1 + y2];
}
function scaleDotTo(A, length) {
    let oldLength = dist([0, 0], A);
    let ratio = length / oldLength;
    return scaleDot(A, ratio);
}
function moveDot(A, B, dist) {
    let AB = dotVec(A, B);
    let d = scaleDotTo(AB, dist);
    return addDot(A, d);
}
/**
 * Handle:
 * - transform
 * - drawing in pixel and coordinates
 */
class Canvas04 extends canvas03_1.Canvas03 {
    // transform
    translateTo(pt) {
        let [x, y] = this.toPx(pt);
        this.ctx.translate(x, y);
    }
    rotate(degreePolar) {
        this.ctx.rotate(-rad(degreePolar));
    }
    rotateTo(start, end) {
        let [x1, y1] = this.toPx(start);
        let [x2, y2] = this.toPx(end);
        let dx = x2 - x1;
        let dy = y2 - y1;
        let q = Math.atan2(dy, dx);
        this.ctx.rotate(q);
    }
    alignTo(start, end) {
        this.translateTo(end);
        this.rotateTo(start, end);
    }
    // straight drawer in px
    moveToPx([x, y]) {
        this.ctx.moveTo(x, y);
    }
    lineToPx([x, y]) {
        this.ctx.lineTo(x, y);
    }
    createPathPx(dots) {
        this.ctx.beginPath();
        if (dots.length === 0)
            return;
        let [first, ...rest] = dots;
        this.moveToPx(first);
        for (let d of rest) {
            this.lineToPx(d);
        }
    }
    createShapePx(dots) {
        this.createPathPx(dots);
        this.ctx.closePath();
    }
    // straight drawer in coord
    moveTo(pt) {
        let [x, y] = this.toPx(pt);
        this.ctx.moveTo(x, y);
    }
    lineTo(pt) {
        let [x, y] = this.toPx(pt);
        this.ctx.lineTo(x, y);
    }
    createPath(pts) {
        this.ctx.beginPath();
        if (pts.length === 0)
            return;
        let [first, ...rest] = pts;
        this.moveTo(first);
        for (let p of rest) {
            this.lineTo(p);
        }
    }
    createShape(pts) {
        this.createPath(pts);
        this.ctx.closePath();
    }
    // arc drawer
    createArc(center, radius, angle) {
        let [x, y] = this.toPx(center);
        let [q1, q2] = angle;
        q1 = -rad(q1);
        q2 = -rad(q2);
        this.ctx.beginPath();
        this.ctx.arc(x, y, radius, q1, q2, true);
    }
    createArcByPoints(P, O, Q, radius) {
        let p = this.toPx(P);
        let o = this.toPx(O);
        let q = this.toPx(Q);
        let q1 = dir(o, p);
        let q2 = dir(o, q);
        this.createArc(O, radius, [q1, q2]);
    }
    createRightAnglePath(P, O, Q, size) {
        let p = this.toPx(P);
        let o = this.toPx(O);
        let q = this.toPx(Q);
        let a = moveDot(o, p, size);
        let b = moveDot(o, q, size);
        let c = addDot(b, dotVec(o, a));
        this.createPathPx([a, c, b]);
    }
    // finishing
    doStroke() {
        this.ctx.stroke();
    }
    doSolid() {
        let dash = this.$DASH;
        this.$DASH = false;
        this.ctx.stroke();
        this.$DASH = dash;
    }
    doDash() {
        let dash = this.$DASH;
        this.$DASH = true;
        this.ctx.stroke();
        this.$DASH = dash;
    }
    doFill() {
        this.ctx.fill();
    }
    doShade() {
        const DEFAULT_SHADE_ALPHA = 0.1;
        let alpha = this.$ALPHA;
        this.$ALPHA = DEFAULT_SHADE_ALPHA;
        this.ctx.fill();
        this.$ALPHA = alpha;
    }
}
exports.Canvas04 = Canvas04;
//# sourceMappingURL=canvas04.js.map

/***/ }),

/***/ 9795:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Canvas05 = void 0;
const canvas04_1 = __webpack_require__(5138);
function sin(degree) {
    return Math.sin(degree / 180 * Math.PI);
}
function cos(degree) {
    return Math.cos(degree / 180 * Math.PI);
}
// CanvasLatex is a library that must be imported from script tag
function LatexWidget(text, color, size) {
    text = `\\color{${color}} ` + text;
    // @ts-ignore
    const widget = new CanvasLatex.default(text, {
        displayMode: true,
        debugBounds: false,
        baseSize: size
    });
    return widget;
}
function latexTuneX(x, width, textAlign) {
    if (textAlign === 'left')
        return -x;
    if (textAlign === 'right')
        return -x - width;
    if (textAlign === 'center')
        return -x - width / 2;
    return -x - width / 2;
}
function latexTuneY(y, height, textBaseline) {
    if (textBaseline === 'top')
        return -y;
    if (textBaseline === 'bottom')
        return -y - height;
    if (textBaseline === 'middle')
        return -y - height / 2;
    return -y / 2;
}
function isAlphabet(_) {
    return _.length === 1 && (_.toLowerCase() !== _.toUpperCase());
}
/**
 * Handle:
 * - text basic
 */
class Canvas05 extends canvas04_1.Canvas04 {
    // text in pixel
    plainPx(text, dot) {
        text = String(text);
        if (text === '')
            return;
        this.save();
        this.ctx.translate(...dot);
        this.rotate(this.$TEXT_DIR);
        this.ctx.fillText(text, 0, 0);
        this.restore();
    }
    latexPx(text, dot) {
        text = String(text);
        if (text === '')
            return;
        const widget = LatexWidget(text, this.$COLOR, this.$TEXT_PIXEL);
        const bounds = widget.getBounds();
        if (bounds === null) {
            console.error('[CanvasLatex] bounds === null! This is an unexpected error.');
            return;
        }
        this.save();
        this.ctx.translate(...dot);
        this.rotate(this.$TEXT_DIR);
        let xTune = latexTuneX(bounds.x, bounds.width, this.ctx.textAlign);
        let yTune = latexTuneY(bounds.y, bounds.height, this.ctx.textBaseline);
        this.ctx.translate(xTune, yTune);
        widget.draw(this.ctx);
        this.restore();
    }
    textPx(text, dot) {
        if (this.$TEXT_LATEX) {
            this.latexPx(text, dot);
        }
        else {
            this.plainPx(text, dot);
        }
    }
    // text in coord
    text(text, point, offset) {
        let [x, y] = this.toPx(point);
        x += offset[0];
        y -= offset[1];
        this.textPx(text, [x, y]);
    }
    // write in coord
    write(text, point) {
        this.text(text, point, [0, 0]);
    }
    // label in coord
    labelOffset(text, radius, dir) {
        let textWidth = this.textSemi(text);
        let x = (radius + textWidth - 5) * cos(dir);
        let y = radius * sin(dir);
        return [x, y];
    }
    label(text, point, radius, dir) {
        let italic = this.$TEXT_ITALIC;
        if (isAlphabet(text))
            this.$TEXT_ITALIC = true;
        let offset = this.labelOffset(text, radius, dir);
        this.text(text, point, offset);
        this.$TEXT_ITALIC = italic;
    }
    // text width
    plainSemi(text) {
        return this.ctx.measureText(text).width / 2;
    }
    latexSemi(text) {
        const widget = LatexWidget(text, this.$COLOR, this.$TEXT_PIXEL);
        const bounds = widget.getBounds();
        return bounds === null ? 0 : bounds.width / 2;
    }
    textSemi(text) {
        return this.$TEXT_LATEX ?
            this.latexSemi(text) :
            this.plainSemi(text);
    }
}
exports.Canvas05 = Canvas05;
//# sourceMappingURL=canvas05.js.map

/***/ }),

/***/ 1253:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Canvas06 = void 0;
const canvas05_1 = __webpack_require__(9795);
// math
function deg(radian) {
    return radian / Math.PI * 180;
}
function dotVec([x1, y1], [x2, y2]) {
    return [x2 - x1, y2 - y1];
}
function dir(A, B) {
    let [dx, dy] = dotVec(A, B);
    let rad = -Math.atan2(dy, dx);
    return deg(rad);
}
// polar
function vec(p1, p2) {
    let [x1, y1] = p1;
    let [x2, y2] = p2;
    return [x2 - x1, y2 - y1];
}
function cross2D(vec1, vec2) {
    let [x1, y1] = vec1;
    let [x2, y2] = vec2;
    return x1 * y2 - y1 * x2;
}
function IsReflex(A, O, B) {
    let OA = vec(O, A);
    let OB = vec(O, B);
    return cross2D(OA, OB) < 0;
}
function polarFlip(A, O, B, mode) {
    let isReflex = IsReflex(A, O, B);
    if (mode === 'normal' && isReflex)
        return true;
    if (mode === 'reflex' && !isReflex)
        return true;
    return false;
}
/**
 * Handle:
 * - direction helper
 */
class Canvas06 extends canvas05_1.Canvas05 {
    // dir
    getDir(start, end) {
        let A = this.toPx(start);
        let B = this.toPx(end);
        return dir(A, B);
    }
    getCenterDir(point) {
        let C = this.$LABEL_CENTER[0];
        return this.getDir(C, point);
    }
    getDirAngle(A, O, B) {
        let flip = this.polarFlip(A, O, B);
        let [P, Q] = flip ? [B, A] : [A, B];
        // draw like polar
        let a = this.getDir(O, P);
        let b = this.getDir(O, Q);
        return a <= b ? b - a : 360 + b - a;
    }
    getMidDir(A, O, B) {
        let flip = this.polarFlip(A, O, B);
        let [P, Q] = flip ? [B, A] : [A, B];
        // draw like polar
        let a1 = this.getDir(O, P);
        let a2 = this.getDir(O, Q);
        if (a2 < a1)
            a2 += 360;
        return (a1 + a2) / 2;
    }
    getLineDir(A, B) {
        let q = this.getDir(A, B);
        let mode = this.$LINE_LABEL;
        if (mode === 'left')
            return q + 90;
        if (mode === 'right')
            return q - 90;
        let [a, b, c] = this.pjs([A, B, this.$LABEL_CENTER[0]]);
        let right = IsReflex(a, b, c);
        return right ? q - 90 : q + 90;
    }
    polarFlip(A, O, B) {
        let [a, o, b] = this.pjs([A, O, B]);
        return polarFlip(a, o, b, this.$ANGLE_MODE);
    }
    // string
    unitize(text) {
        if (typeof text === 'number') {
            text = String(text);
            let unit = this.$LENGTH_UNIT;
            if (unit === '')
                return text;
            return this.$TEXT_LATEX
                ? text + `~\\text{${unit}}`
                : text + ' ' + unit;
        }
        else {
            return text;
        }
    }
    // Find the extra pixel allowance when drawing angle arc and angle label for small angles.
    getAngleAllowance(A, O, B, threshold, pixelPerDeg) {
        let angle = this.getDirAngle(A, O, B);
        let angleUnderThreshold = Math.max(threshold - angle, 0);
        return angleUnderThreshold * pixelPerDeg;
    }
}
exports.Canvas06 = Canvas06;
//# sourceMappingURL=canvas06.js.map

/***/ }),

/***/ 7610:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Canvas07 = void 0;
const canvas06_1 = __webpack_require__(1253);
// step
function isOdd(n) {
    return n % 2 !== 0;
}
function floorHalf(n) {
    if (isOdd(n))
        n = n - 1;
    return n / 2;
}
function steps(n) {
    let N = floorHalf(n);
    let arr = [];
    if (isOdd(n)) {
        arr.push(0);
        for (let i = 1; i <= N; i++) {
            arr.push(i);
            arr.push(-i);
        }
    }
    else {
        for (let i = 1; i <= N; i++) {
            let s = i - 0.5;
            arr.push(s);
            arr.push(-s);
        }
    }
    return arr;
}
// vector
function mid(A, B) {
    if (A.length === 3 && B.length === 3) {
        let [x, y, z] = A;
        let [X, Y, Z] = B;
        return [(x + X) / 2, (y + Y) / 2, (z + Z) / 2];
    }
    else {
        let [x, y] = A;
        let [X, Y] = B;
        return [(x + X) / 2, (y + Y) / 2];
    }
}
/**
 * Handle:
 * - basic elements
 */
class Canvas07 extends canvas06_1.Canvas06 {
    linePx(dots) {
        this.createPathPx(dots);
        this.doStroke();
    }
    solidPx(dots) {
        this.createPathPx(dots);
        this.doSolid();
    }
    line(pts) {
        this.createPath(pts);
        this.doStroke();
    }
    lineVert(x) {
        let A = this.edgeBottom(x);
        let B = this.edgeTop(x);
        this.line([A, B]);
    }
    lineHori(y) {
        let A = this.edgeLeft(y);
        let B = this.edgeRight(y);
        this.line([A, B]);
    }
    solid(pts) {
        this.createPath(pts);
        this.doSolid();
    }
    dash(pts) {
        this.createPath(pts);
        this.doDash();
    }
    shape(pts) {
        this.createShape(pts);
        this.doStroke();
    }
    fill(pts) {
        this.createShape(pts);
        this.doFill();
    }
    shade(pts) {
        this.createShape(pts);
        this.doShade();
    }
    arc(P, O, Q, radius) {
        this.createArcByPoints(P, O, Q, radius);
        this.doStroke();
    }
    circle(center, radius) {
        this.createArc(center, radius, [0, 360]);
        this.doStroke();
    }
    disc(center, radius) {
        this.createArc(center, radius, [0, 360]);
        this.doFill();
    }
    halo(center, radius) {
        this.createArc(center, radius, [0, 360]);
        this.doShade();
    }
    // advanced
    arrowHead(start, end, size, offset) {
        this.save();
        this.translateTo(end);
        this.rotateTo(start, end);
        let A = [offset - 2 * size, -size];
        let O = [offset, 0];
        let B = [offset - 2 * size, +size];
        this.solidPx([A, O, B]);
        this.restore();
    }
    arrow(start, end, size) {
        this.line([start, end]);
        this.arrowHead(start, end, size, 0);
    }
    anglePolar(A, O, B, radius, count, space) {
        for (let s of steps(count)) {
            let r = radius + s * space;
            this.arc(A, O, B, r);
        }
    }
    angle(A, O, B, radius, count, space) {
        let flip = this.polarFlip(A, O, B);
        let [P, Q] = flip ? [B, A] : [A, B];
        // draw like polar
        this.anglePolar(P, O, Q, radius, count, space);
    }
    rightAngle(A, O, B, size) {
        this.createRightAnglePath(A, O, B, size);
        this.doSolid();
    }
    parallel(start, end, size, count, space) {
        let M = mid(start, end);
        for (let i = 0; i < count; i++) {
            this.arrowHead(start, M, size, i * space);
        }
    }
    tick(start, end, length, offset) {
        this.save();
        this.translateTo(end);
        this.rotateTo(start, end);
        let A = [offset, -length];
        let B = [offset, +length];
        this.solidPx([A, B]);
        this.restore();
    }
    tickVert(pt, length) {
        let [x, y] = pt;
        this.tick([x - 1, y], pt, length, 0);
    }
    tickHori(pt, length) {
        let [x, y] = pt;
        this.tick([x, y - 1], pt, length, 0);
    }
    equalSide(start, end, length, count, space) {
        let M = mid(start, end);
        for (let s of steps(count)) {
            this.tick(start, M, length, s * space);
        }
    }
    compass(center, xSize, ySize, arrowSize) {
        this.save();
        this.translateTo(center);
        let E = [xSize, 0];
        let W = [-xSize, 0];
        let S = [0, ySize];
        let N = [0, -ySize];
        let A = [-arrowSize, -ySize + arrowSize * 2];
        let B = [+arrowSize, -ySize + arrowSize * 2];
        this.solidPx([E, W]);
        this.solidPx([N, S]);
        this.solidPx([A, N, B]);
        this.restore();
    }
}
exports.Canvas07 = Canvas07;
//# sourceMappingURL=canvas07.js.map

/***/ }),

/***/ 8227:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Canvas08 = void 0;
const canvas07_1 = __webpack_require__(7610);
const LABEL_OFFSET_PX = 15;
const X_MARK_OFFSET_PX = 15;
const Y_MARK_OFFSET_PX = 10;
const TICK_LENGTH_PX = 5;
/**
 * Return an array of ticks position at `interval` within `[min,max]`.
 * Zero is always a potential tick position.
 * ```
 * getTicks(2,10,3) // [3,6,9]
 * ```
 */
function getTicks(min, max, interval) {
    const start = Math.floor(min / interval) * interval;
    const arr = [];
    for (let i = start; i <= max; i += interval) {
        i = parseFloat(i.toPrecision(3));
        if (i === min || i === max)
            continue;
        if (i === 0)
            continue;
        arr.push(i);
    }
    return arr;
}
/**
 * Handle:
 * - Axis
 */
class Canvas08 extends canvas07_1.Canvas07 {
    xAxis() {
        let A = this.edgeLeft(0);
        let B = this.edgeRight(0);
        this.arrow(A, B, 5);
    }
    yAxis() {
        let A = this.edgeBottom(0);
        let B = this.edgeTop(0);
        this.arrow(A, B, 5);
    }
    xAxisLabel(text) {
        this.save();
        this.$TEXT_ALIGN = "right";
        this.$TEXT_BASELINE = "middle";
        this.label(text, this.edgeRight(0), LABEL_OFFSET_PX, 90);
        this.restore();
    }
    yAxisLabel(text) {
        this.save();
        this.$TEXT_ALIGN = "left";
        this.$TEXT_BASELINE = "top";
        this.label(text, this.edgeTop(0), LABEL_OFFSET_PX, 0);
        this.restore();
    }
    xTicks(interval) {
        return getTicks(this.xmin, this.xmax, interval);
    }
    yTicks(interval) {
        return getTicks(this.ymin, this.ymax, interval);
    }
    xAxisTick(interval) {
        for (let x of this.xTicks(interval)) {
            this.tickVert([x, 0], TICK_LENGTH_PX);
        }
    }
    yAxisTick(interval) {
        for (let y of this.yTicks(interval)) {
            this.tickHori([0, y], TICK_LENGTH_PX);
        }
    }
    xAxisTickMark(interval) {
        this.save();
        this.$TEXT_ITALIC = false;
        this.$TEXT_ALIGN = "center";
        this.$TEXT_BASELINE = "middle";
        for (let x of this.xTicks(interval)) {
            this.label(String(x), [x, 0], X_MARK_OFFSET_PX, 270);
        }
        this.restore();
    }
    yAxisTickMark(interval) {
        this.save();
        this.$TEXT_ITALIC = false;
        this.$TEXT_ALIGN = "right";
        this.$TEXT_BASELINE = "middle";
        for (let y of this.yTicks(interval)) {
            this.label(String(y), [0, y], Y_MARK_OFFSET_PX, 180);
        }
        this.restore();
    }
    xAxisGrid(interval) {
        this.save();
        this.$COLOR = "#d3d5db";
        this.lineVert(0);
        for (let x of this.xTicks(interval)) {
            this.lineVert(x);
        }
        this.restore();
    }
    yAxisGrid(interval) {
        this.save();
        this.$COLOR = "#d3d5db";
        this.lineHori(0);
        for (let y of this.yTicks(interval)) {
            this.lineHori(y);
        }
        this.restore();
    }
}
exports.Canvas08 = Canvas08;
//# sourceMappingURL=canvas08.js.map

/***/ }),

/***/ 7267:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Canvas09 = void 0;
const canvas08_1 = __webpack_require__(8227);
const trace_1 = __webpack_require__(2921);
const sectoroid_1 = __webpack_require__(3065);
/**
 * Handle:
 * - plot
 */
class Canvas09 extends canvas08_1.Canvas08 {
    plot(func, tStart = this.xmin, tEnd = this.xmax, dots = 1000) {
        let points = (0, trace_1.trace)(func, [tStart, tEnd], dots);
        let { xmin, xmax, ymin, ymax } = this;
        let X = xmax - xmin;
        let Y = ymax - ymin;
        function outOfRange([x, y]) {
            return x > xmax + X || x < xmin - X || y > ymax + Y || y < ymin - Y;
        }
        function isIll(p) {
            let [x, y] = p;
            return !Number.isFinite(x) || !Number.isFinite(y) || outOfRange(p);
        }
        let filteredPoints = points.map(p => isIll(p) ? null : p);
        let segments = (0, trace_1.splitNull)(filteredPoints);
        for (let seg of segments)
            this.line(seg);
    }
    sectoroidLine(O, A, B, vertices) {
        let pts = (0, sectoroid_1.sectoroid)(O, A, B, vertices);
        this.line(pts);
    }
    sectoroidFill(O, A, B, vertices) {
        let pts = (0, sectoroid_1.sectoroid)(O, A, B, vertices);
        this.fill(pts);
    }
    sectoroidShade(O, A, B, vertices) {
        let pts = (0, sectoroid_1.sectoroid)(O, A, B, vertices);
        this.shade(pts);
    }
}
exports.Canvas09 = Canvas09;
//# sourceMappingURL=canvas09.js.map

/***/ }),

/***/ 7964:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Canvas10 = void 0;
const canvas09_1 = __webpack_require__(7267);
function degrize(text) {
    return typeof text === 'number'
        ? text + '°'
        : text;
}
function mid(A, B) {
    if (A.length === 3 && B.length === 3) {
        let [x, y, z] = A;
        let [X, Y, Z] = B;
        return [(x + X) / 2, (y + Y) / 2, (z + Z) / 2];
    }
    else {
        let [x, y] = A;
        let [X, Y] = B;
        return [(x + X) / 2, (y + Y) / 2];
    }
}
/**
 * Handle:
 * - label
 */
class Canvas10 extends canvas09_1.Canvas09 {
    labelPoint(text, point, dir, radius) {
        this.label(text, point, radius, dir);
    }
    labelPointAuto(text, point, radius) {
        let dir = this.getCenterDir(point);
        this.label(text, point, radius, dir);
    }
    labelAngle(text, [A, O, B], dir, radius) {
        let T = degrize(text);
        let mid = this.getMidDir(A, O, B);
        this.label(T, O, radius, mid + dir);
    }
    labelLine(text, [A, B], dir, radius) {
        text = this.unitize(text);
        let M = mid(A, B);
        let normal = this.getLineDir(A, B);
        this.label(text, M, radius, normal + dir);
    }
}
exports.Canvas10 = Canvas10;
//# sourceMappingURL=canvas10.js.map

/***/ }),

/***/ 6752:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Pencil = void 0;
const canvas10_1 = __webpack_require__(7964);
class Pencil {
    constructor() {
        this.cv = new canvas10_1.Canvas10();
        this.RANGE_DONE = false;
        this.SIZE_DONE = false;
    }
    pj(pt) {
        return this.cv.pj(pt);
    }
    pjs(pts) {
        return this.cv.pjs(pts);
    }
    /**
     * Set the coordinate range of the canvas.
     * @param xRange - [xmin,xmax] in coordinates
     * @param yRange - [ymin,ymax] in coordinates
     */
    initRange([xmin, xmax], [ymin, ymax]) {
        this.cv.xmin = xmin;
        this.cv.xmax = xmax;
        this.cv.ymin = ymin;
        this.cv.ymax = ymax;
        this.RANGE_DONE = true;
    }
    /**
     * Set the physical size of the canvas.
     * @param widthInch - width of canvas in scaled unit, 1 unit = SIZE_SCALE (=10) * REM_PIXEL pixel
     * @param heightInch - height of canvas in scaled unit.
     */
    initSize(widthInch, heightInch) {
        if (!this.RANGE_DONE)
            throw '[Pencil] Range must be set before Size';
        this.cv.widthInch = widthInch;
        this.cv.heightInch = heightInch;
        this.SIZE_DONE = true;
    }
    /**
     * Set a border by extending the range and size.
     * The original image will be unchanged. The size will be bigger.
     */
    initOuterBorder() {
        if (!this.RANGE_DONE)
            throw '[Pencil] Range must be set before setting border';
        if (!this.SIZE_DONE)
            throw '[Pencil] Size must be set before setting border';
        this.cv.addBorder(this.cv.$BORDER);
    }
}
exports.Pencil = Pencil;
;
//# sourceMappingURL=pencil.js.map

/***/ }),

/***/ 5619:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Pencil = void 0;
var pencil_1 = __webpack_require__(6752);
Object.defineProperty(exports, "Pencil", ({ enumerable: true, get: function () { return pencil_1.Pencil; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 3570:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.thingsToPoints = void 0;
function getCircleCorners(center, radius) {
    let [h, k] = center;
    let r = radius;
    return [
        [h + r, k + r],
        [h + r, k - r],
        [h - r, k + r],
        [h - r, k - r]
    ];
}
function getSphereCorners(center, radius) {
    let [a, b, c] = center;
    let r = radius;
    return [
        [a + r, b + r, c + r],
        [a + r, b + r, c - r],
        [a + r, b - r, c + r],
        [a + r, b - r, c - r],
        [a - r, b + r, c + r],
        [a - r, b + r, c - r],
        [a - r, b - r, c + r],
        [a - r, b - r, c - r],
    ];
}
function isPoint2D(thing) {
    return Array.isArray(thing)
        && thing.length === 2
        && typeof thing[0] === 'number'
        && typeof thing[1] === 'number';
}
function isPoint3D(thing) {
    return Array.isArray(thing)
        && thing.length === 3
        && typeof thing[0] === 'number'
        && typeof thing[1] === 'number'
        && typeof thing[2] === 'number';
}
function isCircle(thing) {
    return thing.length === 2
        && isPoint2D(thing[0])
        && typeof thing[1] === 'number';
}
function isSphere(thing) {
    return thing.length === 2
        && isPoint3D(thing[0])
        && typeof thing[1] === 'number';
}
function thingsToPoints(things) {
    let pts = [];
    for (let th of things) {
        if (isPoint2D(th)) {
            pts.push(th);
            continue;
        }
        if (isPoint3D(th)) {
            pts.push(th);
            continue;
        }
        if (isCircle(th)) {
            pts.push(...getCircleCorners(...th));
            continue;
        }
        if (isSphere(th)) {
            pts.push(...getSphereCorners(...th));
            continue;
        }
    }
    return pts;
}
exports.thingsToPoints = thingsToPoints;
//# sourceMappingURL=capture.js.map

/***/ }),

/***/ 3065:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sectoroid = void 0;
const trace_1 = __webpack_require__(2921);
function vec(p1, p2) {
    let [x1, y1] = p1;
    let [x2, y2] = p2;
    return [x2 - x1, y2 - y1];
}
function deg(radian) {
    return radian / Math.PI * 180;
}
function magnitude([x, y]) {
    return (x * x + y * y) ** 0.5;
}
function argument([x, y]) {
    let rad = Math.atan2(y, x);
    let angle = deg(rad);
    if (angle < 0)
        angle += 360;
    return angle;
}
function sectoroid(O, A, B, vertices) {
    let v1 = vec(O, A);
    let v2 = vec(O, B);
    let r = magnitude(v1);
    let q1 = argument(v1);
    let q2 = argument(v2);
    if (q2 < q1)
        q2 += 360;
    let points = (0, trace_1.traceCircle)(O, r, [q1, q2]);
    return [A, ...points, B, ...vertices];
}
exports.sectoroid = sectoroid;
//# sourceMappingURL=sectoroid.js.map

/***/ }),

/***/ 2921:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.splitNull = exports.traceCircle = exports.trace = void 0;
/**
 * Return an array of 2D points as [number,number] by tracing `func` within `range`.
 * ```
 * trace(x=>x**2, [0,3], 4)
 * // [[0,0], [1,1], [2,4], [3,9]]
 * ```
 */
function trace(func, range, dots = 1000) {
    function tracer(t) {
        let result;
        try {
            result = func(t);
        }
        catch {
            return [NaN, NaN];
        }
        if (!Array.isArray(result))
            result = [t, result];
        return result;
    }
    ;
    let [t1, t2] = range;
    const step = (t2 - t1) / (dots - 1);
    let points = [];
    for (let t = t1; t <= t2; t += step) {
        points.push(tracer(t));
    }
    return points;
}
exports.trace = trace;
/**
 * Return an array of 2D points as [number,number] by tracing a circle.
 * @param angleRange - the polar angle range
 * ```
 * traceCircle([0,0], 1, [0,360], 4)
 * // [[1,0], [0,1], [-1,0], [0,-1]]
 * ```
 */
function traceCircle(center, radius, angleRange, dots = 100) {
    const [h, k] = center;
    function sin(degree) {
        return Math.sin(degree / 180 * Math.PI);
    }
    function cos(degree) {
        return Math.cos(degree / 180 * Math.PI);
    }
    return trace(t => [h + radius * cos(t), k + radius * sin(t)], angleRange, dots);
}
exports.traceCircle = traceCircle;
function splitNull(arr) {
    let ls = [];
    let clone = [...arr];
    while (true) {
        let index = clone.findIndex($ => $ === null);
        if (index === -1) {
            let head = clone.splice(0);
            ls.push(head);
            break;
        }
        else {
            let head = clone.splice(0, index);
            ls.push(head);
            clone.shift();
            if (clone.length === 0)
                break;
        }
    }
    ls = ls.filter($ => $.length > 0);
    return ls;
}
exports.splitNull = splitNull;
//# sourceMappingURL=trace.js.map

/***/ }),

/***/ 8838:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.trimCanvas = void 0;
function getAlpha(img, x, y) {
    let i = 0;
    i += y * img.width;
    i += x;
    return img.data[4 * i + 3];
}
function isPainted(img, x, y) {
    return getAlpha(img, x, y) !== 0;
}
function rowBlank(img, y) {
    for (let x = 0; x < img.width; x++) {
        if (isPainted(img, x, y))
            return false;
    }
    return true;
}
function colBlank(img, x) {
    for (let y = 0; y < img.height; y++) {
        if (isPainted(img, x, y))
            return false;
    }
    return true;
}
function trimCanvasX(canvas) {
    let ctx = canvas.getContext("2d");
    let img = ctx.getImageData(0, 0, canvas.width, canvas.height);
    let top = 0;
    let bottom = img.height - 1;
    while (top < bottom && rowBlank(img, top))
        top++;
    while (bottom > top && rowBlank(img, bottom))
        bottom--;
    let trimmed = ctx.getImageData(0, top, img.width, bottom - top + 1);
    canvas.width = trimmed.width;
    canvas.height = trimmed.height;
    ctx.putImageData(trimmed, 0, 0);
}
function trimCanvasY(canvas) {
    let ctx = canvas.getContext("2d");
    let img = ctx.getImageData(0, 0, canvas.width, canvas.height);
    let left = 0;
    let right = img.width - 1;
    while (left < right && colBlank(img, left))
        left++;
    while (right > left && colBlank(img, right))
        right--;
    let trimmed = ctx.getImageData(left, 0, right - left + 1, img.height);
    canvas.width = trimmed.width;
    canvas.height = trimmed.height;
    ctx.putImageData(trimmed, 0, 0);
}
function trimCanvas(canvas) {
    trimCanvasX(canvas);
    trimCanvasY(canvas);
}
exports.trimCanvas = trimCanvas;
//# sourceMappingURL=trim.js.map

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
__webpack_require__(4163);
__webpack_require__(3221);
__webpack_require__(1370);
__webpack_require__(6183);
// polyfill for .at
function at(n) {
    // ToInteger() abstract op
    n = Math.trunc(n) || 0;
    // Allow negative indexing from the end
    if (n < 0)
        n += this.length;
    // OOB access is guaranteed to return undefined
    if (n < 0 || n >= this.length)
        return undefined;
    // Otherwise, this is just normal property access
    return this[n];
}
const TypedArray = Reflect.getPrototypeOf(Int8Array);
for (const C of [Array, String, TypedArray]) {
    // @ts-ignore
    Object.defineProperty(C.prototype, "at", {
        value: at,
        writable: true,
        enumerable: false,
        configurable: true
    });
}
console.log('MathTree 1');

})();

/******/ })()
;