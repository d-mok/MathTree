

test('Crammer', () => {
    expect(Crammer(1, 1, 5, 1, -1, 1)).toEqual([3, 2]);
    expect(Crammer(2, 3, 23, 4, -5, -9)).toEqual([4, 5]);
    expect(() => Crammer(1, 1, 2, 2, 2, 4)).toThrow();
    expect(() => Crammer(1, 1, 2, 2, 2, 5)).toThrow();
});








test('xPolynomial', () => {
    expect(xPolynomial([1, 2, 3], [4, 5])).toEqual([4, 13, 22, 15]);
    expect(xPolynomial([4, 5], [1, 2, 3])).toEqual([4, 13, 22, 15]);
    expect(xPolynomial([2, 3], [4, -5])).toEqual([8, 2, -15]);
    expect(xPolynomial([2], [4, -5, 10])).toEqual([8, -10, 20]);
    expect(xPolynomial([1, 0, 0], [1, 0, 0, 0, 0])).toEqual([1, 0, 0, 0, 0, 0, 0]);
    expect(() => xPolynomial([0, 1], [1, 1])).toThrow();
});



test('Trace', () => {
    expect(Trace(x => x ** 2, 0, 4, 5)).toEqual([[0, 0], [1, 1], [2, 4], [3, 9], [4, 16]]);
    expect(Trace(t => [t, t ** 2], 0, 4, 5)).toEqual([[0, 0], [1, 1], [2, 4], [3, 9], [4, 16]]);
});


test('Trace', () => {
    let arr = TraceCircle([1, 2], 3);

    expect(arr).toEqual([
        [4, 2],
        [3.9939600294156534, 2.1902717589696934],
        [3.975864438492386, 2.379777360721248],
        [3.9457860917881202, 2.5677537330812306],
        [3.9038461041890686, 2.753443961543238],
        [3.8502133532228364, 2.9361003370954615],
        [3.7851037990482177, 3.1149873669809827],
        [3.7087796148598637, 3.2893847362675146],
        [3.621548131209355, 3.4585902083014055],
        [3.523760598493544, 3.6219224523667926],
        [3.4158107725931757, 3.778723787163921],
        [3.2981333293569346, 3.9283628290596178],
        [3.1712021143152107, 4.070237034446335],
        [3.035528234671397, 4.2037751259726],
        [2.891658001253568, 4.32843939287527],
        [2.7401707287135952, 4.443727856151007],
        [2.5816764028315085, 4.549176289848543],
        [2.4168132243180493, 4.6443600903427456],
        [2.2462450390056605, 4.728895986063555],
        [2.0706586647756167, 4.80244358079532],
        [1.890761125984826, 4.864706724332221],
        [1.7072768065282826, 4.915434704970625],
        [1.520944533000792, 4.9544232590366235],
        [1.332514599703034, 4.981515393383763],
        [1.1427457474712273, 4.996602017549024],
        [0.9524021084955759, 4.9996223830216255],
        [0.7622501294296344, 4.990564327855827],
        [0.5730554851801444, 4.969464325642798],
        [0.38557999580442714, 4.936407338644336],
        [0.2005785589298943, 4.891526475679826],
        [0.018796110047734294, 4.8350024561440055],
        [-0.15903537707938709, 4.767062882313744],
        [-0.33219983781732365, 4.687981322874007],
        [-0.5, 4.598076211353314],
        [-0.6617601915983318, 4.497709563904313],
        [-0.8168290614130016, 4.387285521592496],
        [-0.9645822018358561, 4.2672487230627745],
        [-1.104424663118964, 4.138082514136588],
        [-1.2357933490272641, 4.000307001548875],
        [-1.3581592842283619, 3.8544769586618166],
        [-1.4710297442894973, 3.7011795915883137],
        [-1.5739502397049305, 3.54103217472022],
        [-1.6665063459647698, 3.374679565182233],
        [-1.7483253722962075, 3.2027916062198436],
        [-1.819077862357724, 3.026060429977009],
        [-1.878478920843491, 2.8451976705242927],
        [-1.9262893606562201, 2.6609315983596264],
        [-1.9623166660291824, 2.4740041879200536],
        [-1.986415767719253, 2.285168129912554],
        [-1.9984896271495551, 2.0951838004942096],
        [-1.9984896271495556, 1.904816199505803],
        [-1.9864157677192544, 1.7148318700874587],
        [-1.9623166660291842, 1.5259958120799577],
        [-1.9262893606562228, 1.339068401640386],
        [-1.8784789208434947, 1.1548023294757195],
        [-1.819077862357728, 0.9739395700230016],
        [-1.7483253722962124, 0.7972083937801671],
        [-1.6665063459647746, 0.6253204348177774],
        [-1.5739502397049367, 0.45896782527978974],
        [-1.4710297442895053, 0.2988204084116981],
        [-1.3581592842283703, 0.14552304133819494],
        [-1.2357933490272734, -0.0003070015488644273],
        [-1.104424663118972, -0.13808251413658024],
        [-0.9645822018358645, -0.2672487230627665],
        [-0.8168290614130105, -0.3872855215924882],
        [-0.6617601915983424, -0.4977095639043063],
        [-0.5, -0.5980762113533085],
        [-0.3321998378173361, -0.687981322874001],
        [-0.15903537707940085, -0.7670628823137382],
        [0.018796110047719194, -0.8350024561440001],
        [0.20057855892987808, -0.8915264756798216],
        [0.38557999580441016, -0.9364073386443326],
        [0.5730554851801258, -0.9694643256427953],
        [0.7622501294296151, -0.9905643278558256],
        [0.9524021084955558, -0.9996223830216246],
        [1.1427457474712086, -0.9966020175490247],
        [1.3325145997030141, -0.9815153933837646],
        [1.520944533000769, -0.954423259036628],
        [1.707276806528259, -0.9154347049706306],
        [1.8907611259848018, -0.8647067243322288],
        [2.0706586647755927, -0.802443580795329],
        [2.2462450390056388, -0.7288959860635646],
        [2.4168132243180276, -0.6443600903427571],
        [2.5816764028314867, -0.5491762898485559],
        [2.7401707287135744, -0.4437278561510216],
        [2.891658001253548, -0.32843939287528645],
        [3.0355282346713772, -0.2037751259726175],
        [3.171202114315192, -0.07023703444635565],
        [3.2981333293569164, 0.07163717094036093],
        [3.415810772593159, 0.22127621283605592],
        [3.523760598493528, 0.378077547633183],
        [3.6215481312093405, 0.5414097916985678],
        [3.7087796148598504, 0.7106152637324579],
        [3.7851037990482066, 0.8850126330189885],
        [3.850213353222827, 1.063899662904511],
        [3.9038461041890615, 1.2465560384567336],
        [3.9457860917881145, 1.4322462669187392],
        [3.975864438492382, 1.6202226392787211],
        [3.9939600294156508, 1.809728241030272],
        [4, 1.9999999999999647]
    ]);
});




// test('Trace3D', () => {
//     expect(Trace3D(x => [x, x ** 2, 0], 0, 4, 5)).toEqual([[0, 0, 0], [1, 1, 0], [2, 4, 0], [3, 9, 0], [4, 16, 0]]);
//     expect(Trace3D(t => [t, 0, t ** 2], 0, 4, 5)).toEqual([[0, 0, 0], [1, 0, 1], [2, 0, 4], [3, 0, 9], [4, 0, 16]]);
// });

