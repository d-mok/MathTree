declare type px = number;
declare type dot = [px, px];
declare type Point2D = [number, number];
declare type Point3D = [number, number, number];
declare type Point = Point2D | Point3D;
declare type AngleMode = 'normal' | 'polar' | 'reflex';
declare type LineLabel = 'auto' | 'left' | 'right';
/**
 * handle all config
 */
export declare class BasicCanvas {
    protected canvas: HTMLCanvasElement;
    protected ctx: CanvasRenderingContext2D;
    private imgStore;
    private states;
    backgroundURL: string;
    xmin: number;
    xmax: number;
    ymin: number;
    ymax: number;
    dx(): number;
    dy(): number;
    yxRatio(): number;
    center(): Point2D;
    edgeTop(x?: number): Point2D;
    edgeBottom(x?: number): Point2D;
    edgeLeft(y?: number): Point2D;
    edgeRight(y?: number): Point2D;
    private reset;
    get width(): px;
    set width(value: px);
    get height(): px;
    set height(value: px);
    initRange(xRange: [number, number], yRange: [number, number]): void;
    initSize(width: number, height: number): void;
    setBorder(): void;
    pj(point: Point): Point2D;
    pjs(points: Point[]): Point2D[];
    protected toPx(point: Point): dot;
    get $WEIGHT(): number;
    set $WEIGHT(value: number);
    get $COLOR(): string;
    set $COLOR(value: string);
    get $ALPHA(): number;
    set $ALPHA(value: number);
    get $DASH(): px[];
    set $DASH(value: px[] | px | boolean);
    get $TEXT_ALIGN(): CanvasTextAlign;
    set $TEXT_ALIGN(value: CanvasTextAlign);
    get $TEXT_BASELINE(): CanvasTextBaseline;
    set $TEXT_BASELINE(value: CanvasTextBaseline);
    get $TEXT_PIXEL(): px;
    set $TEXT_PIXEL(value: px);
    get $TEXT_SIZE(): number;
    set $TEXT_SIZE(value: number);
    get $TEXT_ITALIC(): boolean;
    set $TEXT_ITALIC(value: boolean);
    $3D_ANGLE: number;
    $3D_DEPTH: number;
    $TEXT_DIR: number;
    $TEXT_LATEX: boolean;
    $ANGLE_MODE: AngleMode;
    $LENGTH_UNIT: string;
    $BORDER: number;
    $LINE_LABEL: LineLabel;
    private _$LABEL_CENTER;
    set $LABEL_CENTER(centers: Point[]);
    get $LABEL_CENTER(): [Point2D];
    save(): void;
    restore(): void;
    saveImg(): void;
    restoreImg(): void;
    clearImg(): void;
    export(html: string, placeholder: string, trim: boolean): string;
}
export {};
//# sourceMappingURL=basic_canvas.d.ts.map